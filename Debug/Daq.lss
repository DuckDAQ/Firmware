
Daq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000084c4  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004084c4  004084c4  000184c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000bb8  20000000  004084cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000308  20000bb8  00409084  00020bb8  2**2
                  ALLOC
  4 .stack        00002000  20000ec0  0040938c  00020bb8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020bb8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020be1  2**0
                  CONTENTS, READONLY
  7 .debug_info   00021ba0  00000000  00000000  00020c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004666  00000000  00000000  000427da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000dd0  00000000  00000000  00046e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001782f  00000000  00000000  00047c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000144db  00000000  00000000  0005f43f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00053ad9  00000000  00000000  0007391a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007e4b  00000000  00000000  000c73f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d80  00000000  00000000  000cf23e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002c18  00000000  00000000  000cffc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 2e 00 20 ad 33 40 00 ab 33 40 00 ab 33 40 00     ... .3@..3@..3@.
  400010:	ab 33 40 00 ab 33 40 00 ab 33 40 00 00 00 00 00     .3@..3@..3@.....
	...
  40002c:	ab 33 40 00 ab 33 40 00 00 00 00 00 ab 33 40 00     .3@..3@......3@.
  40003c:	ab 33 40 00 ab 33 40 00 ab 33 40 00 ab 33 40 00     .3@..3@..3@..3@.
  40004c:	ab 33 40 00 ab 33 40 00 ab 33 40 00 ab 33 40 00     .3@..3@..3@..3@.
  40005c:	ab 33 40 00 ab 33 40 00 ab 33 40 00 ab 33 40 00     .3@..3@..3@..3@.
  40006c:	59 0f 40 00 6d 0f 40 00 ab 33 40 00 ab 33 40 00     Y.@.m.@..3@..3@.
  40007c:	ab 33 40 00 ab 33 40 00 ab 33 40 00 ab 33 40 00     .3@..3@..3@..3@.
  40008c:	ab 33 40 00 ab 33 40 00 ab 33 40 00 ab 33 40 00     .3@..3@..3@..3@.
  40009c:	e5 2a 40 00 ab 33 40 00 ab 33 40 00 ab 33 40 00     .*@..3@..3@..3@.
  4000ac:	ab 33 40 00 ab 33 40 00 c9 29 40 00 ab 33 40 00     .3@..3@..)@..3@.
  4000bc:	ab 33 40 00 ab 33 40 00 ab 33 40 00 3d 15 40 00     .3@..3@..3@.=.@.
  4000cc:	ab 33 40 00                                         .3@.

004000d0 <__do_global_dtors_aux>:
  4000d0:	b510      	push	{r4, lr}
  4000d2:	4c05      	ldr	r4, [pc, #20]	; (4000e8 <__do_global_dtors_aux+0x18>)
  4000d4:	7823      	ldrb	r3, [r4, #0]
  4000d6:	b933      	cbnz	r3, 4000e6 <__do_global_dtors_aux+0x16>
  4000d8:	4b04      	ldr	r3, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x1c>)
  4000da:	b113      	cbz	r3, 4000e2 <__do_global_dtors_aux+0x12>
  4000dc:	4804      	ldr	r0, [pc, #16]	; (4000f0 <__do_global_dtors_aux+0x20>)
  4000de:	f3af 8000 	nop.w
  4000e2:	2301      	movs	r3, #1
  4000e4:	7023      	strb	r3, [r4, #0]
  4000e6:	bd10      	pop	{r4, pc}
  4000e8:	20000bb8 	.word	0x20000bb8
  4000ec:	00000000 	.word	0x00000000
  4000f0:	004084cc 	.word	0x004084cc

004000f4 <frame_dummy>:
  4000f4:	4b0c      	ldr	r3, [pc, #48]	; (400128 <frame_dummy+0x34>)
  4000f6:	b143      	cbz	r3, 40010a <frame_dummy+0x16>
  4000f8:	480c      	ldr	r0, [pc, #48]	; (40012c <frame_dummy+0x38>)
  4000fa:	b510      	push	{r4, lr}
  4000fc:	490c      	ldr	r1, [pc, #48]	; (400130 <frame_dummy+0x3c>)
  4000fe:	f3af 8000 	nop.w
  400102:	480c      	ldr	r0, [pc, #48]	; (400134 <frame_dummy+0x40>)
  400104:	6803      	ldr	r3, [r0, #0]
  400106:	b923      	cbnz	r3, 400112 <frame_dummy+0x1e>
  400108:	bd10      	pop	{r4, pc}
  40010a:	480a      	ldr	r0, [pc, #40]	; (400134 <frame_dummy+0x40>)
  40010c:	6803      	ldr	r3, [r0, #0]
  40010e:	b933      	cbnz	r3, 40011e <frame_dummy+0x2a>
  400110:	4770      	bx	lr
  400112:	4b09      	ldr	r3, [pc, #36]	; (400138 <frame_dummy+0x44>)
  400114:	2b00      	cmp	r3, #0
  400116:	d0f7      	beq.n	400108 <frame_dummy+0x14>
  400118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40011c:	4718      	bx	r3
  40011e:	4b06      	ldr	r3, [pc, #24]	; (400138 <frame_dummy+0x44>)
  400120:	2b00      	cmp	r3, #0
  400122:	d0f5      	beq.n	400110 <frame_dummy+0x1c>
  400124:	4718      	bx	r3
  400126:	bf00      	nop
  400128:	00000000 	.word	0x00000000
  40012c:	004084cc 	.word	0x004084cc
  400130:	20000bbc 	.word	0x20000bbc
  400134:	004084cc 	.word	0x004084cc
  400138:	00000000 	.word	0x00000000

0040013c <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  40013c:	490e      	ldr	r1, [pc, #56]	; (400178 <udi_cdc_comm_enable+0x3c>)
  40013e:	2300      	movs	r3, #0
  400140:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  400142:	4a0e      	ldr	r2, [pc, #56]	; (40017c <udi_cdc_comm_enable+0x40>)
  400144:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  400146:	4a0e      	ldr	r2, [pc, #56]	; (400180 <udi_cdc_comm_enable+0x44>)
  400148:	20a1      	movs	r0, #161	; 0xa1
  40014a:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  40014c:	2020      	movs	r0, #32
  40014e:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  400150:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  400152:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400154:	2002      	movs	r0, #2
  400156:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  400158:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  40015a:	4a0a      	ldr	r2, [pc, #40]	; (400184 <udi_cdc_comm_enable+0x48>)
  40015c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  400160:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  400162:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  400164:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  400166:	2308      	movs	r3, #8
  400168:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  40016a:	780b      	ldrb	r3, [r1, #0]
  40016c:	3301      	adds	r3, #1
  40016e:	b2db      	uxtb	r3, r3
  400170:	700b      	strb	r3, [r1, #0]
	return true;
}
  400172:	2001      	movs	r0, #1
  400174:	4770      	bx	lr
  400176:	bf00      	nop
  400178:	20000bdf 	.word	0x20000bdf
  40017c:	20000c74 	.word	0x20000c74
  400180:	20000d0c 	.word	0x20000d0c
  400184:	20000bd8 	.word	0x20000bd8

00400188 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400188:	4a02      	ldr	r2, [pc, #8]	; (400194 <udi_cdc_comm_disable+0xc>)
  40018a:	7813      	ldrb	r3, [r2, #0]
  40018c:	3b01      	subs	r3, #1
  40018e:	b2db      	uxtb	r3, r3
  400190:	7013      	strb	r3, [r2, #0]
  400192:	4770      	bx	lr
  400194:	20000bdf 	.word	0x20000bdf

00400198 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400198:	4a04      	ldr	r2, [pc, #16]	; (4001ac <udi_cdc_data_disable+0x14>)
  40019a:	7813      	ldrb	r3, [r2, #0]
  40019c:	3b01      	subs	r3, #1
  40019e:	b2db      	uxtb	r3, r3
  4001a0:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  4001a2:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  4001a4:	2200      	movs	r2, #0
  4001a6:	4b02      	ldr	r3, [pc, #8]	; (4001b0 <udi_cdc_data_disable+0x18>)
  4001a8:	701a      	strb	r2, [r3, #0]
  4001aa:	4770      	bx	lr
  4001ac:	20000be0 	.word	0x20000be0
  4001b0:	20000bd6 	.word	0x20000bd6

004001b4 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  4001b4:	2000      	movs	r0, #0
  4001b6:	4770      	bx	lr

004001b8 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  4001b8:	2000      	movs	r0, #0
  4001ba:	4770      	bx	lr

004001bc <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
  4001bc:	4b1d      	ldr	r3, [pc, #116]	; (400234 <udi_cdc_comm_setup+0x78>)
  4001be:	781b      	ldrb	r3, [r3, #0]
  4001c0:	f013 0f80 	tst.w	r3, #128	; 0x80
  4001c4:	d105      	bne.n	4001d2 <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001ca:	2b20      	cmp	r3, #32
  4001cc:	d018      	beq.n	400200 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
  4001ce:	2000      	movs	r0, #0
  4001d0:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001d6:	2b20      	cmp	r3, #32
  4001d8:	d001      	beq.n	4001de <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
  4001da:	2000      	movs	r0, #0
  4001dc:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4001de:	4b15      	ldr	r3, [pc, #84]	; (400234 <udi_cdc_comm_setup+0x78>)
  4001e0:	785b      	ldrb	r3, [r3, #1]
  4001e2:	2b21      	cmp	r3, #33	; 0x21
  4001e4:	d124      	bne.n	400230 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
  4001e6:	4b13      	ldr	r3, [pc, #76]	; (400234 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  4001e8:	88db      	ldrh	r3, [r3, #6]
  4001ea:	2b07      	cmp	r3, #7
  4001ec:	d001      	beq.n	4001f2 <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
  4001ee:	2000      	movs	r0, #0
  4001f0:	4770      	bx	lr
				udd_g_ctrlreq.payload =
  4001f2:	4b10      	ldr	r3, [pc, #64]	; (400234 <udi_cdc_comm_setup+0x78>)
  4001f4:	4a10      	ldr	r2, [pc, #64]	; (400238 <udi_cdc_comm_setup+0x7c>)
  4001f6:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  4001f8:	2207      	movs	r2, #7
  4001fa:	819a      	strh	r2, [r3, #12]
				return true;
  4001fc:	2001      	movs	r0, #1
  4001fe:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  400200:	4b0c      	ldr	r3, [pc, #48]	; (400234 <udi_cdc_comm_setup+0x78>)
  400202:	7858      	ldrb	r0, [r3, #1]
  400204:	2820      	cmp	r0, #32
  400206:	d004      	beq.n	400212 <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
  400208:	2822      	cmp	r0, #34	; 0x22
  40020a:	bf14      	ite	ne
  40020c:	2000      	movne	r0, #0
  40020e:	2001      	moveq	r0, #1
  400210:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
  400212:	4b08      	ldr	r3, [pc, #32]	; (400234 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  400214:	88db      	ldrh	r3, [r3, #6]
  400216:	2b07      	cmp	r3, #7
  400218:	d001      	beq.n	40021e <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
  40021a:	2000      	movs	r0, #0
}
  40021c:	4770      	bx	lr
				udd_g_ctrlreq.callback =
  40021e:	4b05      	ldr	r3, [pc, #20]	; (400234 <udi_cdc_comm_setup+0x78>)
  400220:	4a06      	ldr	r2, [pc, #24]	; (40023c <udi_cdc_comm_setup+0x80>)
  400222:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
  400224:	4a04      	ldr	r2, [pc, #16]	; (400238 <udi_cdc_comm_setup+0x7c>)
  400226:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  400228:	2207      	movs	r2, #7
  40022a:	819a      	strh	r2, [r3, #12]
				return true;
  40022c:	2001      	movs	r0, #1
  40022e:	4770      	bx	lr
	return false;  // request Not supported
  400230:	2000      	movs	r0, #0
  400232:	4770      	bx	lr
  400234:	20000e34 	.word	0x20000e34
  400238:	20000bd8 	.word	0x20000bd8
  40023c:	00400241 	.word	0x00400241

00400240 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  400240:	4770      	bx	lr
	...

00400244 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400244:	4b44      	ldr	r3, [pc, #272]	; (400358 <udi_cdc_tx_send+0x114>)
  400246:	781b      	ldrb	r3, [r3, #0]
  400248:	b103      	cbz	r3, 40024c <udi_cdc_tx_send+0x8>
  40024a:	4770      	bx	lr
{
  40024c:	b570      	push	{r4, r5, r6, lr}
  40024e:	b084      	sub	sp, #16
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  400250:	4b42      	ldr	r3, [pc, #264]	; (40035c <udi_cdc_tx_send+0x118>)
  400252:	4798      	blx	r3
  400254:	2800      	cmp	r0, #0
  400256:	d041      	beq.n	4002dc <udi_cdc_tx_send+0x98>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400258:	4b41      	ldr	r3, [pc, #260]	; (400360 <udi_cdc_tx_send+0x11c>)
  40025a:	881c      	ldrh	r4, [r3, #0]
  40025c:	4b41      	ldr	r3, [pc, #260]	; (400364 <udi_cdc_tx_send+0x120>)
  40025e:	4798      	blx	r3
  400260:	4284      	cmp	r4, r0
  400262:	d076      	beq.n	400352 <udi_cdc_tx_send+0x10e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400264:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400268:	fab3 f383 	clz	r3, r3
  40026c:	095b      	lsrs	r3, r3, #5
  40026e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400270:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400272:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400276:	2200      	movs	r2, #0
  400278:	4b3b      	ldr	r3, [pc, #236]	; (400368 <udi_cdc_tx_send+0x124>)
  40027a:	701a      	strb	r2, [r3, #0]
	return flags;
  40027c:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  40027e:	4b3b      	ldr	r3, [pc, #236]	; (40036c <udi_cdc_tx_send+0x128>)
  400280:	781c      	ldrb	r4, [r3, #0]
  400282:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400284:	4b3a      	ldr	r3, [pc, #232]	; (400370 <udi_cdc_tx_send+0x12c>)
  400286:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  40028a:	2b00      	cmp	r3, #0
  40028c:	d02d      	beq.n	4002ea <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  40028e:	2200      	movs	r2, #0
  400290:	4b38      	ldr	r3, [pc, #224]	; (400374 <udi_cdc_tx_send+0x130>)
  400292:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400294:	4b38      	ldr	r3, [pc, #224]	; (400378 <udi_cdc_tx_send+0x134>)
  400296:	781b      	ldrb	r3, [r3, #0]
  400298:	2b00      	cmp	r3, #0
  40029a:	d142      	bne.n	400322 <udi_cdc_tx_send+0xde>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  40029c:	fab4 f384 	clz	r3, r4
  4002a0:	095b      	lsrs	r3, r3, #5
  4002a2:	4a32      	ldr	r2, [pc, #200]	; (40036c <udi_cdc_tx_send+0x128>)
  4002a4:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  4002a6:	2201      	movs	r2, #1
  4002a8:	4b2b      	ldr	r3, [pc, #172]	; (400358 <udi_cdc_tx_send+0x114>)
  4002aa:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4002ac:	b125      	cbz	r5, 4002b8 <udi_cdc_tx_send+0x74>
		cpu_irq_enable();
  4002ae:	4b2e      	ldr	r3, [pc, #184]	; (400368 <udi_cdc_tx_send+0x124>)
  4002b0:	701a      	strb	r2, [r3, #0]
  4002b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4002b6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  4002b8:	4626      	mov	r6, r4
  4002ba:	4b2d      	ldr	r3, [pc, #180]	; (400370 <udi_cdc_tx_send+0x12c>)
  4002bc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  4002c0:	2b40      	cmp	r3, #64	; 0x40
  4002c2:	bf14      	ite	ne
  4002c4:	2501      	movne	r5, #1
  4002c6:	2500      	moveq	r5, #0
	if (b_short_packet) {
  4002c8:	d034      	beq.n	400334 <udi_cdc_tx_send+0xf0>
		if (udd_is_high_speed()) {
  4002ca:	4b24      	ldr	r3, [pc, #144]	; (40035c <udi_cdc_tx_send+0x118>)
  4002cc:	4798      	blx	r3
  4002ce:	2800      	cmp	r0, #0
  4002d0:	d02b      	beq.n	40032a <udi_cdc_tx_send+0xe6>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4002d2:	4b24      	ldr	r3, [pc, #144]	; (400364 <udi_cdc_tx_send+0x120>)
  4002d4:	4798      	blx	r3
  4002d6:	4b22      	ldr	r3, [pc, #136]	; (400360 <udi_cdc_tx_send+0x11c>)
  4002d8:	8018      	strh	r0, [r3, #0]
  4002da:	e02e      	b.n	40033a <udi_cdc_tx_send+0xf6>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  4002dc:	4b20      	ldr	r3, [pc, #128]	; (400360 <udi_cdc_tx_send+0x11c>)
  4002de:	881c      	ldrh	r4, [r3, #0]
  4002e0:	4b26      	ldr	r3, [pc, #152]	; (40037c <udi_cdc_tx_send+0x138>)
  4002e2:	4798      	blx	r3
  4002e4:	4284      	cmp	r4, r0
  4002e6:	d1bd      	bne.n	400264 <udi_cdc_tx_send+0x20>
  4002e8:	e033      	b.n	400352 <udi_cdc_tx_send+0x10e>
		sof_zlp_counter++;
  4002ea:	4a22      	ldr	r2, [pc, #136]	; (400374 <udi_cdc_tx_send+0x130>)
  4002ec:	8813      	ldrh	r3, [r2, #0]
  4002ee:	3301      	adds	r3, #1
  4002f0:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4002f2:	4b1a      	ldr	r3, [pc, #104]	; (40035c <udi_cdc_tx_send+0x118>)
  4002f4:	4798      	blx	r3
  4002f6:	b918      	cbnz	r0, 400300 <udi_cdc_tx_send+0xbc>
  4002f8:	4b1e      	ldr	r3, [pc, #120]	; (400374 <udi_cdc_tx_send+0x130>)
  4002fa:	881b      	ldrh	r3, [r3, #0]
  4002fc:	2b63      	cmp	r3, #99	; 0x63
  4002fe:	d908      	bls.n	400312 <udi_cdc_tx_send+0xce>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  400300:	4b16      	ldr	r3, [pc, #88]	; (40035c <udi_cdc_tx_send+0x118>)
  400302:	4798      	blx	r3
  400304:	2800      	cmp	r0, #0
  400306:	d0c2      	beq.n	40028e <udi_cdc_tx_send+0x4a>
  400308:	4b1a      	ldr	r3, [pc, #104]	; (400374 <udi_cdc_tx_send+0x130>)
  40030a:	881b      	ldrh	r3, [r3, #0]
  40030c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  400310:	d2bd      	bcs.n	40028e <udi_cdc_tx_send+0x4a>
	if (cpu_irq_is_enabled_flags(flags))
  400312:	b1f5      	cbz	r5, 400352 <udi_cdc_tx_send+0x10e>
		cpu_irq_enable();
  400314:	2201      	movs	r2, #1
  400316:	4b14      	ldr	r3, [pc, #80]	; (400368 <udi_cdc_tx_send+0x124>)
  400318:	701a      	strb	r2, [r3, #0]
  40031a:	f3bf 8f5f 	dmb	sy
  40031e:	b662      	cpsie	i
  400320:	e017      	b.n	400352 <udi_cdc_tx_send+0x10e>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  400322:	fab4 f484 	clz	r4, r4
  400326:	0964      	lsrs	r4, r4, #5
  400328:	e7bd      	b.n	4002a6 <udi_cdc_tx_send+0x62>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  40032a:	4b14      	ldr	r3, [pc, #80]	; (40037c <udi_cdc_tx_send+0x138>)
  40032c:	4798      	blx	r3
  40032e:	4b0c      	ldr	r3, [pc, #48]	; (400360 <udi_cdc_tx_send+0x11c>)
  400330:	8018      	strh	r0, [r3, #0]
  400332:	e002      	b.n	40033a <udi_cdc_tx_send+0xf6>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400334:	2200      	movs	r2, #0
  400336:	4b0a      	ldr	r3, [pc, #40]	; (400360 <udi_cdc_tx_send+0x11c>)
  400338:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  40033a:	4b0d      	ldr	r3, [pc, #52]	; (400370 <udi_cdc_tx_send+0x12c>)
	udd_ep_run( ep,
  40033c:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
  400340:	4a0f      	ldr	r2, [pc, #60]	; (400380 <udi_cdc_tx_send+0x13c>)
  400342:	9200      	str	r2, [sp, #0]
  400344:	4a0f      	ldr	r2, [pc, #60]	; (400384 <udi_cdc_tx_send+0x140>)
  400346:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  40034a:	4629      	mov	r1, r5
  40034c:	2081      	movs	r0, #129	; 0x81
  40034e:	4c0e      	ldr	r4, [pc, #56]	; (400388 <udi_cdc_tx_send+0x144>)
  400350:	47a0      	blx	r4
			udi_cdc_data_sent);
}
  400352:	b004      	add	sp, #16
  400354:	bd70      	pop	{r4, r5, r6, pc}
  400356:	bf00      	nop
  400358:	20000d08 	.word	0x20000d08
  40035c:	00401f9d 	.word	0x00401f9d
  400360:	20000d04 	.word	0x20000d04
  400364:	00402009 	.word	0x00402009
  400368:	20000200 	.word	0x20000200
  40036c:	20000d00 	.word	0x20000d00
  400370:	20000cfc 	.word	0x20000cfc
  400374:	20000bd4 	.word	0x20000bd4
  400378:	20000c78 	.word	0x20000c78
  40037c:	00401ff9 	.word	0x00401ff9
  400380:	0040038d 	.word	0x0040038d
  400384:	20000c7c 	.word	0x20000c7c
  400388:	00402361 	.word	0x00402361

0040038c <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  40038c:	b100      	cbz	r0, 400390 <udi_cdc_data_sent+0x4>
  40038e:	4770      	bx	lr
{
  400390:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  400392:	4b07      	ldr	r3, [pc, #28]	; (4003b0 <udi_cdc_data_sent+0x24>)
  400394:	781b      	ldrb	r3, [r3, #0]
  400396:	fab3 f383 	clz	r3, r3
  40039a:	095b      	lsrs	r3, r3, #5
  40039c:	4a05      	ldr	r2, [pc, #20]	; (4003b4 <udi_cdc_data_sent+0x28>)
  40039e:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4003a2:	4b05      	ldr	r3, [pc, #20]	; (4003b8 <udi_cdc_data_sent+0x2c>)
  4003a4:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4003a6:	4b05      	ldr	r3, [pc, #20]	; (4003bc <udi_cdc_data_sent+0x30>)
  4003a8:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
  4003aa:	4b05      	ldr	r3, [pc, #20]	; (4003c0 <udi_cdc_data_sent+0x34>)
  4003ac:	4798      	blx	r3
  4003ae:	bd08      	pop	{r3, pc}
  4003b0:	20000d00 	.word	0x20000d00
  4003b4:	20000cfc 	.word	0x20000cfc
  4003b8:	20000c78 	.word	0x20000c78
  4003bc:	20000d08 	.word	0x20000d08
  4003c0:	00400245 	.word	0x00400245

004003c4 <udi_cdc_data_sof_notify>:
{
  4003c4:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
  4003c6:	2000      	movs	r0, #0
  4003c8:	4b01      	ldr	r3, [pc, #4]	; (4003d0 <udi_cdc_data_sof_notify+0xc>)
  4003ca:	4798      	blx	r3
  4003cc:	bd08      	pop	{r3, pc}
  4003ce:	bf00      	nop
  4003d0:	00400245 	.word	0x00400245

004003d4 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  4003d4:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4003d6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4003da:	fab3 f383 	clz	r3, r3
  4003de:	095b      	lsrs	r3, r3, #5
  4003e0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4003e2:	b672      	cpsid	i
  4003e4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4003e8:	2200      	movs	r2, #0
  4003ea:	4b0b      	ldr	r3, [pc, #44]	; (400418 <udi_cdc_multi_get_nb_received_data+0x44>)
  4003ec:	701a      	strb	r2, [r3, #0]
	return flags;
  4003ee:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4003f0:	4b0a      	ldr	r3, [pc, #40]	; (40041c <udi_cdc_multi_get_nb_received_data+0x48>)
  4003f2:	8818      	ldrh	r0, [r3, #0]
  4003f4:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  4003f6:	4a0a      	ldr	r2, [pc, #40]	; (400420 <udi_cdc_multi_get_nb_received_data+0x4c>)
  4003f8:	7812      	ldrb	r2, [r2, #0]
  4003fa:	b2d2      	uxtb	r2, r2
  4003fc:	4809      	ldr	r0, [pc, #36]	; (400424 <udi_cdc_multi_get_nb_received_data+0x50>)
  4003fe:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
  400402:	b280      	uxth	r0, r0
  400404:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
  400406:	b129      	cbz	r1, 400414 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
  400408:	2201      	movs	r2, #1
  40040a:	4b03      	ldr	r3, [pc, #12]	; (400418 <udi_cdc_multi_get_nb_received_data+0x44>)
  40040c:	701a      	strb	r2, [r3, #0]
  40040e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400412:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  400414:	b002      	add	sp, #8
  400416:	4770      	bx	lr
  400418:	20000200 	.word	0x20000200
  40041c:	20000c6c 	.word	0x20000c6c
  400420:	20000c68 	.word	0x20000c68
  400424:	20000c64 	.word	0x20000c64

00400428 <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
  400428:	b508      	push	{r3, lr}
	return udi_cdc_multi_get_nb_received_data(0);
  40042a:	2000      	movs	r0, #0
  40042c:	4b01      	ldr	r3, [pc, #4]	; (400434 <udi_cdc_get_nb_received_data+0xc>)
  40042e:	4798      	blx	r3
}
  400430:	bd08      	pop	{r3, pc}
  400432:	bf00      	nop
  400434:	004003d5 	.word	0x004003d5

00400438 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400438:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  40043a:	4b03      	ldr	r3, [pc, #12]	; (400448 <udi_cdc_multi_is_rx_ready+0x10>)
  40043c:	4798      	blx	r3
}
  40043e:	3000      	adds	r0, #0
  400440:	bf18      	it	ne
  400442:	2001      	movne	r0, #1
  400444:	bd08      	pop	{r3, pc}
  400446:	bf00      	nop
  400448:	004003d5 	.word	0x004003d5

0040044c <udi_cdc_rx_start>:
{
  40044c:	b510      	push	{r4, lr}
  40044e:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400450:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400454:	fab3 f383 	clz	r3, r3
  400458:	095b      	lsrs	r3, r3, #5
  40045a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  40045c:	b672      	cpsid	i
  40045e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400462:	2200      	movs	r2, #0
  400464:	4b1e      	ldr	r3, [pc, #120]	; (4004e0 <udi_cdc_rx_start+0x94>)
  400466:	701a      	strb	r2, [r3, #0]
	return flags;
  400468:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  40046a:	4a1e      	ldr	r2, [pc, #120]	; (4004e4 <udi_cdc_rx_start+0x98>)
  40046c:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  40046e:	4a1e      	ldr	r2, [pc, #120]	; (4004e8 <udi_cdc_rx_start+0x9c>)
  400470:	7812      	ldrb	r2, [r2, #0]
  400472:	b94a      	cbnz	r2, 400488 <udi_cdc_rx_start+0x3c>
  400474:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400476:	4a1d      	ldr	r2, [pc, #116]	; (4004ec <udi_cdc_rx_start+0xa0>)
  400478:	8811      	ldrh	r1, [r2, #0]
  40047a:	b289      	uxth	r1, r1
  40047c:	4a1c      	ldr	r2, [pc, #112]	; (4004f0 <udi_cdc_rx_start+0xa4>)
  40047e:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  400482:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  400484:	4291      	cmp	r1, r2
  400486:	d209      	bcs.n	40049c <udi_cdc_rx_start+0x50>
	if (cpu_irq_is_enabled_flags(flags))
  400488:	b33b      	cbz	r3, 4004da <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  40048a:	2201      	movs	r2, #1
  40048c:	4b14      	ldr	r3, [pc, #80]	; (4004e0 <udi_cdc_rx_start+0x94>)
  40048e:	701a      	strb	r2, [r3, #0]
  400490:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400494:	b662      	cpsie	i
		return false;
  400496:	2000      	movs	r0, #0
}
  400498:	b004      	add	sp, #16
  40049a:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
  40049c:	2100      	movs	r1, #0
  40049e:	4a13      	ldr	r2, [pc, #76]	; (4004ec <udi_cdc_rx_start+0xa0>)
  4004a0:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4004a2:	fab4 f284 	clz	r2, r4
  4004a6:	0952      	lsrs	r2, r2, #5
  4004a8:	490e      	ldr	r1, [pc, #56]	; (4004e4 <udi_cdc_rx_start+0x98>)
  4004aa:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  4004ac:	2101      	movs	r1, #1
  4004ae:	4a0e      	ldr	r2, [pc, #56]	; (4004e8 <udi_cdc_rx_start+0x9c>)
  4004b0:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  4004b2:	b123      	cbz	r3, 4004be <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  4004b4:	4b0a      	ldr	r3, [pc, #40]	; (4004e0 <udi_cdc_rx_start+0x94>)
  4004b6:	7019      	strb	r1, [r3, #0]
  4004b8:	f3bf 8f5f 	dmb	sy
  4004bc:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  4004be:	2000      	movs	r0, #0
  4004c0:	4b0c      	ldr	r3, [pc, #48]	; (4004f4 <udi_cdc_rx_start+0xa8>)
  4004c2:	4798      	blx	r3
	return udd_ep_run(ep,
  4004c4:	4b0c      	ldr	r3, [pc, #48]	; (4004f8 <udi_cdc_rx_start+0xac>)
  4004c6:	9300      	str	r3, [sp, #0]
  4004c8:	2340      	movs	r3, #64	; 0x40
  4004ca:	4a0c      	ldr	r2, [pc, #48]	; (4004fc <udi_cdc_rx_start+0xb0>)
  4004cc:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4004d0:	2101      	movs	r1, #1
  4004d2:	2002      	movs	r0, #2
  4004d4:	4c0a      	ldr	r4, [pc, #40]	; (400500 <udi_cdc_rx_start+0xb4>)
  4004d6:	47a0      	blx	r4
  4004d8:	e7de      	b.n	400498 <udi_cdc_rx_start+0x4c>
		return false;
  4004da:	2000      	movs	r0, #0
  4004dc:	e7dc      	b.n	400498 <udi_cdc_rx_start+0x4c>
  4004de:	bf00      	nop
  4004e0:	20000200 	.word	0x20000200
  4004e4:	20000c68 	.word	0x20000c68
  4004e8:	20000c70 	.word	0x20000c70
  4004ec:	20000c6c 	.word	0x20000c6c
  4004f0:	20000c64 	.word	0x20000c64
  4004f4:	00400439 	.word	0x00400439
  4004f8:	00400599 	.word	0x00400599
  4004fc:	20000be4 	.word	0x20000be4
  400500:	00402361 	.word	0x00402361

00400504 <udi_cdc_data_enable>:
{
  400504:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
  400506:	2400      	movs	r4, #0
  400508:	4b16      	ldr	r3, [pc, #88]	; (400564 <udi_cdc_data_enable+0x60>)
  40050a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  40050c:	4b16      	ldr	r3, [pc, #88]	; (400568 <udi_cdc_data_enable+0x64>)
  40050e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400510:	4b16      	ldr	r3, [pc, #88]	; (40056c <udi_cdc_data_enable+0x68>)
  400512:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  400514:	4b16      	ldr	r3, [pc, #88]	; (400570 <udi_cdc_data_enable+0x6c>)
  400516:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400518:	4b16      	ldr	r3, [pc, #88]	; (400574 <udi_cdc_data_enable+0x70>)
  40051a:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  40051c:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  40051e:	4b16      	ldr	r3, [pc, #88]	; (400578 <udi_cdc_data_enable+0x74>)
  400520:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  400522:	4620      	mov	r0, r4
  400524:	4b15      	ldr	r3, [pc, #84]	; (40057c <udi_cdc_data_enable+0x78>)
  400526:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
  400528:	4b15      	ldr	r3, [pc, #84]	; (400580 <udi_cdc_data_enable+0x7c>)
  40052a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  40052c:	4b15      	ldr	r3, [pc, #84]	; (400584 <udi_cdc_data_enable+0x80>)
  40052e:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  400530:	4b15      	ldr	r3, [pc, #84]	; (400588 <udi_cdc_data_enable+0x84>)
  400532:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  400534:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  400536:	4b15      	ldr	r3, [pc, #84]	; (40058c <udi_cdc_data_enable+0x88>)
  400538:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  40053a:	4620      	mov	r0, r4
  40053c:	4b14      	ldr	r3, [pc, #80]	; (400590 <udi_cdc_data_enable+0x8c>)
  40053e:	4798      	blx	r3
  400540:	4601      	mov	r1, r0
  400542:	b140      	cbz	r0, 400556 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
  400544:	4a07      	ldr	r2, [pc, #28]	; (400564 <udi_cdc_data_enable+0x60>)
  400546:	7813      	ldrb	r3, [r2, #0]
  400548:	3301      	adds	r3, #1
  40054a:	b2db      	uxtb	r3, r3
  40054c:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  40054e:	7813      	ldrb	r3, [r2, #0]
  400550:	b2db      	uxtb	r3, r3
  400552:	2b01      	cmp	r3, #1
  400554:	d001      	beq.n	40055a <udi_cdc_data_enable+0x56>
}
  400556:	4608      	mov	r0, r1
  400558:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
  40055a:	2201      	movs	r2, #1
  40055c:	4b0d      	ldr	r3, [pc, #52]	; (400594 <udi_cdc_data_enable+0x90>)
  40055e:	701a      	strb	r2, [r3, #0]
  400560:	e7f9      	b.n	400556 <udi_cdc_data_enable+0x52>
  400562:	bf00      	nop
  400564:	20000be0 	.word	0x20000be0
  400568:	20000d08 	.word	0x20000d08
  40056c:	20000c78 	.word	0x20000c78
  400570:	20000d00 	.word	0x20000d00
  400574:	20000cfc 	.word	0x20000cfc
  400578:	20000d04 	.word	0x20000d04
  40057c:	00400245 	.word	0x00400245
  400580:	20000c70 	.word	0x20000c70
  400584:	20000c68 	.word	0x20000c68
  400588:	20000c64 	.word	0x20000c64
  40058c:	20000c6c 	.word	0x20000c6c
  400590:	0040044d 	.word	0x0040044d
  400594:	20000bd6 	.word	0x20000bd6

00400598 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  400598:	b9e8      	cbnz	r0, 4005d6 <udi_cdc_data_received+0x3e>
{
  40059a:	b510      	push	{r4, lr}
  40059c:	b082      	sub	sp, #8
  40059e:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  4005a0:	4b0d      	ldr	r3, [pc, #52]	; (4005d8 <udi_cdc_data_received+0x40>)
  4005a2:	781c      	ldrb	r4, [r3, #0]
  4005a4:	fab4 f484 	clz	r4, r4
  4005a8:	0964      	lsrs	r4, r4, #5
	if (!n) {
  4005aa:	b151      	cbz	r1, 4005c2 <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  4005ac:	b289      	uxth	r1, r1
  4005ae:	4b0b      	ldr	r3, [pc, #44]	; (4005dc <udi_cdc_data_received+0x44>)
  4005b0:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4005b4:	2000      	movs	r0, #0
  4005b6:	4b0a      	ldr	r3, [pc, #40]	; (4005e0 <udi_cdc_data_received+0x48>)
  4005b8:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  4005ba:	4b0a      	ldr	r3, [pc, #40]	; (4005e4 <udi_cdc_data_received+0x4c>)
  4005bc:	4798      	blx	r3
}
  4005be:	b002      	add	sp, #8
  4005c0:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
  4005c2:	4b09      	ldr	r3, [pc, #36]	; (4005e8 <udi_cdc_data_received+0x50>)
  4005c4:	9300      	str	r3, [sp, #0]
  4005c6:	2340      	movs	r3, #64	; 0x40
  4005c8:	4a08      	ldr	r2, [pc, #32]	; (4005ec <udi_cdc_data_received+0x54>)
  4005ca:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4005ce:	2101      	movs	r1, #1
  4005d0:	4c07      	ldr	r4, [pc, #28]	; (4005f0 <udi_cdc_data_received+0x58>)
  4005d2:	47a0      	blx	r4
		return;
  4005d4:	e7f3      	b.n	4005be <udi_cdc_data_received+0x26>
  4005d6:	4770      	bx	lr
  4005d8:	20000c68 	.word	0x20000c68
  4005dc:	20000c64 	.word	0x20000c64
  4005e0:	20000c70 	.word	0x20000c70
  4005e4:	0040044d 	.word	0x0040044d
  4005e8:	00400599 	.word	0x00400599
  4005ec:	20000be4 	.word	0x20000be4
  4005f0:	00402361 	.word	0x00402361

004005f4 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
  4005f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4005f8:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  4005fa:	4b25      	ldr	r3, [pc, #148]	; (400690 <udi_cdc_multi_getc+0x9c>)
  4005fc:	f893 8006 	ldrb.w	r8, [r3, #6]
  400600:	f1b8 0f09 	cmp.w	r8, #9
  400604:	bf14      	ite	ne
  400606:	f04f 0800 	movne.w	r8, #0
  40060a:	f04f 0801 	moveq.w	r8, #1
	int rx_data = 0;
  40060e:	f04f 0a00 	mov.w	sl, #0
	cpu_irq_disable();
  400612:	4c20      	ldr	r4, [pc, #128]	; (400694 <udi_cdc_multi_getc+0xa0>)
  400614:	46d1      	mov	r9, sl
  400616:	4657      	mov	r7, sl

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400618:	4d1f      	ldr	r5, [pc, #124]	; (400698 <udi_cdc_multi_getc+0xa4>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  40061a:	4e20      	ldr	r6, [pc, #128]	; (40069c <udi_cdc_multi_getc+0xa8>)
  40061c:	e004      	b.n	400628 <udi_cdc_multi_getc+0x34>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
  40061e:	428b      	cmp	r3, r1
  400620:	d323      	bcc.n	40066a <udi_cdc_multi_getc+0x76>
		if (!udi_cdc_data_running) {
  400622:	4b1f      	ldr	r3, [pc, #124]	; (4006a0 <udi_cdc_multi_getc+0xac>)
  400624:	781b      	ldrb	r3, [r3, #0]
  400626:	b1d3      	cbz	r3, 40065e <udi_cdc_multi_getc+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400628:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40062c:	fab3 f383 	clz	r3, r3
  400630:	095b      	lsrs	r3, r3, #5
  400632:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400634:	b672      	cpsid	i
  400636:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40063a:	7027      	strb	r7, [r4, #0]
	return flags;
  40063c:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
  40063e:	882b      	ldrh	r3, [r5, #0]
  400640:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  400642:	7832      	ldrb	r2, [r6, #0]
  400644:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
  400646:	4917      	ldr	r1, [pc, #92]	; (4006a4 <udi_cdc_multi_getc+0xb0>)
  400648:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  40064c:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
  40064e:	2800      	cmp	r0, #0
  400650:	d0e5      	beq.n	40061e <udi_cdc_multi_getc+0x2a>
		cpu_irq_enable();
  400652:	2001      	movs	r0, #1
  400654:	7020      	strb	r0, [r4, #0]
  400656:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40065a:	b662      	cpsie	i
  40065c:	e7df      	b.n	40061e <udi_cdc_multi_getc+0x2a>
			return 0;
  40065e:	f04f 0a00 	mov.w	sl, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
  400662:	4650      	mov	r0, sl
  400664:	b002      	add	sp, #8
  400666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  40066a:	490f      	ldr	r1, [pc, #60]	; (4006a8 <udi_cdc_multi_getc+0xb4>)
  40066c:	eb01 1282 	add.w	r2, r1, r2, lsl #6
  400670:	5cd2      	ldrb	r2, [r2, r3]
  400672:	ea42 0a0a 	orr.w	sl, r2, sl
	udi_cdc_rx_pos[port] = pos+1;
  400676:	3301      	adds	r3, #1
  400678:	b29b      	uxth	r3, r3
  40067a:	802b      	strh	r3, [r5, #0]
	udi_cdc_rx_start(port);
  40067c:	4648      	mov	r0, r9
  40067e:	4b0b      	ldr	r3, [pc, #44]	; (4006ac <udi_cdc_multi_getc+0xb8>)
  400680:	4798      	blx	r3
	if (b_databit_9) {
  400682:	f1b8 0f00 	cmp.w	r8, #0
  400686:	d0ec      	beq.n	400662 <udi_cdc_multi_getc+0x6e>
		rx_data = rx_data << 8;
  400688:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
		b_databit_9 = false;
  40068c:	46c8      	mov	r8, r9
		goto udi_cdc_getc_process_one_byte;
  40068e:	e7cb      	b.n	400628 <udi_cdc_multi_getc+0x34>
  400690:	20000bd8 	.word	0x20000bd8
  400694:	20000200 	.word	0x20000200
  400698:	20000c6c 	.word	0x20000c6c
  40069c:	20000c68 	.word	0x20000c68
  4006a0:	20000bd6 	.word	0x20000bd6
  4006a4:	20000c64 	.word	0x20000c64
  4006a8:	20000be4 	.word	0x20000be4
  4006ac:	0040044d 	.word	0x0040044d

004006b0 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  4006b0:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
  4006b2:	2000      	movs	r0, #0
  4006b4:	4b01      	ldr	r3, [pc, #4]	; (4006bc <udi_cdc_getc+0xc>)
  4006b6:	4798      	blx	r3
}
  4006b8:	bd08      	pop	{r3, pc}
  4006ba:	bf00      	nop
  4006bc:	004005f5 	.word	0x004005f5

004006c0 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  4006c0:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4006c2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4006c6:	fab3 f383 	clz	r3, r3
  4006ca:	095b      	lsrs	r3, r3, #5
  4006cc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4006ce:	b672      	cpsid	i
  4006d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4006d4:	2200      	movs	r2, #0
  4006d6:	4b14      	ldr	r3, [pc, #80]	; (400728 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  4006d8:	701a      	strb	r2, [r3, #0]
	return flags;
  4006da:	9a01      	ldr	r2, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  4006dc:	4b13      	ldr	r3, [pc, #76]	; (40072c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  4006de:	781b      	ldrb	r3, [r3, #0]
  4006e0:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  4006e2:	4913      	ldr	r1, [pc, #76]	; (400730 <udi_cdc_multi_get_free_tx_buffer+0x70>)
  4006e4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  4006e8:	2840      	cmp	r0, #64	; 0x40
  4006ea:	d00a      	beq.n	400702 <udi_cdc_multi_get_free_tx_buffer+0x42>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  4006ec:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	if (cpu_irq_is_enabled_flags(flags))
  4006f0:	b12a      	cbz	r2, 4006fe <udi_cdc_multi_get_free_tx_buffer+0x3e>
		cpu_irq_enable();
  4006f2:	2201      	movs	r2, #1
  4006f4:	4b0c      	ldr	r3, [pc, #48]	; (400728 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  4006f6:	701a      	strb	r2, [r3, #0]
  4006f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4006fc:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
  4006fe:	b002      	add	sp, #8
  400700:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
  400702:	490c      	ldr	r1, [pc, #48]	; (400734 <udi_cdc_multi_get_free_tx_buffer+0x74>)
  400704:	7809      	ldrb	r1, [r1, #0]
  400706:	2900      	cmp	r1, #0
  400708:	d1f0      	bne.n	4006ec <udi_cdc_multi_get_free_tx_buffer+0x2c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  40070a:	490b      	ldr	r1, [pc, #44]	; (400738 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  40070c:	7809      	ldrb	r1, [r1, #0]
  40070e:	2900      	cmp	r1, #0
  400710:	d1ec      	bne.n	4006ec <udi_cdc_multi_get_free_tx_buffer+0x2c>
			udi_cdc_tx_both_buf_to_send[port] = true;
  400712:	2001      	movs	r0, #1
  400714:	4908      	ldr	r1, [pc, #32]	; (400738 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  400716:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400718:	fab3 f383 	clz	r3, r3
  40071c:	095b      	lsrs	r3, r3, #5
  40071e:	4903      	ldr	r1, [pc, #12]	; (40072c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400720:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
  400722:	2000      	movs	r0, #0
  400724:	e7e2      	b.n	4006ec <udi_cdc_multi_get_free_tx_buffer+0x2c>
  400726:	bf00      	nop
  400728:	20000200 	.word	0x20000200
  40072c:	20000d00 	.word	0x20000d00
  400730:	20000cfc 	.word	0x20000cfc
  400734:	20000d08 	.word	0x20000d08
  400738:	20000c78 	.word	0x20000c78

0040073c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  40073c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  40073e:	4b03      	ldr	r3, [pc, #12]	; (40074c <udi_cdc_multi_is_tx_ready+0x10>)
  400740:	4798      	blx	r3
}
  400742:	3000      	adds	r0, #0
  400744:	bf18      	it	ne
  400746:	2001      	movne	r0, #1
  400748:	bd08      	pop	{r3, pc}
  40074a:	bf00      	nop
  40074c:	004006c1 	.word	0x004006c1

00400750 <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
  400750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400754:	b083      	sub	sp, #12
  400756:	4617      	mov	r7, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
  400758:	4b22      	ldr	r3, [pc, #136]	; (4007e4 <udi_cdc_multi_write_buf+0x94>)
  40075a:	799b      	ldrb	r3, [r3, #6]
  40075c:	2b09      	cmp	r3, #9
		size *=2;
  40075e:	bf08      	it	eq
  400760:	0057      	lsleq	r7, r2, #1
{
  400762:	4688      	mov	r8, r1
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400764:	f8df a094 	ldr.w	sl, [pc, #148]	; 4007fc <udi_cdc_multi_write_buf+0xac>
  400768:	e030      	b.n	4007cc <udi_cdc_multi_write_buf+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40076a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40076e:	fab3 f383 	clz	r3, r3
  400772:	095b      	lsrs	r3, r3, #5
  400774:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400776:	b672      	cpsid	i
  400778:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40077c:	2300      	movs	r3, #0
  40077e:	4a1a      	ldr	r2, [pc, #104]	; (4007e8 <udi_cdc_multi_write_buf+0x98>)
  400780:	7013      	strb	r3, [r2, #0]
	return flags;
  400782:	f8dd b004 	ldr.w	fp, [sp, #4]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400786:	4b19      	ldr	r3, [pc, #100]	; (4007ec <udi_cdc_multi_write_buf+0x9c>)
  400788:	781d      	ldrb	r5, [r3, #0]
  40078a:	b2ed      	uxtb	r5, r5
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  40078c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400800 <udi_cdc_multi_write_buf+0xb0>
  400790:	f839 6015 	ldrh.w	r6, [r9, r5, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
  400794:	f1c6 0440 	rsb	r4, r6, #64	; 0x40
  400798:	42bc      	cmp	r4, r7
  40079a:	bf28      	it	cs
  40079c:	463c      	movcs	r4, r7
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
  40079e:	eb06 1385 	add.w	r3, r6, r5, lsl #6
  4007a2:	4622      	mov	r2, r4
  4007a4:	4641      	mov	r1, r8
  4007a6:	4812      	ldr	r0, [pc, #72]	; (4007f0 <udi_cdc_multi_write_buf+0xa0>)
  4007a8:	4418      	add	r0, r3
  4007aa:	4b12      	ldr	r3, [pc, #72]	; (4007f4 <udi_cdc_multi_write_buf+0xa4>)
  4007ac:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
  4007ae:	4426      	add	r6, r4
  4007b0:	f829 6015 	strh.w	r6, [r9, r5, lsl #1]
	if (cpu_irq_is_enabled_flags(flags))
  4007b4:	f1bb 0f00 	cmp.w	fp, #0
  4007b8:	d005      	beq.n	4007c6 <udi_cdc_multi_write_buf+0x76>
		cpu_irq_enable();
  4007ba:	2301      	movs	r3, #1
  4007bc:	4a0a      	ldr	r2, [pc, #40]	; (4007e8 <udi_cdc_multi_write_buf+0x98>)
  4007be:	7013      	strb	r3, [r2, #0]
  4007c0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4007c4:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
  4007c6:	44a0      	add	r8, r4
	size -= copy_nb;

	if (size) {
  4007c8:	1b3f      	subs	r7, r7, r4
  4007ca:	d007      	beq.n	4007dc <udi_cdc_multi_write_buf+0x8c>
	if (!udi_cdc_multi_is_tx_ready(port)) {
  4007cc:	2000      	movs	r0, #0
  4007ce:	47d0      	blx	sl
  4007d0:	2800      	cmp	r0, #0
  4007d2:	d1ca      	bne.n	40076a <udi_cdc_multi_write_buf+0x1a>
		if (!udi_cdc_data_running) {
  4007d4:	4b08      	ldr	r3, [pc, #32]	; (4007f8 <udi_cdc_multi_write_buf+0xa8>)
  4007d6:	781b      	ldrb	r3, [r3, #0]
  4007d8:	2b00      	cmp	r3, #0
  4007da:	d1f7      	bne.n	4007cc <udi_cdc_multi_write_buf+0x7c>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
  4007dc:	4638      	mov	r0, r7
  4007de:	b003      	add	sp, #12
  4007e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4007e4:	20000bd8 	.word	0x20000bd8
  4007e8:	20000200 	.word	0x20000200
  4007ec:	20000d00 	.word	0x20000d00
  4007f0:	20000c7c 	.word	0x20000c7c
  4007f4:	004036f1 	.word	0x004036f1
  4007f8:	20000bd6 	.word	0x20000bd6
  4007fc:	0040073d 	.word	0x0040073d
  400800:	20000cfc 	.word	0x20000cfc

00400804 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
  400804:	b508      	push	{r3, lr}
	return udi_cdc_multi_write_buf(0, buf, size);
  400806:	460a      	mov	r2, r1
  400808:	4601      	mov	r1, r0
  40080a:	2000      	movs	r0, #0
  40080c:	4b01      	ldr	r3, [pc, #4]	; (400814 <udi_cdc_write_buf+0x10>)
  40080e:	4798      	blx	r3
}
  400810:	bd08      	pop	{r3, pc}
  400812:	bf00      	nop
  400814:	00400751 	.word	0x00400751

00400818 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  400818:	4b10      	ldr	r3, [pc, #64]	; (40085c <udc_next_desc_in_iface+0x44>)
  40081a:	681b      	ldr	r3, [r3, #0]
  40081c:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  40081e:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400820:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  400822:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400824:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400826:	4290      	cmp	r0, r2
  400828:	d211      	bcs.n	40084e <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40082a:	7843      	ldrb	r3, [r0, #1]
  40082c:	2b04      	cmp	r3, #4
  40082e:	d010      	beq.n	400852 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400830:	428b      	cmp	r3, r1
  400832:	d009      	beq.n	400848 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  400834:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400836:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  400838:	4290      	cmp	r0, r2
  40083a:	d206      	bcs.n	40084a <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40083c:	7843      	ldrb	r3, [r0, #1]
  40083e:	2b04      	cmp	r3, #4
  400840:	d009      	beq.n	400856 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  400842:	428b      	cmp	r3, r1
  400844:	d1f6      	bne.n	400834 <udc_next_desc_in_iface+0x1c>
  400846:	e007      	b.n	400858 <udc_next_desc_in_iface+0x40>
  400848:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  40084a:	2000      	movs	r0, #0
  40084c:	4770      	bx	lr
  40084e:	2000      	movs	r0, #0
  400850:	4770      	bx	lr
  400852:	2000      	movs	r0, #0
  400854:	4770      	bx	lr
  400856:	2000      	movs	r0, #0
}
  400858:	4770      	bx	lr
  40085a:	bf00      	nop
  40085c:	20000d24 	.word	0x20000d24

00400860 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400860:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400862:	4b03      	ldr	r3, [pc, #12]	; (400870 <udc_valid_address+0x10>)
  400864:	7898      	ldrb	r0, [r3, #2]
  400866:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40086a:	4b02      	ldr	r3, [pc, #8]	; (400874 <udc_valid_address+0x14>)
  40086c:	4798      	blx	r3
  40086e:	bd08      	pop	{r3, pc}
  400870:	20000e34 	.word	0x20000e34
  400874:	00401fa1 	.word	0x00401fa1

00400878 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  400878:	4b19      	ldr	r3, [pc, #100]	; (4008e0 <udc_update_iface_desc+0x68>)
  40087a:	781b      	ldrb	r3, [r3, #0]
  40087c:	b34b      	cbz	r3, 4008d2 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40087e:	4b19      	ldr	r3, [pc, #100]	; (4008e4 <udc_update_iface_desc+0x6c>)
  400880:	681b      	ldr	r3, [r3, #0]
  400882:	681b      	ldr	r3, [r3, #0]
  400884:	791a      	ldrb	r2, [r3, #4]
  400886:	4282      	cmp	r2, r0
  400888:	d925      	bls.n	4008d6 <udc_update_iface_desc+0x5e>
{
  40088a:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  40088c:	4a16      	ldr	r2, [pc, #88]	; (4008e8 <udc_update_iface_desc+0x70>)
  40088e:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400890:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400892:	441c      	add	r4, r3
	while (ptr_end_desc >
  400894:	42a3      	cmp	r3, r4
  400896:	d220      	bcs.n	4008da <udc_update_iface_desc+0x62>
  400898:	2500      	movs	r5, #0
  40089a:	2601      	movs	r6, #1
  40089c:	e007      	b.n	4008ae <udc_update_iface_desc+0x36>
  40089e:	4a12      	ldr	r2, [pc, #72]	; (4008e8 <udc_update_iface_desc+0x70>)
  4008a0:	6013      	str	r3, [r2, #0]
  4008a2:	e00f      	b.n	4008c4 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  4008a4:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  4008a6:	4413      	add	r3, r2
  4008a8:	4635      	mov	r5, r6
	while (ptr_end_desc >
  4008aa:	42a3      	cmp	r3, r4
  4008ac:	d20c      	bcs.n	4008c8 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  4008ae:	785a      	ldrb	r2, [r3, #1]
  4008b0:	2a04      	cmp	r2, #4
  4008b2:	d1f7      	bne.n	4008a4 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4008b4:	789a      	ldrb	r2, [r3, #2]
  4008b6:	4282      	cmp	r2, r0
  4008b8:	d1f4      	bne.n	4008a4 <udc_update_iface_desc+0x2c>
  4008ba:	78da      	ldrb	r2, [r3, #3]
  4008bc:	428a      	cmp	r2, r1
  4008be:	d1f1      	bne.n	4008a4 <udc_update_iface_desc+0x2c>
  4008c0:	2d00      	cmp	r5, #0
  4008c2:	d1ec      	bne.n	40089e <udc_update_iface_desc+0x26>
				return true; // Interface found
  4008c4:	2001      	movs	r0, #1
  4008c6:	e002      	b.n	4008ce <udc_update_iface_desc+0x56>
  4008c8:	4a07      	ldr	r2, [pc, #28]	; (4008e8 <udc_update_iface_desc+0x70>)
  4008ca:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  4008cc:	2000      	movs	r0, #0
}
  4008ce:	bc70      	pop	{r4, r5, r6}
  4008d0:	4770      	bx	lr
		return false;
  4008d2:	2000      	movs	r0, #0
  4008d4:	4770      	bx	lr
		return false;
  4008d6:	2000      	movs	r0, #0
  4008d8:	4770      	bx	lr
	return false; // Interface not found
  4008da:	2000      	movs	r0, #0
  4008dc:	e7f7      	b.n	4008ce <udc_update_iface_desc+0x56>
  4008de:	bf00      	nop
  4008e0:	20000d20 	.word	0x20000d20
  4008e4:	20000d24 	.word	0x20000d24
  4008e8:	20000d28 	.word	0x20000d28

004008ec <udc_iface_disable>:
{
  4008ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4008f0:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  4008f2:	2100      	movs	r1, #0
  4008f4:	4b13      	ldr	r3, [pc, #76]	; (400944 <udc_iface_disable+0x58>)
  4008f6:	4798      	blx	r3
  4008f8:	4680      	mov	r8, r0
  4008fa:	b910      	cbnz	r0, 400902 <udc_iface_disable+0x16>
}
  4008fc:	4640      	mov	r0, r8
  4008fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400902:	4b11      	ldr	r3, [pc, #68]	; (400948 <udc_iface_disable+0x5c>)
  400904:	681b      	ldr	r3, [r3, #0]
  400906:	685b      	ldr	r3, [r3, #4]
  400908:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40090c:	f8d9 300c 	ldr.w	r3, [r9, #12]
  400910:	4798      	blx	r3
  400912:	4601      	mov	r1, r0
  400914:	4620      	mov	r0, r4
  400916:	4b0b      	ldr	r3, [pc, #44]	; (400944 <udc_iface_disable+0x58>)
  400918:	4798      	blx	r3
  40091a:	4680      	mov	r8, r0
  40091c:	2800      	cmp	r0, #0
  40091e:	d0ed      	beq.n	4008fc <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400920:	4b0a      	ldr	r3, [pc, #40]	; (40094c <udc_iface_disable+0x60>)
  400922:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400924:	2605      	movs	r6, #5
  400926:	4d0a      	ldr	r5, [pc, #40]	; (400950 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  400928:	4f0a      	ldr	r7, [pc, #40]	; (400954 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40092a:	4631      	mov	r1, r6
  40092c:	4620      	mov	r0, r4
  40092e:	47a8      	blx	r5
			if (NULL == ep_desc) {
  400930:	4604      	mov	r4, r0
  400932:	b110      	cbz	r0, 40093a <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  400934:	7880      	ldrb	r0, [r0, #2]
  400936:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400938:	e7f7      	b.n	40092a <udc_iface_disable+0x3e>
	udi_api->disable();
  40093a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40093e:	4798      	blx	r3
	return true;
  400940:	e7dc      	b.n	4008fc <udc_iface_disable+0x10>
  400942:	bf00      	nop
  400944:	00400879 	.word	0x00400879
  400948:	20000d24 	.word	0x20000d24
  40094c:	20000d28 	.word	0x20000d28
  400950:	00400819 	.word	0x00400819
  400954:	00402111 	.word	0x00402111

00400958 <udc_iface_enable>:
{
  400958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40095c:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  40095e:	4b10      	ldr	r3, [pc, #64]	; (4009a0 <udc_iface_enable+0x48>)
  400960:	4798      	blx	r3
  400962:	4603      	mov	r3, r0
  400964:	b1c8      	cbz	r0, 40099a <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400966:	4b0f      	ldr	r3, [pc, #60]	; (4009a4 <udc_iface_enable+0x4c>)
  400968:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40096a:	2605      	movs	r6, #5
  40096c:	4d0e      	ldr	r5, [pc, #56]	; (4009a8 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40096e:	4f0f      	ldr	r7, [pc, #60]	; (4009ac <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400970:	4631      	mov	r1, r6
  400972:	4620      	mov	r0, r4
  400974:	47a8      	blx	r5
		if (NULL == ep_desc)
  400976:	4604      	mov	r4, r0
  400978:	b138      	cbz	r0, 40098a <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40097a:	8882      	ldrh	r2, [r0, #4]
  40097c:	78c1      	ldrb	r1, [r0, #3]
  40097e:	7880      	ldrb	r0, [r0, #2]
  400980:	47b8      	blx	r7
  400982:	4603      	mov	r3, r0
  400984:	2800      	cmp	r0, #0
  400986:	d1f3      	bne.n	400970 <udc_iface_enable+0x18>
  400988:	e007      	b.n	40099a <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40098a:	4b09      	ldr	r3, [pc, #36]	; (4009b0 <udc_iface_enable+0x58>)
  40098c:	681b      	ldr	r3, [r3, #0]
  40098e:	685b      	ldr	r3, [r3, #4]
  400990:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  400994:	681b      	ldr	r3, [r3, #0]
  400996:	4798      	blx	r3
  400998:	4603      	mov	r3, r0
}
  40099a:	4618      	mov	r0, r3
  40099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4009a0:	00400879 	.word	0x00400879
  4009a4:	20000d28 	.word	0x20000d28
  4009a8:	00400819 	.word	0x00400819
  4009ac:	00402019 	.word	0x00402019
  4009b0:	20000d24 	.word	0x20000d24

004009b4 <udc_start>:
{
  4009b4:	b508      	push	{r3, lr}
	udd_enable();
  4009b6:	4b01      	ldr	r3, [pc, #4]	; (4009bc <udc_start+0x8>)
  4009b8:	4798      	blx	r3
  4009ba:	bd08      	pop	{r3, pc}
  4009bc:	00401ec1 	.word	0x00401ec1

004009c0 <udc_reset>:
{
  4009c0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  4009c2:	4b0d      	ldr	r3, [pc, #52]	; (4009f8 <udc_reset+0x38>)
  4009c4:	781b      	ldrb	r3, [r3, #0]
  4009c6:	b183      	cbz	r3, 4009ea <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009c8:	4b0c      	ldr	r3, [pc, #48]	; (4009fc <udc_reset+0x3c>)
  4009ca:	681b      	ldr	r3, [r3, #0]
  4009cc:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4009ce:	791b      	ldrb	r3, [r3, #4]
  4009d0:	b15b      	cbz	r3, 4009ea <udc_reset+0x2a>
  4009d2:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  4009d4:	4e0a      	ldr	r6, [pc, #40]	; (400a00 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009d6:	4d09      	ldr	r5, [pc, #36]	; (4009fc <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  4009d8:	4620      	mov	r0, r4
  4009da:	47b0      	blx	r6
				iface_num++) {
  4009dc:	3401      	adds	r4, #1
  4009de:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009e0:	682b      	ldr	r3, [r5, #0]
  4009e2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4009e4:	791b      	ldrb	r3, [r3, #4]
  4009e6:	42a3      	cmp	r3, r4
  4009e8:	d8f6      	bhi.n	4009d8 <udc_reset+0x18>
	udc_num_configuration = 0;
  4009ea:	2200      	movs	r2, #0
  4009ec:	4b02      	ldr	r3, [pc, #8]	; (4009f8 <udc_reset+0x38>)
  4009ee:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  4009f0:	2201      	movs	r2, #1
  4009f2:	4b04      	ldr	r3, [pc, #16]	; (400a04 <udc_reset+0x44>)
  4009f4:	801a      	strh	r2, [r3, #0]
  4009f6:	bd70      	pop	{r4, r5, r6, pc}
  4009f8:	20000d20 	.word	0x20000d20
  4009fc:	20000d24 	.word	0x20000d24
  400a00:	004008ed 	.word	0x004008ed
  400a04:	20000d16 	.word	0x20000d16

00400a08 <udc_sof_notify>:
{
  400a08:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  400a0a:	4b0d      	ldr	r3, [pc, #52]	; (400a40 <udc_sof_notify+0x38>)
  400a0c:	781b      	ldrb	r3, [r3, #0]
  400a0e:	b1b3      	cbz	r3, 400a3e <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a10:	4b0c      	ldr	r3, [pc, #48]	; (400a44 <udc_sof_notify+0x3c>)
  400a12:	681b      	ldr	r3, [r3, #0]
  400a14:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  400a16:	7912      	ldrb	r2, [r2, #4]
  400a18:	b18a      	cbz	r2, 400a3e <udc_sof_notify+0x36>
  400a1a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a1c:	4d09      	ldr	r5, [pc, #36]	; (400a44 <udc_sof_notify+0x3c>)
  400a1e:	e006      	b.n	400a2e <udc_sof_notify+0x26>
				iface_num++) {
  400a20:	3401      	adds	r4, #1
  400a22:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a24:	682b      	ldr	r3, [r5, #0]
  400a26:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  400a28:	7912      	ldrb	r2, [r2, #4]
  400a2a:	42a2      	cmp	r2, r4
  400a2c:	d907      	bls.n	400a3e <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  400a2e:	685b      	ldr	r3, [r3, #4]
  400a30:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400a34:	691b      	ldr	r3, [r3, #16]
  400a36:	2b00      	cmp	r3, #0
  400a38:	d0f2      	beq.n	400a20 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400a3a:	4798      	blx	r3
  400a3c:	e7f0      	b.n	400a20 <udc_sof_notify+0x18>
  400a3e:	bd38      	pop	{r3, r4, r5, pc}
  400a40:	20000d20 	.word	0x20000d20
  400a44:	20000d24 	.word	0x20000d24

00400a48 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400a4a:	4b96      	ldr	r3, [pc, #600]	; (400ca4 <udc_process_setup+0x25c>)
  400a4c:	2200      	movs	r2, #0
  400a4e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400a50:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400a52:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  400a54:	781b      	ldrb	r3, [r3, #0]
  400a56:	f013 0f80 	tst.w	r3, #128	; 0x80
  400a5a:	d114      	bne.n	400a86 <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400a5c:	f013 0f60 	tst.w	r3, #96	; 0x60
  400a60:	f000 80b8 	beq.w	400bd4 <udc_process_setup+0x18c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  400a64:	4b8f      	ldr	r3, [pc, #572]	; (400ca4 <udc_process_setup+0x25c>)
  400a66:	781b      	ldrb	r3, [r3, #0]
  400a68:	f003 031f 	and.w	r3, r3, #31
  400a6c:	2b01      	cmp	r3, #1
  400a6e:	f000 818b 	beq.w	400d88 <udc_process_setup+0x340>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400a72:	4b8c      	ldr	r3, [pc, #560]	; (400ca4 <udc_process_setup+0x25c>)
  400a74:	781b      	ldrb	r3, [r3, #0]
  400a76:	f003 031f 	and.w	r3, r3, #31
  400a7a:	2b02      	cmp	r3, #2
  400a7c:	f000 81ac 	beq.w	400dd8 <udc_process_setup+0x390>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400a80:	2300      	movs	r3, #0
#endif
}
  400a82:	4618      	mov	r0, r3
  400a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  400a86:	4a87      	ldr	r2, [pc, #540]	; (400ca4 <udc_process_setup+0x25c>)
  400a88:	88d2      	ldrh	r2, [r2, #6]
  400a8a:	2a00      	cmp	r2, #0
  400a8c:	f000 81cd 	beq.w	400e2a <udc_process_setup+0x3e2>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400a90:	f013 0f60 	tst.w	r3, #96	; 0x60
  400a94:	d1e6      	bne.n	400a64 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400a96:	f013 031f 	ands.w	r3, r3, #31
  400a9a:	d106      	bne.n	400aaa <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  400a9c:	4981      	ldr	r1, [pc, #516]	; (400ca4 <udc_process_setup+0x25c>)
  400a9e:	7849      	ldrb	r1, [r1, #1]
  400aa0:	2906      	cmp	r1, #6
  400aa2:	d013      	beq.n	400acc <udc_process_setup+0x84>
  400aa4:	2908      	cmp	r1, #8
  400aa6:	d058      	beq.n	400b5a <udc_process_setup+0x112>
  400aa8:	b149      	cbz	r1, 400abe <udc_process_setup+0x76>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400aaa:	2b01      	cmp	r3, #1
  400aac:	d05c      	beq.n	400b68 <udc_process_setup+0x120>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400aae:	2b02      	cmp	r3, #2
  400ab0:	d1d8      	bne.n	400a64 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400ab2:	4b7c      	ldr	r3, [pc, #496]	; (400ca4 <udc_process_setup+0x25c>)
  400ab4:	785b      	ldrb	r3, [r3, #1]
  400ab6:	2b00      	cmp	r3, #0
  400ab8:	d07e      	beq.n	400bb8 <udc_process_setup+0x170>
	return false;
  400aba:	2300      	movs	r3, #0
  400abc:	e160      	b.n	400d80 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400abe:	2a02      	cmp	r2, #2
  400ac0:	d1d0      	bne.n	400a64 <udc_process_setup+0x1c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400ac2:	2102      	movs	r1, #2
  400ac4:	4878      	ldr	r0, [pc, #480]	; (400ca8 <udc_process_setup+0x260>)
  400ac6:	4b79      	ldr	r3, [pc, #484]	; (400cac <udc_process_setup+0x264>)
  400ac8:	4798      	blx	r3
  400aca:	e09f      	b.n	400c0c <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400acc:	4b75      	ldr	r3, [pc, #468]	; (400ca4 <udc_process_setup+0x25c>)
  400ace:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400ad0:	0a13      	lsrs	r3, r2, #8
  400ad2:	3b01      	subs	r3, #1
  400ad4:	2b0e      	cmp	r3, #14
  400ad6:	f200 8150 	bhi.w	400d7a <udc_process_setup+0x332>
  400ada:	e8df f013 	tbh	[pc, r3, lsl #1]
  400ade:	000f      	.short	0x000f
  400ae0:	0036001c 	.word	0x0036001c
  400ae4:	014e014e 	.word	0x014e014e
  400ae8:	014e014e 	.word	0x014e014e
  400aec:	014e014e 	.word	0x014e014e
  400af0:	014e014e 	.word	0x014e014e
  400af4:	014e014e 	.word	0x014e014e
  400af8:	002e014e 	.word	0x002e014e
				(uint8_t *) udc_config.confdev_lsfs,
  400afc:	4b6c      	ldr	r3, [pc, #432]	; (400cb0 <udc_process_setup+0x268>)
  400afe:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  400b00:	7801      	ldrb	r1, [r0, #0]
  400b02:	4b6a      	ldr	r3, [pc, #424]	; (400cac <udc_process_setup+0x264>)
  400b04:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  400b06:	4b67      	ldr	r3, [pc, #412]	; (400ca4 <udc_process_setup+0x25c>)
  400b08:	88da      	ldrh	r2, [r3, #6]
  400b0a:	899b      	ldrh	r3, [r3, #12]
  400b0c:	4293      	cmp	r3, r2
  400b0e:	d97d      	bls.n	400c0c <udc_process_setup+0x1c4>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  400b10:	4b64      	ldr	r3, [pc, #400]	; (400ca4 <udc_process_setup+0x25c>)
  400b12:	819a      	strh	r2, [r3, #12]
  400b14:	e07a      	b.n	400c0c <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400b16:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  400b18:	4b65      	ldr	r3, [pc, #404]	; (400cb0 <udc_process_setup+0x268>)
  400b1a:	681b      	ldr	r3, [r3, #0]
  400b1c:	7c5b      	ldrb	r3, [r3, #17]
  400b1e:	4293      	cmp	r3, r2
  400b20:	d9a0      	bls.n	400a64 <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  400b22:	4b63      	ldr	r3, [pc, #396]	; (400cb0 <udc_process_setup+0x268>)
  400b24:	685b      	ldr	r3, [r3, #4]
  400b26:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  400b2a:	8841      	ldrh	r1, [r0, #2]
  400b2c:	4b5f      	ldr	r3, [pc, #380]	; (400cac <udc_process_setup+0x264>)
  400b2e:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  400b30:	4b5c      	ldr	r3, [pc, #368]	; (400ca4 <udc_process_setup+0x25c>)
  400b32:	689b      	ldr	r3, [r3, #8]
  400b34:	2202      	movs	r2, #2
  400b36:	705a      	strb	r2, [r3, #1]
  400b38:	e7e5      	b.n	400b06 <udc_process_setup+0xbe>
		if (udc_config.conf_bos == NULL) {
  400b3a:	4b5d      	ldr	r3, [pc, #372]	; (400cb0 <udc_process_setup+0x268>)
  400b3c:	6898      	ldr	r0, [r3, #8]
  400b3e:	2800      	cmp	r0, #0
  400b40:	d090      	beq.n	400a64 <udc_process_setup+0x1c>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  400b42:	8841      	ldrh	r1, [r0, #2]
  400b44:	4b59      	ldr	r3, [pc, #356]	; (400cac <udc_process_setup+0x264>)
  400b46:	4798      	blx	r3
  400b48:	e7dd      	b.n	400b06 <udc_process_setup+0xbe>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400b4a:	f012 0fff 	tst.w	r2, #255	; 0xff
  400b4e:	d189      	bne.n	400a64 <udc_process_setup+0x1c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400b50:	2104      	movs	r1, #4
  400b52:	4858      	ldr	r0, [pc, #352]	; (400cb4 <udc_process_setup+0x26c>)
  400b54:	4b55      	ldr	r3, [pc, #340]	; (400cac <udc_process_setup+0x264>)
  400b56:	4798      	blx	r3
  400b58:	e7d5      	b.n	400b06 <udc_process_setup+0xbe>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400b5a:	2a01      	cmp	r2, #1
  400b5c:	d182      	bne.n	400a64 <udc_process_setup+0x1c>
	udd_set_setup_payload(&udc_num_configuration,1);
  400b5e:	2101      	movs	r1, #1
  400b60:	4855      	ldr	r0, [pc, #340]	; (400cb8 <udc_process_setup+0x270>)
  400b62:	4b52      	ldr	r3, [pc, #328]	; (400cac <udc_process_setup+0x264>)
  400b64:	4798      	blx	r3
  400b66:	e051      	b.n	400c0c <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
  400b68:	494e      	ldr	r1, [pc, #312]	; (400ca4 <udc_process_setup+0x25c>)
  400b6a:	7849      	ldrb	r1, [r1, #1]
  400b6c:	290a      	cmp	r1, #10
  400b6e:	d19e      	bne.n	400aae <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400b70:	2a01      	cmp	r2, #1
  400b72:	f47f af77 	bne.w	400a64 <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  400b76:	4b50      	ldr	r3, [pc, #320]	; (400cb8 <udc_process_setup+0x270>)
  400b78:	781b      	ldrb	r3, [r3, #0]
  400b7a:	2b00      	cmp	r3, #0
  400b7c:	f43f af72 	beq.w	400a64 <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400b80:	4b48      	ldr	r3, [pc, #288]	; (400ca4 <udc_process_setup+0x25c>)
  400b82:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400b84:	4b4d      	ldr	r3, [pc, #308]	; (400cbc <udc_process_setup+0x274>)
  400b86:	681d      	ldr	r5, [r3, #0]
  400b88:	682b      	ldr	r3, [r5, #0]
  400b8a:	791b      	ldrb	r3, [r3, #4]
  400b8c:	42a3      	cmp	r3, r4
  400b8e:	f67f af69 	bls.w	400a64 <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400b92:	2100      	movs	r1, #0
  400b94:	4620      	mov	r0, r4
  400b96:	4b4a      	ldr	r3, [pc, #296]	; (400cc0 <udc_process_setup+0x278>)
  400b98:	4798      	blx	r3
  400b9a:	2800      	cmp	r0, #0
  400b9c:	f43f af62 	beq.w	400a64 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400ba0:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  400ba2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400ba6:	68db      	ldr	r3, [r3, #12]
  400ba8:	4798      	blx	r3
  400baa:	4b46      	ldr	r3, [pc, #280]	; (400cc4 <udc_process_setup+0x27c>)
  400bac:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  400bae:	2101      	movs	r1, #1
  400bb0:	4618      	mov	r0, r3
  400bb2:	4b3e      	ldr	r3, [pc, #248]	; (400cac <udc_process_setup+0x264>)
  400bb4:	4798      	blx	r3
  400bb6:	e029      	b.n	400c0c <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400bb8:	2a02      	cmp	r2, #2
  400bba:	f47f af53 	bne.w	400a64 <udc_process_setup+0x1c>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400bbe:	4b39      	ldr	r3, [pc, #228]	; (400ca4 <udc_process_setup+0x25c>)
  400bc0:	7918      	ldrb	r0, [r3, #4]
  400bc2:	4b41      	ldr	r3, [pc, #260]	; (400cc8 <udc_process_setup+0x280>)
  400bc4:	4798      	blx	r3
  400bc6:	4b41      	ldr	r3, [pc, #260]	; (400ccc <udc_process_setup+0x284>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  400bc8:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400bca:	2102      	movs	r1, #2
  400bcc:	4618      	mov	r0, r3
  400bce:	4b37      	ldr	r3, [pc, #220]	; (400cac <udc_process_setup+0x264>)
  400bd0:	4798      	blx	r3
  400bd2:	e01b      	b.n	400c0c <udc_process_setup+0x1c4>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400bd4:	f013 031f 	ands.w	r3, r3, #31
  400bd8:	f040 8082 	bne.w	400ce0 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
  400bdc:	4a31      	ldr	r2, [pc, #196]	; (400ca4 <udc_process_setup+0x25c>)
  400bde:	7852      	ldrb	r2, [r2, #1]
  400be0:	3a01      	subs	r2, #1
  400be2:	2a08      	cmp	r2, #8
  400be4:	d87c      	bhi.n	400ce0 <udc_process_setup+0x298>
  400be6:	e8df f012 	tbh	[pc, r2, lsl #1]
  400bea:	0013      	.short	0x0013
  400bec:	00ca007b 	.word	0x00ca007b
  400bf0:	0009007b 	.word	0x0009007b
  400bf4:	007b007b 	.word	0x007b007b
  400bf8:	0023007b 	.word	0x0023007b
	if (udd_g_ctrlreq.req.wLength) {
  400bfc:	4b29      	ldr	r3, [pc, #164]	; (400ca4 <udc_process_setup+0x25c>)
  400bfe:	88db      	ldrh	r3, [r3, #6]
  400c00:	2b00      	cmp	r3, #0
  400c02:	f47f af2f 	bne.w	400a64 <udc_process_setup+0x1c>
	udd_g_ctrlreq.callback = udc_valid_address;
  400c06:	4a32      	ldr	r2, [pc, #200]	; (400cd0 <udc_process_setup+0x288>)
  400c08:	4b26      	ldr	r3, [pc, #152]	; (400ca4 <udc_process_setup+0x25c>)
  400c0a:	611a      	str	r2, [r3, #16]
			return true;
  400c0c:	2301      	movs	r3, #1
  400c0e:	e738      	b.n	400a82 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  400c10:	4b24      	ldr	r3, [pc, #144]	; (400ca4 <udc_process_setup+0x25c>)
  400c12:	88db      	ldrh	r3, [r3, #6]
  400c14:	2b00      	cmp	r3, #0
  400c16:	f47f af25 	bne.w	400a64 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  400c1a:	4b22      	ldr	r3, [pc, #136]	; (400ca4 <udc_process_setup+0x25c>)
  400c1c:	885b      	ldrh	r3, [r3, #2]
  400c1e:	2b01      	cmp	r3, #1
  400c20:	f47f af20 	bne.w	400a64 <udc_process_setup+0x1c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  400c24:	4a20      	ldr	r2, [pc, #128]	; (400ca8 <udc_process_setup+0x260>)
  400c26:	8813      	ldrh	r3, [r2, #0]
  400c28:	f023 0302 	bic.w	r3, r3, #2
  400c2c:	8013      	strh	r3, [r2, #0]
  400c2e:	e7ed      	b.n	400c0c <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength) {
  400c30:	4b1c      	ldr	r3, [pc, #112]	; (400ca4 <udc_process_setup+0x25c>)
  400c32:	88db      	ldrh	r3, [r3, #6]
  400c34:	2b00      	cmp	r3, #0
  400c36:	f47f af15 	bne.w	400a64 <udc_process_setup+0x1c>
	if (!udd_getaddress()) {
  400c3a:	4b26      	ldr	r3, [pc, #152]	; (400cd4 <udc_process_setup+0x28c>)
  400c3c:	4798      	blx	r3
  400c3e:	2800      	cmp	r0, #0
  400c40:	f43f af10 	beq.w	400a64 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400c44:	4b17      	ldr	r3, [pc, #92]	; (400ca4 <udc_process_setup+0x25c>)
  400c46:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400c48:	4b19      	ldr	r3, [pc, #100]	; (400cb0 <udc_process_setup+0x268>)
  400c4a:	681b      	ldr	r3, [r3, #0]
  400c4c:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400c4e:	429a      	cmp	r2, r3
  400c50:	f73f af08 	bgt.w	400a64 <udc_process_setup+0x1c>
	udc_reset();
  400c54:	4b20      	ldr	r3, [pc, #128]	; (400cd8 <udc_process_setup+0x290>)
  400c56:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400c58:	4b12      	ldr	r3, [pc, #72]	; (400ca4 <udc_process_setup+0x25c>)
  400c5a:	789b      	ldrb	r3, [r3, #2]
  400c5c:	4a16      	ldr	r2, [pc, #88]	; (400cb8 <udc_process_setup+0x270>)
  400c5e:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400c60:	2b00      	cmp	r3, #0
  400c62:	d0d3      	beq.n	400c0c <udc_process_setup+0x1c4>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400c64:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400c68:	3b01      	subs	r3, #1
  400c6a:	4a11      	ldr	r2, [pc, #68]	; (400cb0 <udc_process_setup+0x268>)
  400c6c:	6852      	ldr	r2, [r2, #4]
  400c6e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400c72:	4912      	ldr	r1, [pc, #72]	; (400cbc <udc_process_setup+0x274>)
  400c74:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c76:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400c7a:	791b      	ldrb	r3, [r3, #4]
  400c7c:	2b00      	cmp	r3, #0
  400c7e:	d0c5      	beq.n	400c0c <udc_process_setup+0x1c4>
  400c80:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  400c82:	4626      	mov	r6, r4
  400c84:	4d15      	ldr	r5, [pc, #84]	; (400cdc <udc_process_setup+0x294>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c86:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  400c88:	4631      	mov	r1, r6
  400c8a:	4620      	mov	r0, r4
  400c8c:	47a8      	blx	r5
  400c8e:	2800      	cmp	r0, #0
  400c90:	f43f aee8 	beq.w	400a64 <udc_process_setup+0x1c>
			iface_num++) {
  400c94:	3401      	adds	r4, #1
  400c96:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c98:	683b      	ldr	r3, [r7, #0]
  400c9a:	681b      	ldr	r3, [r3, #0]
  400c9c:	791b      	ldrb	r3, [r3, #4]
  400c9e:	42a3      	cmp	r3, r4
  400ca0:	d8f2      	bhi.n	400c88 <udc_process_setup+0x240>
  400ca2:	e7b3      	b.n	400c0c <udc_process_setup+0x1c4>
  400ca4:	20000e34 	.word	0x20000e34
  400ca8:	20000d16 	.word	0x20000d16
  400cac:	0040200d 	.word	0x0040200d
  400cb0:	2000018c 	.word	0x2000018c
  400cb4:	2000010c 	.word	0x2000010c
  400cb8:	20000d20 	.word	0x20000d20
  400cbc:	20000d24 	.word	0x20000d24
  400cc0:	00400879 	.word	0x00400879
  400cc4:	20000d1c 	.word	0x20000d1c
  400cc8:	00402169 	.word	0x00402169
  400ccc:	20000d18 	.word	0x20000d18
  400cd0:	00400861 	.word	0x00400861
  400cd4:	00401fdd 	.word	0x00401fdd
  400cd8:	004009c1 	.word	0x004009c1
  400cdc:	00400959 	.word	0x00400959
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400ce0:	2b01      	cmp	r3, #1
  400ce2:	d00a      	beq.n	400cfa <udc_process_setup+0x2b2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400ce4:	2b02      	cmp	r3, #2
  400ce6:	f47f aebd 	bne.w	400a64 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400cea:	4b52      	ldr	r3, [pc, #328]	; (400e34 <udc_process_setup+0x3ec>)
  400cec:	785b      	ldrb	r3, [r3, #1]
  400cee:	2b01      	cmp	r3, #1
  400cf0:	d020      	beq.n	400d34 <udc_process_setup+0x2ec>
  400cf2:	2b03      	cmp	r3, #3
  400cf4:	d02e      	beq.n	400d54 <udc_process_setup+0x30c>
	return false;
  400cf6:	2300      	movs	r3, #0
  400cf8:	e042      	b.n	400d80 <udc_process_setup+0x338>
			switch (udd_g_ctrlreq.req.bRequest) {
  400cfa:	4a4e      	ldr	r2, [pc, #312]	; (400e34 <udc_process_setup+0x3ec>)
  400cfc:	7852      	ldrb	r2, [r2, #1]
  400cfe:	2a0b      	cmp	r2, #11
  400d00:	d1f0      	bne.n	400ce4 <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
  400d02:	4b4c      	ldr	r3, [pc, #304]	; (400e34 <udc_process_setup+0x3ec>)
  400d04:	88db      	ldrh	r3, [r3, #6]
  400d06:	2b00      	cmp	r3, #0
  400d08:	f47f aeac 	bne.w	400a64 <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  400d0c:	4b4a      	ldr	r3, [pc, #296]	; (400e38 <udc_process_setup+0x3f0>)
  400d0e:	781b      	ldrb	r3, [r3, #0]
  400d10:	2b00      	cmp	r3, #0
  400d12:	f43f aea7 	beq.w	400a64 <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400d16:	4b47      	ldr	r3, [pc, #284]	; (400e34 <udc_process_setup+0x3ec>)
  400d18:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400d1a:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  400d1c:	4620      	mov	r0, r4
  400d1e:	4b47      	ldr	r3, [pc, #284]	; (400e3c <udc_process_setup+0x3f4>)
  400d20:	4798      	blx	r3
  400d22:	2800      	cmp	r0, #0
  400d24:	f43f ae9e 	beq.w	400a64 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  400d28:	b2e9      	uxtb	r1, r5
  400d2a:	4620      	mov	r0, r4
  400d2c:	4b44      	ldr	r3, [pc, #272]	; (400e40 <udc_process_setup+0x3f8>)
  400d2e:	4798      	blx	r3
  400d30:	4603      	mov	r3, r0
  400d32:	e025      	b.n	400d80 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400d34:	4b3f      	ldr	r3, [pc, #252]	; (400e34 <udc_process_setup+0x3ec>)
  400d36:	88db      	ldrh	r3, [r3, #6]
  400d38:	2b00      	cmp	r3, #0
  400d3a:	f47f ae93 	bne.w	400a64 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400d3e:	4b3d      	ldr	r3, [pc, #244]	; (400e34 <udc_process_setup+0x3ec>)
  400d40:	885b      	ldrh	r3, [r3, #2]
  400d42:	2b00      	cmp	r3, #0
  400d44:	f47f ae8e 	bne.w	400a64 <udc_process_setup+0x1c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400d48:	4b3a      	ldr	r3, [pc, #232]	; (400e34 <udc_process_setup+0x3ec>)
  400d4a:	7918      	ldrb	r0, [r3, #4]
  400d4c:	4b3d      	ldr	r3, [pc, #244]	; (400e44 <udc_process_setup+0x3fc>)
  400d4e:	4798      	blx	r3
  400d50:	4603      	mov	r3, r0
  400d52:	e015      	b.n	400d80 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400d54:	4b37      	ldr	r3, [pc, #220]	; (400e34 <udc_process_setup+0x3ec>)
  400d56:	88db      	ldrh	r3, [r3, #6]
  400d58:	2b00      	cmp	r3, #0
  400d5a:	f47f ae83 	bne.w	400a64 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400d5e:	4b35      	ldr	r3, [pc, #212]	; (400e34 <udc_process_setup+0x3ec>)
  400d60:	885b      	ldrh	r3, [r3, #2]
  400d62:	2b00      	cmp	r3, #0
  400d64:	f47f ae7e 	bne.w	400a64 <udc_process_setup+0x1c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400d68:	4c32      	ldr	r4, [pc, #200]	; (400e34 <udc_process_setup+0x3ec>)
  400d6a:	7920      	ldrb	r0, [r4, #4]
  400d6c:	4b36      	ldr	r3, [pc, #216]	; (400e48 <udc_process_setup+0x400>)
  400d6e:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400d70:	7920      	ldrb	r0, [r4, #4]
  400d72:	4b36      	ldr	r3, [pc, #216]	; (400e4c <udc_process_setup+0x404>)
  400d74:	4798      	blx	r3
  400d76:	4603      	mov	r3, r0
  400d78:	e002      	b.n	400d80 <udc_process_setup+0x338>
		return false;
  400d7a:	2300      	movs	r3, #0
  400d7c:	e000      	b.n	400d80 <udc_process_setup+0x338>
				return udc_req_std_dev_set_feature();
  400d7e:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  400d80:	2b00      	cmp	r3, #0
  400d82:	f47f ae7e 	bne.w	400a82 <udc_process_setup+0x3a>
  400d86:	e66d      	b.n	400a64 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
  400d88:	4b2b      	ldr	r3, [pc, #172]	; (400e38 <udc_process_setup+0x3f0>)
  400d8a:	781b      	ldrb	r3, [r3, #0]
  400d8c:	2b00      	cmp	r3, #0
  400d8e:	d04e      	beq.n	400e2e <udc_process_setup+0x3e6>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400d90:	4b28      	ldr	r3, [pc, #160]	; (400e34 <udc_process_setup+0x3ec>)
  400d92:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400d94:	4b2e      	ldr	r3, [pc, #184]	; (400e50 <udc_process_setup+0x408>)
  400d96:	681d      	ldr	r5, [r3, #0]
  400d98:	682b      	ldr	r3, [r5, #0]
  400d9a:	791b      	ldrb	r3, [r3, #4]
  400d9c:	42a3      	cmp	r3, r4
  400d9e:	d801      	bhi.n	400da4 <udc_process_setup+0x35c>
	return false;
  400da0:	2300      	movs	r3, #0
  400da2:	e66e      	b.n	400a82 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400da4:	2100      	movs	r1, #0
  400da6:	4620      	mov	r0, r4
  400da8:	4b2a      	ldr	r3, [pc, #168]	; (400e54 <udc_process_setup+0x40c>)
  400daa:	4798      	blx	r3
  400dac:	2800      	cmp	r0, #0
  400dae:	f43f ae60 	beq.w	400a72 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400db2:	686b      	ldr	r3, [r5, #4]
  400db4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400db8:	68eb      	ldr	r3, [r5, #12]
  400dba:	4798      	blx	r3
  400dbc:	4601      	mov	r1, r0
  400dbe:	4620      	mov	r0, r4
  400dc0:	4b24      	ldr	r3, [pc, #144]	; (400e54 <udc_process_setup+0x40c>)
  400dc2:	4798      	blx	r3
  400dc4:	2800      	cmp	r0, #0
  400dc6:	f43f ae54 	beq.w	400a72 <udc_process_setup+0x2a>
	return udi_api->setup();
  400dca:	68ab      	ldr	r3, [r5, #8]
  400dcc:	4798      	blx	r3
		if (udc_req_iface()) {
  400dce:	4603      	mov	r3, r0
  400dd0:	2800      	cmp	r0, #0
  400dd2:	f47f ae56 	bne.w	400a82 <udc_process_setup+0x3a>
  400dd6:	e64c      	b.n	400a72 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  400dd8:	4b17      	ldr	r3, [pc, #92]	; (400e38 <udc_process_setup+0x3f0>)
  400dda:	781b      	ldrb	r3, [r3, #0]
  400ddc:	b30b      	cbz	r3, 400e22 <udc_process_setup+0x3da>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400dde:	4b1c      	ldr	r3, [pc, #112]	; (400e50 <udc_process_setup+0x408>)
  400de0:	681a      	ldr	r2, [r3, #0]
  400de2:	6813      	ldr	r3, [r2, #0]
  400de4:	791b      	ldrb	r3, [r3, #4]
  400de6:	b1f3      	cbz	r3, 400e26 <udc_process_setup+0x3de>
  400de8:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400dea:	4e1a      	ldr	r6, [pc, #104]	; (400e54 <udc_process_setup+0x40c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400dec:	4f18      	ldr	r7, [pc, #96]	; (400e50 <udc_process_setup+0x408>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400dee:	6853      	ldr	r3, [r2, #4]
  400df0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400df4:	68eb      	ldr	r3, [r5, #12]
  400df6:	4798      	blx	r3
  400df8:	4601      	mov	r1, r0
  400dfa:	4620      	mov	r0, r4
  400dfc:	47b0      	blx	r6
  400dfe:	4603      	mov	r3, r0
  400e00:	2800      	cmp	r0, #0
  400e02:	f43f ae3e 	beq.w	400a82 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  400e06:	68ab      	ldr	r3, [r5, #8]
  400e08:	4798      	blx	r3
  400e0a:	4603      	mov	r3, r0
  400e0c:	2800      	cmp	r0, #0
  400e0e:	f47f ae38 	bne.w	400a82 <udc_process_setup+0x3a>
			iface_num++) {
  400e12:	3401      	adds	r4, #1
  400e14:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400e16:	683a      	ldr	r2, [r7, #0]
  400e18:	6811      	ldr	r1, [r2, #0]
  400e1a:	7909      	ldrb	r1, [r1, #4]
  400e1c:	42a1      	cmp	r1, r4
  400e1e:	d8e6      	bhi.n	400dee <udc_process_setup+0x3a6>
  400e20:	e62f      	b.n	400a82 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  400e22:	2300      	movs	r3, #0
  400e24:	e62d      	b.n	400a82 <udc_process_setup+0x3a>
	return false;
  400e26:	2300      	movs	r3, #0
  400e28:	e62b      	b.n	400a82 <udc_process_setup+0x3a>
			return false; // Error from USB host
  400e2a:	2300      	movs	r3, #0
  400e2c:	e629      	b.n	400a82 <udc_process_setup+0x3a>
	return false;
  400e2e:	2300      	movs	r3, #0
  400e30:	e627      	b.n	400a82 <udc_process_setup+0x3a>
  400e32:	bf00      	nop
  400e34:	20000e34 	.word	0x20000e34
  400e38:	20000d20 	.word	0x20000d20
  400e3c:	004008ed 	.word	0x004008ed
  400e40:	00400959 	.word	0x00400959
  400e44:	00402289 	.word	0x00402289
  400e48:	004024dd 	.word	0x004024dd
  400e4c:	004021a9 	.word	0x004021a9
  400e50:	20000d24 	.word	0x20000d24
  400e54:	00400879 	.word	0x00400879

00400e58 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  400e58:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  400e5a:	2401      	movs	r4, #1
  400e5c:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  400e5e:	2400      	movs	r4, #0
  400e60:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  400e62:	f240 2502 	movw	r5, #514	; 0x202
  400e66:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  400e6a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  400e6e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400e72:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  400e74:	0052      	lsls	r2, r2, #1
  400e76:	fbb1 f2f2 	udiv	r2, r1, r2
  400e7a:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400e7c:	0212      	lsls	r2, r2, #8
  400e7e:	b292      	uxth	r2, r2
  400e80:	432b      	orrs	r3, r5
  400e82:	431a      	orrs	r2, r3
  400e84:	6042      	str	r2, [r0, #4]
	return 0;
}
  400e86:	4620      	mov	r0, r4
  400e88:	bc30      	pop	{r4, r5}
  400e8a:	4770      	bx	lr

00400e8c <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  400e8c:	6843      	ldr	r3, [r0, #4]
  400e8e:	01d2      	lsls	r2, r2, #7
  400e90:	b2d2      	uxtb	r2, r2
  400e92:	4319      	orrs	r1, r3
  400e94:	430a      	orrs	r2, r1
  400e96:	6042      	str	r2, [r0, #4]
  400e98:	4770      	bx	lr

00400e9a <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  400e9a:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400e9c:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
  400e9e:	0609      	lsls	r1, r1, #24
  400ea0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400ea4:	4321      	orrs	r1, r4
  400ea6:	430a      	orrs	r2, r1
  400ea8:	0719      	lsls	r1, r3, #28
  400eaa:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
  400eae:	4311      	orrs	r1, r2
  400eb0:	6041      	str	r1, [r0, #4]
}
  400eb2:	bc10      	pop	{r4}
  400eb4:	4770      	bx	lr

00400eb6 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  400eb6:	2302      	movs	r3, #2
  400eb8:	6003      	str	r3, [r0, #0]
  400eba:	4770      	bx	lr

00400ebc <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  400ebc:	2301      	movs	r3, #1
  400ebe:	fa03 f101 	lsl.w	r1, r3, r1
  400ec2:	6101      	str	r1, [r0, #16]
  400ec4:	4770      	bx	lr

00400ec6 <adc_disable_all_channel>:
 * \param p_adc Pointer to an ADC instance.
 */
void adc_disable_all_channel(Adc *p_adc)
{
#if SAM3S || SAM4S || SAM3N || SAM3XA
	p_adc->ADC_CHDR = 0xFFFF;
  400ec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400eca:	6143      	str	r3, [r0, #20]
  400ecc:	4770      	bx	lr

00400ece <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
  400ece:	6241      	str	r1, [r0, #36]	; 0x24
  400ed0:	4770      	bx	lr

00400ed2 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
  400ed2:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400ed4:	4770      	bx	lr

00400ed6 <adc_set_bias_current>:
 * \param p_adc Pointer to an ADC instance.
 * \param ibctl ADC Bias current control.
 */
void adc_set_bias_current(Adc *p_adc, const uint8_t uc_ibctl)
{
	p_adc->ADC_ACR |= ADC_ACR_IBCTL(uc_ibctl);
  400ed6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
  400eda:	0209      	lsls	r1, r1, #8
  400edc:	f401 7140 	and.w	r1, r1, #768	; 0x300
  400ee0:	4319      	orrs	r1, r3
  400ee2:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  400ee6:	4770      	bx	lr

00400ee8 <adc_get_pdc_base>:
 */
Pdc *adc_get_pdc_base(const Adc *p_adc)
{
	UNUSED(p_adc);
	return PDC_ADC;
}
  400ee8:	4800      	ldr	r0, [pc, #0]	; (400eec <adc_get_pdc_base+0x4>)
  400eea:	4770      	bx	lr
  400eec:	40038100 	.word	0x40038100

00400ef0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400ef4:	4681      	mov	r9, r0
  400ef6:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400ef8:	4b12      	ldr	r3, [pc, #72]	; (400f44 <pio_handler_process+0x54>)
  400efa:	4798      	blx	r3
  400efc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400efe:	4648      	mov	r0, r9
  400f00:	4b11      	ldr	r3, [pc, #68]	; (400f48 <pio_handler_process+0x58>)
  400f02:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400f04:	4005      	ands	r5, r0
  400f06:	d013      	beq.n	400f30 <pio_handler_process+0x40>
  400f08:	4c10      	ldr	r4, [pc, #64]	; (400f4c <pio_handler_process+0x5c>)
  400f0a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400f0e:	e003      	b.n	400f18 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400f10:	42b4      	cmp	r4, r6
  400f12:	d00d      	beq.n	400f30 <pio_handler_process+0x40>
  400f14:	3410      	adds	r4, #16
		while (status != 0) {
  400f16:	b15d      	cbz	r5, 400f30 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400f18:	6820      	ldr	r0, [r4, #0]
  400f1a:	42b8      	cmp	r0, r7
  400f1c:	d1f8      	bne.n	400f10 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f1e:	6861      	ldr	r1, [r4, #4]
  400f20:	4229      	tst	r1, r5
  400f22:	d0f5      	beq.n	400f10 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400f24:	68e3      	ldr	r3, [r4, #12]
  400f26:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400f28:	6863      	ldr	r3, [r4, #4]
  400f2a:	ea25 0503 	bic.w	r5, r5, r3
  400f2e:	e7ef      	b.n	400f10 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400f30:	4b07      	ldr	r3, [pc, #28]	; (400f50 <pio_handler_process+0x60>)
  400f32:	681b      	ldr	r3, [r3, #0]
  400f34:	b123      	cbz	r3, 400f40 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400f36:	4b07      	ldr	r3, [pc, #28]	; (400f54 <pio_handler_process+0x64>)
  400f38:	681b      	ldr	r3, [r3, #0]
  400f3a:	b10b      	cbz	r3, 400f40 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400f3c:	4648      	mov	r0, r9
  400f3e:	4798      	blx	r3
  400f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400f44:	00403165 	.word	0x00403165
  400f48:	00403169 	.word	0x00403169
  400f4c:	20000d2c 	.word	0x20000d2c
  400f50:	20000e94 	.word	0x20000e94
  400f54:	20000d9c 	.word	0x20000d9c

00400f58 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400f58:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400f5a:	210b      	movs	r1, #11
  400f5c:	4801      	ldr	r0, [pc, #4]	; (400f64 <PIOA_Handler+0xc>)
  400f5e:	4b02      	ldr	r3, [pc, #8]	; (400f68 <PIOA_Handler+0x10>)
  400f60:	4798      	blx	r3
  400f62:	bd08      	pop	{r3, pc}
  400f64:	400e0e00 	.word	0x400e0e00
  400f68:	00400ef1 	.word	0x00400ef1

00400f6c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400f6c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400f6e:	210c      	movs	r1, #12
  400f70:	4801      	ldr	r0, [pc, #4]	; (400f78 <PIOB_Handler+0xc>)
  400f72:	4b02      	ldr	r3, [pc, #8]	; (400f7c <PIOB_Handler+0x10>)
  400f74:	4798      	blx	r3
  400f76:	bd08      	pop	{r3, pc}
  400f78:	400e1000 	.word	0x400e1000
  400f7c:	00400ef1 	.word	0x00400ef1

00400f80 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  400f80:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  400f82:	4601      	mov	r1, r0
  400f84:	bb28      	cbnz	r0, 400fd2 <udd_sleep_mode+0x52>
  400f86:	4b24      	ldr	r3, [pc, #144]	; (401018 <udd_sleep_mode+0x98>)
  400f88:	781b      	ldrb	r3, [r3, #0]
  400f8a:	b91b      	cbnz	r3, 400f94 <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  400f8c:	4b22      	ldr	r3, [pc, #136]	; (401018 <udd_sleep_mode+0x98>)
  400f8e:	7019      	strb	r1, [r3, #0]
}
  400f90:	b002      	add	sp, #8
  400f92:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  400f94:	4b21      	ldr	r3, [pc, #132]	; (40101c <udd_sleep_mode+0x9c>)
  400f96:	789b      	ldrb	r3, [r3, #2]
  400f98:	b903      	cbnz	r3, 400f9c <udd_sleep_mode+0x1c>
  400f9a:	e7fe      	b.n	400f9a <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400f9c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400fa0:	fab3 f383 	clz	r3, r3
  400fa4:	095b      	lsrs	r3, r3, #5
  400fa6:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400fa8:	b672      	cpsid	i
  400faa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400fae:	2200      	movs	r2, #0
  400fb0:	4b1b      	ldr	r3, [pc, #108]	; (401020 <udd_sleep_mode+0xa0>)
  400fb2:	701a      	strb	r2, [r3, #0]
	return flags;
  400fb4:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  400fb6:	4a19      	ldr	r2, [pc, #100]	; (40101c <udd_sleep_mode+0x9c>)
  400fb8:	7893      	ldrb	r3, [r2, #2]
  400fba:	3b01      	subs	r3, #1
  400fbc:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  400fbe:	2800      	cmp	r0, #0
  400fc0:	d0e4      	beq.n	400f8c <udd_sleep_mode+0xc>
		cpu_irq_enable();
  400fc2:	2201      	movs	r2, #1
  400fc4:	4b16      	ldr	r3, [pc, #88]	; (401020 <udd_sleep_mode+0xa0>)
  400fc6:	701a      	strb	r2, [r3, #0]
  400fc8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400fcc:	b662      	cpsie	i
  400fce:	e7dd      	b.n	400f8c <udd_sleep_mode+0xc>
  400fd0:	e7fe      	b.n	400fd0 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  400fd2:	4b11      	ldr	r3, [pc, #68]	; (401018 <udd_sleep_mode+0x98>)
  400fd4:	781b      	ldrb	r3, [r3, #0]
  400fd6:	2b00      	cmp	r3, #0
  400fd8:	d1d8      	bne.n	400f8c <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  400fda:	4b10      	ldr	r3, [pc, #64]	; (40101c <udd_sleep_mode+0x9c>)
  400fdc:	789b      	ldrb	r3, [r3, #2]
  400fde:	2bff      	cmp	r3, #255	; 0xff
  400fe0:	d0f6      	beq.n	400fd0 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400fe2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400fe6:	fab3 f383 	clz	r3, r3
  400fea:	095b      	lsrs	r3, r3, #5
  400fec:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400fee:	b672      	cpsid	i
  400ff0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400ff4:	2200      	movs	r2, #0
  400ff6:	4b0a      	ldr	r3, [pc, #40]	; (401020 <udd_sleep_mode+0xa0>)
  400ff8:	701a      	strb	r2, [r3, #0]
	return flags;
  400ffa:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  400ffc:	4a07      	ldr	r2, [pc, #28]	; (40101c <udd_sleep_mode+0x9c>)
  400ffe:	7893      	ldrb	r3, [r2, #2]
  401000:	3301      	adds	r3, #1
  401002:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  401004:	2800      	cmp	r0, #0
  401006:	d0c1      	beq.n	400f8c <udd_sleep_mode+0xc>
		cpu_irq_enable();
  401008:	2201      	movs	r2, #1
  40100a:	4b05      	ldr	r3, [pc, #20]	; (401020 <udd_sleep_mode+0xa0>)
  40100c:	701a      	strb	r2, [r3, #0]
  40100e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401012:	b662      	cpsie	i
  401014:	e7ba      	b.n	400f8c <udd_sleep_mode+0xc>
  401016:	bf00      	nop
  401018:	20000da1 	.word	0x20000da1
  40101c:	20000e2c 	.word	0x20000e2c
  401020:	20000200 	.word	0x20000200

00401024 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  401024:	4a03      	ldr	r2, [pc, #12]	; (401034 <udd_ctrl_init+0x10>)
  401026:	2300      	movs	r3, #0
  401028:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  40102a:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  40102c:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  40102e:	4a02      	ldr	r2, [pc, #8]	; (401038 <udd_ctrl_init+0x14>)
  401030:	7013      	strb	r3, [r2, #0]
  401032:	4770      	bx	lr
  401034:	20000e34 	.word	0x20000e34
  401038:	20000da6 	.word	0x20000da6

0040103c <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  40103c:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  40103e:	2205      	movs	r2, #5
  401040:	4b0a      	ldr	r3, [pc, #40]	; (40106c <udd_ctrl_stall_data+0x30>)
  401042:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  401044:	4a0a      	ldr	r2, [pc, #40]	; (401070 <udd_ctrl_stall_data+0x34>)
  401046:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401048:	9301      	str	r3, [sp, #4]
  40104a:	9b01      	ldr	r3, [sp, #4]
  40104c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401050:	9301      	str	r3, [sp, #4]
  401052:	9b01      	ldr	r3, [sp, #4]
  401054:	f043 0320 	orr.w	r3, r3, #32
  401058:	9301      	str	r3, [sp, #4]
  40105a:	9b01      	ldr	r3, [sp, #4]
  40105c:	6313      	str	r3, [r2, #48]	; 0x30
  40105e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401060:	f013 0f20 	tst.w	r3, #32
  401064:	d0fb      	beq.n	40105e <udd_ctrl_stall_data+0x22>
}
  401066:	b002      	add	sp, #8
  401068:	4770      	bx	lr
  40106a:	bf00      	nop
  40106c:	20000da6 	.word	0x20000da6
  401070:	40034000 	.word	0x40034000

00401074 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  401074:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  401076:	2203      	movs	r2, #3
  401078:	4b0a      	ldr	r3, [pc, #40]	; (4010a4 <udd_ctrl_send_zlp_in+0x30>)
  40107a:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  40107c:	4a0a      	ldr	r2, [pc, #40]	; (4010a8 <udd_ctrl_send_zlp_in+0x34>)
  40107e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401080:	9301      	str	r3, [sp, #4]
  401082:	9b01      	ldr	r3, [sp, #4]
  401084:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401088:	9301      	str	r3, [sp, #4]
  40108a:	9b01      	ldr	r3, [sp, #4]
  40108c:	f043 0310 	orr.w	r3, r3, #16
  401090:	9301      	str	r3, [sp, #4]
  401092:	9b01      	ldr	r3, [sp, #4]
  401094:	6313      	str	r3, [r2, #48]	; 0x30
  401096:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401098:	f013 0f10 	tst.w	r3, #16
  40109c:	d0fb      	beq.n	401096 <udd_ctrl_send_zlp_in+0x22>
}
  40109e:	b002      	add	sp, #8
  4010a0:	4770      	bx	lr
  4010a2:	bf00      	nop
  4010a4:	20000da6 	.word	0x20000da6
  4010a8:	40034000 	.word	0x40034000

004010ac <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  4010ac:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  4010ae:	4b02      	ldr	r3, [pc, #8]	; (4010b8 <udd_ctrl_endofrequest+0xc>)
  4010b0:	691b      	ldr	r3, [r3, #16]
  4010b2:	b103      	cbz	r3, 4010b6 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  4010b4:	4798      	blx	r3
  4010b6:	bd08      	pop	{r3, pc}
  4010b8:	20000e34 	.word	0x20000e34

004010bc <udd_ctrl_in_sent>:
{
  4010bc:	b530      	push	{r4, r5, lr}
  4010be:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  4010c0:	4b63      	ldr	r3, [pc, #396]	; (401250 <udd_ctrl_in_sent+0x194>)
  4010c2:	781b      	ldrb	r3, [r3, #0]
  4010c4:	2b03      	cmp	r3, #3
  4010c6:	d029      	beq.n	40111c <udd_ctrl_in_sent+0x60>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  4010c8:	4b62      	ldr	r3, [pc, #392]	; (401254 <udd_ctrl_in_sent+0x198>)
  4010ca:	881b      	ldrh	r3, [r3, #0]
  4010cc:	4a62      	ldr	r2, [pc, #392]	; (401258 <udd_ctrl_in_sent+0x19c>)
  4010ce:	8994      	ldrh	r4, [r2, #12]
  4010d0:	1ae4      	subs	r4, r4, r3
  4010d2:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  4010d4:	2c00      	cmp	r4, #0
  4010d6:	d144      	bne.n	401162 <udd_ctrl_in_sent+0xa6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4010d8:	4a60      	ldr	r2, [pc, #384]	; (40125c <udd_ctrl_in_sent+0x1a0>)
  4010da:	8811      	ldrh	r1, [r2, #0]
  4010dc:	440b      	add	r3, r1
  4010de:	b29b      	uxth	r3, r3
  4010e0:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  4010e2:	4a5d      	ldr	r2, [pc, #372]	; (401258 <udd_ctrl_in_sent+0x19c>)
  4010e4:	88d2      	ldrh	r2, [r2, #6]
  4010e6:	429a      	cmp	r2, r3
  4010e8:	d003      	beq.n	4010f2 <udd_ctrl_in_sent+0x36>
				|| b_shortpacket) {
  4010ea:	4b5d      	ldr	r3, [pc, #372]	; (401260 <udd_ctrl_in_sent+0x1a4>)
  4010ec:	781b      	ldrb	r3, [r3, #0]
  4010ee:	2b00      	cmp	r3, #0
  4010f0:	d02b      	beq.n	40114a <udd_ctrl_in_sent+0x8e>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4010f2:	2204      	movs	r2, #4
  4010f4:	4b56      	ldr	r3, [pc, #344]	; (401250 <udd_ctrl_in_sent+0x194>)
  4010f6:	701a      	strb	r2, [r3, #0]
			udd_ack_in_sent(0);
  4010f8:	4a5a      	ldr	r2, [pc, #360]	; (401264 <udd_ctrl_in_sent+0x1a8>)
  4010fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010fc:	9301      	str	r3, [sp, #4]
  4010fe:	9b01      	ldr	r3, [sp, #4]
  401100:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401104:	9301      	str	r3, [sp, #4]
  401106:	9b01      	ldr	r3, [sp, #4]
  401108:	f023 0301 	bic.w	r3, r3, #1
  40110c:	9301      	str	r3, [sp, #4]
  40110e:	9b01      	ldr	r3, [sp, #4]
  401110:	6313      	str	r3, [r2, #48]	; 0x30
  401112:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401114:	f013 0f01 	tst.w	r3, #1
  401118:	d1fb      	bne.n	401112 <udd_ctrl_in_sent+0x56>
  40111a:	e014      	b.n	401146 <udd_ctrl_in_sent+0x8a>
		udd_ack_in_sent(0);
  40111c:	4a51      	ldr	r2, [pc, #324]	; (401264 <udd_ctrl_in_sent+0x1a8>)
  40111e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401120:	9300      	str	r3, [sp, #0]
  401122:	9b00      	ldr	r3, [sp, #0]
  401124:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401128:	9300      	str	r3, [sp, #0]
  40112a:	9b00      	ldr	r3, [sp, #0]
  40112c:	f023 0301 	bic.w	r3, r3, #1
  401130:	9300      	str	r3, [sp, #0]
  401132:	9b00      	ldr	r3, [sp, #0]
  401134:	6313      	str	r3, [r2, #48]	; 0x30
  401136:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401138:	f013 0f01 	tst.w	r3, #1
  40113c:	d1fb      	bne.n	401136 <udd_ctrl_in_sent+0x7a>
		udd_ctrl_endofrequest();
  40113e:	4b4a      	ldr	r3, [pc, #296]	; (401268 <udd_ctrl_in_sent+0x1ac>)
  401140:	4798      	blx	r3
		udd_ctrl_init();
  401142:	4b4a      	ldr	r3, [pc, #296]	; (40126c <udd_ctrl_in_sent+0x1b0>)
  401144:	4798      	blx	r3
}
  401146:	b007      	add	sp, #28
  401148:	bd30      	pop	{r4, r5, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  40114a:	4b43      	ldr	r3, [pc, #268]	; (401258 <udd_ctrl_in_sent+0x19c>)
  40114c:	695b      	ldr	r3, [r3, #20]
  40114e:	2b00      	cmp	r3, #0
  401150:	d05d      	beq.n	40120e <udd_ctrl_in_sent+0x152>
				|| (!udd_g_ctrlreq.over_under_run())) {
  401152:	4798      	blx	r3
  401154:	2800      	cmp	r0, #0
  401156:	d05a      	beq.n	40120e <udd_ctrl_in_sent+0x152>
			udd_ctrl_payload_nb_trans = 0;
  401158:	2200      	movs	r2, #0
  40115a:	4b3e      	ldr	r3, [pc, #248]	; (401254 <udd_ctrl_in_sent+0x198>)
  40115c:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  40115e:	4b3e      	ldr	r3, [pc, #248]	; (401258 <udd_ctrl_in_sent+0x19c>)
  401160:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  401162:	2c3f      	cmp	r4, #63	; 0x3f
  401164:	d953      	bls.n	40120e <udd_ctrl_in_sent+0x152>
		b_shortpacket = false;
  401166:	2200      	movs	r2, #0
  401168:	4b3d      	ldr	r3, [pc, #244]	; (401260 <udd_ctrl_in_sent+0x1a4>)
  40116a:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  40116c:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40116e:	4b3a      	ldr	r3, [pc, #232]	; (401258 <udd_ctrl_in_sent+0x19c>)
  401170:	6899      	ldr	r1, [r3, #8]
  401172:	4b38      	ldr	r3, [pc, #224]	; (401254 <udd_ctrl_in_sent+0x198>)
  401174:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401176:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40117a:	fab3 f383 	clz	r3, r3
  40117e:	095b      	lsrs	r3, r3, #5
  401180:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  401182:	b672      	cpsid	i
  401184:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401188:	2200      	movs	r2, #0
  40118a:	4b39      	ldr	r3, [pc, #228]	; (401270 <udd_ctrl_in_sent+0x1b4>)
  40118c:	701a      	strb	r2, [r3, #0]
	return flags;
  40118e:	9d05      	ldr	r5, [sp, #20]
	if (Is_udd_bank0_received(0)) {
  401190:	4b34      	ldr	r3, [pc, #208]	; (401264 <udd_ctrl_in_sent+0x1a8>)
  401192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401194:	f013 0f02 	tst.w	r3, #2
  401198:	d13d      	bne.n	401216 <udd_ctrl_in_sent+0x15a>
	for (i = 0; i < nb_remain; i++) {
  40119a:	b14c      	cbz	r4, 4011b0 <udd_ctrl_in_sent+0xf4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40119c:	4401      	add	r1, r0
  40119e:	460a      	mov	r2, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  4011a0:	4830      	ldr	r0, [pc, #192]	; (401264 <udd_ctrl_in_sent+0x1a8>)
  4011a2:	f812 3b01 	ldrb.w	r3, [r2], #1
  4011a6:	6503      	str	r3, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  4011a8:	1a53      	subs	r3, r2, r1
  4011aa:	b2db      	uxtb	r3, r3
  4011ac:	42a3      	cmp	r3, r4
  4011ae:	d3f8      	bcc.n	4011a2 <udd_ctrl_in_sent+0xe6>
	udd_ctrl_payload_nb_trans += nb_remain;
  4011b0:	4b28      	ldr	r3, [pc, #160]	; (401254 <udd_ctrl_in_sent+0x198>)
  4011b2:	881a      	ldrh	r2, [r3, #0]
  4011b4:	4414      	add	r4, r2
  4011b6:	801c      	strh	r4, [r3, #0]
	udd_set_transmit_ready(0);
  4011b8:	4a2a      	ldr	r2, [pc, #168]	; (401264 <udd_ctrl_in_sent+0x1a8>)
  4011ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011bc:	9303      	str	r3, [sp, #12]
  4011be:	9b03      	ldr	r3, [sp, #12]
  4011c0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4011c4:	9303      	str	r3, [sp, #12]
  4011c6:	9b03      	ldr	r3, [sp, #12]
  4011c8:	f043 0310 	orr.w	r3, r3, #16
  4011cc:	9303      	str	r3, [sp, #12]
  4011ce:	9b03      	ldr	r3, [sp, #12]
  4011d0:	6313      	str	r3, [r2, #48]	; 0x30
  4011d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011d4:	f013 0f10 	tst.w	r3, #16
  4011d8:	d0fb      	beq.n	4011d2 <udd_ctrl_in_sent+0x116>
	udd_ack_in_sent(0);
  4011da:	4a22      	ldr	r2, [pc, #136]	; (401264 <udd_ctrl_in_sent+0x1a8>)
  4011dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011de:	9304      	str	r3, [sp, #16]
  4011e0:	9b04      	ldr	r3, [sp, #16]
  4011e2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4011e6:	9304      	str	r3, [sp, #16]
  4011e8:	9b04      	ldr	r3, [sp, #16]
  4011ea:	f023 0301 	bic.w	r3, r3, #1
  4011ee:	9304      	str	r3, [sp, #16]
  4011f0:	9b04      	ldr	r3, [sp, #16]
  4011f2:	6313      	str	r3, [r2, #48]	; 0x30
  4011f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011f6:	f013 0f01 	tst.w	r3, #1
  4011fa:	d1fb      	bne.n	4011f4 <udd_ctrl_in_sent+0x138>
	if (cpu_irq_is_enabled_flags(flags))
  4011fc:	2d00      	cmp	r5, #0
  4011fe:	d0a2      	beq.n	401146 <udd_ctrl_in_sent+0x8a>
		cpu_irq_enable();
  401200:	2201      	movs	r2, #1
  401202:	4b1b      	ldr	r3, [pc, #108]	; (401270 <udd_ctrl_in_sent+0x1b4>)
  401204:	701a      	strb	r2, [r3, #0]
  401206:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40120a:	b662      	cpsie	i
  40120c:	e79b      	b.n	401146 <udd_ctrl_in_sent+0x8a>
		b_shortpacket = true;
  40120e:	2201      	movs	r2, #1
  401210:	4b13      	ldr	r3, [pc, #76]	; (401260 <udd_ctrl_in_sent+0x1a4>)
  401212:	701a      	strb	r2, [r3, #0]
  401214:	e7ab      	b.n	40116e <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  401216:	b12d      	cbz	r5, 401224 <udd_ctrl_in_sent+0x168>
		cpu_irq_enable();
  401218:	2201      	movs	r2, #1
  40121a:	4b15      	ldr	r3, [pc, #84]	; (401270 <udd_ctrl_in_sent+0x1b4>)
  40121c:	701a      	strb	r2, [r3, #0]
  40121e:	f3bf 8f5f 	dmb	sy
  401222:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401224:	2204      	movs	r2, #4
  401226:	4b0a      	ldr	r3, [pc, #40]	; (401250 <udd_ctrl_in_sent+0x194>)
  401228:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  40122a:	4a0e      	ldr	r2, [pc, #56]	; (401264 <udd_ctrl_in_sent+0x1a8>)
  40122c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40122e:	9302      	str	r3, [sp, #8]
  401230:	9b02      	ldr	r3, [sp, #8]
  401232:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401236:	9302      	str	r3, [sp, #8]
  401238:	9b02      	ldr	r3, [sp, #8]
  40123a:	f023 0301 	bic.w	r3, r3, #1
  40123e:	9302      	str	r3, [sp, #8]
  401240:	9b02      	ldr	r3, [sp, #8]
  401242:	6313      	str	r3, [r2, #48]	; 0x30
  401244:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401246:	f013 0f01 	tst.w	r3, #1
  40124a:	d1fb      	bne.n	401244 <udd_ctrl_in_sent+0x188>
  40124c:	e77b      	b.n	401146 <udd_ctrl_in_sent+0x8a>
  40124e:	bf00      	nop
  401250:	20000da6 	.word	0x20000da6
  401254:	20000da2 	.word	0x20000da2
  401258:	20000e34 	.word	0x20000e34
  40125c:	20000da4 	.word	0x20000da4
  401260:	20000da0 	.word	0x20000da0
  401264:	40034000 	.word	0x40034000
  401268:	004010ad 	.word	0x004010ad
  40126c:	00401025 	.word	0x00401025
  401270:	20000200 	.word	0x20000200

00401274 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  401274:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
  401276:	7c43      	ldrb	r3, [r0, #17]
  401278:	f013 0f10 	tst.w	r3, #16
  40127c:	d016      	beq.n	4012ac <udd_ep_finish_job+0x38>
  40127e:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
  401280:	7c43      	ldrb	r3, [r0, #17]
  401282:	f36f 1304 	bfc	r3, #4, #1
  401286:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  401288:	6804      	ldr	r4, [r0, #0]
  40128a:	b17c      	cbz	r4, 4012ac <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  40128c:	f102 030c 	add.w	r3, r2, #12
  401290:	4907      	ldr	r1, [pc, #28]	; (4012b0 <udd_ep_finish_job+0x3c>)
  401292:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  401296:	f413 6f80 	tst.w	r3, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  40129a:	bf18      	it	ne
  40129c:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  4012a0:	6881      	ldr	r1, [r0, #8]
  4012a2:	2d01      	cmp	r5, #1
  4012a4:	bf14      	ite	ne
  4012a6:	2000      	movne	r0, #0
  4012a8:	2001      	moveq	r0, #1
  4012aa:	47a0      	blx	r4
  4012ac:	bd38      	pop	{r3, r4, r5, pc}
  4012ae:	bf00      	nop
  4012b0:	40034000 	.word	0x40034000

004012b4 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  4012b4:	b430      	push	{r4, r5}
  4012b6:	b082      	sub	sp, #8
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4012b8:	1e41      	subs	r1, r0, #1
  4012ba:	0083      	lsls	r3, r0, #2
  4012bc:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4012c0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

	bank0_received = Is_udd_bank0_received(ep);
  4012c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  4012c6:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  4012c8:	f012 0f02 	tst.w	r2, #2
  4012cc:	d032      	beq.n	401334 <udd_ep_ack_out_received+0x80>
  4012ce:	f014 0f40 	tst.w	r4, #64	; 0x40
  4012d2:	d108      	bne.n	4012e6 <udd_ep_ack_out_received+0x32>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  4012d4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4012d8:	4c2a      	ldr	r4, [pc, #168]	; (401384 <udd_ep_ack_out_received+0xd0>)
  4012da:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4012de:	7c54      	ldrb	r4, [r2, #17]
  4012e0:	f36f 0483 	bfc	r4, #2, #2
  4012e4:	7454      	strb	r4, [r2, #17]
	} else {
		// Must be bank1
		ptr_job->bank = 1;
	}
	if (ptr_job->bank == 0) {
  4012e6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4012ea:	4c26      	ldr	r4, [pc, #152]	; (401384 <udd_ep_ack_out_received+0xd0>)
  4012ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4012f0:	7c52      	ldrb	r2, [r2, #17]
  4012f2:	f012 0f0c 	tst.w	r2, #12
  4012f6:	d128      	bne.n	40134a <udd_ep_ack_out_received+0x96>
		udd_ack_bank0_received(ep);
  4012f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4012fa:	9200      	str	r2, [sp, #0]
  4012fc:	9a00      	ldr	r2, [sp, #0]
  4012fe:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401302:	9200      	str	r2, [sp, #0]
  401304:	9a00      	ldr	r2, [sp, #0]
  401306:	f022 0202 	bic.w	r2, r2, #2
  40130a:	9200      	str	r2, [sp, #0]
  40130c:	9a00      	ldr	r2, [sp, #0]
  40130e:	631a      	str	r2, [r3, #48]	; 0x30
  401310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401312:	f012 0f02 	tst.w	r2, #2
  401316:	d1fb      	bne.n	401310 <udd_ep_ack_out_received+0x5c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  401318:	b380      	cbz	r0, 40137c <udd_ep_ack_out_received+0xc8>
  40131a:	2803      	cmp	r0, #3
  40131c:	d02e      	beq.n	40137c <udd_ep_ack_out_received+0xc8>
			ptr_job->bank = 1;
  40131e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401322:	4b18      	ldr	r3, [pc, #96]	; (401384 <udd_ep_ack_out_received+0xd0>)
  401324:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  401328:	7c5a      	ldrb	r2, [r3, #17]
  40132a:	2101      	movs	r1, #1
  40132c:	f361 0283 	bfi	r2, r1, #2, #2
  401330:	745a      	strb	r2, [r3, #17]
  401332:	e023      	b.n	40137c <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 1;
  401334:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401338:	4c12      	ldr	r4, [pc, #72]	; (401384 <udd_ep_ack_out_received+0xd0>)
  40133a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40133e:	7c54      	ldrb	r4, [r2, #17]
  401340:	2501      	movs	r5, #1
  401342:	f365 0483 	bfi	r4, r5, #2, #2
  401346:	7454      	strb	r4, [r2, #17]
  401348:	e7cd      	b.n	4012e6 <udd_ep_ack_out_received+0x32>
		}
	} else {
		udd_ack_bank1_received(ep);
  40134a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40134c:	9201      	str	r2, [sp, #4]
  40134e:	9a01      	ldr	r2, [sp, #4]
  401350:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401354:	9201      	str	r2, [sp, #4]
  401356:	9a01      	ldr	r2, [sp, #4]
  401358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  40135c:	9201      	str	r2, [sp, #4]
  40135e:	9a01      	ldr	r2, [sp, #4]
  401360:	631a      	str	r2, [r3, #48]	; 0x30
  401362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401364:	f012 0f40 	tst.w	r2, #64	; 0x40
  401368:	d1fb      	bne.n	401362 <udd_ep_ack_out_received+0xae>
		ptr_job->bank = 0;
  40136a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40136e:	4b05      	ldr	r3, [pc, #20]	; (401384 <udd_ep_ack_out_received+0xd0>)
  401370:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401374:	7c4b      	ldrb	r3, [r1, #17]
  401376:	f36f 0383 	bfc	r3, #2, #2
  40137a:	744b      	strb	r3, [r1, #17]
	}
}
  40137c:	b002      	add	sp, #8
  40137e:	bc30      	pop	{r4, r5}
  401380:	4770      	bx	lr
  401382:	bf00      	nop
  401384:	20000da8 	.word	0x20000da8

00401388 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  401388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40138c:	b083      	sub	sp, #12
  40138e:	4688      	mov	r8, r1
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401390:	4681      	mov	r9, r0
  401392:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401394:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  401398:	4b66      	ldr	r3, [pc, #408]	; (401534 <udd_ep_in_sent+0x1ac>)
  40139a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40139e:	f893 c011 	ldrb.w	ip, [r3, #17]
  4013a2:	f3cc 0c81 	ubfx	ip, ip, #2, #2
  4013a6:	2800      	cmp	r0, #0
  4013a8:	f000 80b7 	beq.w	40151a <udd_ep_in_sent+0x192>
  4013ac:	2803      	cmp	r0, #3
  4013ae:	bf0c      	ite	eq
  4013b0:	2301      	moveq	r3, #1
  4013b2:	2302      	movne	r3, #2
  4013b4:	4563      	cmp	r3, ip
  4013b6:	f340 80b2 	ble.w	40151e <udd_ep_in_sent+0x196>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  4013ba:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4013be:	4a5d      	ldr	r2, [pc, #372]	; (401534 <udd_ep_in_sent+0x1ac>)
  4013c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4013c4:	68da      	ldr	r2, [r3, #12]
  4013c6:	689b      	ldr	r3, [r3, #8]
  4013c8:	429a      	cmp	r2, r3
  4013ca:	d309      	bcc.n	4013e0 <udd_ep_in_sent+0x58>
  4013cc:	eb06 0186 	add.w	r1, r6, r6, lsl #2
  4013d0:	4c58      	ldr	r4, [pc, #352]	; (401534 <udd_ep_in_sent+0x1ac>)
  4013d2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  4013d6:	7c49      	ldrb	r1, [r1, #17]
  4013d8:	f011 0f40 	tst.w	r1, #64	; 0x40
  4013dc:	f000 80a3 	beq.w	401526 <udd_ep_in_sent+0x19e>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  4013e0:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4013e4:	4953      	ldr	r1, [pc, #332]	; (401534 <udd_ep_in_sent+0x1ac>)
  4013e6:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  4013ea:	686c      	ldr	r4, [r5, #4]
  4013ec:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4013ee:	1a99      	subs	r1, r3, r2
	uint32_t pkt_size = ptr_job->size;
  4013f0:	8a2b      	ldrh	r3, [r5, #16]
  4013f2:	f3c3 0709 	ubfx	r7, r3, #0, #10
	if (nb_remain < pkt_size) {
  4013f6:	42b9      	cmp	r1, r7
		pkt_size = nb_remain;
  4013f8:	bf3a      	itte	cc
  4013fa:	460f      	movcc	r7, r1
		is_short_pkt = true;
  4013fc:	f04f 0e01 	movcc.w	lr, #1
	bool is_short_pkt = false;
  401400:	f04f 0e00 	movcs.w	lr, #0
	ptr_job->buf_cnt += pkt_size;
  401404:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401408:	494a      	ldr	r1, [pc, #296]	; (401534 <udd_ep_in_sent+0x1ac>)
  40140a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40140e:	443a      	add	r2, r7
  401410:	60da      	str	r2, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  401412:	2f07      	cmp	r7, #7
  401414:	d92b      	bls.n	40146e <udd_ep_in_sent+0xe6>
  401416:	f104 0308 	add.w	r3, r4, #8
  40141a:	463d      	mov	r5, r7
  40141c:	0082      	lsls	r2, r0, #2
  40141e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401422:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401426:	f813 1c08 	ldrb.w	r1, [r3, #-8]
  40142a:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40142c:	f813 1c07 	ldrb.w	r1, [r3, #-7]
  401430:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401432:	f813 1c06 	ldrb.w	r1, [r3, #-6]
  401436:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401438:	f813 1c05 	ldrb.w	r1, [r3, #-5]
  40143c:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40143e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
  401442:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401444:	f813 1c03 	ldrb.w	r1, [r3, #-3]
  401448:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40144a:	f813 1c02 	ldrb.w	r1, [r3, #-2]
  40144e:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401450:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  401454:	6511      	str	r1, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  401456:	3d08      	subs	r5, #8
  401458:	3308      	adds	r3, #8
  40145a:	2d07      	cmp	r5, #7
  40145c:	d8e3      	bhi.n	401426 <udd_ep_in_sent+0x9e>
  40145e:	f1a7 0308 	sub.w	r3, r7, #8
  401462:	f023 0307 	bic.w	r3, r3, #7
  401466:	3308      	adds	r3, #8
  401468:	441c      	add	r4, r3
  40146a:	f007 0707 	and.w	r7, r7, #7
	for (; pkt_size; pkt_size--) {
  40146e:	b14f      	cbz	r7, 401484 <udd_ep_in_sent+0xfc>
  401470:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401472:	4931      	ldr	r1, [pc, #196]	; (401538 <udd_ep_in_sent+0x1b0>)
  401474:	f109 0914 	add.w	r9, r9, #20
  401478:	f814 2b01 	ldrb.w	r2, [r4], #1
  40147c:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
	for (; pkt_size; pkt_size--) {
  401480:	429c      	cmp	r4, r3
  401482:	d1f9      	bne.n	401478 <udd_ep_in_sent+0xf0>
	ptr_job->bank++;
  401484:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401488:	4a2a      	ldr	r2, [pc, #168]	; (401534 <udd_ep_in_sent+0x1ac>)
  40148a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40148e:	f10c 0c01 	add.w	ip, ip, #1
  401492:	7c5a      	ldrb	r2, [r3, #17]
  401494:	f36c 0283 	bfi	r2, ip, #2, #2
  401498:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  40149a:	f1b8 0f00 	cmp.w	r8, #0
  40149e:	d014      	beq.n	4014ca <udd_ep_in_sent+0x142>
  4014a0:	0080      	lsls	r0, r0, #2
  4014a2:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  4014a6:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  4014aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4014ac:	9301      	str	r3, [sp, #4]
  4014ae:	9b01      	ldr	r3, [sp, #4]
  4014b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4014b4:	9301      	str	r3, [sp, #4]
  4014b6:	9b01      	ldr	r3, [sp, #4]
  4014b8:	f043 0310 	orr.w	r3, r3, #16
  4014bc:	9301      	str	r3, [sp, #4]
  4014be:	9b01      	ldr	r3, [sp, #4]
  4014c0:	6303      	str	r3, [r0, #48]	; 0x30
  4014c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4014c4:	f013 0f10 	tst.w	r3, #16
  4014c8:	d0fb      	beq.n	4014c2 <udd_ep_in_sent+0x13a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  4014ca:	f1be 0f00 	cmp.w	lr, #0
  4014ce:	d008      	beq.n	4014e2 <udd_ep_in_sent+0x15a>
		ptr_job->b_shortpacket = false;
  4014d0:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4014d4:	4a17      	ldr	r2, [pc, #92]	; (401534 <udd_ep_in_sent+0x1ac>)
  4014d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4014da:	7c5a      	ldrb	r2, [r3, #17]
  4014dc:	f36f 1286 	bfc	r2, #6, #1
  4014e0:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  4014e2:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4014e6:	4a13      	ldr	r2, [pc, #76]	; (401534 <udd_ep_in_sent+0x1ac>)
  4014e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4014ec:	68da      	ldr	r2, [r3, #12]
  4014ee:	689b      	ldr	r3, [r3, #8]
  4014f0:	429a      	cmp	r2, r3
  4014f2:	d31a      	bcc.n	40152a <udd_ep_in_sent+0x1a2>
			&& (!ptr_job->b_shortpacket)) {
  4014f4:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4014f8:	4a0e      	ldr	r2, [pc, #56]	; (401534 <udd_ep_in_sent+0x1ac>)
  4014fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4014fe:	7c5b      	ldrb	r3, [r3, #17]
  401500:	f013 0f40 	tst.w	r3, #64	; 0x40
  401504:	d113      	bne.n	40152e <udd_ep_in_sent+0x1a6>
		ptr_job->b_buf_end = true;
  401506:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40150a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  40150e:	7c73      	ldrb	r3, [r6, #17]
  401510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401514:	7473      	strb	r3, [r6, #17]
		return false;
  401516:	2000      	movs	r0, #0
  401518:	e002      	b.n	401520 <udd_ep_in_sent+0x198>
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  40151a:	2301      	movs	r3, #1
  40151c:	e74a      	b.n	4013b4 <udd_ep_in_sent+0x2c>
		return true; // Data pending
  40151e:	2001      	movs	r0, #1
	}
	return true; // Pending
}
  401520:	b003      	add	sp, #12
  401522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
  401526:	2000      	movs	r0, #0
  401528:	e7fa      	b.n	401520 <udd_ep_in_sent+0x198>
	return true; // Pending
  40152a:	2001      	movs	r0, #1
  40152c:	e7f8      	b.n	401520 <udd_ep_in_sent+0x198>
  40152e:	2001      	movs	r0, #1
  401530:	e7f6      	b.n	401520 <udd_ep_in_sent+0x198>
  401532:	bf00      	nop
  401534:	20000da8 	.word	0x20000da8
  401538:	40034000 	.word	0x40034000

0040153c <UDP_Handler>:
{
  40153c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401540:	b09b      	sub	sp, #108	; 0x6c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401542:	4b86      	ldr	r3, [pc, #536]	; (40175c <UDP_Handler+0x220>)
  401544:	4798      	blx	r3
  401546:	b920      	cbnz	r0, 401552 <UDP_Handler+0x16>
  401548:	4b85      	ldr	r3, [pc, #532]	; (401760 <UDP_Handler+0x224>)
  40154a:	69db      	ldr	r3, [r3, #28]
  40154c:	f413 7f80 	tst.w	r3, #256	; 0x100
  401550:	d03b      	beq.n	4015ca <UDP_Handler+0x8e>
	udd_enable_periph_ck();
  401552:	2022      	movs	r0, #34	; 0x22
  401554:	4b83      	ldr	r3, [pc, #524]	; (401764 <UDP_Handler+0x228>)
  401556:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401558:	4b81      	ldr	r3, [pc, #516]	; (401760 <UDP_Handler+0x224>)
  40155a:	699b      	ldr	r3, [r3, #24]
  40155c:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401560:	d004      	beq.n	40156c <UDP_Handler+0x30>
  401562:	4b7f      	ldr	r3, [pc, #508]	; (401760 <UDP_Handler+0x224>)
  401564:	69db      	ldr	r3, [r3, #28]
  401566:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40156a:	d137      	bne.n	4015dc <UDP_Handler+0xa0>
	if (!Is_udd_endpoint_interrupt(0))
  40156c:	4b7c      	ldr	r3, [pc, #496]	; (401760 <UDP_Handler+0x224>)
  40156e:	69db      	ldr	r3, [r3, #28]
  401570:	f013 0f01 	tst.w	r3, #1
  401574:	f000 81b6 	beq.w	4018e4 <UDP_Handler+0x3a8>
	if (Is_udd_setup_received(0)) {
  401578:	4b79      	ldr	r3, [pc, #484]	; (401760 <UDP_Handler+0x224>)
  40157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40157c:	f013 0f04 	tst.w	r3, #4
  401580:	d133      	bne.n	4015ea <UDP_Handler+0xae>
	if (Is_udd_in_sent(0)) {
  401582:	4b77      	ldr	r3, [pc, #476]	; (401760 <UDP_Handler+0x224>)
  401584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401586:	f013 0f01 	tst.w	r3, #1
  40158a:	f040 80c3 	bne.w	401714 <UDP_Handler+0x1d8>
	if (Is_udd_bank0_received(0)) {
  40158e:	4b74      	ldr	r3, [pc, #464]	; (401760 <UDP_Handler+0x224>)
  401590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401592:	f013 0f02 	tst.w	r3, #2
  401596:	f040 80c0 	bne.w	40171a <UDP_Handler+0x1de>
	if (Is_udd_stall(0)) {
  40159a:	4b71      	ldr	r3, [pc, #452]	; (401760 <UDP_Handler+0x224>)
  40159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40159e:	f013 0f08 	tst.w	r3, #8
  4015a2:	f000 819f 	beq.w	4018e4 <UDP_Handler+0x3a8>
		udd_ack_stall(0);
  4015a6:	4a6e      	ldr	r2, [pc, #440]	; (401760 <UDP_Handler+0x224>)
  4015a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015aa:	9300      	str	r3, [sp, #0]
  4015ac:	9b00      	ldr	r3, [sp, #0]
  4015ae:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4015b2:	9300      	str	r3, [sp, #0]
  4015b4:	9b00      	ldr	r3, [sp, #0]
  4015b6:	f023 0308 	bic.w	r3, r3, #8
  4015ba:	9300      	str	r3, [sp, #0]
  4015bc:	9b00      	ldr	r3, [sp, #0]
  4015be:	6313      	str	r3, [r2, #48]	; 0x30
  4015c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015c2:	f013 0f08 	tst.w	r3, #8
  4015c6:	d1fb      	bne.n	4015c0 <UDP_Handler+0x84>
  4015c8:	e005      	b.n	4015d6 <UDP_Handler+0x9a>
  __ASM volatile ("cpsid i" : : : "memory");
  4015ca:	b672      	cpsid	i
  4015cc:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  4015d0:	2200      	movs	r2, #0
  4015d2:	4b65      	ldr	r3, [pc, #404]	; (401768 <UDP_Handler+0x22c>)
  4015d4:	701a      	strb	r2, [r3, #0]
}
  4015d6:	b01b      	add	sp, #108	; 0x6c
  4015d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udd_ack_sof();
  4015dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4015e0:	4b5f      	ldr	r3, [pc, #380]	; (401760 <UDP_Handler+0x224>)
  4015e2:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  4015e4:	4b61      	ldr	r3, [pc, #388]	; (40176c <UDP_Handler+0x230>)
  4015e6:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  4015e8:	e7f5      	b.n	4015d6 <UDP_Handler+0x9a>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  4015ea:	4b61      	ldr	r3, [pc, #388]	; (401770 <UDP_Handler+0x234>)
  4015ec:	781b      	ldrb	r3, [r3, #0]
  4015ee:	b9cb      	cbnz	r3, 401624 <UDP_Handler+0xe8>
	if (8 != udd_byte_count(0)) {
  4015f0:	4b5b      	ldr	r3, [pc, #364]	; (401760 <UDP_Handler+0x224>)
  4015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015f4:	f3c3 430a 	ubfx	r3, r3, #16, #11
  4015f8:	2b08      	cmp	r3, #8
  4015fa:	d018      	beq.n	40162e <UDP_Handler+0xf2>
		udd_ack_setup_received(0);
  4015fc:	4a58      	ldr	r2, [pc, #352]	; (401760 <UDP_Handler+0x224>)
  4015fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401600:	9301      	str	r3, [sp, #4]
  401602:	9b01      	ldr	r3, [sp, #4]
  401604:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401608:	9301      	str	r3, [sp, #4]
  40160a:	9b01      	ldr	r3, [sp, #4]
  40160c:	f023 0304 	bic.w	r3, r3, #4
  401610:	9301      	str	r3, [sp, #4]
  401612:	9b01      	ldr	r3, [sp, #4]
  401614:	6313      	str	r3, [r2, #48]	; 0x30
  401616:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401618:	f013 0f04 	tst.w	r3, #4
  40161c:	d1fb      	bne.n	401616 <UDP_Handler+0xda>
		udd_ctrl_stall_data();
  40161e:	4b55      	ldr	r3, [pc, #340]	; (401774 <UDP_Handler+0x238>)
  401620:	4798      	blx	r3
  401622:	e7d8      	b.n	4015d6 <UDP_Handler+0x9a>
		udd_ctrl_endofrequest();
  401624:	4b54      	ldr	r3, [pc, #336]	; (401778 <UDP_Handler+0x23c>)
  401626:	4798      	blx	r3
		udd_ctrl_init();
  401628:	4b54      	ldr	r3, [pc, #336]	; (40177c <UDP_Handler+0x240>)
  40162a:	4798      	blx	r3
  40162c:	e7e0      	b.n	4015f0 <UDP_Handler+0xb4>
  40162e:	4b54      	ldr	r3, [pc, #336]	; (401780 <UDP_Handler+0x244>)
  401630:	f103 0008 	add.w	r0, r3, #8
			udd_endpoint_fifo_read(0);
  401634:	494a      	ldr	r1, [pc, #296]	; (401760 <UDP_Handler+0x224>)
  401636:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401638:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  40163c:	4283      	cmp	r3, r0
  40163e:	d1fa      	bne.n	401636 <UDP_Handler+0xfa>
	if (udc_process_setup() == false) {
  401640:	4b50      	ldr	r3, [pc, #320]	; (401784 <UDP_Handler+0x248>)
  401642:	4798      	blx	r3
  401644:	b998      	cbnz	r0, 40166e <UDP_Handler+0x132>
		udd_ack_setup_received(0);
  401646:	4a46      	ldr	r2, [pc, #280]	; (401760 <UDP_Handler+0x224>)
  401648:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40164a:	9302      	str	r3, [sp, #8]
  40164c:	9b02      	ldr	r3, [sp, #8]
  40164e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401652:	9302      	str	r3, [sp, #8]
  401654:	9b02      	ldr	r3, [sp, #8]
  401656:	f023 0304 	bic.w	r3, r3, #4
  40165a:	9302      	str	r3, [sp, #8]
  40165c:	9b02      	ldr	r3, [sp, #8]
  40165e:	6313      	str	r3, [r2, #48]	; 0x30
  401660:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401662:	f013 0f04 	tst.w	r3, #4
  401666:	d1fb      	bne.n	401660 <UDP_Handler+0x124>
		udd_ctrl_stall_data();
  401668:	4b42      	ldr	r3, [pc, #264]	; (401774 <UDP_Handler+0x238>)
  40166a:	4798      	blx	r3
  40166c:	e7b3      	b.n	4015d6 <UDP_Handler+0x9a>
	if (Udd_setup_is_in()) {
  40166e:	4b46      	ldr	r3, [pc, #280]	; (401788 <UDP_Handler+0x24c>)
  401670:	f993 3000 	ldrsb.w	r3, [r3]
  401674:	2b00      	cmp	r3, #0
  401676:	db1d      	blt.n	4016b4 <UDP_Handler+0x178>
		udd_ack_setup_received(0);
  401678:	4a39      	ldr	r2, [pc, #228]	; (401760 <UDP_Handler+0x224>)
  40167a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40167c:	9305      	str	r3, [sp, #20]
  40167e:	9b05      	ldr	r3, [sp, #20]
  401680:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401684:	9305      	str	r3, [sp, #20]
  401686:	9b05      	ldr	r3, [sp, #20]
  401688:	f023 0304 	bic.w	r3, r3, #4
  40168c:	9305      	str	r3, [sp, #20]
  40168e:	9b05      	ldr	r3, [sp, #20]
  401690:	6313      	str	r3, [r2, #48]	; 0x30
  401692:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401694:	f013 0f04 	tst.w	r3, #4
  401698:	d1fb      	bne.n	401692 <UDP_Handler+0x156>
		if (0 == udd_g_ctrlreq.req.wLength) {
  40169a:	4b3b      	ldr	r3, [pc, #236]	; (401788 <UDP_Handler+0x24c>)
  40169c:	88db      	ldrh	r3, [r3, #6]
  40169e:	2b00      	cmp	r3, #0
  4016a0:	d035      	beq.n	40170e <UDP_Handler+0x1d2>
		udd_ctrl_prev_payload_nb_trans = 0;
  4016a2:	2300      	movs	r3, #0
  4016a4:	4a39      	ldr	r2, [pc, #228]	; (40178c <UDP_Handler+0x250>)
  4016a6:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4016a8:	4a39      	ldr	r2, [pc, #228]	; (401790 <UDP_Handler+0x254>)
  4016aa:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  4016ac:	2201      	movs	r2, #1
  4016ae:	4b30      	ldr	r3, [pc, #192]	; (401770 <UDP_Handler+0x234>)
  4016b0:	701a      	strb	r2, [r3, #0]
  4016b2:	e790      	b.n	4015d6 <UDP_Handler+0x9a>
		udd_set_endpoint_direction_in(0);
  4016b4:	4a2a      	ldr	r2, [pc, #168]	; (401760 <UDP_Handler+0x224>)
  4016b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016b8:	9303      	str	r3, [sp, #12]
  4016ba:	9b03      	ldr	r3, [sp, #12]
  4016bc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016c0:	9303      	str	r3, [sp, #12]
  4016c2:	9b03      	ldr	r3, [sp, #12]
  4016c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4016c8:	9303      	str	r3, [sp, #12]
  4016ca:	9b03      	ldr	r3, [sp, #12]
  4016cc:	6313      	str	r3, [r2, #48]	; 0x30
  4016ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016d0:	f013 0f80 	tst.w	r3, #128	; 0x80
  4016d4:	d0fb      	beq.n	4016ce <UDP_Handler+0x192>
		udd_ack_setup_received(0);
  4016d6:	4a22      	ldr	r2, [pc, #136]	; (401760 <UDP_Handler+0x224>)
  4016d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016da:	9304      	str	r3, [sp, #16]
  4016dc:	9b04      	ldr	r3, [sp, #16]
  4016de:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016e2:	9304      	str	r3, [sp, #16]
  4016e4:	9b04      	ldr	r3, [sp, #16]
  4016e6:	f023 0304 	bic.w	r3, r3, #4
  4016ea:	9304      	str	r3, [sp, #16]
  4016ec:	9b04      	ldr	r3, [sp, #16]
  4016ee:	6313      	str	r3, [r2, #48]	; 0x30
  4016f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016f2:	f013 0f04 	tst.w	r3, #4
  4016f6:	d1fb      	bne.n	4016f0 <UDP_Handler+0x1b4>
		udd_ctrl_prev_payload_nb_trans = 0;
  4016f8:	2300      	movs	r3, #0
  4016fa:	4a24      	ldr	r2, [pc, #144]	; (40178c <UDP_Handler+0x250>)
  4016fc:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4016fe:	4a24      	ldr	r2, [pc, #144]	; (401790 <UDP_Handler+0x254>)
  401700:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  401702:	2202      	movs	r2, #2
  401704:	4b1a      	ldr	r3, [pc, #104]	; (401770 <UDP_Handler+0x234>)
  401706:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  401708:	4b22      	ldr	r3, [pc, #136]	; (401794 <UDP_Handler+0x258>)
  40170a:	4798      	blx	r3
  40170c:	e763      	b.n	4015d6 <UDP_Handler+0x9a>
			udd_ctrl_send_zlp_in();
  40170e:	4b22      	ldr	r3, [pc, #136]	; (401798 <UDP_Handler+0x25c>)
  401710:	4798      	blx	r3
  401712:	e760      	b.n	4015d6 <UDP_Handler+0x9a>
		udd_ctrl_in_sent();
  401714:	4b1f      	ldr	r3, [pc, #124]	; (401794 <UDP_Handler+0x258>)
  401716:	4798      	blx	r3
  401718:	e75d      	b.n	4015d6 <UDP_Handler+0x9a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  40171a:	4b15      	ldr	r3, [pc, #84]	; (401770 <UDP_Handler+0x234>)
  40171c:	781b      	ldrb	r3, [r3, #0]
  40171e:	2b01      	cmp	r3, #1
  401720:	d03c      	beq.n	40179c <UDP_Handler+0x260>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401722:	2b02      	cmp	r3, #2
  401724:	d004      	beq.n	401730 <UDP_Handler+0x1f4>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  401726:	2b04      	cmp	r3, #4
  401728:	d002      	beq.n	401730 <UDP_Handler+0x1f4>
			udd_ctrl_stall_data();
  40172a:	4b12      	ldr	r3, [pc, #72]	; (401774 <UDP_Handler+0x238>)
  40172c:	4798      	blx	r3
  40172e:	e001      	b.n	401734 <UDP_Handler+0x1f8>
			udd_ctrl_endofrequest();
  401730:	4b11      	ldr	r3, [pc, #68]	; (401778 <UDP_Handler+0x23c>)
  401732:	4798      	blx	r3
		udd_ack_bank0_received(0);
  401734:	4a0a      	ldr	r2, [pc, #40]	; (401760 <UDP_Handler+0x224>)
  401736:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401738:	9306      	str	r3, [sp, #24]
  40173a:	9b06      	ldr	r3, [sp, #24]
  40173c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401740:	9306      	str	r3, [sp, #24]
  401742:	9b06      	ldr	r3, [sp, #24]
  401744:	f023 0302 	bic.w	r3, r3, #2
  401748:	9306      	str	r3, [sp, #24]
  40174a:	9b06      	ldr	r3, [sp, #24]
  40174c:	6313      	str	r3, [r2, #48]	; 0x30
  40174e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401750:	f013 0f02 	tst.w	r3, #2
  401754:	d1fb      	bne.n	40174e <UDP_Handler+0x212>
		udd_ctrl_init();
  401756:	4b09      	ldr	r3, [pc, #36]	; (40177c <UDP_Handler+0x240>)
  401758:	4798      	blx	r3
  40175a:	e73c      	b.n	4015d6 <UDP_Handler+0x9a>
  40175c:	00403399 	.word	0x00403399
  401760:	40034000 	.word	0x40034000
  401764:	0040327d 	.word	0x0040327d
  401768:	20000200 	.word	0x20000200
  40176c:	00400a09 	.word	0x00400a09
  401770:	20000da6 	.word	0x20000da6
  401774:	0040103d 	.word	0x0040103d
  401778:	004010ad 	.word	0x004010ad
  40177c:	00401025 	.word	0x00401025
  401780:	20000e33 	.word	0x20000e33
  401784:	00400a49 	.word	0x00400a49
  401788:	20000e34 	.word	0x20000e34
  40178c:	20000da4 	.word	0x20000da4
  401790:	20000da2 	.word	0x20000da2
  401794:	004010bd 	.word	0x004010bd
  401798:	00401075 	.word	0x00401075
	nb_data = udd_byte_count(0);
  40179c:	4b93      	ldr	r3, [pc, #588]	; (4019ec <UDP_Handler+0x4b0>)
  40179e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4017a0:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  4017a4:	4b92      	ldr	r3, [pc, #584]	; (4019f0 <UDP_Handler+0x4b4>)
  4017a6:	899b      	ldrh	r3, [r3, #12]
  4017a8:	4a92      	ldr	r2, [pc, #584]	; (4019f4 <UDP_Handler+0x4b8>)
  4017aa:	8815      	ldrh	r5, [r2, #0]
  4017ac:	186a      	adds	r2, r5, r1
  4017ae:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
  4017b0:	bfbc      	itt	lt
  4017b2:	1b5b      	sublt	r3, r3, r5
  4017b4:	b299      	uxthlt	r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4017b6:	4b8e      	ldr	r3, [pc, #568]	; (4019f0 <UDP_Handler+0x4b4>)
  4017b8:	6898      	ldr	r0, [r3, #8]
  4017ba:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  4017bc:	b171      	cbz	r1, 4017dc <UDP_Handler+0x2a0>
  4017be:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  4017c0:	4c8a      	ldr	r4, [pc, #552]	; (4019ec <UDP_Handler+0x4b0>)
  4017c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4017c4:	f802 3b01 	strb.w	r3, [r2], #1
	for (i = 0; i < nb_data; i++) {
  4017c8:	1a13      	subs	r3, r2, r0
  4017ca:	b2db      	uxtb	r3, r3
  4017cc:	428b      	cmp	r3, r1
  4017ce:	d3f8      	bcc.n	4017c2 <UDP_Handler+0x286>
	udd_ctrl_payload_nb_trans += nb_data;
  4017d0:	440d      	add	r5, r1
  4017d2:	b2ad      	uxth	r5, r5
  4017d4:	4b87      	ldr	r3, [pc, #540]	; (4019f4 <UDP_Handler+0x4b8>)
  4017d6:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  4017d8:	2940      	cmp	r1, #64	; 0x40
  4017da:	d01a      	beq.n	401812 <UDP_Handler+0x2d6>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  4017dc:	4b84      	ldr	r3, [pc, #528]	; (4019f0 <UDP_Handler+0x4b4>)
  4017de:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  4017e0:	695b      	ldr	r3, [r3, #20]
  4017e2:	b113      	cbz	r3, 4017ea <UDP_Handler+0x2ae>
			if (!udd_g_ctrlreq.over_under_run()) {
  4017e4:	4798      	blx	r3
  4017e6:	2800      	cmp	r0, #0
  4017e8:	d030      	beq.n	40184c <UDP_Handler+0x310>
		udd_ack_bank0_received(0);
  4017ea:	4a80      	ldr	r2, [pc, #512]	; (4019ec <UDP_Handler+0x4b0>)
  4017ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017ee:	9308      	str	r3, [sp, #32]
  4017f0:	9b08      	ldr	r3, [sp, #32]
  4017f2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4017f6:	9308      	str	r3, [sp, #32]
  4017f8:	9b08      	ldr	r3, [sp, #32]
  4017fa:	f023 0302 	bic.w	r3, r3, #2
  4017fe:	9308      	str	r3, [sp, #32]
  401800:	9b08      	ldr	r3, [sp, #32]
  401802:	6313      	str	r3, [r2, #48]	; 0x30
  401804:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401806:	f013 0f02 	tst.w	r3, #2
  40180a:	d1fb      	bne.n	401804 <UDP_Handler+0x2c8>
		udd_ctrl_send_zlp_in();
  40180c:	4b7a      	ldr	r3, [pc, #488]	; (4019f8 <UDP_Handler+0x4bc>)
  40180e:	4798      	blx	r3
  401810:	e6e1      	b.n	4015d6 <UDP_Handler+0x9a>
			|| (udd_g_ctrlreq.req.wLength <=
  401812:	4b77      	ldr	r3, [pc, #476]	; (4019f0 <UDP_Handler+0x4b4>)
  401814:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  401816:	4b79      	ldr	r3, [pc, #484]	; (4019fc <UDP_Handler+0x4c0>)
  401818:	881b      	ldrh	r3, [r3, #0]
  40181a:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
  40181c:	429a      	cmp	r2, r3
  40181e:	dddd      	ble.n	4017dc <UDP_Handler+0x2a0>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  401820:	4b73      	ldr	r3, [pc, #460]	; (4019f0 <UDP_Handler+0x4b4>)
  401822:	899b      	ldrh	r3, [r3, #12]
  401824:	42ab      	cmp	r3, r5
  401826:	d025      	beq.n	401874 <UDP_Handler+0x338>
	udd_ack_bank0_received(0);
  401828:	4a70      	ldr	r2, [pc, #448]	; (4019ec <UDP_Handler+0x4b0>)
  40182a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40182c:	930b      	str	r3, [sp, #44]	; 0x2c
  40182e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401830:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401834:	930b      	str	r3, [sp, #44]	; 0x2c
  401836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401838:	f023 0302 	bic.w	r3, r3, #2
  40183c:	930b      	str	r3, [sp, #44]	; 0x2c
  40183e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401840:	6313      	str	r3, [r2, #48]	; 0x30
  401842:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401844:	f013 0f02 	tst.w	r3, #2
  401848:	d1fb      	bne.n	401842 <UDP_Handler+0x306>
  40184a:	e6c4      	b.n	4015d6 <UDP_Handler+0x9a>
				udd_ctrl_stall_data();
  40184c:	4b6c      	ldr	r3, [pc, #432]	; (401a00 <UDP_Handler+0x4c4>)
  40184e:	4798      	blx	r3
				udd_ack_bank0_received(0);
  401850:	4a66      	ldr	r2, [pc, #408]	; (4019ec <UDP_Handler+0x4b0>)
  401852:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401854:	9307      	str	r3, [sp, #28]
  401856:	9b07      	ldr	r3, [sp, #28]
  401858:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40185c:	9307      	str	r3, [sp, #28]
  40185e:	9b07      	ldr	r3, [sp, #28]
  401860:	f023 0302 	bic.w	r3, r3, #2
  401864:	9307      	str	r3, [sp, #28]
  401866:	9b07      	ldr	r3, [sp, #28]
  401868:	6313      	str	r3, [r2, #48]	; 0x30
  40186a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40186c:	f013 0f02 	tst.w	r3, #2
  401870:	d1fb      	bne.n	40186a <UDP_Handler+0x32e>
  401872:	e6b0      	b.n	4015d6 <UDP_Handler+0x9a>
		if (!udd_g_ctrlreq.over_under_run) {
  401874:	4b5e      	ldr	r3, [pc, #376]	; (4019f0 <UDP_Handler+0x4b4>)
  401876:	695b      	ldr	r3, [r3, #20]
  401878:	b153      	cbz	r3, 401890 <UDP_Handler+0x354>
		if (!udd_g_ctrlreq.over_under_run()) {
  40187a:	4798      	blx	r3
  40187c:	b1e8      	cbz	r0, 4018ba <UDP_Handler+0x37e>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  40187e:	495f      	ldr	r1, [pc, #380]	; (4019fc <UDP_Handler+0x4c0>)
  401880:	4a5c      	ldr	r2, [pc, #368]	; (4019f4 <UDP_Handler+0x4b8>)
  401882:	880b      	ldrh	r3, [r1, #0]
  401884:	8810      	ldrh	r0, [r2, #0]
  401886:	4403      	add	r3, r0
  401888:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  40188a:	2300      	movs	r3, #0
  40188c:	8013      	strh	r3, [r2, #0]
  40188e:	e7cb      	b.n	401828 <UDP_Handler+0x2ec>
			udd_ctrl_stall_data();
  401890:	4b5b      	ldr	r3, [pc, #364]	; (401a00 <UDP_Handler+0x4c4>)
  401892:	4798      	blx	r3
			udd_ack_bank0_received(0);
  401894:	4a55      	ldr	r2, [pc, #340]	; (4019ec <UDP_Handler+0x4b0>)
  401896:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401898:	9309      	str	r3, [sp, #36]	; 0x24
  40189a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40189c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018a0:	9309      	str	r3, [sp, #36]	; 0x24
  4018a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4018a4:	f023 0302 	bic.w	r3, r3, #2
  4018a8:	9309      	str	r3, [sp, #36]	; 0x24
  4018aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4018ac:	6313      	str	r3, [r2, #48]	; 0x30
  4018ae:	4613      	mov	r3, r2
  4018b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4018b2:	f012 0f02 	tst.w	r2, #2
  4018b6:	d1fb      	bne.n	4018b0 <UDP_Handler+0x374>
  4018b8:	e68d      	b.n	4015d6 <UDP_Handler+0x9a>
			udd_ctrl_stall_data();
  4018ba:	4b51      	ldr	r3, [pc, #324]	; (401a00 <UDP_Handler+0x4c4>)
  4018bc:	4798      	blx	r3
			udd_ack_bank0_received(0);
  4018be:	4a4b      	ldr	r2, [pc, #300]	; (4019ec <UDP_Handler+0x4b0>)
  4018c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018c2:	930a      	str	r3, [sp, #40]	; 0x28
  4018c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4018c6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018ca:	930a      	str	r3, [sp, #40]	; 0x28
  4018cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4018ce:	f023 0302 	bic.w	r3, r3, #2
  4018d2:	930a      	str	r3, [sp, #40]	; 0x28
  4018d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4018d6:	6313      	str	r3, [r2, #48]	; 0x30
  4018d8:	4613      	mov	r3, r2
  4018da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4018dc:	f012 0f02 	tst.w	r2, #2
  4018e0:	d1fb      	bne.n	4018da <UDP_Handler+0x39e>
  4018e2:	e678      	b.n	4015d6 <UDP_Handler+0x9a>
  4018e4:	4a47      	ldr	r2, [pc, #284]	; (401a04 <UDP_Handler+0x4c8>)
	for (i = 0; i < nb_data; i++) {
  4018e6:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4018e8:	f8df e100 	ldr.w	lr, [pc, #256]	; 4019ec <UDP_Handler+0x4b0>
  4018ec:	4618      	mov	r0, r3
  4018ee:	e17f      	b.n	401bf0 <UDP_Handler+0x6b4>
	uint32_t pkt_size = ptr_job->size;
  4018f0:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  4018f4:	4b43      	ldr	r3, [pc, #268]	; (401a04 <UDP_Handler+0x4c8>)
  4018f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4018fa:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  4018fe:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	nb_data = udd_byte_count(ep);
  401902:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401904:	f3c3 490a 	ubfx	r9, r3, #16, #11
	if (nb_data > 0) {
  401908:	f1b9 0f00 	cmp.w	r9, #0
  40190c:	f000 81df 	beq.w	401cce <UDP_Handler+0x792>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401910:	4b3c      	ldr	r3, [pc, #240]	; (401a04 <UDP_Handler+0x4c8>)
  401912:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401916:	f8d3 e008 	ldr.w	lr, [r3, #8]
  40191a:	68da      	ldr	r2, [r3, #12]
  40191c:	ebae 0002 	sub.w	r0, lr, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401920:	6859      	ldr	r1, [r3, #4]
		if (nb_data >= nb_remain) {
  401922:	4548      	cmp	r0, r9
  401924:	f240 81c7 	bls.w	401cb6 <UDP_Handler+0x77a>
		ptr_job->buf_cnt += nb_data;
  401928:	eb07 0087 	add.w	r0, r7, r7, lsl #2
  40192c:	4b35      	ldr	r3, [pc, #212]	; (401a04 <UDP_Handler+0x4c8>)
  40192e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  401932:	eb02 0009 	add.w	r0, r2, r9
  401936:	60d8      	str	r0, [r3, #12]
	nb_data = udd_byte_count(ep);
  401938:	4648      	mov	r0, r9
	bool b_full = false, b_short;
  40193a:	f04f 0b00 	mov.w	fp, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  40193e:	4411      	add	r1, r2
  401940:	460b      	mov	r3, r1
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  401942:	6d22      	ldr	r2, [r4, #80]	; 0x50
  401944:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < nb_data; i++) {
  401948:	1a5a      	subs	r2, r3, r1
  40194a:	4282      	cmp	r2, r0
  40194c:	d3f9      	bcc.n	401942 <UDP_Handler+0x406>
	udd_ep_ack_out_received(ep);
  40194e:	4630      	mov	r0, r6
  401950:	4b2d      	ldr	r3, [pc, #180]	; (401a08 <UDP_Handler+0x4cc>)
  401952:	4798      	blx	r3
	if ((b_full || b_short) &&
  401954:	f1bb 0f00 	cmp.w	fp, #0
  401958:	f000 81bc 	beq.w	401cd4 <UDP_Handler+0x798>
			!Is_udd_endpoint_stall_requested(ep)) {
  40195c:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  40195e:	f013 0f20 	tst.w	r3, #32
  401962:	f47f ae38 	bne.w	4015d6 <UDP_Handler+0x9a>
		udd_disable_endpoint_interrupt(ep);
  401966:	4b21      	ldr	r3, [pc, #132]	; (4019ec <UDP_Handler+0x4b0>)
  401968:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40196a:	4b26      	ldr	r3, [pc, #152]	; (401a04 <UDP_Handler+0x4c8>)
  40196c:	00ba      	lsls	r2, r7, #2
  40196e:	19d1      	adds	r1, r2, r7
  401970:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401974:	68cb      	ldr	r3, [r1, #12]
  401976:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401978:	4632      	mov	r2, r6
  40197a:	2100      	movs	r1, #0
  40197c:	4640      	mov	r0, r8
  40197e:	4b23      	ldr	r3, [pc, #140]	; (401a0c <UDP_Handler+0x4d0>)
  401980:	4798      	blx	r3
  401982:	e628      	b.n	4015d6 <UDP_Handler+0x9a>
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {

			ptr_job->bank--;
  401984:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401988:	4b1e      	ldr	r3, [pc, #120]	; (401a04 <UDP_Handler+0x4c8>)
  40198a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  40198e:	7c53      	ldrb	r3, [r2, #17]
  401990:	f3c3 0181 	ubfx	r1, r3, #2, #2
  401994:	3103      	adds	r1, #3
  401996:	f361 0383 	bfi	r3, r1, #2, #2
  40199a:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  40199c:	7c53      	ldrb	r3, [r2, #17]
  40199e:	f013 0f20 	tst.w	r3, #32
  4019a2:	d05f      	beq.n	401a64 <UDP_Handler+0x528>
				if (ptr_job->bank) {
  4019a4:	f013 0f0c 	tst.w	r3, #12
  4019a8:	d032      	beq.n	401a10 <UDP_Handler+0x4d4>
					// Send remaining
					udd_set_transmit_ready(ep);
  4019aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4019ac:	930c      	str	r3, [sp, #48]	; 0x30
  4019ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4019b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4019b4:	930c      	str	r3, [sp, #48]	; 0x30
  4019b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4019b8:	f043 0310 	orr.w	r3, r3, #16
  4019bc:	930c      	str	r3, [sp, #48]	; 0x30
  4019be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4019c0:	6323      	str	r3, [r4, #48]	; 0x30
  4019c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4019c4:	f013 0f10 	tst.w	r3, #16
  4019c8:	d0fb      	beq.n	4019c2 <UDP_Handler+0x486>
					udd_ack_in_sent(ep);
  4019ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4019cc:	930d      	str	r3, [sp, #52]	; 0x34
  4019ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4019d0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4019d4:	930d      	str	r3, [sp, #52]	; 0x34
  4019d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4019d8:	f023 0301 	bic.w	r3, r3, #1
  4019dc:	930d      	str	r3, [sp, #52]	; 0x34
  4019de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4019e0:	6323      	str	r3, [r4, #48]	; 0x30
  4019e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4019e4:	f013 0f01 	tst.w	r3, #1
  4019e8:	d1fb      	bne.n	4019e2 <UDP_Handler+0x4a6>
  4019ea:	e5f4      	b.n	4015d6 <UDP_Handler+0x9a>
  4019ec:	40034000 	.word	0x40034000
  4019f0:	20000e34 	.word	0x20000e34
  4019f4:	20000da2 	.word	0x20000da2
  4019f8:	00401075 	.word	0x00401075
  4019fc:	20000da4 	.word	0x20000da4
  401a00:	0040103d 	.word	0x0040103d
  401a04:	20000da8 	.word	0x20000da8
  401a08:	004012b5 	.word	0x004012b5
  401a0c:	00401275 	.word	0x00401275
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401a10:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a12:	930e      	str	r3, [sp, #56]	; 0x38
  401a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401a16:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a1a:	930e      	str	r3, [sp, #56]	; 0x38
  401a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401a1e:	f023 0301 	bic.w	r3, r3, #1
  401a22:	930e      	str	r3, [sp, #56]	; 0x38
  401a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401a26:	6323      	str	r3, [r4, #48]	; 0x30
  401a28:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a2a:	f013 0f01 	tst.w	r3, #1
  401a2e:	d1fb      	bne.n	401a28 <UDP_Handler+0x4ec>
					// Enable stall
					udd_enable_stall_handshake(ep);
  401a30:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a32:	930f      	str	r3, [sp, #60]	; 0x3c
  401a34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401a36:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a3a:	930f      	str	r3, [sp, #60]	; 0x3c
  401a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401a3e:	f043 0320 	orr.w	r3, r3, #32
  401a42:	930f      	str	r3, [sp, #60]	; 0x3c
  401a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401a46:	6323      	str	r3, [r4, #48]	; 0x30
  401a48:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a4a:	f013 0f20 	tst.w	r3, #32
  401a4e:	d0fb      	beq.n	401a48 <UDP_Handler+0x50c>
					// Halt executed
					ptr_job->b_stall_requested = false;
  401a50:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  401a54:	4ba1      	ldr	r3, [pc, #644]	; (401cdc <UDP_Handler+0x7a0>)
  401a56:	eb03 0387 	add.w	r3, r3, r7, lsl #2
  401a5a:	7c5a      	ldrb	r2, [r3, #17]
  401a5c:	f36f 1245 	bfc	r2, #5, #1
  401a60:	745a      	strb	r2, [r3, #17]
  401a62:	e5b8      	b.n	4015d6 <UDP_Handler+0x9a>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  401a64:	f013 0f80 	tst.w	r3, #128	; 0x80
  401a68:	d138      	bne.n	401adc <UDP_Handler+0x5a0>
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                udd_disable_endpoint_interrupt(ep);
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  401a6a:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401a6e:	4b9b      	ldr	r3, [pc, #620]	; (401cdc <UDP_Handler+0x7a0>)
  401a70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401a74:	68da      	ldr	r2, [r3, #12]
  401a76:	689b      	ldr	r3, [r3, #8]
  401a78:	429a      	cmp	r2, r3
  401a7a:	d341      	bcc.n	401b00 <UDP_Handler+0x5c4>
					!ptr_job->b_shortpacket &&
  401a7c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401a80:	4b96      	ldr	r3, [pc, #600]	; (401cdc <UDP_Handler+0x7a0>)
  401a82:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401a86:	7c5b      	ldrb	r3, [r3, #17]
  401a88:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  401a8c:	d138      	bne.n	401b00 <UDP_Handler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401a8e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401a92:	fab3 f383 	clz	r3, r3
  401a96:	095b      	lsrs	r3, r3, #5
  401a98:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
  401a9a:	b672      	cpsid	i
  401a9c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401aa0:	2200      	movs	r2, #0
  401aa2:	4b8f      	ldr	r3, [pc, #572]	; (401ce0 <UDP_Handler+0x7a4>)
  401aa4:	701a      	strb	r2, [r3, #0]
	return flags;
  401aa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  401aa8:	4a8e      	ldr	r2, [pc, #568]	; (401ce4 <UDP_Handler+0x7a8>)
  401aaa:	6155      	str	r5, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  401aac:	b12b      	cbz	r3, 401aba <UDP_Handler+0x57e>
		cpu_irq_enable();
  401aae:	2201      	movs	r2, #1
  401ab0:	4b8b      	ldr	r3, [pc, #556]	; (401ce0 <UDP_Handler+0x7a4>)
  401ab2:	701a      	strb	r2, [r3, #0]
  401ab4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401ab8:	b662      	cpsie	i
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  401aba:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401abc:	9311      	str	r3, [sp, #68]	; 0x44
  401abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401ac0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ac4:	9311      	str	r3, [sp, #68]	; 0x44
  401ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401ac8:	f023 0301 	bic.w	r3, r3, #1
  401acc:	9311      	str	r3, [sp, #68]	; 0x44
  401ace:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401ad0:	6323      	str	r3, [r4, #48]	; 0x30
  401ad2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401ad4:	f013 0f01 	tst.w	r3, #1
  401ad8:	d1fb      	bne.n	401ad2 <UDP_Handler+0x596>
  401ada:	e57c      	b.n	4015d6 <UDP_Handler+0x9a>
				ptr_job->b_buf_end = false;
  401adc:	2314      	movs	r3, #20
  401ade:	4a7f      	ldr	r2, [pc, #508]	; (401cdc <UDP_Handler+0x7a0>)
  401ae0:	fb03 2307 	mla	r3, r3, r7, r2
  401ae4:	7c59      	ldrb	r1, [r3, #17]
  401ae6:	f36f 11c7 	bfc	r1, #7, #1
  401aea:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401aec:	68da      	ldr	r2, [r3, #12]
  401aee:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  401af0:	4b7c      	ldr	r3, [pc, #496]	; (401ce4 <UDP_Handler+0x7a8>)
  401af2:	615d      	str	r5, [r3, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401af4:	4632      	mov	r2, r6
  401af6:	2100      	movs	r1, #0
  401af8:	4640      	mov	r0, r8
  401afa:	4b7b      	ldr	r3, [pc, #492]	; (401ce8 <UDP_Handler+0x7ac>)
  401afc:	4798      	blx	r3
  401afe:	e7b4      	b.n	401a6a <UDP_Handler+0x52e>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  401b00:	2e00      	cmp	r6, #0
  401b02:	d05b      	beq.n	401bbc <UDP_Handler+0x680>
  401b04:	2e03      	cmp	r6, #3
  401b06:	d059      	beq.n	401bbc <UDP_Handler+0x680>
					&& ptr_job->bank > 0) {
  401b08:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401b0c:	4b73      	ldr	r3, [pc, #460]	; (401cdc <UDP_Handler+0x7a0>)
  401b0e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401b12:	7c5b      	ldrb	r3, [r3, #17]
  401b14:	f013 0f0c 	tst.w	r3, #12
  401b18:	d024      	beq.n	401b64 <UDP_Handler+0x628>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  401b1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b1c:	9312      	str	r3, [sp, #72]	; 0x48
  401b1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401b20:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b24:	9312      	str	r3, [sp, #72]	; 0x48
  401b26:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401b28:	f043 0310 	orr.w	r3, r3, #16
  401b2c:	9312      	str	r3, [sp, #72]	; 0x48
  401b2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401b30:	6323      	str	r3, [r4, #48]	; 0x30
  401b32:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b34:	f013 0f10 	tst.w	r3, #16
  401b38:	d0fb      	beq.n	401b32 <UDP_Handler+0x5f6>
				udd_ack_in_sent(ep);
  401b3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b3c:	9313      	str	r3, [sp, #76]	; 0x4c
  401b3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401b40:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b44:	9313      	str	r3, [sp, #76]	; 0x4c
  401b46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401b48:	f023 0301 	bic.w	r3, r3, #1
  401b4c:	9313      	str	r3, [sp, #76]	; 0x4c
  401b4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401b50:	6323      	str	r3, [r4, #48]	; 0x30
  401b52:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b54:	f013 0f01 	tst.w	r3, #1
  401b58:	d1fb      	bne.n	401b52 <UDP_Handler+0x616>
				udd_ep_in_sent(ep, false);
  401b5a:	2100      	movs	r1, #0
  401b5c:	4630      	mov	r0, r6
  401b5e:	4b63      	ldr	r3, [pc, #396]	; (401cec <UDP_Handler+0x7b0>)
  401b60:	4798      	blx	r3
  401b62:	e538      	b.n	4015d6 <UDP_Handler+0x9a>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  401b64:	2101      	movs	r1, #1
  401b66:	4630      	mov	r0, r6
  401b68:	4b60      	ldr	r3, [pc, #384]	; (401cec <UDP_Handler+0x7b0>)
  401b6a:	4798      	blx	r3
  401b6c:	b1a0      	cbz	r0, 401b98 <UDP_Handler+0x65c>
					ptr_job->b_buf_end = false;
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                    udd_disable_endpoint_interrupt(ep);
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
				}
				udd_ack_in_sent(ep);
  401b6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b70:	9314      	str	r3, [sp, #80]	; 0x50
  401b72:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401b74:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b78:	9314      	str	r3, [sp, #80]	; 0x50
  401b7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401b7c:	f023 0301 	bic.w	r3, r3, #1
  401b80:	9314      	str	r3, [sp, #80]	; 0x50
  401b82:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401b84:	6323      	str	r3, [r4, #48]	; 0x30
  401b86:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b88:	f013 0f01 	tst.w	r3, #1
  401b8c:	d1fb      	bne.n	401b86 <UDP_Handler+0x64a>
				udd_ep_in_sent(ep, false);
  401b8e:	2100      	movs	r1, #0
  401b90:	4630      	mov	r0, r6
  401b92:	4b56      	ldr	r3, [pc, #344]	; (401cec <UDP_Handler+0x7b0>)
  401b94:	4798      	blx	r3
  401b96:	e51e      	b.n	4015d6 <UDP_Handler+0x9a>
					ptr_job->b_buf_end = false;
  401b98:	2314      	movs	r3, #20
  401b9a:	4a50      	ldr	r2, [pc, #320]	; (401cdc <UDP_Handler+0x7a0>)
  401b9c:	fb03 2707 	mla	r7, r3, r7, r2
  401ba0:	7c7a      	ldrb	r2, [r7, #17]
  401ba2:	f36f 12c7 	bfc	r2, #7, #1
  401ba6:	747a      	strb	r2, [r7, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401ba8:	68fb      	ldr	r3, [r7, #12]
  401baa:	60bb      	str	r3, [r7, #8]
                    udd_disable_endpoint_interrupt(ep);
  401bac:	4b4d      	ldr	r3, [pc, #308]	; (401ce4 <UDP_Handler+0x7a8>)
  401bae:	615d      	str	r5, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401bb0:	4632      	mov	r2, r6
  401bb2:	2100      	movs	r1, #0
  401bb4:	4640      	mov	r0, r8
  401bb6:	4b4c      	ldr	r3, [pc, #304]	; (401ce8 <UDP_Handler+0x7ac>)
  401bb8:	4798      	blx	r3
  401bba:	e7d8      	b.n	401b6e <UDP_Handler+0x632>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  401bbc:	2101      	movs	r1, #1
  401bbe:	4630      	mov	r0, r6
  401bc0:	4b4a      	ldr	r3, [pc, #296]	; (401cec <UDP_Handler+0x7b0>)
  401bc2:	4798      	blx	r3
				udd_ack_in_sent(ep);
  401bc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401bc6:	9315      	str	r3, [sp, #84]	; 0x54
  401bc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401bca:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401bce:	9315      	str	r3, [sp, #84]	; 0x54
  401bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401bd2:	f023 0301 	bic.w	r3, r3, #1
  401bd6:	9315      	str	r3, [sp, #84]	; 0x54
  401bd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401bda:	6323      	str	r3, [r4, #48]	; 0x30
  401bdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401bde:	f013 0f01 	tst.w	r3, #1
  401be2:	d1fb      	bne.n	401bdc <UDP_Handler+0x6a0>
  401be4:	e4f7      	b.n	4015d6 <UDP_Handler+0x9a>
  401be6:	3301      	adds	r3, #1
  401be8:	3214      	adds	r2, #20
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  401bea:	2b04      	cmp	r3, #4
  401bec:	f000 8086 	beq.w	401cfc <UDP_Handler+0x7c0>
  401bf0:	b2de      	uxtb	r6, r3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401bf2:	f8de 1018 	ldr.w	r1, [lr, #24]
  401bf6:	fa00 f503 	lsl.w	r5, r0, r3
  401bfa:	4229      	tst	r1, r5
  401bfc:	d0f3      	beq.n	401be6 <UDP_Handler+0x6aa>
  401bfe:	1e5f      	subs	r7, r3, #1
		ptr_job = &udd_ep_job[ep - 1];
  401c00:	4690      	mov	r8, r2
  401c02:	009c      	lsls	r4, r3, #2
  401c04:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  401c08:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		if (Is_udd_any_bank_received(ep)) {
  401c0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401c0e:	f011 0f42 	tst.w	r1, #66	; 0x42
  401c12:	f47f ae6d 	bne.w	4018f0 <UDP_Handler+0x3b4>
		if (Is_udd_in_sent(ep)) {
  401c16:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401c18:	f011 0f01 	tst.w	r1, #1
  401c1c:	f47f aeb2 	bne.w	401984 <UDP_Handler+0x448>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  401c20:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401c22:	f011 0f08 	tst.w	r1, #8
  401c26:	d0de      	beq.n	401be6 <UDP_Handler+0x6aa>
			udd_ack_stall(ep);
  401c28:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c2a:	9316      	str	r3, [sp, #88]	; 0x58
  401c2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401c2e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c32:	9316      	str	r3, [sp, #88]	; 0x58
  401c34:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401c36:	f023 0308 	bic.w	r3, r3, #8
  401c3a:	9316      	str	r3, [sp, #88]	; 0x58
  401c3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401c3e:	6323      	str	r3, [r4, #48]	; 0x30
  401c40:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c42:	f013 0f08 	tst.w	r3, #8
  401c46:	d1fb      	bne.n	401c40 <UDP_Handler+0x704>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  401c48:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401c52:	f43f acc0 	beq.w	4015d6 <UDP_Handler+0x9a>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  401c56:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c58:	e4bd      	b.n	4015d6 <UDP_Handler+0x9a>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401c5a:	4b22      	ldr	r3, [pc, #136]	; (401ce4 <UDP_Handler+0x7a8>)
  401c5c:	69db      	ldr	r3, [r3, #28]
  401c5e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401c62:	d050      	beq.n	401d06 <UDP_Handler+0x7ca>
		udd_ack_wakeups();
  401c64:	4c1f      	ldr	r4, [pc, #124]	; (401ce4 <UDP_Handler+0x7a8>)
  401c66:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  401c6a:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  401c6c:	6163      	str	r3, [r4, #20]
		udd_sleep_mode(true); // Enter in IDLE mode
  401c6e:	2001      	movs	r0, #1
  401c70:	4b1f      	ldr	r3, [pc, #124]	; (401cf0 <UDP_Handler+0x7b4>)
  401c72:	4798      	blx	r3
		udd_ack_suspend();
  401c74:	f44f 7380 	mov.w	r3, #256	; 0x100
  401c78:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  401c7a:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  401c7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401c80:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  401c82:	e4a8      	b.n	4015d6 <UDP_Handler+0x9a>
		udd_ack_suspend();
  401c84:	4b17      	ldr	r3, [pc, #92]	; (401ce4 <UDP_Handler+0x7a8>)
  401c86:	f44f 7280 	mov.w	r2, #256	; 0x100
  401c8a:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  401c8c:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  401c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401c92:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  401c94:	f44f 7200 	mov.w	r2, #512	; 0x200
  401c98:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  401c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401c9e:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  401ca0:	2022      	movs	r0, #34	; 0x22
  401ca2:	4b14      	ldr	r3, [pc, #80]	; (401cf4 <UDP_Handler+0x7b8>)
  401ca4:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
  401ca6:	2000      	movs	r0, #0
  401ca8:	4b11      	ldr	r3, [pc, #68]	; (401cf0 <UDP_Handler+0x7b4>)
  401caa:	4798      	blx	r3
		goto udd_interrupt_end;
  401cac:	e493      	b.n	4015d6 <UDP_Handler+0x9a>
	udd_ep_ack_out_received(ep);
  401cae:	4630      	mov	r0, r6
  401cb0:	4b11      	ldr	r3, [pc, #68]	; (401cf8 <UDP_Handler+0x7bc>)
  401cb2:	4798      	blx	r3
  401cb4:	e652      	b.n	40195c <UDP_Handler+0x420>
		ptr_job->buf_cnt += nb_data;
  401cb6:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
  401cba:	4b08      	ldr	r3, [pc, #32]	; (401cdc <UDP_Handler+0x7a0>)
  401cbc:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  401cc0:	f8c3 e00c 	str.w	lr, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  401cc4:	2800      	cmp	r0, #0
  401cc6:	d0f2      	beq.n	401cae <UDP_Handler+0x772>
			b_full = true;
  401cc8:	f04f 0b01 	mov.w	fp, #1
  401ccc:	e637      	b.n	40193e <UDP_Handler+0x402>
	udd_ep_ack_out_received(ep);
  401cce:	4630      	mov	r0, r6
  401cd0:	4b09      	ldr	r3, [pc, #36]	; (401cf8 <UDP_Handler+0x7bc>)
  401cd2:	4798      	blx	r3
	if ((b_full || b_short) &&
  401cd4:	45ca      	cmp	sl, r9
  401cd6:	f63f ae41 	bhi.w	40195c <UDP_Handler+0x420>
  401cda:	e47c      	b.n	4015d6 <UDP_Handler+0x9a>
  401cdc:	20000da8 	.word	0x20000da8
  401ce0:	20000200 	.word	0x20000200
  401ce4:	40034000 	.word	0x40034000
  401ce8:	00401275 	.word	0x00401275
  401cec:	00401389 	.word	0x00401389
  401cf0:	00400f81 	.word	0x00400f81
  401cf4:	004032d1 	.word	0x004032d1
  401cf8:	004012b5 	.word	0x004012b5
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401cfc:	4b4b      	ldr	r3, [pc, #300]	; (401e2c <UDP_Handler+0x8f0>)
  401cfe:	699b      	ldr	r3, [r3, #24]
  401d00:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401d04:	d1a9      	bne.n	401c5a <UDP_Handler+0x71e>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401d06:	4b49      	ldr	r3, [pc, #292]	; (401e2c <UDP_Handler+0x8f0>)
  401d08:	699b      	ldr	r3, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401d0a:	f413 7f00 	tst.w	r3, #512	; 0x200
  401d0e:	d004      	beq.n	401d1a <UDP_Handler+0x7de>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401d10:	4b46      	ldr	r3, [pc, #280]	; (401e2c <UDP_Handler+0x8f0>)
  401d12:	69db      	ldr	r3, [r3, #28]
  401d14:	f413 7f00 	tst.w	r3, #512	; 0x200
  401d18:	d1a4      	bne.n	401c64 <UDP_Handler+0x728>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401d1a:	4b44      	ldr	r3, [pc, #272]	; (401e2c <UDP_Handler+0x8f0>)
  401d1c:	699b      	ldr	r3, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401d1e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401d22:	d004      	beq.n	401d2e <UDP_Handler+0x7f2>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401d24:	4b41      	ldr	r3, [pc, #260]	; (401e2c <UDP_Handler+0x8f0>)
  401d26:	69db      	ldr	r3, [r3, #28]
  401d28:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401d2c:	d19a      	bne.n	401c64 <UDP_Handler+0x728>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401d2e:	4b3f      	ldr	r3, [pc, #252]	; (401e2c <UDP_Handler+0x8f0>)
  401d30:	699b      	ldr	r3, [r3, #24]
  401d32:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d36:	d004      	beq.n	401d42 <UDP_Handler+0x806>
  401d38:	4b3c      	ldr	r3, [pc, #240]	; (401e2c <UDP_Handler+0x8f0>)
  401d3a:	69db      	ldr	r3, [r3, #28]
  401d3c:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d40:	d1a0      	bne.n	401c84 <UDP_Handler+0x748>
	if (Is_udd_reset()) {
  401d42:	4b3a      	ldr	r3, [pc, #232]	; (401e2c <UDP_Handler+0x8f0>)
  401d44:	69db      	ldr	r3, [r3, #28]
  401d46:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  401d4a:	f43f ac44 	beq.w	4015d6 <UDP_Handler+0x9a>
		udd_ack_reset();
  401d4e:	4c37      	ldr	r4, [pc, #220]	; (401e2c <UDP_Handler+0x8f0>)
  401d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401d54:	6223      	str	r3, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  401d56:	4e36      	ldr	r6, [pc, #216]	; (401e30 <UDP_Handler+0x8f4>)
  401d58:	2201      	movs	r2, #1
  401d5a:	4611      	mov	r1, r2
  401d5c:	4630      	mov	r0, r6
  401d5e:	4d35      	ldr	r5, [pc, #212]	; (401e34 <UDP_Handler+0x8f8>)
  401d60:	47a8      	blx	r5
  401d62:	2202      	movs	r2, #2
  401d64:	2101      	movs	r1, #1
  401d66:	f106 0014 	add.w	r0, r6, #20
  401d6a:	47a8      	blx	r5
  401d6c:	2203      	movs	r2, #3
  401d6e:	2101      	movs	r1, #1
  401d70:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401d74:	47a8      	blx	r5
		udc_reset();
  401d76:	4b30      	ldr	r3, [pc, #192]	; (401e38 <UDP_Handler+0x8fc>)
  401d78:	4798      	blx	r3
		udd_disable_address_state();
  401d7a:	6863      	ldr	r3, [r4, #4]
  401d7c:	f023 0301 	bic.w	r3, r3, #1
  401d80:	6063      	str	r3, [r4, #4]
		udd_disable_configured_state();
  401d82:	6863      	ldr	r3, [r4, #4]
  401d84:	f023 0302 	bic.w	r3, r3, #2
  401d88:	6063      	str	r3, [r4, #4]
	udd_enable_address();
  401d8a:	68a3      	ldr	r3, [r4, #8]
  401d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401d90:	60a3      	str	r3, [r4, #8]
	udd_configure_address(0);
  401d92:	68a3      	ldr	r3, [r4, #8]
  401d94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401d98:	60a3      	str	r3, [r4, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  401d9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401d9c:	9318      	str	r3, [sp, #96]	; 0x60
  401d9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401da0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401da4:	9318      	str	r3, [sp, #96]	; 0x60
  401da6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401da8:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  401dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401db0:	9318      	str	r3, [sp, #96]	; 0x60
  401db2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401db8:	9318      	str	r3, [sp, #96]	; 0x60
  401dba:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401dbc:	6323      	str	r3, [r4, #48]	; 0x30
  401dbe:	4622      	mov	r2, r4
  401dc0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401dc2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401dc6:	d0fb      	beq.n	401dc0 <UDP_Handler+0x884>
	udd_enable_endpoint(0);
  401dc8:	4a18      	ldr	r2, [pc, #96]	; (401e2c <UDP_Handler+0x8f0>)
  401dca:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401dcc:	9319      	str	r3, [sp, #100]	; 0x64
  401dce:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401dd0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401dd4:	9319      	str	r3, [sp, #100]	; 0x64
  401dd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401ddc:	9319      	str	r3, [sp, #100]	; 0x64
  401dde:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401de0:	6313      	str	r3, [r2, #48]	; 0x30
  401de2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401de4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401de8:	d0fb      	beq.n	401de2 <UDP_Handler+0x8a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401dea:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401dee:	fab3 f383 	clz	r3, r3
  401df2:	095b      	lsrs	r3, r3, #5
  401df4:	9317      	str	r3, [sp, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
  401df6:	b672      	cpsid	i
  401df8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401dfc:	2200      	movs	r2, #0
  401dfe:	4b0f      	ldr	r3, [pc, #60]	; (401e3c <UDP_Handler+0x900>)
  401e00:	701a      	strb	r2, [r3, #0]
	return flags;
  401e02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	udd_enable_endpoint_interrupt(0);
  401e04:	2101      	movs	r1, #1
  401e06:	4a09      	ldr	r2, [pc, #36]	; (401e2c <UDP_Handler+0x8f0>)
  401e08:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401e0a:	b123      	cbz	r3, 401e16 <UDP_Handler+0x8da>
		cpu_irq_enable();
  401e0c:	4b0b      	ldr	r3, [pc, #44]	; (401e3c <UDP_Handler+0x900>)
  401e0e:	7019      	strb	r1, [r3, #0]
  401e10:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401e14:	b662      	cpsie	i
		udd_ctrl_init();
  401e16:	4b0a      	ldr	r3, [pc, #40]	; (401e40 <UDP_Handler+0x904>)
  401e18:	4798      	blx	r3
		udd_enable_suspend_interrupt();
  401e1a:	4b04      	ldr	r3, [pc, #16]	; (401e2c <UDP_Handler+0x8f0>)
  401e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e20:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401e26:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  401e28:	f7ff bbd5 	b.w	4015d6 <UDP_Handler+0x9a>
  401e2c:	40034000 	.word	0x40034000
  401e30:	20000da8 	.word	0x20000da8
  401e34:	00401275 	.word	0x00401275
  401e38:	004009c1 	.word	0x004009c1
  401e3c:	20000200 	.word	0x20000200
  401e40:	00401025 	.word	0x00401025

00401e44 <udd_attach>:
{
  401e44:	b510      	push	{r4, lr}
  401e46:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401e48:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401e4c:	fab3 f383 	clz	r3, r3
  401e50:	095b      	lsrs	r3, r3, #5
  401e52:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401e54:	b672      	cpsid	i
  401e56:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401e5a:	2200      	movs	r2, #0
  401e5c:	4b14      	ldr	r3, [pc, #80]	; (401eb0 <udd_attach+0x6c>)
  401e5e:	701a      	strb	r2, [r3, #0]
	return flags;
  401e60:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  401e62:	2001      	movs	r0, #1
  401e64:	4b13      	ldr	r3, [pc, #76]	; (401eb4 <udd_attach+0x70>)
  401e66:	4798      	blx	r3
	udd_enable_periph_ck();
  401e68:	2022      	movs	r0, #34	; 0x22
  401e6a:	4b13      	ldr	r3, [pc, #76]	; (401eb8 <udd_attach+0x74>)
  401e6c:	4798      	blx	r3
	udd_enable_transceiver();
  401e6e:	4b13      	ldr	r3, [pc, #76]	; (401ebc <udd_attach+0x78>)
  401e70:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401e72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401e76:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  401e78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  401e7e:	675a      	str	r2, [r3, #116]	; 0x74
	udd_enable_suspend_interrupt();
  401e80:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e84:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  401e86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401e8a:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  401e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
  401e90:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  401e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401e96:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  401e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401e9c:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401e9e:	b12c      	cbz	r4, 401eac <udd_attach+0x68>
		cpu_irq_enable();
  401ea0:	2201      	movs	r2, #1
  401ea2:	4b03      	ldr	r3, [pc, #12]	; (401eb0 <udd_attach+0x6c>)
  401ea4:	701a      	strb	r2, [r3, #0]
  401ea6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401eaa:	b662      	cpsie	i
}
  401eac:	b002      	add	sp, #8
  401eae:	bd10      	pop	{r4, pc}
  401eb0:	20000200 	.word	0x20000200
  401eb4:	00400f81 	.word	0x00400f81
  401eb8:	0040327d 	.word	0x0040327d
  401ebc:	40034000 	.word	0x40034000

00401ec0 <udd_enable>:
{
  401ec0:	b530      	push	{r4, r5, lr}
  401ec2:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401ec4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ec8:	fab3 f383 	clz	r3, r3
  401ecc:	095b      	lsrs	r3, r3, #5
  401ece:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401ed0:	b672      	cpsid	i
  401ed2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401ed6:	2400      	movs	r4, #0
  401ed8:	4b27      	ldr	r3, [pc, #156]	; (401f78 <udd_enable+0xb8>)
  401eda:	701c      	strb	r4, [r3, #0]
	return flags;
  401edc:	9d00      	ldr	r5, [sp, #0]
	udd_enable_periph_ck();
  401ede:	2022      	movs	r0, #34	; 0x22
  401ee0:	4b26      	ldr	r3, [pc, #152]	; (401f7c <udd_enable+0xbc>)
  401ee2:	4798      	blx	r3
	sysclk_enable_usb();
  401ee4:	4b26      	ldr	r3, [pc, #152]	; (401f80 <udd_enable+0xc0>)
  401ee6:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401ee8:	4b26      	ldr	r3, [pc, #152]	; (401f84 <udd_enable+0xc4>)
  401eea:	2250      	movs	r2, #80	; 0x50
  401eec:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  401ef0:	2204      	movs	r2, #4
  401ef2:	605a      	str	r2, [r3, #4]
  401ef4:	4623      	mov	r3, r4
		udd_ep_job[i].bank = 0;
  401ef6:	4824      	ldr	r0, [pc, #144]	; (401f88 <udd_enable+0xc8>)
  401ef8:	009a      	lsls	r2, r3, #2
  401efa:	18d1      	adds	r1, r2, r3
  401efc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  401f00:	7c49      	ldrb	r1, [r1, #17]
		udd_ep_job[i].b_buf_end = false;
  401f02:	441a      	add	r2, r3
  401f04:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  401f08:	f001 0183 	and.w	r1, r1, #131	; 0x83
  401f0c:	f36f 11c7 	bfc	r1, #7, #1
  401f10:	7451      	strb	r1, [r2, #17]
  401f12:	3301      	adds	r3, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  401f14:	2b03      	cmp	r3, #3
  401f16:	d1ef      	bne.n	401ef8 <udd_enable+0x38>
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  401f18:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  401f1c:	4b1b      	ldr	r3, [pc, #108]	; (401f8c <udd_enable+0xcc>)
  401f1e:	4798      	blx	r3
	udd_b_idle = false;
  401f20:	2200      	movs	r2, #0
  401f22:	4b1b      	ldr	r3, [pc, #108]	; (401f90 <udd_enable+0xd0>)
  401f24:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  401f26:	4b1b      	ldr	r3, [pc, #108]	; (401f94 <udd_enable+0xd4>)
  401f28:	781b      	ldrb	r3, [r3, #0]
  401f2a:	2bff      	cmp	r3, #255	; 0xff
  401f2c:	d022      	beq.n	401f74 <udd_enable+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401f2e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401f32:	fab3 f383 	clz	r3, r3
  401f36:	095b      	lsrs	r3, r3, #5
  401f38:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401f3a:	b672      	cpsid	i
  401f3c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401f40:	2200      	movs	r2, #0
  401f42:	4b0d      	ldr	r3, [pc, #52]	; (401f78 <udd_enable+0xb8>)
  401f44:	701a      	strb	r2, [r3, #0]
	return flags;
  401f46:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  401f48:	4a12      	ldr	r2, [pc, #72]	; (401f94 <udd_enable+0xd4>)
  401f4a:	7813      	ldrb	r3, [r2, #0]
  401f4c:	3301      	adds	r3, #1
  401f4e:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  401f50:	b129      	cbz	r1, 401f5e <udd_enable+0x9e>
		cpu_irq_enable();
  401f52:	2201      	movs	r2, #1
  401f54:	4b08      	ldr	r3, [pc, #32]	; (401f78 <udd_enable+0xb8>)
  401f56:	701a      	strb	r2, [r3, #0]
  401f58:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401f5c:	b662      	cpsie	i
	udd_attach();
  401f5e:	4b0e      	ldr	r3, [pc, #56]	; (401f98 <udd_enable+0xd8>)
  401f60:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  401f62:	b12d      	cbz	r5, 401f70 <udd_enable+0xb0>
		cpu_irq_enable();
  401f64:	2201      	movs	r2, #1
  401f66:	4b04      	ldr	r3, [pc, #16]	; (401f78 <udd_enable+0xb8>)
  401f68:	701a      	strb	r2, [r3, #0]
  401f6a:	f3bf 8f5f 	dmb	sy
  401f6e:	b662      	cpsie	i
}
  401f70:	b003      	add	sp, #12
  401f72:	bd30      	pop	{r4, r5, pc}
  401f74:	e7fe      	b.n	401f74 <udd_enable+0xb4>
  401f76:	bf00      	nop
  401f78:	20000200 	.word	0x20000200
  401f7c:	0040327d 	.word	0x0040327d
  401f80:	00402fc5 	.word	0x00402fc5
  401f84:	e000e100 	.word	0xe000e100
  401f88:	20000da8 	.word	0x20000da8
  401f8c:	00403345 	.word	0x00403345
  401f90:	20000da1 	.word	0x20000da1
  401f94:	20000e2c 	.word	0x20000e2c
  401f98:	00401e45 	.word	0x00401e45

00401f9c <udd_is_high_speed>:
}
  401f9c:	2000      	movs	r0, #0
  401f9e:	4770      	bx	lr

00401fa0 <udd_set_address>:
	udd_disable_address_state();
  401fa0:	4b0d      	ldr	r3, [pc, #52]	; (401fd8 <udd_set_address+0x38>)
  401fa2:	685a      	ldr	r2, [r3, #4]
  401fa4:	f022 0201 	bic.w	r2, r2, #1
  401fa8:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  401faa:	689a      	ldr	r2, [r3, #8]
  401fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401fb0:	609a      	str	r2, [r3, #8]
	if (address) {
  401fb2:	4602      	mov	r2, r0
  401fb4:	b170      	cbz	r0, 401fd4 <udd_set_address+0x34>
		udd_configure_address(address);
  401fb6:	6898      	ldr	r0, [r3, #8]
  401fb8:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  401fbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  401fc0:	4310      	orrs	r0, r2
  401fc2:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  401fc4:	689a      	ldr	r2, [r3, #8]
  401fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  401fca:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  401fcc:	685a      	ldr	r2, [r3, #4]
  401fce:	f042 0201 	orr.w	r2, r2, #1
  401fd2:	605a      	str	r2, [r3, #4]
  401fd4:	4770      	bx	lr
  401fd6:	bf00      	nop
  401fd8:	40034000 	.word	0x40034000

00401fdc <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  401fdc:	4b05      	ldr	r3, [pc, #20]	; (401ff4 <udd_getaddress+0x18>)
  401fde:	685b      	ldr	r3, [r3, #4]
  401fe0:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  401fe4:	bf1d      	ittte	ne
  401fe6:	4b03      	ldrne	r3, [pc, #12]	; (401ff4 <udd_getaddress+0x18>)
  401fe8:	6898      	ldrne	r0, [r3, #8]
  401fea:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  401fee:	2000      	moveq	r0, #0
}
  401ff0:	4770      	bx	lr
  401ff2:	bf00      	nop
  401ff4:	40034000 	.word	0x40034000

00401ff8 <udd_get_frame_number>:
	return udd_frame_number();
  401ff8:	4b02      	ldr	r3, [pc, #8]	; (402004 <udd_get_frame_number+0xc>)
  401ffa:	6818      	ldr	r0, [r3, #0]
}
  401ffc:	f3c0 000a 	ubfx	r0, r0, #0, #11
  402000:	4770      	bx	lr
  402002:	bf00      	nop
  402004:	40034000 	.word	0x40034000

00402008 <udd_get_micro_frame_number>:
}
  402008:	2000      	movs	r0, #0
  40200a:	4770      	bx	lr

0040200c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  40200c:	4b01      	ldr	r3, [pc, #4]	; (402014 <udd_set_setup_payload+0x8>)
  40200e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  402010:	8199      	strh	r1, [r3, #12]
  402012:	4770      	bx	lr
  402014:	20000e34 	.word	0x20000e34

00402018 <udd_ep_alloc>:
{
  402018:	b5f0      	push	{r4, r5, r6, r7, lr}
  40201a:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  40201c:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  402020:	2c03      	cmp	r4, #3
  402022:	d867      	bhi.n	4020f4 <udd_ep_alloc+0xdc>
  402024:	00a3      	lsls	r3, r4, #2
  402026:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40202a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_enabled(ep)) {
  40202e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  402030:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  402034:	d161      	bne.n	4020fa <udd_ep_alloc+0xe2>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  402036:	f001 0503 	and.w	r5, r1, #3
  40203a:	2d01      	cmp	r5, #1
  40203c:	d050      	beq.n	4020e0 <udd_ep_alloc+0xc8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  40203e:	1f25      	subs	r5, r4, #4
  402040:	b2ed      	uxtb	r5, r5
  402042:	2d02      	cmp	r5, #2
  402044:	bf34      	ite	cc
  402046:	f44f 7500 	movcc.w	r5, #512	; 0x200
  40204a:	2540      	movcs	r5, #64	; 0x40
  40204c:	4295      	cmp	r5, r2
  40204e:	db58      	blt.n	402102 <udd_ep_alloc+0xea>
  402050:	b240      	sxtb	r0, r0
	ptr_job = &udd_ep_job[ep - 1];
  402052:	1e66      	subs	r6, r4, #1
	ptr_job->size = MaxEndpointSize;
  402054:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  402058:	4d2b      	ldr	r5, [pc, #172]	; (402108 <udd_ep_alloc+0xf0>)
  40205a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  40205e:	f105 0710 	add.w	r7, r5, #16
  402062:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  402066:	f362 0e09 	bfi	lr, r2, #0, #10
  40206a:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  40206e:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  402070:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402074:	f36f 1245 	bfc	r2, #5, #1
  402078:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  40207a:	2800      	cmp	r0, #0
  40207c:	db35      	blt.n	4020ea <udd_ep_alloc+0xd2>
	udd_reset_endpoint(ep);
  40207e:	4e23      	ldr	r6, [pc, #140]	; (40210c <udd_ep_alloc+0xf4>)
  402080:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  402082:	2201      	movs	r2, #1
  402084:	fa02 f404 	lsl.w	r4, r2, r4
  402088:	4325      	orrs	r5, r4
  40208a:	62b5      	str	r5, [r6, #40]	; 0x28
  40208c:	4635      	mov	r5, r6
  40208e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  402090:	4214      	tst	r4, r2
  402092:	d0fc      	beq.n	40208e <udd_ep_alloc+0x76>
  402094:	4d1d      	ldr	r5, [pc, #116]	; (40210c <udd_ep_alloc+0xf4>)
  402096:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  402098:	ea22 0404 	bic.w	r4, r2, r4
  40209c:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  40209e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4020a0:	9201      	str	r2, [sp, #4]
  4020a2:	9a01      	ldr	r2, [sp, #4]
  4020a4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4020a8:	9201      	str	r2, [sp, #4]
  4020aa:	9a01      	ldr	r2, [sp, #4]
  4020ac:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  4020b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4020b4:	9201      	str	r2, [sp, #4]
  4020b6:	2800      	cmp	r0, #0
  4020b8:	ea4f 2201 	mov.w	r2, r1, lsl #8
  4020bc:	f402 7240 	and.w	r2, r2, #768	; 0x300
  4020c0:	bfb4      	ite	lt
  4020c2:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  4020c6:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  4020ca:	9901      	ldr	r1, [sp, #4]
  4020cc:	4311      	orrs	r1, r2
  4020ce:	9101      	str	r1, [sp, #4]
  4020d0:	9901      	ldr	r1, [sp, #4]
  4020d2:	6319      	str	r1, [r3, #48]	; 0x30
  4020d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4020d6:	ea32 0101 	bics.w	r1, r2, r1
  4020da:	d1fb      	bne.n	4020d4 <udd_ep_alloc+0xbc>
	return true;
  4020dc:	2001      	movs	r0, #1
  4020de:	e00a      	b.n	4020f6 <udd_ep_alloc+0xde>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  4020e0:	b16c      	cbz	r4, 4020fe <udd_ep_alloc+0xe6>
  4020e2:	2c03      	cmp	r4, #3
  4020e4:	d1ab      	bne.n	40203e <udd_ep_alloc+0x26>
		return false;
  4020e6:	2000      	movs	r0, #0
  4020e8:	e005      	b.n	4020f6 <udd_ep_alloc+0xde>
		ptr_job->bank = 0;
  4020ea:	787a      	ldrb	r2, [r7, #1]
  4020ec:	f36f 0283 	bfc	r2, #2, #2
  4020f0:	707a      	strb	r2, [r7, #1]
  4020f2:	e7c4      	b.n	40207e <udd_ep_alloc+0x66>
		return false;
  4020f4:	2000      	movs	r0, #0
}
  4020f6:	b003      	add	sp, #12
  4020f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  4020fa:	2000      	movs	r0, #0
  4020fc:	e7fb      	b.n	4020f6 <udd_ep_alloc+0xde>
		return false;
  4020fe:	2000      	movs	r0, #0
  402100:	e7f9      	b.n	4020f6 <udd_ep_alloc+0xde>
		return false;
  402102:	2000      	movs	r0, #0
  402104:	e7f7      	b.n	4020f6 <udd_ep_alloc+0xde>
  402106:	bf00      	nop
  402108:	20000da8 	.word	0x20000da8
  40210c:	40034000 	.word	0x40034000

00402110 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402110:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402114:	2a03      	cmp	r2, #3
  402116:	d822      	bhi.n	40215e <udd_ep_free+0x4e>
{
  402118:	b500      	push	{lr}
  40211a:	b083      	sub	sp, #12
  40211c:	0091      	lsls	r1, r2, #2
  40211e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  402122:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
	udd_disable_endpoint(ep_index);
  402126:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402128:	9301      	str	r3, [sp, #4]
  40212a:	9b01      	ldr	r3, [sp, #4]
  40212c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402130:	9301      	str	r3, [sp, #4]
  402132:	9b01      	ldr	r3, [sp, #4]
  402134:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  402138:	9301      	str	r3, [sp, #4]
  40213a:	9b01      	ldr	r3, [sp, #4]
  40213c:	630b      	str	r3, [r1, #48]	; 0x30
  40213e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402140:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  402144:	d1fb      	bne.n	40213e <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402146:	1e50      	subs	r0, r2, #1
  402148:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40214c:	2101      	movs	r1, #1
  40214e:	4b04      	ldr	r3, [pc, #16]	; (402160 <udd_ep_free+0x50>)
  402150:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402154:	4b03      	ldr	r3, [pc, #12]	; (402164 <udd_ep_free+0x54>)
  402156:	4798      	blx	r3
}
  402158:	b003      	add	sp, #12
  40215a:	f85d fb04 	ldr.w	pc, [sp], #4
  40215e:	4770      	bx	lr
  402160:	20000da8 	.word	0x20000da8
  402164:	00401275 	.word	0x00401275

00402168 <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402168:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  40216c:	2803      	cmp	r0, #3
  40216e:	d815      	bhi.n	40219c <udd_ep_is_halted+0x34>
	return ptr_job->b_stall_requested ||
  402170:	1e43      	subs	r3, r0, #1
  402172:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402176:	4a0a      	ldr	r2, [pc, #40]	; (4021a0 <udd_ep_is_halted+0x38>)
  402178:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40217c:	7c5b      	ldrb	r3, [r3, #17]
  40217e:	f013 0f20 	tst.w	r3, #32
  402182:	d109      	bne.n	402198 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402184:	300c      	adds	r0, #12
  402186:	4b07      	ldr	r3, [pc, #28]	; (4021a4 <udd_ep_is_halted+0x3c>)
  402188:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  40218c:	f013 0f28 	tst.w	r3, #40	; 0x28
  402190:	bf14      	ite	ne
  402192:	2001      	movne	r0, #1
  402194:	2000      	moveq	r0, #0
  402196:	4770      	bx	lr
  402198:	2001      	movs	r0, #1
  40219a:	4770      	bx	lr
		return false;
  40219c:	2000      	movs	r0, #0
}
  40219e:	4770      	bx	lr
  4021a0:	20000da8 	.word	0x20000da8
  4021a4:	40034000 	.word	0x40034000

004021a8 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4021a8:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4021ac:	2903      	cmp	r1, #3
  4021ae:	d85f      	bhi.n	402270 <udd_ep_set_halt+0xc8>
{
  4021b0:	b410      	push	{r4}
  4021b2:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4021b4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4021b8:	fab3 f383 	clz	r3, r3
  4021bc:	095b      	lsrs	r3, r3, #5
  4021be:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4021c0:	b672      	cpsid	i
  4021c2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4021c6:	2200      	movs	r2, #0
  4021c8:	4b2c      	ldr	r3, [pc, #176]	; (40227c <udd_ep_set_halt+0xd4>)
  4021ca:	701a      	strb	r2, [r3, #0]
	return flags;
  4021cc:	9c01      	ldr	r4, [sp, #4]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4021ce:	f010 0f80 	tst.w	r0, #128	; 0x80
  4021d2:	d124      	bne.n	40221e <udd_ep_set_halt+0x76>
  4021d4:	008a      	lsls	r2, r1, #2
  4021d6:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4021da:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_enable_stall_handshake(ep_index);
  4021de:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4021e0:	9300      	str	r3, [sp, #0]
  4021e2:	9b00      	ldr	r3, [sp, #0]
  4021e4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4021e8:	9300      	str	r3, [sp, #0]
  4021ea:	9b00      	ldr	r3, [sp, #0]
  4021ec:	f043 0320 	orr.w	r3, r3, #32
  4021f0:	9300      	str	r3, [sp, #0]
  4021f2:	9b00      	ldr	r3, [sp, #0]
  4021f4:	6313      	str	r3, [r2, #48]	; 0x30
  4021f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4021f8:	f013 0f20 	tst.w	r3, #32
  4021fc:	d0fb      	beq.n	4021f6 <udd_ep_set_halt+0x4e>
		udd_enable_endpoint_interrupt(ep_index);
  4021fe:	2301      	movs	r3, #1
  402200:	fa03 f101 	lsl.w	r1, r3, r1
  402204:	4b1e      	ldr	r3, [pc, #120]	; (402280 <udd_ep_set_halt+0xd8>)
  402206:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  402208:	2c00      	cmp	r4, #0
  40220a:	d035      	beq.n	402278 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  40220c:	2001      	movs	r0, #1
  40220e:	4b1b      	ldr	r3, [pc, #108]	; (40227c <udd_ep_set_halt+0xd4>)
  402210:	7018      	strb	r0, [r3, #0]
  402212:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402216:	b662      	cpsie	i
}
  402218:	b003      	add	sp, #12
  40221a:	bc10      	pop	{r4}
  40221c:	4770      	bx	lr
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40221e:	1e4b      	subs	r3, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402220:	f101 020c 	add.w	r2, r1, #12
  402224:	4816      	ldr	r0, [pc, #88]	; (402280 <udd_ep_set_halt+0xd8>)
  402226:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  40222a:	f012 0f10 	tst.w	r2, #16
  40222e:	d109      	bne.n	402244 <udd_ep_set_halt+0x9c>
				|| ptr_job->bank > 1)) {
  402230:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402234:	4813      	ldr	r0, [pc, #76]	; (402284 <udd_ep_set_halt+0xdc>)
  402236:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  40223a:	7c52      	ldrb	r2, [r2, #17]
  40223c:	f3c2 0281 	ubfx	r2, r2, #2, #2
  402240:	2a01      	cmp	r2, #1
  402242:	ddc7      	ble.n	4021d4 <udd_ep_set_halt+0x2c>
		ptr_job->b_stall_requested = true;
  402244:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402248:	4b0e      	ldr	r3, [pc, #56]	; (402284 <udd_ep_set_halt+0xdc>)
  40224a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40224e:	7c5a      	ldrb	r2, [r3, #17]
  402250:	f042 0220 	orr.w	r2, r2, #32
  402254:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  402256:	2301      	movs	r3, #1
  402258:	fa03 f101 	lsl.w	r1, r3, r1
  40225c:	4b08      	ldr	r3, [pc, #32]	; (402280 <udd_ep_set_halt+0xd8>)
  40225e:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  402260:	b144      	cbz	r4, 402274 <udd_ep_set_halt+0xcc>
		cpu_irq_enable();
  402262:	2001      	movs	r0, #1
  402264:	4b05      	ldr	r3, [pc, #20]	; (40227c <udd_ep_set_halt+0xd4>)
  402266:	7018      	strb	r0, [r3, #0]
  402268:	f3bf 8f5f 	dmb	sy
  40226c:	b662      	cpsie	i
  40226e:	e7d3      	b.n	402218 <udd_ep_set_halt+0x70>
		return false;
  402270:	2000      	movs	r0, #0
  402272:	4770      	bx	lr
		return true;
  402274:	2001      	movs	r0, #1
  402276:	e7cf      	b.n	402218 <udd_ep_set_halt+0x70>
	return true;
  402278:	2001      	movs	r0, #1
  40227a:	e7cd      	b.n	402218 <udd_ep_set_halt+0x70>
  40227c:	20000200 	.word	0x20000200
  402280:	40034000 	.word	0x40034000
  402284:	20000da8 	.word	0x20000da8

00402288 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  402288:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  40228c:	2803      	cmp	r0, #3
  40228e:	d85e      	bhi.n	40234e <udd_ep_clear_halt+0xc6>
{
  402290:	b530      	push	{r4, r5, lr}
  402292:	b083      	sub	sp, #12
	ptr_job = &udd_ep_job[ep - 1];
  402294:	1e44      	subs	r4, r0, #1
	ptr_job->b_stall_requested = false;
  402296:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40229a:	4b2f      	ldr	r3, [pc, #188]	; (402358 <udd_ep_clear_halt+0xd0>)
  40229c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4022a0:	7c5a      	ldrb	r2, [r3, #17]
  4022a2:	f36f 1245 	bfc	r2, #5, #1
  4022a6:	745a      	strb	r2, [r3, #17]
  4022a8:	0083      	lsls	r3, r0, #2
  4022aa:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4022ae:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  4022b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022b4:	f012 0f20 	tst.w	r2, #32
  4022b8:	d04b      	beq.n	402352 <udd_ep_clear_halt+0xca>
		udd_disable_stall_handshake(ep);
  4022ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022bc:	9200      	str	r2, [sp, #0]
  4022be:	9a00      	ldr	r2, [sp, #0]
  4022c0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4022c4:	9200      	str	r2, [sp, #0]
  4022c6:	9a00      	ldr	r2, [sp, #0]
  4022c8:	f022 0220 	bic.w	r2, r2, #32
  4022cc:	9200      	str	r2, [sp, #0]
  4022ce:	9a00      	ldr	r2, [sp, #0]
  4022d0:	631a      	str	r2, [r3, #48]	; 0x30
  4022d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022d4:	f012 0f20 	tst.w	r2, #32
  4022d8:	d1fb      	bne.n	4022d2 <udd_ep_clear_halt+0x4a>
		udd_reset_endpoint(ep);
  4022da:	4d20      	ldr	r5, [pc, #128]	; (40235c <udd_ep_clear_halt+0xd4>)
  4022dc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  4022de:	2201      	movs	r2, #1
  4022e0:	fa02 f000 	lsl.w	r0, r2, r0
  4022e4:	4301      	orrs	r1, r0
  4022e6:	62a9      	str	r1, [r5, #40]	; 0x28
  4022e8:	4629      	mov	r1, r5
  4022ea:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  4022ec:	4210      	tst	r0, r2
  4022ee:	d0fc      	beq.n	4022ea <udd_ep_clear_halt+0x62>
  4022f0:	491a      	ldr	r1, [pc, #104]	; (40235c <udd_ep_clear_halt+0xd4>)
  4022f2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  4022f4:	ea22 0000 	bic.w	r0, r2, r0
  4022f8:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  4022fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022fc:	9201      	str	r2, [sp, #4]
  4022fe:	9a01      	ldr	r2, [sp, #4]
  402300:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402304:	9201      	str	r2, [sp, #4]
  402306:	9a01      	ldr	r2, [sp, #4]
  402308:	f022 0208 	bic.w	r2, r2, #8
  40230c:	9201      	str	r2, [sp, #4]
  40230e:	9a01      	ldr	r2, [sp, #4]
  402310:	631a      	str	r2, [r3, #48]	; 0x30
  402312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402314:	f012 0f08 	tst.w	r2, #8
  402318:	d1fb      	bne.n	402312 <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  40231a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  40231e:	4a0e      	ldr	r2, [pc, #56]	; (402358 <udd_ep_clear_halt+0xd0>)
  402320:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402324:	7c5b      	ldrb	r3, [r3, #17]
  402326:	f013 0f10 	tst.w	r3, #16
  40232a:	d101      	bne.n	402330 <udd_ep_clear_halt+0xa8>
	return true;
  40232c:	2001      	movs	r0, #1
  40232e:	e011      	b.n	402354 <udd_ep_clear_halt+0xcc>
			ptr_job->busy = false;
  402330:	4611      	mov	r1, r2
  402332:	00a2      	lsls	r2, r4, #2
  402334:	1913      	adds	r3, r2, r4
  402336:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40233a:	7c58      	ldrb	r0, [r3, #17]
  40233c:	f36f 1004 	bfc	r0, #4, #1
  402340:	7458      	strb	r0, [r3, #17]
			ptr_job->call_nohalt();
  402342:	4414      	add	r4, r2
  402344:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
  402348:	4798      	blx	r3
	return true;
  40234a:	2001      	movs	r0, #1
  40234c:	e002      	b.n	402354 <udd_ep_clear_halt+0xcc>
		return false;
  40234e:	2000      	movs	r0, #0
  402350:	4770      	bx	lr
	return true;
  402352:	2001      	movs	r0, #1
}
  402354:	b003      	add	sp, #12
  402356:	bd30      	pop	{r4, r5, pc}
  402358:	20000da8 	.word	0x20000da8
  40235c:	40034000 	.word	0x40034000

00402360 <udd_ep_run>:
{
  402360:	b5f0      	push	{r4, r5, r6, r7, lr}
  402362:	b083      	sub	sp, #12
	ep &= USB_EP_ADDR_MASK;
  402364:	f000 070f 	and.w	r7, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402368:	2f03      	cmp	r7, #3
  40236a:	f200 80a2 	bhi.w	4024b2 <udd_ep_run+0x152>
  40236e:	00bc      	lsls	r4, r7, #2
  402370:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  402374:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
	if ((!Is_udd_endpoint_enabled(ep))
  402378:	6b25      	ldr	r5, [r4, #48]	; 0x30
  40237a:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  40237e:	f000 809b 	beq.w	4024b8 <udd_ep_run+0x158>
	ptr_job = &udd_ep_job[ep - 1];
  402382:	1e7d      	subs	r5, r7, #1
			|| ptr_job->b_stall_requested
  402384:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  402388:	4e50      	ldr	r6, [pc, #320]	; (4024cc <udd_ep_run+0x16c>)
  40238a:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  40238e:	7c76      	ldrb	r6, [r6, #17]
  402390:	f016 0f20 	tst.w	r6, #32
  402394:	f040 8092 	bne.w	4024bc <udd_ep_run+0x15c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  402398:	6b26      	ldr	r6, [r4, #48]	; 0x30
  40239a:	f016 0f20 	tst.w	r6, #32
  40239e:	f040 808f 	bne.w	4024c0 <udd_ep_run+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4023a2:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4023a6:	fab6 f686 	clz	r6, r6
  4023aa:	0976      	lsrs	r6, r6, #5
  4023ac:	9600      	str	r6, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4023ae:	b672      	cpsid	i
  4023b0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4023b4:	f04f 0e00 	mov.w	lr, #0
  4023b8:	4e45      	ldr	r6, [pc, #276]	; (4024d0 <udd_ep_run+0x170>)
  4023ba:	f886 e000 	strb.w	lr, [r6]
	return flags;
  4023be:	f8dd c000 	ldr.w	ip, [sp]
	if (ptr_job->busy == true) {
  4023c2:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  4023c6:	4e41      	ldr	r6, [pc, #260]	; (4024cc <udd_ep_run+0x16c>)
  4023c8:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  4023cc:	7c76      	ldrb	r6, [r6, #17]
  4023ce:	f016 0f10 	tst.w	r6, #16
  4023d2:	d00a      	beq.n	4023ea <udd_ep_run+0x8a>
	if (cpu_irq_is_enabled_flags(flags))
  4023d4:	f1bc 0f00 	cmp.w	ip, #0
  4023d8:	d074      	beq.n	4024c4 <udd_ep_run+0x164>
		cpu_irq_enable();
  4023da:	2201      	movs	r2, #1
  4023dc:	4b3c      	ldr	r3, [pc, #240]	; (4024d0 <udd_ep_run+0x170>)
  4023de:	701a      	strb	r2, [r3, #0]
  4023e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4023e4:	b662      	cpsie	i
		return false; // Job already on going
  4023e6:	2000      	movs	r0, #0
  4023e8:	e064      	b.n	4024b4 <udd_ep_run+0x154>
	ptr_job->busy = true;
  4023ea:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  4023ee:	4e37      	ldr	r6, [pc, #220]	; (4024cc <udd_ep_run+0x16c>)
  4023f0:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  4023f4:	f896 e011 	ldrb.w	lr, [r6, #17]
  4023f8:	f04e 0e10 	orr.w	lr, lr, #16
  4023fc:	f886 e011 	strb.w	lr, [r6, #17]
	if (cpu_irq_is_enabled_flags(flags))
  402400:	f1bc 0f00 	cmp.w	ip, #0
  402404:	d007      	beq.n	402416 <udd_ep_run+0xb6>
		cpu_irq_enable();
  402406:	f04f 0e01 	mov.w	lr, #1
  40240a:	4e31      	ldr	r6, [pc, #196]	; (4024d0 <udd_ep_run+0x170>)
  40240c:	f886 e000 	strb.w	lr, [r6]
  402410:	f3bf 8f5f 	dmb	sy
  402414:	b662      	cpsie	i
	ptr_job->buf = buf;
  402416:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 4024cc <udd_ep_run+0x16c>
  40241a:	eb05 0685 	add.w	r6, r5, r5, lsl #2
  40241e:	00b6      	lsls	r6, r6, #2
  402420:	eb0c 0e06 	add.w	lr, ip, r6
  402424:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  402428:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  40242c:	2200      	movs	r2, #0
  40242e:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->call_trans = callback;
  402432:	9a08      	ldr	r2, [sp, #32]
  402434:	f84c 2006 	str.w	r2, [ip, r6]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402438:	b911      	cbnz	r1, 402440 <udd_ep_run+0xe0>
  40243a:	fab3 f183 	clz	r1, r3
  40243e:	0949      	lsrs	r1, r1, #5
  402440:	4a22      	ldr	r2, [pc, #136]	; (4024cc <udd_ep_run+0x16c>)
  402442:	00ae      	lsls	r6, r5, #2
  402444:	1973      	adds	r3, r6, r5
  402446:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40244a:	7c5b      	ldrb	r3, [r3, #17]
  40244c:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  402450:	4435      	add	r5, r6
  402452:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  402456:	f36f 13c7 	bfc	r3, #7, #1
  40245a:	7453      	strb	r3, [r2, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40245c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402460:	fab3 f383 	clz	r3, r3
  402464:	095b      	lsrs	r3, r3, #5
  402466:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402468:	b672      	cpsid	i
  40246a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40246e:	2200      	movs	r2, #0
  402470:	4b17      	ldr	r3, [pc, #92]	; (4024d0 <udd_ep_run+0x170>)
  402472:	701a      	strb	r2, [r3, #0]
	return flags;
  402474:	9d01      	ldr	r5, [sp, #4]
	udd_enable_endpoint_interrupt(ep);
  402476:	2301      	movs	r3, #1
  402478:	40bb      	lsls	r3, r7
  40247a:	4a16      	ldr	r2, [pc, #88]	; (4024d4 <udd_ep_run+0x174>)
  40247c:	6113      	str	r3, [r2, #16]
	if (b_dir_in) {
  40247e:	f010 0f80 	tst.w	r0, #128	; 0x80
  402482:	d107      	bne.n	402494 <udd_ep_run+0x134>
	if (cpu_irq_is_enabled_flags(flags))
  402484:	b305      	cbz	r5, 4024c8 <udd_ep_run+0x168>
		cpu_irq_enable();
  402486:	2001      	movs	r0, #1
  402488:	4b11      	ldr	r3, [pc, #68]	; (4024d0 <udd_ep_run+0x170>)
  40248a:	7018      	strb	r0, [r3, #0]
  40248c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402490:	b662      	cpsie	i
  402492:	e00f      	b.n	4024b4 <udd_ep_run+0x154>
		if (Is_udd_in_pending(ep)) {
  402494:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402496:	f013 0f11 	tst.w	r3, #17
  40249a:	d1f3      	bne.n	402484 <udd_ep_run+0x124>
			if (udd_ep_in_sent(ep, true)) {
  40249c:	2101      	movs	r1, #1
  40249e:	4638      	mov	r0, r7
  4024a0:	4b0d      	ldr	r3, [pc, #52]	; (4024d8 <udd_ep_run+0x178>)
  4024a2:	4798      	blx	r3
  4024a4:	2800      	cmp	r0, #0
  4024a6:	d0ed      	beq.n	402484 <udd_ep_run+0x124>
				udd_ep_in_sent(ep, false);
  4024a8:	2100      	movs	r1, #0
  4024aa:	4638      	mov	r0, r7
  4024ac:	4b0a      	ldr	r3, [pc, #40]	; (4024d8 <udd_ep_run+0x178>)
  4024ae:	4798      	blx	r3
  4024b0:	e7e8      	b.n	402484 <udd_ep_run+0x124>
		return false;
  4024b2:	2000      	movs	r0, #0
}
  4024b4:	b003      	add	sp, #12
  4024b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  4024b8:	2000      	movs	r0, #0
  4024ba:	e7fb      	b.n	4024b4 <udd_ep_run+0x154>
  4024bc:	2000      	movs	r0, #0
  4024be:	e7f9      	b.n	4024b4 <udd_ep_run+0x154>
  4024c0:	2000      	movs	r0, #0
  4024c2:	e7f7      	b.n	4024b4 <udd_ep_run+0x154>
		return false; // Job already on going
  4024c4:	2000      	movs	r0, #0
  4024c6:	e7f5      	b.n	4024b4 <udd_ep_run+0x154>
	return true;
  4024c8:	2001      	movs	r0, #1
  4024ca:	e7f3      	b.n	4024b4 <udd_ep_run+0x154>
  4024cc:	20000da8 	.word	0x20000da8
  4024d0:	20000200 	.word	0x20000200
  4024d4:	40034000 	.word	0x40034000
  4024d8:	00401389 	.word	0x00401389

004024dc <udd_ep_abort>:
{
  4024dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4024de:	b087      	sub	sp, #28
	ep &= USB_EP_ADDR_MASK;
  4024e0:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  4024e4:	2d03      	cmp	r5, #3
  4024e6:	d840      	bhi.n	40256a <udd_ep_abort+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4024e8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4024ec:	fab3 f383 	clz	r3, r3
  4024f0:	095b      	lsrs	r3, r3, #5
  4024f2:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  4024f4:	b672      	cpsid	i
  4024f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4024fa:	2200      	movs	r2, #0
  4024fc:	4b4b      	ldr	r3, [pc, #300]	; (40262c <udd_ep_abort+0x150>)
  4024fe:	701a      	strb	r2, [r3, #0]
	return flags;
  402500:	9b05      	ldr	r3, [sp, #20]
	udd_disable_endpoint_interrupt(ep);
  402502:	2401      	movs	r4, #1
  402504:	40ac      	lsls	r4, r5
  402506:	4a4a      	ldr	r2, [pc, #296]	; (402630 <udd_ep_abort+0x154>)
  402508:	6154      	str	r4, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  40250a:	b12b      	cbz	r3, 402518 <udd_ep_abort+0x3c>
		cpu_irq_enable();
  40250c:	2201      	movs	r2, #1
  40250e:	4b47      	ldr	r3, [pc, #284]	; (40262c <udd_ep_abort+0x150>)
  402510:	701a      	strb	r2, [r3, #0]
  402512:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402516:	b662      	cpsie	i
	if (b_dir_in) {
  402518:	f010 0f80 	tst.w	r0, #128	; 0x80
  40251c:	d127      	bne.n	40256e <udd_ep_abort+0x92>
  40251e:	00ae      	lsls	r6, r5, #2
  402520:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  402524:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
		while(Is_udd_any_bank_received(ep)) {
  402528:	6b33      	ldr	r3, [r6, #48]	; 0x30
  40252a:	f013 0f42 	tst.w	r3, #66	; 0x42
  40252e:	d006      	beq.n	40253e <udd_ep_abort+0x62>
			udd_ep_ack_out_received(ep);
  402530:	4f40      	ldr	r7, [pc, #256]	; (402634 <udd_ep_abort+0x158>)
  402532:	4628      	mov	r0, r5
  402534:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  402536:	6b33      	ldr	r3, [r6, #48]	; 0x30
  402538:	f013 0f42 	tst.w	r3, #66	; 0x42
  40253c:	d1f9      	bne.n	402532 <udd_ep_abort+0x56>
	udd_reset_endpoint(ep);
  40253e:	4a3c      	ldr	r2, [pc, #240]	; (402630 <udd_ep_abort+0x154>)
  402540:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402542:	4323      	orrs	r3, r4
  402544:	6293      	str	r3, [r2, #40]	; 0x28
  402546:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402548:	421c      	tst	r4, r3
  40254a:	d0fc      	beq.n	402546 <udd_ep_abort+0x6a>
  40254c:	4a38      	ldr	r2, [pc, #224]	; (402630 <udd_ep_abort+0x154>)
  40254e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402550:	ea23 0404 	bic.w	r4, r3, r4
  402554:	6294      	str	r4, [r2, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402556:	1e68      	subs	r0, r5, #1
  402558:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40255c:	462a      	mov	r2, r5
  40255e:	2101      	movs	r1, #1
  402560:	4b35      	ldr	r3, [pc, #212]	; (402638 <udd_ep_abort+0x15c>)
  402562:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402566:	4b35      	ldr	r3, [pc, #212]	; (40263c <udd_ep_abort+0x160>)
  402568:	4798      	blx	r3
}
  40256a:	b007      	add	sp, #28
  40256c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40256e:	00ab      	lsls	r3, r5, #2
  402570:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402574:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		if (Is_udd_transmit_ready(ep)) {
  402578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40257a:	f012 0f10 	tst.w	r2, #16
  40257e:	d03a      	beq.n	4025f6 <udd_ep_abort+0x11a>
			udd_kill_data_in_fifo(ep,
  402580:	b34d      	cbz	r5, 4025d6 <udd_ep_abort+0xfa>
  402582:	2d03      	cmp	r5, #3
  402584:	d027      	beq.n	4025d6 <udd_ep_abort+0xfa>
  402586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402588:	9201      	str	r2, [sp, #4]
  40258a:	9a01      	ldr	r2, [sp, #4]
  40258c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402590:	9201      	str	r2, [sp, #4]
  402592:	9a01      	ldr	r2, [sp, #4]
  402594:	f022 0210 	bic.w	r2, r2, #16
  402598:	9201      	str	r2, [sp, #4]
  40259a:	9a01      	ldr	r2, [sp, #4]
  40259c:	631a      	str	r2, [r3, #48]	; 0x30
  40259e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4025a0:	f012 0f10 	tst.w	r2, #16
  4025a4:	d1fb      	bne.n	40259e <udd_ep_abort+0xc2>
  4025a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4025a8:	f012 0f10 	tst.w	r2, #16
  4025ac:	d1fb      	bne.n	4025a6 <udd_ep_abort+0xca>
  4025ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4025b0:	9202      	str	r2, [sp, #8]
  4025b2:	9a02      	ldr	r2, [sp, #8]
  4025b4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4025b8:	9202      	str	r2, [sp, #8]
  4025ba:	9a02      	ldr	r2, [sp, #8]
  4025bc:	f042 0210 	orr.w	r2, r2, #16
  4025c0:	9202      	str	r2, [sp, #8]
  4025c2:	9a02      	ldr	r2, [sp, #8]
  4025c4:	631a      	str	r2, [r3, #48]	; 0x30
  4025c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4025c8:	f012 0f10 	tst.w	r2, #16
  4025cc:	d0fb      	beq.n	4025c6 <udd_ep_abort+0xea>
  4025ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4025d0:	f012 0f10 	tst.w	r2, #16
  4025d4:	d0fb      	beq.n	4025ce <udd_ep_abort+0xf2>
  4025d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4025d8:	9203      	str	r2, [sp, #12]
  4025da:	9a03      	ldr	r2, [sp, #12]
  4025dc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4025e0:	9203      	str	r2, [sp, #12]
  4025e2:	9a03      	ldr	r2, [sp, #12]
  4025e4:	f022 0210 	bic.w	r2, r2, #16
  4025e8:	9203      	str	r2, [sp, #12]
  4025ea:	9a03      	ldr	r2, [sp, #12]
  4025ec:	631a      	str	r2, [r3, #48]	; 0x30
  4025ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4025f0:	f012 0f10 	tst.w	r2, #16
  4025f4:	d1fb      	bne.n	4025ee <udd_ep_abort+0x112>
		udd_ack_in_sent(ep);
  4025f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4025f8:	9204      	str	r2, [sp, #16]
  4025fa:	9a04      	ldr	r2, [sp, #16]
  4025fc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402600:	9204      	str	r2, [sp, #16]
  402602:	9a04      	ldr	r2, [sp, #16]
  402604:	f022 0201 	bic.w	r2, r2, #1
  402608:	9204      	str	r2, [sp, #16]
  40260a:	9a04      	ldr	r2, [sp, #16]
  40260c:	631a      	str	r2, [r3, #48]	; 0x30
  40260e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402610:	f012 0f01 	tst.w	r2, #1
  402614:	d1fb      	bne.n	40260e <udd_ep_abort+0x132>
		udd_ep_job[ep - 1].bank = 0;
  402616:	1e6b      	subs	r3, r5, #1
  402618:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  40261c:	4b06      	ldr	r3, [pc, #24]	; (402638 <udd_ep_abort+0x15c>)
  40261e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402622:	7c5a      	ldrb	r2, [r3, #17]
  402624:	f36f 0283 	bfc	r2, #2, #2
  402628:	745a      	strb	r2, [r3, #17]
  40262a:	e788      	b.n	40253e <udd_ep_abort+0x62>
  40262c:	20000200 	.word	0x20000200
  402630:	40034000 	.word	0x40034000
  402634:	004012b5 	.word	0x004012b5
  402638:	20000da8 	.word	0x20000da8
  40263c:	00401275 	.word	0x00401275

00402640 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  402640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402644:	6043      	str	r3, [r0, #4]
  402646:	4770      	bx	lr

00402648 <init>:
}


//functions
uint8_t init(void *ptr) //initialize communication
{
  402648:	b508      	push	{r3, lr}
	bool result = 0;	//set result to false
	
	udc_start();  //USB stack, ASF
  40264a:	4b02      	ldr	r3, [pc, #8]	; (402654 <init+0xc>)
  40264c:	4798      	blx	r3
	result = 1;
	
	return result;	//return result
}
  40264e:	2001      	movs	r0, #1
  402650:	bd08      	pop	{r3, pc}
  402652:	bf00      	nop
  402654:	004009b5 	.word	0x004009b5

00402658 <available>:

uint8_t available() //return length of data in receive buffer
{
  402658:	b508      	push	{r3, lr}
	return udi_cdc_get_nb_received_data();  //return length of data in receive buffer
  40265a:	4b02      	ldr	r3, [pc, #8]	; (402664 <available+0xc>)
  40265c:	4798      	blx	r3
}
  40265e:	b2c0      	uxtb	r0, r0
  402660:	bd08      	pop	{r3, pc}
  402662:	bf00      	nop
  402664:	00400429 	.word	0x00400429

00402668 <read>:

uint8_t read()  //return char from receive buffer
{
  402668:	b508      	push	{r3, lr}
	return udi_cdc_getc();	//return char
  40266a:	4b02      	ldr	r3, [pc, #8]	; (402674 <read+0xc>)
  40266c:	4798      	blx	r3
}
  40266e:	b2c0      	uxtb	r0, r0
  402670:	bd08      	pop	{r3, pc}
  402672:	bf00      	nop
  402674:	004006b1 	.word	0x004006b1

00402678 <write>:

uint8_t write(uint8_t *payload) //write single char
{
  402678:	b500      	push	{lr}
  40267a:	b083      	sub	sp, #12
  40267c:	ab02      	add	r3, sp, #8
  40267e:	f843 0d04 	str.w	r0, [r3, #-4]!
	return udi_cdc_write_buf(&payload, 1);	//return result
  402682:	2101      	movs	r1, #1
  402684:	4618      	mov	r0, r3
  402686:	4b03      	ldr	r3, [pc, #12]	; (402694 <write+0x1c>)
  402688:	4798      	blx	r3
}
  40268a:	b2c0      	uxtb	r0, r0
  40268c:	b003      	add	sp, #12
  40268e:	f85d fb04 	ldr.w	pc, [sp], #4
  402692:	bf00      	nop
  402694:	00400805 	.word	0x00400805

00402698 <printbuf>:

uint8_t printbuf(uint8_t *bufPtr, uint8_t len)  //print buffer
{
  402698:	b508      	push	{r3, lr}
	return udi_cdc_write_buf(bufPtr, len);	//return result
  40269a:	4b02      	ldr	r3, [pc, #8]	; (4026a4 <printbuf+0xc>)
  40269c:	4798      	blx	r3
}
  40269e:	b2c0      	uxtb	r0, r0
  4026a0:	bd08      	pop	{r3, pc}
  4026a2:	bf00      	nop
  4026a4:	00400805 	.word	0x00400805

004026a8 <getComInterface>:
}
  4026a8:	4800      	ldr	r0, [pc, #0]	; (4026ac <getComInterface+0x4>)
  4026aa:	4770      	bx	lr
  4026ac:	20000110 	.word	0x20000110

004026b0 <pio_init>:
}


#if ADC_CORE_DEBUG == 1
void pio_init (void)
{
  4026b0:	b570      	push	{r4, r5, r6, lr}
  4026b2:	b082      	sub	sp, #8
	pmc_enable_periph_clk(ID_PIOA);
  4026b4:	200b      	movs	r0, #11
  4026b6:	4b0a      	ldr	r3, [pc, #40]	; (4026e0 <pio_init+0x30>)
  4026b8:	4798      	blx	r3
	pio_set_output(PIOA, ADC_DEBUG_PIN, LOW, DISABLE, DISABLE); //indicator pin for ADC
  4026ba:	4e0a      	ldr	r6, [pc, #40]	; (4026e4 <pio_init+0x34>)
  4026bc:	2400      	movs	r4, #0
  4026be:	9400      	str	r4, [sp, #0]
  4026c0:	4623      	mov	r3, r4
  4026c2:	4622      	mov	r2, r4
  4026c4:	f44f 7100 	mov.w	r1, #512	; 0x200
  4026c8:	4630      	mov	r0, r6
  4026ca:	4d07      	ldr	r5, [pc, #28]	; (4026e8 <pio_init+0x38>)
  4026cc:	47a8      	blx	r5
	pio_set_output(PIOA, TIMER_DEBUG_PIN, LOW, DISABLE, DISABLE);//indicator pin for Timer0
  4026ce:	9400      	str	r4, [sp, #0]
  4026d0:	4623      	mov	r3, r4
  4026d2:	4622      	mov	r2, r4
  4026d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4026d8:	4630      	mov	r0, r6
  4026da:	47a8      	blx	r5
}
  4026dc:	b002      	add	sp, #8
  4026de:	bd70      	pop	{r4, r5, r6, pc}
  4026e0:	0040327d 	.word	0x0040327d
  4026e4:	400e0e00 	.word	0x400e0e00
  4026e8:	0040313f 	.word	0x0040313f

004026ec <core_init>:




void core_init (void)
{
  4026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//init adc
	pmc_enable_periph_clk(ID_ADC); //PMC = power management controller
  4026ee:	201d      	movs	r0, #29
  4026f0:	4d37      	ldr	r5, [pc, #220]	; (4027d0 <core_init+0xe4>)
  4026f2:	47a8      	blx	r5
	adc_init(ADC, sysclk_get_cpu_hz(), ADC_CLK, 0);
  4026f4:	4c37      	ldr	r4, [pc, #220]	; (4027d4 <core_init+0xe8>)
  4026f6:	2300      	movs	r3, #0
  4026f8:	4a37      	ldr	r2, [pc, #220]	; (4027d8 <core_init+0xec>)
  4026fa:	4938      	ldr	r1, [pc, #224]	; (4027dc <core_init+0xf0>)
  4026fc:	4620      	mov	r0, r4
  4026fe:	4e38      	ldr	r6, [pc, #224]	; (4027e0 <core_init+0xf4>)
  402700:	47b0      	blx	r6
	adc_configure_timing(ADC, 15, ADC_SETTLING_TIME_0, 0);
  402702:	2300      	movs	r3, #0
  402704:	461a      	mov	r2, r3
  402706:	210f      	movs	r1, #15
  402708:	4620      	mov	r0, r4
  40270a:	4e36      	ldr	r6, [pc, #216]	; (4027e4 <core_init+0xf8>)
  40270c:	47b0      	blx	r6
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0); //! WARNING! Bug in ASF! ADC_MR_FREERUN_ON doesn't actually enables free run mode!
  40270e:	2200      	movs	r2, #0
  402710:	4611      	mov	r1, r2
  402712:	4620      	mov	r0, r4
  402714:	4b34      	ldr	r3, [pc, #208]	; (4027e8 <core_init+0xfc>)
  402716:	4798      	blx	r3
	//adc_check(ADC, sysclk_get_cpu_hz());
	ADC->ADC_COR |= (ADC_COR_DIFF0 | ADC_COR_DIFF1 | ADC_COR_DIFF2 | ADC_COR_DIFF3
  402718:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  40271a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
  40271e:	64e3      	str	r3, [r4, #76]	; 0x4c
	//TODO: make this configurable from settings->adcGain
	//TODO: call core_init before core_configure, so you can set adcGain
	//If adcGain has not been set, use default value.
	int gain = 0x11;
	//int gain = settings->adcGain;
	ADC -> ADC_CGR = ( ADC_CGR_GAIN0(gain) | ADC_CGR_GAIN1(gain) | ADC_CGR_GAIN2(gain) | ADC_CGR_GAIN3(gain));
  402720:	2355      	movs	r3, #85	; 0x55
  402722:	64a3      	str	r3, [r4, #72]	; 0x48
	
	adc_set_bias_current(ADC, 1);
  402724:	2101      	movs	r1, #1
  402726:	4620      	mov	r0, r4
  402728:	4b30      	ldr	r3, [pc, #192]	; (4027ec <core_init+0x100>)
  40272a:	4798      	blx	r3
	#if ADC_CORE_DEBUG == 1
	pio_init();
  40272c:	4b30      	ldr	r3, [pc, #192]	; (4027f0 <core_init+0x104>)
  40272e:	4798      	blx	r3
	#endif //ADC_CORE_DEBUG == 1

	adc_pdc_pntr = adc_get_pdc_base(ADC); // init DMA
  402730:	4620      	mov	r0, r4
  402732:	4b30      	ldr	r3, [pc, #192]	; (4027f4 <core_init+0x108>)
  402734:	4798      	blx	r3
  402736:	4b30      	ldr	r3, [pc, #192]	; (4027f8 <core_init+0x10c>)
  402738:	6018      	str	r0, [r3, #0]

	//Both pdc1 & pdc2:
	//	!Warning		assignment makes integer from pointer without a cast [-Wint-conversion]
	adc_pdc1.ul_addr = adc_raw_data1;
  40273a:	4a30      	ldr	r2, [pc, #192]	; (4027fc <core_init+0x110>)
  40273c:	4b30      	ldr	r3, [pc, #192]	; (402800 <core_init+0x114>)
  40273e:	601a      	str	r2, [r3, #0]
	adc_pdc2.ul_addr = adc_raw_data2;
  402740:	4a30      	ldr	r2, [pc, #192]	; (402804 <core_init+0x118>)
  402742:	4b31      	ldr	r3, [pc, #196]	; (402808 <core_init+0x11c>)
  402744:	601a      	str	r2, [r3, #0]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402746:	4c31      	ldr	r4, [pc, #196]	; (40280c <core_init+0x120>)
  402748:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  40274c:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402750:	2740      	movs	r7, #64	; 0x40
  402752:	f884 731d 	strb.w	r7, [r4, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  402756:	6023      	str	r3, [r4, #0]
	NVIC_ClearPendingIRQ(ADC_IRQn);
	NVIC_SetPriority(ADC_IRQn, ADC_IRQ_PRIORITY);
	NVIC_EnableIRQ(ADC_IRQn);

	//init timer 0
	pmc_enable_periph_clk(ID_TC0); //Enable a peripheral's clock
  402758:	2017      	movs	r0, #23
  40275a:	47a8      	blx	r5
	tc_init(TC0, TIMER_CH, TC_CMR_TCCLKS_TIMER_CLOCK4 | TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC ); //Configure TC for timer, waveform generation, or capture.
  40275c:	4e2c      	ldr	r6, [pc, #176]	; (402810 <core_init+0x124>)
  40275e:	f24c 0203 	movw	r2, #49155	; 0xc003
  402762:	2100      	movs	r1, #0
  402764:	4630      	mov	r0, r6
  402766:	4b2b      	ldr	r3, [pc, #172]	; (402814 <core_init+0x128>)
  402768:	4798      	blx	r3
	tc_write_rc(TC0, TIMER_CH, 50000); // Write to TC Register C (RC) on the selected channel.
  40276a:	f24c 3250 	movw	r2, #50000	; 0xc350
  40276e:	2100      	movs	r1, #0
  402770:	4630      	mov	r0, r6
  402772:	4b29      	ldr	r3, [pc, #164]	; (402818 <core_init+0x12c>)
  402774:	4798      	blx	r3
	tc_enable_interrupt(TC0, TIMER_CH, TC_IER_CPCS); //Enable the TC interrupts on the specified channel.
  402776:	2210      	movs	r2, #16
  402778:	2100      	movs	r1, #0
  40277a:	4630      	mov	r0, r6
  40277c:	4b27      	ldr	r3, [pc, #156]	; (40281c <core_init+0x130>)
  40277e:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402780:	f884 7317 	strb.w	r7, [r4, #791]	; 0x317
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  402784:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  402788:	6023      	str	r3, [r4, #0]
	NVIC_EnableIRQ(TC0_IRQn); //Enable External Interrupt
	
	
	//DAC INIT
	//sysclk_enable_peripheral_clock(ID_DACC); // enable clock for DACC
	pmc_enable_periph_clk(ID_DACC); // enable clock for DACC
  40278a:	201e      	movs	r0, #30
  40278c:	47a8      	blx	r5
	
	//begin DACC configuration by resetting the DACC hardware
	/* Reset DACC registers */
	dacc_reset(DACC);
  40278e:	4c24      	ldr	r4, [pc, #144]	; (402820 <core_init+0x134>)
  402790:	4620      	mov	r0, r4
  402792:	4b24      	ldr	r3, [pc, #144]	; (402824 <core_init+0x138>)
  402794:	4798      	blx	r3
	
	//write one 16-bit value at a time, not two 16-bit values in one 32-bit word
	/* Half word transfer mode */
	dacc_set_transfer_mode(DACC, 0); 
  402796:	2100      	movs	r1, #0
  402798:	4620      	mov	r0, r4
  40279a:	4b23      	ldr	r3, [pc, #140]	; (402828 <core_init+0x13c>)
  40279c:	4798      	blx	r3
	
	/* Power save:
	 * sleep mode  - 0 (disabled)
	 * fast wakeup - 0 (disabled) */
	dacc_set_power_save(DACC, 0, 0);
  40279e:	2200      	movs	r2, #0
  4027a0:	4611      	mov	r1, r2
  4027a2:	4620      	mov	r0, r4
  4027a4:	4b21      	ldr	r3, [pc, #132]	; (40282c <core_init+0x140>)
  4027a6:	4798      	blx	r3
	
	//select channel 0 and 1, #define in core.h
	/* Disable TAG and select output channel DACC_CHANNEL */
	dacc_set_channel_selection(DACC, DACC_CHANNEL0);
  4027a8:	2100      	movs	r1, #0
  4027aa:	4620      	mov	r0, r4
  4027ac:	4d20      	ldr	r5, [pc, #128]	; (402830 <core_init+0x144>)
  4027ae:	47a8      	blx	r5
	dacc_set_channel_selection(DACC, DACC_CHANNEL1);
  4027b0:	2101      	movs	r1, #1
  4027b2:	4620      	mov	r0, r4
  4027b4:	47a8      	blx	r5
//dacc_set_timing(DACC, 0x08, 0, 0x10);
	

	
	//dacc_enable(DACC);
	dacc_enable_channel(DACC, DACC_CHANNEL0);
  4027b6:	2100      	movs	r1, #0
  4027b8:	4620      	mov	r0, r4
  4027ba:	4d1e      	ldr	r5, [pc, #120]	; (402834 <core_init+0x148>)
  4027bc:	47a8      	blx	r5
	dacc_enable_channel(DACC, DACC_CHANNEL1);	
  4027be:	2101      	movs	r1, #1
  4027c0:	4620      	mov	r0, r4
  4027c2:	47a8      	blx	r5
	//dacc_analog_control defined in core.h
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
  4027c4:	f44f 7185 	mov.w	r1, #266	; 0x10a
  4027c8:	4620      	mov	r0, r4
  4027ca:	4b1b      	ldr	r3, [pc, #108]	; (402838 <core_init+0x14c>)
  4027cc:	4798      	blx	r3
  4027ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4027d0:	0040327d 	.word	0x0040327d
  4027d4:	40038000 	.word	0x40038000
  4027d8:	00f42400 	.word	0x00f42400
  4027dc:	02dc6c00 	.word	0x02dc6c00
  4027e0:	00400e59 	.word	0x00400e59
  4027e4:	00400e9b 	.word	0x00400e9b
  4027e8:	00400e8d 	.word	0x00400e8d
  4027ec:	00400ed7 	.word	0x00400ed7
  4027f0:	004026b1 	.word	0x004026b1
  4027f4:	00400ee9 	.word	0x00400ee9
  4027f8:	20000e8c 	.word	0x20000e8c
  4027fc:	20000e80 	.word	0x20000e80
  402800:	20000e74 	.word	0x20000e74
  402804:	20000e68 	.word	0x20000e68
  402808:	20000e4c 	.word	0x20000e4c
  40280c:	e000e100 	.word	0xe000e100
  402810:	40010000 	.word	0x40010000
  402814:	00403359 	.word	0x00403359
  402818:	00403381 	.word	0x00403381
  40281c:	00403389 	.word	0x00403389
  402820:	4003c000 	.word	0x4003c000
  402824:	0040307d 	.word	0x0040307d
  402828:	00403083 	.word	0x00403083
  40282c:	004030bb 	.word	0x004030bb
  402830:	004030a3 	.word	0x004030a3
  402834:	004030e7 	.word	0x004030e7
  402838:	004030fb 	.word	0x004030fb

0040283c <timer_set_compare_time>:

}

void timer_set_compare_time (uint32_t tim)
{
  40283c:	b508      	push	{r3, lr}
	if(tim > 50000) tim = 50000;
	tc_write_rc(TC0, TIMER_CH, tim);
  40283e:	f24c 3250 	movw	r2, #50000	; 0xc350
  402842:	4282      	cmp	r2, r0
  402844:	bf28      	it	cs
  402846:	4602      	movcs	r2, r0
  402848:	2100      	movs	r1, #0
  40284a:	4802      	ldr	r0, [pc, #8]	; (402854 <timer_set_compare_time+0x18>)
  40284c:	4b02      	ldr	r3, [pc, #8]	; (402858 <timer_set_compare_time+0x1c>)
  40284e:	4798      	blx	r3
  402850:	bd08      	pop	{r3, pc}
  402852:	bf00      	nop
  402854:	40010000 	.word	0x40010000
  402858:	00403381 	.word	0x00403381

0040285c <DacSetVal>:
	//DacSetVal(0, settings->DACval[0]);

}

void DacSetVal(daq_settings_t *settings)
{	
  40285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40285e:	4604      	mov	r4, r0
	int status = dacc_get_interrupt_status(DACC);
  402860:	480d      	ldr	r0, [pc, #52]	; (402898 <DacSetVal+0x3c>)
  402862:	4b0e      	ldr	r3, [pc, #56]	; (40289c <DacSetVal+0x40>)
  402864:	4798      	blx	r3

	if ((status & DACC_ISR_TXRDY) == DACC_ISR_TXRDY && settings->DacFlag==1)
  402866:	f010 0f01 	tst.w	r0, #1
  40286a:	d002      	beq.n	402872 <DacSetVal+0x16>
  40286c:	7aa3      	ldrb	r3, [r4, #10]
  40286e:	2b01      	cmp	r3, #1
  402870:	d000      	beq.n	402874 <DacSetVal+0x18>
  402872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
		settings->DacFlag==0;
		//loop for both channels
		for(int i=0;i<2;i++){
			dacc_set_channel_selection(DACC, i); //first channel 0, then channel 1			
  402874:	4d08      	ldr	r5, [pc, #32]	; (402898 <DacSetVal+0x3c>)
  402876:	2100      	movs	r1, #0
  402878:	4628      	mov	r0, r5
  40287a:	4f09      	ldr	r7, [pc, #36]	; (4028a0 <DacSetVal+0x44>)
  40287c:	47b8      	blx	r7
			dacc_write_conversion_data(DACC, settings->DACval[i]);
  40287e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  402882:	4628      	mov	r0, r5
  402884:	4e07      	ldr	r6, [pc, #28]	; (4028a4 <DacSetVal+0x48>)
  402886:	47b0      	blx	r6
			dacc_set_channel_selection(DACC, i); //first channel 0, then channel 1			
  402888:	2101      	movs	r1, #1
  40288a:	4628      	mov	r0, r5
  40288c:	47b8      	blx	r7
			dacc_write_conversion_data(DACC, settings->DACval[i]);
  40288e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  402892:	4628      	mov	r0, r5
  402894:	47b0      	blx	r6
		}
	}
}
  402896:	e7ec      	b.n	402872 <DacSetVal+0x16>
  402898:	4003c000 	.word	0x4003c000
  40289c:	0040309b 	.word	0x0040309b
  4028a0:	004030a3 	.word	0x004030a3
  4028a4:	0040309f 	.word	0x0040309f

004028a8 <core_start>:

void core_start (void)
{
  4028a8:	b508      	push	{r3, lr}
	pdc_enable_transfer(adc_pdc_pntr, PERIPH_PTCR_RXTEN);
  4028aa:	2101      	movs	r1, #1
  4028ac:	4b07      	ldr	r3, [pc, #28]	; (4028cc <core_start+0x24>)
  4028ae:	6818      	ldr	r0, [r3, #0]
  4028b0:	4b07      	ldr	r3, [pc, #28]	; (4028d0 <core_start+0x28>)
  4028b2:	4798      	blx	r3
	acqusition_in_progress = 1;
  4028b4:	2201      	movs	r2, #1
  4028b6:	4b07      	ldr	r3, [pc, #28]	; (4028d4 <core_start+0x2c>)
  4028b8:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TIMER_CH);
  4028ba:	2100      	movs	r1, #0
  4028bc:	4806      	ldr	r0, [pc, #24]	; (4028d8 <core_start+0x30>)
  4028be:	4b07      	ldr	r3, [pc, #28]	; (4028dc <core_start+0x34>)
  4028c0:	4798      	blx	r3
	//ADC->ADC_MR |= ADC_MR_FREERUN; //due to a bug in ASF we enable freerun mode manualy
	adc_start(ADC);
  4028c2:	4807      	ldr	r0, [pc, #28]	; (4028e0 <core_start+0x38>)
  4028c4:	4b07      	ldr	r3, [pc, #28]	; (4028e4 <core_start+0x3c>)
  4028c6:	4798      	blx	r3
  4028c8:	bd08      	pop	{r3, pc}
  4028ca:	bf00      	nop
  4028cc:	20000e8c 	.word	0x20000e8c
  4028d0:	0040311b 	.word	0x0040311b
  4028d4:	20000de4 	.word	0x20000de4
  4028d8:	40010000 	.word	0x40010000
  4028dc:	00403371 	.word	0x00403371
  4028e0:	40038000 	.word	0x40038000
  4028e4:	00400eb7 	.word	0x00400eb7

004028e8 <core_clear_avg_acuum>:
{
	uint32_t n;
	//clear averageing accumulator
	for(n = 0; n < ADC_RAW_DATA_SIZE; n++)
	{
		adc_raw_accumulator[n] = 0;
  4028e8:	4b03      	ldr	r3, [pc, #12]	; (4028f8 <core_clear_avg_acuum+0x10>)
  4028ea:	2200      	movs	r2, #0
  4028ec:	601a      	str	r2, [r3, #0]
  4028ee:	605a      	str	r2, [r3, #4]
  4028f0:	609a      	str	r2, [r3, #8]
  4028f2:	60da      	str	r2, [r3, #12]
  4028f4:	4770      	bx	lr
  4028f6:	bf00      	nop
  4028f8:	20000e58 	.word	0x20000e58

004028fc <core_configure>:
{
  4028fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402900:	4605      	mov	r5, r0
	core_clear_avg_acuum ();
  402902:	4b20      	ldr	r3, [pc, #128]	; (402984 <core_configure+0x88>)
  402904:	4798      	blx	r3
	adc_disable_all_channel(ADC);
  402906:	4820      	ldr	r0, [pc, #128]	; (402988 <core_configure+0x8c>)
  402908:	4b20      	ldr	r3, [pc, #128]	; (40298c <core_configure+0x90>)
  40290a:	4798      	blx	r3
  40290c:	f105 040c 	add.w	r4, r5, #12
  402910:	f105 0610 	add.w	r6, r5, #16
			nb_enables_ch ++;
  402914:	4f1e      	ldr	r7, [pc, #120]	; (402990 <core_configure+0x94>)
			adc_enable_channel(ADC, settings->sequence[n]);
  402916:	f8df 9070 	ldr.w	r9, [pc, #112]	; 402988 <core_configure+0x8c>
  40291a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 4029c4 <core_configure+0xc8>
  40291e:	e001      	b.n	402924 <core_configure+0x28>
	for(n = 0; n < 4; n++)
  402920:	42b4      	cmp	r4, r6
  402922:	d009      	beq.n	402938 <core_configure+0x3c>
		if(settings->sequence[n] > 0) // 0 = No channel
  402924:	f814 1b01 	ldrb.w	r1, [r4], #1
  402928:	2900      	cmp	r1, #0
  40292a:	d0f9      	beq.n	402920 <core_configure+0x24>
			nb_enables_ch ++;
  40292c:	683b      	ldr	r3, [r7, #0]
  40292e:	3301      	adds	r3, #1
  402930:	603b      	str	r3, [r7, #0]
			adc_enable_channel(ADC, settings->sequence[n]);
  402932:	4648      	mov	r0, r9
  402934:	47c0      	blx	r8
  402936:	e7f3      	b.n	402920 <core_configure+0x24>
	adc_pdc1.ul_size = nb_enables_ch;
  402938:	4b15      	ldr	r3, [pc, #84]	; (402990 <core_configure+0x94>)
  40293a:	681b      	ldr	r3, [r3, #0]
  40293c:	4915      	ldr	r1, [pc, #84]	; (402994 <core_configure+0x98>)
  40293e:	604b      	str	r3, [r1, #4]
	adc_pdc2.ul_size = nb_enables_ch;
  402940:	4a15      	ldr	r2, [pc, #84]	; (402998 <core_configure+0x9c>)
  402942:	6053      	str	r3, [r2, #4]
	pdc_rx_init(adc_pdc_pntr, &adc_pdc1, &adc_pdc2);
  402944:	4b15      	ldr	r3, [pc, #84]	; (40299c <core_configure+0xa0>)
  402946:	6818      	ldr	r0, [r3, #0]
  402948:	4b15      	ldr	r3, [pc, #84]	; (4029a0 <core_configure+0xa4>)
  40294a:	4798      	blx	r3
	data_bank = 0;
  40294c:	2200      	movs	r2, #0
  40294e:	4b15      	ldr	r3, [pc, #84]	; (4029a4 <core_configure+0xa8>)
  402950:	601a      	str	r2, [r3, #0]
	adc_enable_interrupt(ADC, ADC_IER_ENDRX);
  402952:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402956:	480c      	ldr	r0, [pc, #48]	; (402988 <core_configure+0x8c>)
  402958:	4b13      	ldr	r3, [pc, #76]	; (4029a8 <core_configure+0xac>)
  40295a:	4798      	blx	r3
	rep_cntr = settings->acquisitionNbr;
  40295c:	886a      	ldrh	r2, [r5, #2]
  40295e:	4b13      	ldr	r3, [pc, #76]	; (4029ac <core_configure+0xb0>)
  402960:	601a      	str	r2, [r3, #0]
	avg_cntr = settings->averaging;
  402962:	88ab      	ldrh	r3, [r5, #4]
  402964:	4a12      	ldr	r2, [pc, #72]	; (4029b0 <core_configure+0xb4>)
  402966:	6013      	str	r3, [r2, #0]
	avg_cnt_reload = settings->averaging;
  402968:	4a12      	ldr	r2, [pc, #72]	; (4029b4 <core_configure+0xb8>)
  40296a:	6013      	str	r3, [r2, #0]
	timer_set_compare_time(US_TO_TC(settings->acqusitionTime));
  40296c:	8828      	ldrh	r0, [r5, #0]
  40296e:	0840      	lsrs	r0, r0, #1
  402970:	4b11      	ldr	r3, [pc, #68]	; (4029b8 <core_configure+0xbc>)
  402972:	4798      	blx	r3
	TIMER_DEBUG_PIN_CLR;
  402974:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402978:	4810      	ldr	r0, [pc, #64]	; (4029bc <core_configure+0xc0>)
  40297a:	4b11      	ldr	r3, [pc, #68]	; (4029c0 <core_configure+0xc4>)
  40297c:	4798      	blx	r3
  40297e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402982:	bf00      	nop
  402984:	004028e9 	.word	0x004028e9
  402988:	40038000 	.word	0x40038000
  40298c:	00400ec7 	.word	0x00400ec7
  402990:	20000e7c 	.word	0x20000e7c
  402994:	20000e74 	.word	0x20000e74
  402998:	20000e4c 	.word	0x20000e4c
  40299c:	20000e8c 	.word	0x20000e8c
  4029a0:	00403103 	.word	0x00403103
  4029a4:	20000de8 	.word	0x20000de8
  4029a8:	00400ecf 	.word	0x00400ecf
  4029ac:	20000e90 	.word	0x20000e90
  4029b0:	20000e70 	.word	0x20000e70
  4029b4:	20000e88 	.word	0x20000e88
  4029b8:	0040283d 	.word	0x0040283d
  4029bc:	400e0e00 	.word	0x400e0e00
  4029c0:	0040313b 	.word	0x0040313b
  4029c4:	00400ebd 	.word	0x00400ebd

004029c8 <ADC_Handler>:
	}
}

void ADC_Handler (void)
{
  4029c8:	b510      	push	{r4, lr}
	uint32_t n;
	if(adc_get_status(ADC) & ADC_ISR_ENDRX) // this gets triggered when acquisition of all samples for one averaging is
  4029ca:	4833      	ldr	r0, [pc, #204]	; (402a98 <ADC_Handler+0xd0>)
  4029cc:	4b33      	ldr	r3, [pc, #204]	; (402a9c <ADC_Handler+0xd4>)
  4029ce:	4798      	blx	r3
  4029d0:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  4029d4:	d100      	bne.n	4029d8 <ADC_Handler+0x10>
  4029d6:	bd10      	pop	{r4, pc}
	{
		#if ADC_CORE_DEBUG == 1
		ADC_DEBUG_PIN_SET;
  4029d8:	f44f 7100 	mov.w	r1, #512	; 0x200
  4029dc:	4830      	ldr	r0, [pc, #192]	; (402aa0 <ADC_Handler+0xd8>)
  4029de:	4b31      	ldr	r3, [pc, #196]	; (402aa4 <ADC_Handler+0xdc>)
  4029e0:	4798      	blx	r3
		#endif //ADC_CORE_DEBUG == 1

		//ADC->ADC_MR &= (~ADC_MR_FREERUN); //stop adc
		if(!data_bank) // new data resides in adc_raw_data1
  4029e2:	4b31      	ldr	r3, [pc, #196]	; (402aa8 <ADC_Handler+0xe0>)
  4029e4:	681b      	ldr	r3, [r3, #0]
  4029e6:	2b00      	cmp	r3, #0
  4029e8:	d138      	bne.n	402a5c <ADC_Handler+0x94>
		{
			pdc_rx_init(adc_pdc_pntr, NULL, &adc_pdc2);
  4029ea:	4c30      	ldr	r4, [pc, #192]	; (402aac <ADC_Handler+0xe4>)
  4029ec:	4a30      	ldr	r2, [pc, #192]	; (402ab0 <ADC_Handler+0xe8>)
  4029ee:	2100      	movs	r1, #0
  4029f0:	6820      	ldr	r0, [r4, #0]
  4029f2:	4b30      	ldr	r3, [pc, #192]	; (402ab4 <ADC_Handler+0xec>)
  4029f4:	4798      	blx	r3
			pdc_enable_transfer(adc_pdc_pntr, PERIPH_PTCR_RXTEN);
  4029f6:	2101      	movs	r1, #1
  4029f8:	6820      	ldr	r0, [r4, #0]
  4029fa:	4b2f      	ldr	r3, [pc, #188]	; (402ab8 <ADC_Handler+0xf0>)
  4029fc:	4798      	blx	r3
			adc_start(ADC);
  4029fe:	4826      	ldr	r0, [pc, #152]	; (402a98 <ADC_Handler+0xd0>)
  402a00:	4b2e      	ldr	r3, [pc, #184]	; (402abc <ADC_Handler+0xf4>)
  402a02:	4798      	blx	r3

			data_bank = 1;
  402a04:	2201      	movs	r2, #1
  402a06:	4b28      	ldr	r3, [pc, #160]	; (402aa8 <ADC_Handler+0xe0>)
  402a08:	601a      	str	r2, [r3, #0]
  402a0a:	4b2d      	ldr	r3, [pc, #180]	; (402ac0 <ADC_Handler+0xf8>)
  402a0c:	492d      	ldr	r1, [pc, #180]	; (402ac4 <ADC_Handler+0xfc>)
  402a0e:	f103 0410 	add.w	r4, r3, #16
			for(n = 0; n < 4; n++)
			{
				adc_raw_accumulator[n] += adc_raw_data1[n];
  402a12:	f831 0b02 	ldrh.w	r0, [r1], #2
  402a16:	681a      	ldr	r2, [r3, #0]
  402a18:	4402      	add	r2, r0
  402a1a:	f843 2b04 	str.w	r2, [r3], #4
			for(n = 0; n < 4; n++)
  402a1e:	42a3      	cmp	r3, r4
  402a20:	d1f7      	bne.n	402a12 <ADC_Handler+0x4a>
			}

		}
		
		#if ADC_CORE_DEBUG == 1
		ADC_DEBUG_PIN_CLR;
  402a22:	f44f 7100 	mov.w	r1, #512	; 0x200
  402a26:	481e      	ldr	r0, [pc, #120]	; (402aa0 <ADC_Handler+0xd8>)
  402a28:	4b27      	ldr	r3, [pc, #156]	; (402ac8 <ADC_Handler+0x100>)
  402a2a:	4798      	blx	r3
		#endif //ADC_CORE_DEBUG == 1
		
		if(!(--avg_cntr))
  402a2c:	4a27      	ldr	r2, [pc, #156]	; (402acc <ADC_Handler+0x104>)
  402a2e:	6813      	ldr	r3, [r2, #0]
  402a30:	3b01      	subs	r3, #1
  402a32:	6013      	str	r3, [r2, #0]
  402a34:	2b00      	cmp	r3, #0
  402a36:	d1ce      	bne.n	4029d6 <ADC_Handler+0xe>
		{
			pdc_disable_transfer(adc_pdc_pntr, PERIPH_PTCR_RXTEN);
  402a38:	4c1c      	ldr	r4, [pc, #112]	; (402aac <ADC_Handler+0xe4>)
  402a3a:	2101      	movs	r1, #1
  402a3c:	6820      	ldr	r0, [r4, #0]
  402a3e:	4b24      	ldr	r3, [pc, #144]	; (402ad0 <ADC_Handler+0x108>)
  402a40:	4798      	blx	r3
			//do this to clear dma flag
			pdc_rx_init(adc_pdc_pntr, &adc_pdc1, NULL);
  402a42:	2200      	movs	r2, #0
  402a44:	4923      	ldr	r1, [pc, #140]	; (402ad4 <ADC_Handler+0x10c>)
  402a46:	6820      	ldr	r0, [r4, #0]
  402a48:	4b1a      	ldr	r3, [pc, #104]	; (402ab4 <ADC_Handler+0xec>)
  402a4a:	4798      	blx	r3
			//report new data
			new_data = 1;//TODO: start averaging, send data via USB 
  402a4c:	2201      	movs	r2, #1
  402a4e:	4b22      	ldr	r3, [pc, #136]	; (402ad8 <ADC_Handler+0x110>)
  402a50:	601a      	str	r2, [r3, #0]
			avg_cntr = avg_cnt_reload;
  402a52:	4b22      	ldr	r3, [pc, #136]	; (402adc <ADC_Handler+0x114>)
  402a54:	681a      	ldr	r2, [r3, #0]
  402a56:	4b1d      	ldr	r3, [pc, #116]	; (402acc <ADC_Handler+0x104>)
  402a58:	601a      	str	r2, [r3, #0]
			
		}


	}
}
  402a5a:	e7bc      	b.n	4029d6 <ADC_Handler+0xe>
			pdc_rx_init(adc_pdc_pntr, NULL, &adc_pdc1);
  402a5c:	4c13      	ldr	r4, [pc, #76]	; (402aac <ADC_Handler+0xe4>)
  402a5e:	4a1d      	ldr	r2, [pc, #116]	; (402ad4 <ADC_Handler+0x10c>)
  402a60:	2100      	movs	r1, #0
  402a62:	6820      	ldr	r0, [r4, #0]
  402a64:	4b13      	ldr	r3, [pc, #76]	; (402ab4 <ADC_Handler+0xec>)
  402a66:	4798      	blx	r3
			pdc_enable_transfer(adc_pdc_pntr, PERIPH_PTCR_RXTEN);
  402a68:	2101      	movs	r1, #1
  402a6a:	6820      	ldr	r0, [r4, #0]
  402a6c:	4b12      	ldr	r3, [pc, #72]	; (402ab8 <ADC_Handler+0xf0>)
  402a6e:	4798      	blx	r3
			adc_start(ADC);
  402a70:	4809      	ldr	r0, [pc, #36]	; (402a98 <ADC_Handler+0xd0>)
  402a72:	4b12      	ldr	r3, [pc, #72]	; (402abc <ADC_Handler+0xf4>)
  402a74:	4798      	blx	r3
			data_bank = 0;
  402a76:	2200      	movs	r2, #0
  402a78:	4b0b      	ldr	r3, [pc, #44]	; (402aa8 <ADC_Handler+0xe0>)
  402a7a:	601a      	str	r2, [r3, #0]
  402a7c:	4b10      	ldr	r3, [pc, #64]	; (402ac0 <ADC_Handler+0xf8>)
  402a7e:	4918      	ldr	r1, [pc, #96]	; (402ae0 <ADC_Handler+0x118>)
  402a80:	f103 0410 	add.w	r4, r3, #16
				adc_raw_accumulator[n] += adc_raw_data2[n];
  402a84:	f831 0b02 	ldrh.w	r0, [r1], #2
  402a88:	681a      	ldr	r2, [r3, #0]
  402a8a:	4402      	add	r2, r0
  402a8c:	f843 2b04 	str.w	r2, [r3], #4
			for(n = 0; n < ADC_RAW_DATA_SIZE; n++)
  402a90:	42a3      	cmp	r3, r4
  402a92:	d1f7      	bne.n	402a84 <ADC_Handler+0xbc>
  402a94:	e7c5      	b.n	402a22 <ADC_Handler+0x5a>
  402a96:	bf00      	nop
  402a98:	40038000 	.word	0x40038000
  402a9c:	00400ed3 	.word	0x00400ed3
  402aa0:	400e0e00 	.word	0x400e0e00
  402aa4:	00403137 	.word	0x00403137
  402aa8:	20000de8 	.word	0x20000de8
  402aac:	20000e8c 	.word	0x20000e8c
  402ab0:	20000e4c 	.word	0x20000e4c
  402ab4:	00403103 	.word	0x00403103
  402ab8:	0040311b 	.word	0x0040311b
  402abc:	00400eb7 	.word	0x00400eb7
  402ac0:	20000e58 	.word	0x20000e58
  402ac4:	20000e80 	.word	0x20000e80
  402ac8:	0040313b 	.word	0x0040313b
  402acc:	20000e70 	.word	0x20000e70
  402ad0:	00403127 	.word	0x00403127
  402ad4:	20000e74 	.word	0x20000e74
  402ad8:	20000dec 	.word	0x20000dec
  402adc:	20000e88 	.word	0x20000e88
  402ae0:	20000e68 	.word	0x20000e68

00402ae4 <TC0_Handler>:

/*
Timer/Counter 0 handler, used for ADC.
*/
void TC0_Handler (void)
{
  402ae4:	b510      	push	{r4, lr}
	if((tc_get_status(TC0, 0) & TC_SR_CPCS))
  402ae6:	2100      	movs	r1, #0
  402ae8:	4814      	ldr	r0, [pc, #80]	; (402b3c <TC0_Handler+0x58>)
  402aea:	4b15      	ldr	r3, [pc, #84]	; (402b40 <TC0_Handler+0x5c>)
  402aec:	4798      	blx	r3
  402aee:	f010 0f10 	tst.w	r0, #16
  402af2:	d100      	bne.n	402af6 <TC0_Handler+0x12>
  402af4:	bd10      	pop	{r4, pc}
	{
		#if ADC_CORE_DEBUG == 1
		TIMER_DEBUG_PIN_TGL;
  402af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402afa:	4812      	ldr	r0, [pc, #72]	; (402b44 <TC0_Handler+0x60>)
  402afc:	4b12      	ldr	r3, [pc, #72]	; (402b48 <TC0_Handler+0x64>)
  402afe:	4798      	blx	r3
		#endif //ADC_CORE_DEBUG == 1
		
		if(--rep_cntr)
  402b00:	4a12      	ldr	r2, [pc, #72]	; (402b4c <TC0_Handler+0x68>)
  402b02:	6813      	ldr	r3, [r2, #0]
  402b04:	3b01      	subs	r3, #1
  402b06:	6013      	str	r3, [r2, #0]
  402b08:	b933      	cbnz	r3, 402b18 <TC0_Handler+0x34>
			pdc_enable_transfer(adc_pdc_pntr, PERIPH_PTCR_RXTEN);
			adc_start(ADC);
		}
		else
		{
			acqusition_in_progress = 0;
  402b0a:	2100      	movs	r1, #0
  402b0c:	4b10      	ldr	r3, [pc, #64]	; (402b50 <TC0_Handler+0x6c>)
  402b0e:	6019      	str	r1, [r3, #0]
			tc_stop(TC0, TIMER_CH);
  402b10:	480a      	ldr	r0, [pc, #40]	; (402b3c <TC0_Handler+0x58>)
  402b12:	4b10      	ldr	r3, [pc, #64]	; (402b54 <TC0_Handler+0x70>)
  402b14:	4798      	blx	r3
		}
	}
  402b16:	e7ed      	b.n	402af4 <TC0_Handler+0x10>
			pdc_rx_init(adc_pdc_pntr, &adc_pdc1, &adc_pdc2);
  402b18:	4c0f      	ldr	r4, [pc, #60]	; (402b58 <TC0_Handler+0x74>)
  402b1a:	4a10      	ldr	r2, [pc, #64]	; (402b5c <TC0_Handler+0x78>)
  402b1c:	4910      	ldr	r1, [pc, #64]	; (402b60 <TC0_Handler+0x7c>)
  402b1e:	6820      	ldr	r0, [r4, #0]
  402b20:	4b10      	ldr	r3, [pc, #64]	; (402b64 <TC0_Handler+0x80>)
  402b22:	4798      	blx	r3
			data_bank = 0;
  402b24:	2200      	movs	r2, #0
  402b26:	4b10      	ldr	r3, [pc, #64]	; (402b68 <TC0_Handler+0x84>)
  402b28:	601a      	str	r2, [r3, #0]
			pdc_enable_transfer(adc_pdc_pntr, PERIPH_PTCR_RXTEN);
  402b2a:	2101      	movs	r1, #1
  402b2c:	6820      	ldr	r0, [r4, #0]
  402b2e:	4b0f      	ldr	r3, [pc, #60]	; (402b6c <TC0_Handler+0x88>)
  402b30:	4798      	blx	r3
			adc_start(ADC);
  402b32:	480f      	ldr	r0, [pc, #60]	; (402b70 <TC0_Handler+0x8c>)
  402b34:	4b0f      	ldr	r3, [pc, #60]	; (402b74 <TC0_Handler+0x90>)
  402b36:	4798      	blx	r3
  402b38:	bd10      	pop	{r4, pc}
  402b3a:	bf00      	nop
  402b3c:	40010000 	.word	0x40010000
  402b40:	00403391 	.word	0x00403391
  402b44:	400e0e00 	.word	0x400e0e00
  402b48:	0040316d 	.word	0x0040316d
  402b4c:	20000e90 	.word	0x20000e90
  402b50:	20000de4 	.word	0x20000de4
  402b54:	00403379 	.word	0x00403379
  402b58:	20000e8c 	.word	0x20000e8c
  402b5c:	20000e4c 	.word	0x20000e4c
  402b60:	20000e74 	.word	0x20000e74
  402b64:	00403103 	.word	0x00403103
  402b68:	20000de8 	.word	0x20000de8
  402b6c:	0040311b 	.word	0x0040311b
  402b70:	40038000 	.word	0x40038000
  402b74:	00400eb7 	.word	0x00400eb7

00402b78 <StartACQ>:
	return result;	//return result
}


bool StartACQ (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface) //start acquisition
{
  402b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402b7a:	4617      	mov	r7, r2
	bool result = FALSE;	//set result to false
	
	settings->binMode = (uint8_t)ASCII_MODE;  //set parameter
  402b7c:	2300      	movs	r3, #0
  402b7e:	72cb      	strb	r3, [r1, #11]
	//Core is already configured. Just call core_start
	//core_configure(settings); //configure core with new settings
	core_start();  //start core
  402b80:	4b0c      	ldr	r3, [pc, #48]	; (402bb4 <StartACQ+0x3c>)
  402b82:	4798      	blx	r3
	comInterface->len = sprintf((char*)comInterface->buf, "[DAQ] Acquisition started in ASCII\n\r"); //print msg to inform user
  402b84:	4e0c      	ldr	r6, [pc, #48]	; (402bb8 <StartACQ+0x40>)
  402b86:	f107 0414 	add.w	r4, r7, #20
  402b8a:	f106 0e20 	add.w	lr, r6, #32
  402b8e:	4635      	mov	r5, r6
  402b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402b92:	6020      	str	r0, [r4, #0]
  402b94:	6061      	str	r1, [r4, #4]
  402b96:	60a2      	str	r2, [r4, #8]
  402b98:	60e3      	str	r3, [r4, #12]
  402b9a:	462e      	mov	r6, r5
  402b9c:	3410      	adds	r4, #16
  402b9e:	4575      	cmp	r5, lr
  402ba0:	d1f5      	bne.n	402b8e <StartACQ+0x16>
  402ba2:	6828      	ldr	r0, [r5, #0]
  402ba4:	6020      	str	r0, [r4, #0]
  402ba6:	792b      	ldrb	r3, [r5, #4]
  402ba8:	7123      	strb	r3, [r4, #4]
  402baa:	2324      	movs	r3, #36	; 0x24
  402bac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	result = TRUE;
	
	return result;	//return result
}
  402bb0:	2001      	movs	r0, #1
  402bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402bb4:	004028a9 	.word	0x004028a9
  402bb8:	0040817c 	.word	0x0040817c

00402bbc <StartFastACQ>:

bool StartFastACQ (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface) //start acquisition in binary
{
  402bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402bbe:	4617      	mov	r7, r2
	bool result = FALSE;	//set result to false
	
	settings->binMode = (uint8_t)FAST_MODE;  //set parameter
  402bc0:	2301      	movs	r3, #1
  402bc2:	72cb      	strb	r3, [r1, #11]
	//Core is already configured. Just call core_start
	//core_configure(settings); //configure core with new settings
	core_start();  //start core
  402bc4:	4b0c      	ldr	r3, [pc, #48]	; (402bf8 <StartFastACQ+0x3c>)
  402bc6:	4798      	blx	r3
	comInterface->len = sprintf((char*)comInterface->buf, "[DAQ] Acquisition started in binary\n\r"); //print msg to inform user
  402bc8:	4e0c      	ldr	r6, [pc, #48]	; (402bfc <StartFastACQ+0x40>)
  402bca:	f107 0414 	add.w	r4, r7, #20
  402bce:	f106 0e20 	add.w	lr, r6, #32
  402bd2:	4635      	mov	r5, r6
  402bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402bd6:	6020      	str	r0, [r4, #0]
  402bd8:	6061      	str	r1, [r4, #4]
  402bda:	60a2      	str	r2, [r4, #8]
  402bdc:	60e3      	str	r3, [r4, #12]
  402bde:	462e      	mov	r6, r5
  402be0:	3410      	adds	r4, #16
  402be2:	4575      	cmp	r5, lr
  402be4:	d1f5      	bne.n	402bd2 <StartFastACQ+0x16>
  402be6:	6828      	ldr	r0, [r5, #0]
  402be8:	6020      	str	r0, [r4, #0]
  402bea:	88ab      	ldrh	r3, [r5, #4]
  402bec:	80a3      	strh	r3, [r4, #4]
  402bee:	2325      	movs	r3, #37	; 0x25
  402bf0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	result = TRUE;
	
	return result;	//return result
}
  402bf4:	2001      	movs	r0, #1
  402bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402bf8:	004028a9 	.word	0x004028a9
  402bfc:	004081a4 	.word	0x004081a4

00402c00 <StopACQ>:

bool StopACQ (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface)  //stop acquisition
{
  402c00:	b570      	push	{r4, r5, r6, lr}
  402c02:	4616      	mov	r6, r2
	bool result = FALSE;	//set result to false
	
	core_configure(settings); //configure core with new settings
  402c04:	4608      	mov	r0, r1
  402c06:	4b08      	ldr	r3, [pc, #32]	; (402c28 <StopACQ+0x28>)
  402c08:	4798      	blx	r3
	//TODO: call function to stop core
	comInterface->len = sprintf((char*)comInterface->buf, "[DAQ] Acquisition stopped\n\r"); //print msg to inform user
  402c0a:	4c08      	ldr	r4, [pc, #32]	; (402c2c <StopACQ+0x2c>)
  402c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402c0e:	6170      	str	r0, [r6, #20]
  402c10:	61b1      	str	r1, [r6, #24]
  402c12:	61f2      	str	r2, [r6, #28]
  402c14:	6233      	str	r3, [r6, #32]
  402c16:	cc07      	ldmia	r4!, {r0, r1, r2}
  402c18:	6270      	str	r0, [r6, #36]	; 0x24
  402c1a:	62b1      	str	r1, [r6, #40]	; 0x28
  402c1c:	62f2      	str	r2, [r6, #44]	; 0x2c
  402c1e:	231b      	movs	r3, #27
  402c20:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	result = TRUE;
	
	return result;	//return result
}
  402c24:	2001      	movs	r0, #1
  402c26:	bd70      	pop	{r4, r5, r6, pc}
  402c28:	004028fd 	.word	0x004028fd
  402c2c:	004081cc 	.word	0x004081cc

00402c30 <SetSamplePeriod>:

bool SetSamplePeriod (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface)  //set sample period
{
  402c30:	b538      	push	{r3, r4, r5, lr}
	bool result = FALSE;	//set result to false
	
	if(*parPtr >= SAMPLE_PERIOD_LOWRANGE && *parPtr <= SAMPLE_PERIOD_HIGHRANGE) //is parameter is range?
  402c32:	6803      	ldr	r3, [r0, #0]
  402c34:	f1a3 040a 	sub.w	r4, r3, #10
  402c38:	f24c 3046 	movw	r0, #49990	; 0xc346
  402c3c:	4284      	cmp	r4, r0
  402c3e:	d901      	bls.n	402c44 <SetSamplePeriod+0x14>
	bool result = FALSE;	//set result to false
  402c40:	2000      	movs	r0, #0
		comInterface->len = sprintf((char*)comInterface->buf, "[DAQ] Sample period set to %u uS\n\r", settings->acqusitionTime); //print msg to inform user
		result = TRUE;
	}
	
	return result;	//return result
}
  402c42:	bd38      	pop	{r3, r4, r5, pc}
  402c44:	4615      	mov	r5, r2
  402c46:	460c      	mov	r4, r1
		settings->acqusitionTime = (uint16_t)*parPtr;  //set parameter
  402c48:	800b      	strh	r3, [r1, #0]
		core_configure(settings); //configure core with new settings
  402c4a:	4608      	mov	r0, r1
  402c4c:	4b05      	ldr	r3, [pc, #20]	; (402c64 <SetSamplePeriod+0x34>)
  402c4e:	4798      	blx	r3
		comInterface->len = sprintf((char*)comInterface->buf, "[DAQ] Sample period set to %u uS\n\r", settings->acqusitionTime); //print msg to inform user
  402c50:	8822      	ldrh	r2, [r4, #0]
  402c52:	4905      	ldr	r1, [pc, #20]	; (402c68 <SetSamplePeriod+0x38>)
  402c54:	f105 0014 	add.w	r0, r5, #20
  402c58:	4b04      	ldr	r3, [pc, #16]	; (402c6c <SetSamplePeriod+0x3c>)
  402c5a:	4798      	blx	r3
  402c5c:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		result = TRUE;
  402c60:	2001      	movs	r0, #1
  402c62:	bd38      	pop	{r3, r4, r5, pc}
  402c64:	004028fd 	.word	0x004028fd
  402c68:	00408130 	.word	0x00408130
  402c6c:	00403879 	.word	0x00403879

00402c70 <SetAverageCount>:

bool SetAverageCount (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface)  //set averaging
{
  402c70:	b538      	push	{r3, r4, r5, lr}
	bool result = FALSE;	//set result to false
	
	if(*parPtr >= AVERAGE_COUNT_LOWRANGE &&  *parPtr <= AVERAGE_COUNT_HIGHRANGE) //is parameter is range?
  402c72:	6803      	ldr	r3, [r0, #0]
  402c74:	1e58      	subs	r0, r3, #1
  402c76:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  402c7a:	d301      	bcc.n	402c80 <SetAverageCount+0x10>
	bool result = FALSE;	//set result to false
  402c7c:	2000      	movs	r0, #0
		comInterface->len = sprintf((char*)comInterface->buf, "[DAQ] DAQ will attempt to take %u samples per channel\n\r", settings->averaging); //print msg to inform user
		result = TRUE;
	}
	
	return result;	//return result
}
  402c7e:	bd38      	pop	{r3, r4, r5, pc}
  402c80:	4615      	mov	r5, r2
  402c82:	460c      	mov	r4, r1
		settings->averaging = (uint16_t)*parPtr;  //set parameter
  402c84:	808b      	strh	r3, [r1, #4]
		core_configure(settings); //configure core with new settings
  402c86:	4608      	mov	r0, r1
  402c88:	4b05      	ldr	r3, [pc, #20]	; (402ca0 <SetAverageCount+0x30>)
  402c8a:	4798      	blx	r3
		comInterface->len = sprintf((char*)comInterface->buf, "[DAQ] DAQ will attempt to take %u samples per channel\n\r", settings->averaging); //print msg to inform user
  402c8c:	88a2      	ldrh	r2, [r4, #4]
  402c8e:	4905      	ldr	r1, [pc, #20]	; (402ca4 <SetAverageCount+0x34>)
  402c90:	f105 0014 	add.w	r0, r5, #20
  402c94:	4b04      	ldr	r3, [pc, #16]	; (402ca8 <SetAverageCount+0x38>)
  402c96:	4798      	blx	r3
  402c98:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		result = TRUE;
  402c9c:	2001      	movs	r0, #1
  402c9e:	bd38      	pop	{r3, r4, r5, pc}
  402ca0:	004028fd 	.word	0x004028fd
  402ca4:	0040809c 	.word	0x0040809c
  402ca8:	00403879 	.word	0x00403879

00402cac <SetMeasurmentCount>:

bool SetMeasurmentCount (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface) //set number of samples
{
  402cac:	b538      	push	{r3, r4, r5, lr}
	bool result = FALSE;	//set result to false
	
	if(*parPtr >= MEASURMENT_COUNT_LOWRANGE &&  *parPtr <= MEASURMENT_COUNT_HIGHRANGE) //is parameter is range?
  402cae:	6803      	ldr	r3, [r0, #0]
  402cb0:	1e58      	subs	r0, r3, #1
  402cb2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  402cb6:	d301      	bcc.n	402cbc <SetMeasurmentCount+0x10>
	bool result = FALSE;	//set result to false
  402cb8:	2000      	movs	r0, #0
		comInterface->len = sprintf((char*)comInterface->buf, "[DAQ] DAQ will sample all enabled channels %u times\n\r", settings->acquisitionNbr); //print msg to inform user
		result = TRUE;
	}
	
	return result;	//return result
}
  402cba:	bd38      	pop	{r3, r4, r5, pc}
  402cbc:	4615      	mov	r5, r2
  402cbe:	460c      	mov	r4, r1
		settings->acquisitionNbr =  (uint16_t)*parPtr;  //set parameter
  402cc0:	804b      	strh	r3, [r1, #2]
		core_configure(settings); //configure core with new settings
  402cc2:	4608      	mov	r0, r1
  402cc4:	4b05      	ldr	r3, [pc, #20]	; (402cdc <SetMeasurmentCount+0x30>)
  402cc6:	4798      	blx	r3
		comInterface->len = sprintf((char*)comInterface->buf, "[DAQ] DAQ will sample all enabled channels %u times\n\r", settings->acquisitionNbr); //print msg to inform user
  402cc8:	8862      	ldrh	r2, [r4, #2]
  402cca:	4905      	ldr	r1, [pc, #20]	; (402ce0 <SetMeasurmentCount+0x34>)
  402ccc:	f105 0014 	add.w	r0, r5, #20
  402cd0:	4b04      	ldr	r3, [pc, #16]	; (402ce4 <SetMeasurmentCount+0x38>)
  402cd2:	4798      	blx	r3
  402cd4:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		result = TRUE;
  402cd8:	2001      	movs	r0, #1
  402cda:	bd38      	pop	{r3, r4, r5, pc}
  402cdc:	004028fd 	.word	0x004028fd
  402ce0:	004080f8 	.word	0x004080f8
  402ce4:	00403879 	.word	0x00403879

00402ce8 <SetSequencer>:

bool SetSequencer (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface) //enable channels and set channel sequence
{
	bool result = FALSE;	//set result to false
	
	if((*(parPtr + 0) >= SEQUENCER_LOWRANGE && *(parPtr + 0) <= SEQUENCER_HIGHRANGE) &&
  402ce8:	6803      	ldr	r3, [r0, #0]
  402cea:	2b04      	cmp	r3, #4
  402cec:	d829      	bhi.n	402d42 <SetSequencer+0x5a>
  402cee:	6843      	ldr	r3, [r0, #4]
  402cf0:	2b04      	cmp	r3, #4
  402cf2:	d828      	bhi.n	402d46 <SetSequencer+0x5e>
	(*(parPtr + 1) >= SEQUENCER_LOWRANGE && *(parPtr + 1) <= SEQUENCER_HIGHRANGE) &&
  402cf4:	6883      	ldr	r3, [r0, #8]
  402cf6:	2b04      	cmp	r3, #4
  402cf8:	d827      	bhi.n	402d4a <SetSequencer+0x62>
	(*(parPtr + 2) >= SEQUENCER_LOWRANGE && *(parPtr + 2) <= SEQUENCER_HIGHRANGE) &&
  402cfa:	68c3      	ldr	r3, [r0, #12]
  402cfc:	2b04      	cmp	r3, #4
  402cfe:	d826      	bhi.n	402d4e <SetSequencer+0x66>
{
  402d00:	b530      	push	{r4, r5, lr}
  402d02:	b083      	sub	sp, #12
  402d04:	1f03      	subs	r3, r0, #4
  402d06:	f101 040c 	add.w	r4, r1, #12
  402d0a:	300c      	adds	r0, #12
	(*(parPtr + 3) >= SEQUENCER_LOWRANGE && *(parPtr + 3) <= SEQUENCER_HIGHRANGE)) //are parameters is range?
	{
		for(uint8_t i = 0; i < 4; i++)  settings->sequence[i] = (uint8_t)*(parPtr + i);  //set parameters
  402d0c:	f853 5f04 	ldr.w	r5, [r3, #4]!
  402d10:	f804 5b01 	strb.w	r5, [r4], #1
  402d14:	4283      	cmp	r3, r0
  402d16:	d1f9      	bne.n	402d0c <SetSequencer+0x24>
  402d18:	4615      	mov	r5, r2
  402d1a:	460c      	mov	r4, r1
		core_configure(settings); //configure core with new settings
  402d1c:	4608      	mov	r0, r1
  402d1e:	4b0d      	ldr	r3, [pc, #52]	; (402d54 <SetSequencer+0x6c>)
  402d20:	4798      	blx	r3
		comInterface->len = sprintf((char*)comInterface->buf, "[DAQ] Sequence set to: %u, %u, %u, %u\n\r", settings->sequence[0], settings->sequence[1], settings->sequence[2], settings->sequence[3]); //print msg to inform user
  402d22:	7b63      	ldrb	r3, [r4, #13]
  402d24:	7b22      	ldrb	r2, [r4, #12]
  402d26:	7be1      	ldrb	r1, [r4, #15]
  402d28:	9101      	str	r1, [sp, #4]
  402d2a:	7ba1      	ldrb	r1, [r4, #14]
  402d2c:	9100      	str	r1, [sp, #0]
  402d2e:	490a      	ldr	r1, [pc, #40]	; (402d58 <SetSequencer+0x70>)
  402d30:	f105 0014 	add.w	r0, r5, #20
  402d34:	4c09      	ldr	r4, [pc, #36]	; (402d5c <SetSequencer+0x74>)
  402d36:	47a0      	blx	r4
  402d38:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		result = TRUE;
  402d3c:	2001      	movs	r0, #1
	}
	
	return result;	//return result
}
  402d3e:	b003      	add	sp, #12
  402d40:	bd30      	pop	{r4, r5, pc}
	bool result = FALSE;	//set result to false
  402d42:	2000      	movs	r0, #0
  402d44:	4770      	bx	lr
  402d46:	2000      	movs	r0, #0
  402d48:	4770      	bx	lr
  402d4a:	2000      	movs	r0, #0
  402d4c:	4770      	bx	lr
  402d4e:	2000      	movs	r0, #0
  402d50:	4770      	bx	lr
  402d52:	bf00      	nop
  402d54:	004028fd 	.word	0x004028fd
  402d58:	00408154 	.word	0x00408154
  402d5c:	00403879 	.word	0x00403879

00402d60 <SetDACvalue>:

bool SetDACvalue (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface)  //set DAC output value
{
	bool result = FALSE;	//set result to false
	
	if((*(parPtr + 0) >= DAC_VALUE_PAR0_LOWRANGE &&  *(parPtr + 0) <= DAC_VALUE_PAR0_HIGHRANGE) &&
  402d60:	6803      	ldr	r3, [r0, #0]
  402d62:	2b01      	cmp	r3, #1
  402d64:	d901      	bls.n	402d6a <SetDACvalue+0xa>
	bool result = FALSE;	//set result to false
  402d66:	2000      	movs	r0, #0
  402d68:	4770      	bx	lr
{
  402d6a:	b570      	push	{r4, r5, r6, lr}
	(*(parPtr + 1) >= DAC_VALUE_PAR1_LOWRANGE &&  *(parPtr + 1) <= DAC_VALUE_PAR1_HIGHRANGE))  //are parameters is range?
  402d6c:	6844      	ldr	r4, [r0, #4]
	if((*(parPtr + 0) >= DAC_VALUE_PAR0_LOWRANGE &&  *(parPtr + 0) <= DAC_VALUE_PAR0_HIGHRANGE) &&
  402d6e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402d72:	d301      	bcc.n	402d78 <SetDACvalue+0x18>
	bool result = FALSE;	//set result to false
  402d74:	2000      	movs	r0, #0
		comInterface->len = sprintf((char*)comInterface->buf, "[DAQ] DAC channel %u set to %d mV\n\r", (uint8_t)*(parPtr + 0), settings->DACval[(uint8_t)*parPtr]); //print msg to inform user
		result = TRUE;
	}
	
	return result;	//return result
}
  402d76:	bd70      	pop	{r4, r5, r6, pc}
  402d78:	4615      	mov	r5, r2
		settings->DACval[(uint8_t)*parPtr] = (int16_t)*(parPtr + 1);  //set parameter
  402d7a:	b2db      	uxtb	r3, r3
  402d7c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  402d80:	80dc      	strh	r4, [r3, #6]
		settings->DacFlag=1;
  402d82:	2401      	movs	r4, #1
  402d84:	728c      	strb	r4, [r1, #10]
  402d86:	7802      	ldrb	r2, [r0, #0]
		comInterface->len = sprintf((char*)comInterface->buf, "[DAQ] DAC channel %u set to %d mV\n\r", (uint8_t)*(parPtr + 0), settings->DACval[(uint8_t)*parPtr]); //print msg to inform user
  402d88:	eb01 0142 	add.w	r1, r1, r2, lsl #1
  402d8c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
  402d90:	4904      	ldr	r1, [pc, #16]	; (402da4 <SetDACvalue+0x44>)
  402d92:	f105 0014 	add.w	r0, r5, #20
  402d96:	4e04      	ldr	r6, [pc, #16]	; (402da8 <SetDACvalue+0x48>)
  402d98:	47b0      	blx	r6
  402d9a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		result = TRUE;
  402d9e:	4620      	mov	r0, r4
  402da0:	bd70      	pop	{r4, r5, r6, pc}
  402da2:	bf00      	nop
  402da4:	004080d4 	.word	0x004080d4
  402da8:	00403879 	.word	0x00403879

00402dac <getPar>:
{
  402dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402db0:	b089      	sub	sp, #36	; 0x24
  402db2:	4681      	mov	r9, r0
  402db4:	4688      	mov	r8, r1
  402db6:	4616      	mov	r6, r2
  402db8:	461c      	mov	r4, r3
  402dba:	1e45      	subs	r5, r0, #1
  402dbc:	b2ed      	uxtb	r5, r5
  402dbe:	eb02 0585 	add.w	r5, r2, r5, lsl #2
	uint8_t newChar = 0, currentPar = 0, prevIdx = 0, idx = 0;
  402dc2:	2700      	movs	r7, #0
  402dc4:	46ba      	mov	sl, r7
				buf[currentPar][idx] = 0; //set previous parameter to 0
  402dc6:	46bb      	mov	fp, r7
	while(!result && timeout){  //wait for complete parameters or timeout
  402dc8:	f1b8 0f00 	cmp.w	r8, #0
  402dcc:	d061      	beq.n	402e92 <getPar+0xe6>
		if(comInterface->available()){ //was new char received?
  402dce:	6863      	ldr	r3, [r4, #4]
  402dd0:	4798      	blx	r3
  402dd2:	2800      	cmp	r0, #0
  402dd4:	d0fb      	beq.n	402dce <getPar+0x22>
			newChar = comInterface->read(); //get the char
  402dd6:	68a3      	ldr	r3, [r4, #8]
  402dd8:	4798      	blx	r3
			if(newChar == '\r') //end of command
  402dda:	280d      	cmp	r0, #13
  402ddc:	d016      	beq.n	402e0c <getPar+0x60>
			else if(newChar == ',') //new parameter
  402dde:	282c      	cmp	r0, #44	; 0x2c
  402de0:	d030      	beq.n	402e44 <getPar+0x98>
			else if(newChar == '\b')  //backspace remove previous char
  402de2:	2808      	cmp	r0, #8
  402de4:	d032      	beq.n	402e4c <getPar+0xa0>
			else if((newChar >= '0' && newChar <= '9') || newChar == '-') //got parameter
  402de6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  402dea:	b2db      	uxtb	r3, r3
  402dec:	2b09      	cmp	r3, #9
  402dee:	d901      	bls.n	402df4 <getPar+0x48>
  402df0:	282d      	cmp	r0, #45	; 0x2d
  402df2:	d1e9      	bne.n	402dc8 <getPar+0x1c>
				buf[currentPar][idx] = newChar; //save new char to parameter buffer
  402df4:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
  402df8:	aa08      	add	r2, sp, #32
  402dfa:	4413      	add	r3, r2
  402dfc:	4453      	add	r3, sl
  402dfe:	f803 0c1c 	strb.w	r0, [r3, #-28]
				idx++; //go to new char in parameter buffer
  402e02:	f10a 0a01 	add.w	sl, sl, #1
  402e06:	fa5f fa8a 	uxtb.w	sl, sl
  402e0a:	e7dd      	b.n	402dc8 <getPar+0x1c>
				if((parCount == (currentPar + 1) && idx) || !parCount)  //were all parameters received?
  402e0c:	1c7b      	adds	r3, r7, #1
  402e0e:	4599      	cmp	r9, r3
  402e10:	d004      	beq.n	402e1c <getPar+0x70>
  402e12:	f1b9 0f00 	cmp.w	r9, #0
  402e16:	d011      	beq.n	402e3c <getPar+0x90>
				else timeout = 0; //parameters not received
  402e18:	46d8      	mov	r8, fp
  402e1a:	e7d5      	b.n	402dc8 <getPar+0x1c>
				if((parCount == (currentPar + 1) && idx) || !parCount)  //were all parameters received?
  402e1c:	f1ba 0f00 	cmp.w	sl, #0
  402e20:	d0f7      	beq.n	402e12 <getPar+0x66>
					for(uint8_t i = 0; i < parCount; i++) *(parPtr + i) = (int32_t)atoi((char*)buf[i]); //convert all parameters to int
  402e22:	f1b9 0f00 	cmp.w	r9, #0
  402e26:	d009      	beq.n	402e3c <getPar+0x90>
  402e28:	ac01      	add	r4, sp, #4
  402e2a:	3e04      	subs	r6, #4
  402e2c:	4f1a      	ldr	r7, [pc, #104]	; (402e98 <getPar+0xec>)
  402e2e:	4620      	mov	r0, r4
  402e30:	47b8      	blx	r7
  402e32:	f846 0f04 	str.w	r0, [r6, #4]!
  402e36:	3407      	adds	r4, #7
  402e38:	42ae      	cmp	r6, r5
  402e3a:	d1f8      	bne.n	402e2e <getPar+0x82>
	while(!result && timeout){  //wait for complete parameters or timeout
  402e3c:	2001      	movs	r0, #1
}
  402e3e:	b009      	add	sp, #36	; 0x24
  402e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				currentPar++; //go to next parameter
  402e44:	3701      	adds	r7, #1
  402e46:	b2ff      	uxtb	r7, r7
				idx = 0;  //set index ox new parameter buffer to 0
  402e48:	46da      	mov	sl, fp
  402e4a:	e7bd      	b.n	402dc8 <getPar+0x1c>
				if (buf[currentPar][idx - 1] == ',' && currentPar)  //go to previous parameter
  402e4c:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
  402e50:	aa08      	add	r2, sp, #32
  402e52:	4413      	add	r3, r2
  402e54:	4453      	add	r3, sl
  402e56:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
  402e5a:	2b2c      	cmp	r3, #44	; 0x2c
  402e5c:	d00e      	beq.n	402e7c <getPar+0xd0>
				else if(idx) idx--; //go to previous char
  402e5e:	f1ba 0f00 	cmp.w	sl, #0
  402e62:	d014      	beq.n	402e8e <getPar+0xe2>
  402e64:	f10a 3aff 	add.w	sl, sl, #4294967295
  402e68:	fa5f fa8a 	uxtb.w	sl, sl
				buf[currentPar][idx] = 0; //set previous parameter to 0
  402e6c:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
  402e70:	aa08      	add	r2, sp, #32
  402e72:	4413      	add	r3, r2
  402e74:	4453      	add	r3, sl
  402e76:	f803 bc1c 	strb.w	fp, [r3, #-28]
  402e7a:	e7a5      	b.n	402dc8 <getPar+0x1c>
				if (buf[currentPar][idx - 1] == ',' && currentPar)  //go to previous parameter
  402e7c:	2f00      	cmp	r7, #0
  402e7e:	d0ee      	beq.n	402e5e <getPar+0xb2>
					currentPar--; //go to previous parameter
  402e80:	3f01      	subs	r7, #1
  402e82:	b2ff      	uxtb	r7, r7
					idx = prevIdx + 1;  //go to new index in previous parameter
  402e84:	f10a 0a01 	add.w	sl, sl, #1
  402e88:	fa5f fa8a 	uxtb.w	sl, sl
  402e8c:	e7ee      	b.n	402e6c <getPar+0xc0>
				else timeout = 0; //ERROR: first parameter and index
  402e8e:	46d8      	mov	r8, fp
  402e90:	e7ec      	b.n	402e6c <getPar+0xc0>
	while(!result && timeout){  //wait for complete parameters or timeout
  402e92:	2000      	movs	r0, #0
  402e94:	e7d3      	b.n	402e3e <getPar+0x92>
  402e96:	bf00      	nop
  402e98:	00403699 	.word	0x00403699

00402e9c <parseCommand>:
{
  402e9c:	b510      	push	{r4, lr}
	switch (CMD)  //is command supported?
  402e9e:	3841      	subs	r0, #65	; 0x41
  402ea0:	2832      	cmp	r0, #50	; 0x32
  402ea2:	d878      	bhi.n	402f96 <parseCommand+0xfa>
  402ea4:	e8df f000 	tbb	[pc, r0]
  402ea8:	6b777747 	.word	0x6b777747
  402eac:	7777535f 	.word	0x7777535f
  402eb0:	77777777 	.word	0x77777777
  402eb4:	77777777 	.word	0x77777777
  402eb8:	301a3b77 	.word	0x301a3b77
  402ebc:	77777777 	.word	0x77777777
  402ec0:	77777777 	.word	0x77777777
  402ec4:	77777777 	.word	0x77777777
  402ec8:	77777777 	.word	0x77777777
  402ecc:	77777777 	.word	0x77777777
  402ed0:	77777777 	.word	0x77777777
  402ed4:	77777777 	.word	0x77777777
  402ed8:	7777      	.short	0x7777
  402eda:	25          	.byte	0x25
  402edb:	00          	.byte	0x00
		parsedCMD->cmd = CMD_START_ACQ; //save command
  402edc:	2353      	movs	r3, #83	; 0x53
  402ede:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr = StartACQ;  //set pointer to function
  402ee0:	4b2f      	ldr	r3, [pc, #188]	; (402fa0 <parseCommand+0x104>)
  402ee2:	604b      	str	r3, [r1, #4]
		result = getPar(0, PARAMETER_TIMEOUT, NULL, comInterface);  //wait for termination of line
  402ee4:	4613      	mov	r3, r2
  402ee6:	2200      	movs	r2, #0
  402ee8:	2164      	movs	r1, #100	; 0x64
  402eea:	4610      	mov	r0, r2
  402eec:	4c2d      	ldr	r4, [pc, #180]	; (402fa4 <parseCommand+0x108>)
  402eee:	47a0      	blx	r4
		break;
  402ef0:	bd10      	pop	{r4, pc}
		parsedCMD->cmd = CMD_START_FAST_ACQ; //save command
  402ef2:	2373      	movs	r3, #115	; 0x73
  402ef4:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr = StartFastACQ;  //set pointer to function
  402ef6:	4b2c      	ldr	r3, [pc, #176]	; (402fa8 <parseCommand+0x10c>)
  402ef8:	604b      	str	r3, [r1, #4]
		result = getPar(0, PARAMETER_TIMEOUT, NULL, comInterface);  //wait for termination of line
  402efa:	4613      	mov	r3, r2
  402efc:	2200      	movs	r2, #0
  402efe:	2164      	movs	r1, #100	; 0x64
  402f00:	4610      	mov	r0, r2
  402f02:	4c28      	ldr	r4, [pc, #160]	; (402fa4 <parseCommand+0x108>)
  402f04:	47a0      	blx	r4
		break;
  402f06:	bd10      	pop	{r4, pc}
		parsedCMD->cmd = CMD_STOP_ACQ; //save command
  402f08:	2354      	movs	r3, #84	; 0x54
  402f0a:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr = StopACQ;  //set pointer to function
  402f0c:	4b27      	ldr	r3, [pc, #156]	; (402fac <parseCommand+0x110>)
  402f0e:	604b      	str	r3, [r1, #4]
		result = getPar(0, PARAMETER_TIMEOUT, NULL, comInterface);  //wait for termination of line
  402f10:	4613      	mov	r3, r2
  402f12:	2200      	movs	r2, #0
  402f14:	2164      	movs	r1, #100	; 0x64
  402f16:	4610      	mov	r0, r2
  402f18:	4c22      	ldr	r4, [pc, #136]	; (402fa4 <parseCommand+0x108>)
  402f1a:	47a0      	blx	r4
		break;
  402f1c:	bd10      	pop	{r4, pc}
		parsedCMD->cmd = CMD_SET_SAMPLE_PERIOD; //save command
  402f1e:	2352      	movs	r3, #82	; 0x52
  402f20:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr = SetSamplePeriod;  //set pointer to function
  402f22:	4b23      	ldr	r3, [pc, #140]	; (402fb0 <parseCommand+0x114>)
  402f24:	604b      	str	r3, [r1, #4]
		result = getPar(1, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);  //get parameters for command or wait for termination of line
  402f26:	4613      	mov	r3, r2
  402f28:	f101 0208 	add.w	r2, r1, #8
  402f2c:	2164      	movs	r1, #100	; 0x64
  402f2e:	2001      	movs	r0, #1
  402f30:	4c1c      	ldr	r4, [pc, #112]	; (402fa4 <parseCommand+0x108>)
  402f32:	47a0      	blx	r4
		break;
  402f34:	bd10      	pop	{r4, pc}
		parsedCMD->cmd =  CMD_SET_AVERAGE_COUNT; //save command
  402f36:	2341      	movs	r3, #65	; 0x41
  402f38:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr =  SetAverageCount;  //set pointer to function
  402f3a:	4b1e      	ldr	r3, [pc, #120]	; (402fb4 <parseCommand+0x118>)
  402f3c:	604b      	str	r3, [r1, #4]
		result = getPar(1, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);  //get parameters for command or wait for termination of line
  402f3e:	4613      	mov	r3, r2
  402f40:	f101 0208 	add.w	r2, r1, #8
  402f44:	2164      	movs	r1, #100	; 0x64
  402f46:	2001      	movs	r0, #1
  402f48:	4c16      	ldr	r4, [pc, #88]	; (402fa4 <parseCommand+0x108>)
  402f4a:	47a0      	blx	r4
		break;
  402f4c:	bd10      	pop	{r4, pc}
		parsedCMD->cmd =  CMD_SET_MEASURMENT_COUNT; //save command
  402f4e:	2346      	movs	r3, #70	; 0x46
  402f50:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr =  SetMeasurmentCount;  //set pointer to function
  402f52:	4b19      	ldr	r3, [pc, #100]	; (402fb8 <parseCommand+0x11c>)
  402f54:	604b      	str	r3, [r1, #4]
		result = getPar(1, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);  //get parameters for command or wait for termination of line
  402f56:	4613      	mov	r3, r2
  402f58:	f101 0208 	add.w	r2, r1, #8
  402f5c:	2164      	movs	r1, #100	; 0x64
  402f5e:	2001      	movs	r0, #1
  402f60:	4c10      	ldr	r4, [pc, #64]	; (402fa4 <parseCommand+0x108>)
  402f62:	47a0      	blx	r4
		break;
  402f64:	bd10      	pop	{r4, pc}
		parsedCMD->cmd =  CMD_SET_SEQUENCER; //save command
  402f66:	2345      	movs	r3, #69	; 0x45
  402f68:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr = SetSequencer;  //set pointer to function
  402f6a:	4b14      	ldr	r3, [pc, #80]	; (402fbc <parseCommand+0x120>)
  402f6c:	604b      	str	r3, [r1, #4]
		result = getPar(4, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);  //get parameters for command or wait for termination of line
  402f6e:	4613      	mov	r3, r2
  402f70:	f101 0208 	add.w	r2, r1, #8
  402f74:	2164      	movs	r1, #100	; 0x64
  402f76:	2004      	movs	r0, #4
  402f78:	4c0a      	ldr	r4, [pc, #40]	; (402fa4 <parseCommand+0x108>)
  402f7a:	47a0      	blx	r4
		break;
  402f7c:	bd10      	pop	{r4, pc}
		parsedCMD->cmd =  CMD_SET_DAC_VALUE; //save command
  402f7e:	2344      	movs	r3, #68	; 0x44
  402f80:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr = SetDACvalue;  //set pointer to function
  402f82:	4b0f      	ldr	r3, [pc, #60]	; (402fc0 <parseCommand+0x124>)
  402f84:	604b      	str	r3, [r1, #4]
		result = getPar(2, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);  //get parameters for command or wait for termination of line
  402f86:	4613      	mov	r3, r2
  402f88:	f101 0208 	add.w	r2, r1, #8
  402f8c:	2164      	movs	r1, #100	; 0x64
  402f8e:	2002      	movs	r0, #2
  402f90:	4c04      	ldr	r4, [pc, #16]	; (402fa4 <parseCommand+0x108>)
  402f92:	47a0      	blx	r4
		break;
  402f94:	bd10      	pop	{r4, pc}
		parsedCMD->cmd = 0; //reset command
  402f96:	2000      	movs	r0, #0
  402f98:	7008      	strb	r0, [r1, #0]
		parsedCMD->funcPtr = NULL;  //pointer not available
  402f9a:	6048      	str	r0, [r1, #4]
}
  402f9c:	bd10      	pop	{r4, pc}
  402f9e:	bf00      	nop
  402fa0:	00402b79 	.word	0x00402b79
  402fa4:	00402dad 	.word	0x00402dad
  402fa8:	00402bbd 	.word	0x00402bbd
  402fac:	00402c01 	.word	0x00402c01
  402fb0:	00402c31 	.word	0x00402c31
  402fb4:	00402c71 	.word	0x00402c71
  402fb8:	00402cad 	.word	0x00402cad
  402fbc:	00402ce9 	.word	0x00402ce9
  402fc0:	00402d61 	.word	0x00402d61

00402fc4 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  402fc4:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402fc6:	213e      	movs	r1, #62	; 0x3e
  402fc8:	2000      	movs	r0, #0
  402fca:	4b0a      	ldr	r3, [pc, #40]	; (402ff4 <sysclk_enable_usb+0x30>)
  402fcc:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402fce:	4c0a      	ldr	r4, [pc, #40]	; (402ff8 <sysclk_enable_usb+0x34>)
  402fd0:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402fd2:	2800      	cmp	r0, #0
  402fd4:	d0fc      	beq.n	402fd0 <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  402fd6:	4b09      	ldr	r3, [pc, #36]	; (402ffc <sysclk_enable_usb+0x38>)
  402fd8:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  402fda:	4a09      	ldr	r2, [pc, #36]	; (403000 <sysclk_enable_usb+0x3c>)
  402fdc:	4b09      	ldr	r3, [pc, #36]	; (403004 <sysclk_enable_usb+0x40>)
  402fde:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  402fe0:	4c09      	ldr	r4, [pc, #36]	; (403008 <sysclk_enable_usb+0x44>)
  402fe2:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402fe4:	2800      	cmp	r0, #0
  402fe6:	d0fc      	beq.n	402fe2 <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  402fe8:	2001      	movs	r0, #1
  402fea:	4b08      	ldr	r3, [pc, #32]	; (40300c <sysclk_enable_usb+0x48>)
  402fec:	4798      	blx	r3
		pmc_enable_udpck();
  402fee:	4b08      	ldr	r3, [pc, #32]	; (403010 <sysclk_enable_usb+0x4c>)
  402ff0:	4798      	blx	r3
  402ff2:	bd10      	pop	{r4, pc}
  402ff4:	004031dd 	.word	0x004031dd
  402ff8:	00403231 	.word	0x00403231
  402ffc:	00403261 	.word	0x00403261
  403000:	00113f03 	.word	0x00113f03
  403004:	400e0400 	.word	0x400e0400
  403008:	0040326d 	.word	0x0040326d
  40300c:	00403325 	.word	0x00403325
  403010:	00403339 	.word	0x00403339

00403014 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  403014:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  403016:	480e      	ldr	r0, [pc, #56]	; (403050 <sysclk_init+0x3c>)
  403018:	4b0e      	ldr	r3, [pc, #56]	; (403054 <sysclk_init+0x40>)
  40301a:	4798      	blx	r3
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40301c:	213e      	movs	r1, #62	; 0x3e
  40301e:	2000      	movs	r0, #0
  403020:	4b0d      	ldr	r3, [pc, #52]	; (403058 <sysclk_init+0x44>)
  403022:	4798      	blx	r3
		return pmc_osc_is_ready_mainck();
  403024:	4c0d      	ldr	r4, [pc, #52]	; (40305c <sysclk_init+0x48>)
  403026:	47a0      	blx	r4
  403028:	2800      	cmp	r0, #0
  40302a:	d0fc      	beq.n	403026 <sysclk_init+0x12>
		pmc_disable_pllack(); // Always stop PLL first!
  40302c:	4b0c      	ldr	r3, [pc, #48]	; (403060 <sysclk_init+0x4c>)
  40302e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403030:	4a0c      	ldr	r2, [pc, #48]	; (403064 <sysclk_init+0x50>)
  403032:	4b0d      	ldr	r3, [pc, #52]	; (403068 <sysclk_init+0x54>)
  403034:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
  403036:	4c0d      	ldr	r4, [pc, #52]	; (40306c <sysclk_init+0x58>)
  403038:	47a0      	blx	r4
  40303a:	2800      	cmp	r0, #0
  40303c:	d0fc      	beq.n	403038 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40303e:	2010      	movs	r0, #16
  403040:	4b0b      	ldr	r3, [pc, #44]	; (403070 <sysclk_init+0x5c>)
  403042:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403044:	4b0b      	ldr	r3, [pc, #44]	; (403074 <sysclk_init+0x60>)
  403046:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  403048:	480b      	ldr	r0, [pc, #44]	; (403078 <sysclk_init+0x64>)
  40304a:	4b02      	ldr	r3, [pc, #8]	; (403054 <sysclk_init+0x40>)
  40304c:	4798      	blx	r3
  40304e:	bd10      	pop	{r4, pc}
  403050:	03d09000 	.word	0x03d09000
  403054:	200000a1 	.word	0x200000a1
  403058:	004031dd 	.word	0x004031dd
  40305c:	00403231 	.word	0x00403231
  403060:	00403241 	.word	0x00403241
  403064:	20173f03 	.word	0x20173f03
  403068:	400e0400 	.word	0x400e0400
  40306c:	00403251 	.word	0x00403251
  403070:	00403179 	.word	0x00403179
  403074:	00403445 	.word	0x00403445
  403078:	02dc6c00 	.word	0x02dc6c00

0040307c <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  40307c:	2301      	movs	r3, #1
  40307e:	6003      	str	r3, [r0, #0]
  403080:	4770      	bx	lr

00403082 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  403082:	b929      	cbnz	r1, 403090 <dacc_set_transfer_mode+0xe>
		p_dacc->DACC_MR |= DACC_MR_ONE;
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
		p_dacc->DACC_MR = ul_mode;
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  403084:	6843      	ldr	r3, [r0, #4]
  403086:	f023 0310 	bic.w	r3, r3, #16
  40308a:	6043      	str	r3, [r0, #4]
#endif
	}
	return DACC_RC_OK;
}
  40308c:	2000      	movs	r0, #0
  40308e:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  403090:	6843      	ldr	r3, [r0, #4]
  403092:	f043 0310 	orr.w	r3, r3, #16
  403096:	6043      	str	r3, [r0, #4]
  403098:	e7f8      	b.n	40308c <dacc_set_transfer_mode+0xa>

0040309a <dacc_get_interrupt_status>:
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
	return p_dacc->DACC_ISR;
  40309a:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  40309c:	4770      	bx	lr

0040309e <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  40309e:	6201      	str	r1, [r0, #32]
  4030a0:	4770      	bx	lr

004030a2 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  4030a2:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  4030a4:	2901      	cmp	r1, #1
  4030a6:	d901      	bls.n	4030ac <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  4030a8:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  4030aa:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  4030ac:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  4030b0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  4030b4:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  4030b6:	2000      	movs	r0, #0
  4030b8:	4770      	bx	lr

004030ba <dacc_set_power_save>:
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_power_save(Dacc *p_dacc,
		uint32_t ul_sleep_mode, uint32_t ul_fast_wakeup_mode)
{
	if (ul_sleep_mode) {
  4030ba:	b151      	cbz	r1, 4030d2 <dacc_set_power_save+0x18>
		p_dacc->DACC_MR |= DACC_MR_SLEEP;
  4030bc:	6843      	ldr	r3, [r0, #4]
  4030be:	f043 0320 	orr.w	r3, r3, #32
  4030c2:	6043      	str	r3, [r0, #4]
	} else {
		p_dacc->DACC_MR &= (~DACC_MR_SLEEP);
	}
	if (ul_fast_wakeup_mode) {
  4030c4:	b952      	cbnz	r2, 4030dc <dacc_set_power_save+0x22>
		p_dacc->DACC_MR |= DACC_MR_FASTWKUP;
	} else {
		p_dacc->DACC_MR &= (~DACC_MR_FASTWKUP);
  4030c6:	6843      	ldr	r3, [r0, #4]
  4030c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4030cc:	6043      	str	r3, [r0, #4]
	}
	return DACC_RC_OK;
}
  4030ce:	2000      	movs	r0, #0
  4030d0:	4770      	bx	lr
		p_dacc->DACC_MR &= (~DACC_MR_SLEEP);
  4030d2:	6843      	ldr	r3, [r0, #4]
  4030d4:	f023 0320 	bic.w	r3, r3, #32
  4030d8:	6043      	str	r3, [r0, #4]
  4030da:	e7f3      	b.n	4030c4 <dacc_set_power_save+0xa>
		p_dacc->DACC_MR |= DACC_MR_FASTWKUP;
  4030dc:	6843      	ldr	r3, [r0, #4]
  4030de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030e2:	6043      	str	r3, [r0, #4]
  4030e4:	e7f3      	b.n	4030ce <dacc_set_power_save+0x14>

004030e6 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  4030e6:	2901      	cmp	r1, #1
  4030e8:	d901      	bls.n	4030ee <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  4030ea:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  4030ec:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  4030ee:	2301      	movs	r3, #1
  4030f0:	fa03 f101 	lsl.w	r1, r3, r1
  4030f4:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  4030f6:	2000      	movs	r0, #0
  4030f8:	4770      	bx	lr

004030fa <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  4030fa:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  4030fe:	2000      	movs	r0, #0
  403100:	4770      	bx	lr

00403102 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  403102:	460b      	mov	r3, r1
  403104:	b119      	cbz	r1, 40310e <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  403106:	6809      	ldr	r1, [r1, #0]
  403108:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  40310a:	685b      	ldr	r3, [r3, #4]
  40310c:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  40310e:	b11a      	cbz	r2, 403118 <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  403110:	6813      	ldr	r3, [r2, #0]
  403112:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  403114:	6853      	ldr	r3, [r2, #4]
  403116:	6143      	str	r3, [r0, #20]
  403118:	4770      	bx	lr

0040311a <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  40311a:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  40311e:	05c9      	lsls	r1, r1, #23
  403120:	0dc9      	lsrs	r1, r1, #23
	p_pdc->PERIPH_PTCR =
  403122:	6201      	str	r1, [r0, #32]
  403124:	4770      	bx	lr

00403126 <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  403126:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
  40312a:	f021 0101 	bic.w	r1, r1, #1
  40312e:	0589      	lsls	r1, r1, #22
  403130:	0d89      	lsrs	r1, r1, #22
	p_pdc->PERIPH_PTCR =
  403132:	6201      	str	r1, [r0, #32]
  403134:	4770      	bx	lr

00403136 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  403136:	6301      	str	r1, [r0, #48]	; 0x30
  403138:	4770      	bx	lr

0040313a <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40313a:	6341      	str	r1, [r0, #52]	; 0x34
  40313c:	4770      	bx	lr

0040313e <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40313e:	b410      	push	{r4}
  403140:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  403142:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  403144:	b944      	cbnz	r4, 403158 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  403146:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  403148:	b143      	cbz	r3, 40315c <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  40314a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40314c:	b942      	cbnz	r2, 403160 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  40314e:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  403150:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  403152:	6001      	str	r1, [r0, #0]
}
  403154:	bc10      	pop	{r4}
  403156:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  403158:	6641      	str	r1, [r0, #100]	; 0x64
  40315a:	e7f5      	b.n	403148 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40315c:	6541      	str	r1, [r0, #84]	; 0x54
  40315e:	e7f5      	b.n	40314c <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  403160:	6301      	str	r1, [r0, #48]	; 0x30
  403162:	e7f5      	b.n	403150 <pio_set_output+0x12>

00403164 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  403164:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  403166:	4770      	bx	lr

00403168 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403168:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40316a:	4770      	bx	lr

0040316c <pio_toggle_pin_group>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_toggle_pin_group(Pio *p_pio, uint32_t ul_mask)
{
	if (p_pio->PIO_ODSR & ul_mask) {
  40316c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40316e:	420b      	tst	r3, r1
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = ul_mask;
  403170:	bf14      	ite	ne
  403172:	6341      	strne	r1, [r0, #52]	; 0x34
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = ul_mask;
  403174:	6301      	streq	r1, [r0, #48]	; 0x30
  403176:	4770      	bx	lr

00403178 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403178:	4a17      	ldr	r2, [pc, #92]	; (4031d8 <pmc_switch_mck_to_pllack+0x60>)
  40317a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40317c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403180:	4318      	orrs	r0, r3
  403182:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403184:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403186:	f013 0f08 	tst.w	r3, #8
  40318a:	d10a      	bne.n	4031a2 <pmc_switch_mck_to_pllack+0x2a>
  40318c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403190:	4911      	ldr	r1, [pc, #68]	; (4031d8 <pmc_switch_mck_to_pllack+0x60>)
  403192:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403194:	f012 0f08 	tst.w	r2, #8
  403198:	d103      	bne.n	4031a2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40319a:	3b01      	subs	r3, #1
  40319c:	d1f9      	bne.n	403192 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40319e:	2001      	movs	r0, #1
  4031a0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4031a2:	4a0d      	ldr	r2, [pc, #52]	; (4031d8 <pmc_switch_mck_to_pllack+0x60>)
  4031a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4031a6:	f023 0303 	bic.w	r3, r3, #3
  4031aa:	f043 0302 	orr.w	r3, r3, #2
  4031ae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4031b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4031b2:	f013 0f08 	tst.w	r3, #8
  4031b6:	d10a      	bne.n	4031ce <pmc_switch_mck_to_pllack+0x56>
  4031b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4031bc:	4906      	ldr	r1, [pc, #24]	; (4031d8 <pmc_switch_mck_to_pllack+0x60>)
  4031be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4031c0:	f012 0f08 	tst.w	r2, #8
  4031c4:	d105      	bne.n	4031d2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4031c6:	3b01      	subs	r3, #1
  4031c8:	d1f9      	bne.n	4031be <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4031ca:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4031cc:	4770      	bx	lr
	return 0;
  4031ce:	2000      	movs	r0, #0
  4031d0:	4770      	bx	lr
  4031d2:	2000      	movs	r0, #0
  4031d4:	4770      	bx	lr
  4031d6:	bf00      	nop
  4031d8:	400e0400 	.word	0x400e0400

004031dc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4031dc:	b9c8      	cbnz	r0, 403212 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4031de:	4a11      	ldr	r2, [pc, #68]	; (403224 <pmc_switch_mainck_to_xtal+0x48>)
  4031e0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4031e2:	0209      	lsls	r1, r1, #8
  4031e4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4031e6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4031ea:	f023 0303 	bic.w	r3, r3, #3
  4031ee:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4031f2:	f043 0301 	orr.w	r3, r3, #1
  4031f6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4031f8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4031fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4031fc:	f013 0f01 	tst.w	r3, #1
  403200:	d0fb      	beq.n	4031fa <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403202:	4a08      	ldr	r2, [pc, #32]	; (403224 <pmc_switch_mainck_to_xtal+0x48>)
  403204:	6a13      	ldr	r3, [r2, #32]
  403206:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40320a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40320e:	6213      	str	r3, [r2, #32]
  403210:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403212:	4904      	ldr	r1, [pc, #16]	; (403224 <pmc_switch_mainck_to_xtal+0x48>)
  403214:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  403216:	4a04      	ldr	r2, [pc, #16]	; (403228 <pmc_switch_mainck_to_xtal+0x4c>)
  403218:	401a      	ands	r2, r3
  40321a:	4b04      	ldr	r3, [pc, #16]	; (40322c <pmc_switch_mainck_to_xtal+0x50>)
  40321c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40321e:	620b      	str	r3, [r1, #32]
  403220:	4770      	bx	lr
  403222:	bf00      	nop
  403224:	400e0400 	.word	0x400e0400
  403228:	fec8fffc 	.word	0xfec8fffc
  40322c:	01370002 	.word	0x01370002

00403230 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  403230:	4b02      	ldr	r3, [pc, #8]	; (40323c <pmc_osc_is_ready_mainck+0xc>)
  403232:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403234:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  403238:	4770      	bx	lr
  40323a:	bf00      	nop
  40323c:	400e0400 	.word	0x400e0400

00403240 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  403240:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  403244:	4b01      	ldr	r3, [pc, #4]	; (40324c <pmc_disable_pllack+0xc>)
  403246:	629a      	str	r2, [r3, #40]	; 0x28
  403248:	4770      	bx	lr
  40324a:	bf00      	nop
  40324c:	400e0400 	.word	0x400e0400

00403250 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403250:	4b02      	ldr	r3, [pc, #8]	; (40325c <pmc_is_locked_pllack+0xc>)
  403252:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403254:	f000 0002 	and.w	r0, r0, #2
  403258:	4770      	bx	lr
  40325a:	bf00      	nop
  40325c:	400e0400 	.word	0x400e0400

00403260 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  403260:	2200      	movs	r2, #0
  403262:	4b01      	ldr	r3, [pc, #4]	; (403268 <pmc_disable_pllbck+0x8>)
  403264:	62da      	str	r2, [r3, #44]	; 0x2c
  403266:	4770      	bx	lr
  403268:	400e0400 	.word	0x400e0400

0040326c <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40326c:	4b02      	ldr	r3, [pc, #8]	; (403278 <pmc_is_locked_pllbck+0xc>)
  40326e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403270:	f000 0004 	and.w	r0, r0, #4
  403274:	4770      	bx	lr
  403276:	bf00      	nop
  403278:	400e0400 	.word	0x400e0400

0040327c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40327c:	2822      	cmp	r0, #34	; 0x22
  40327e:	d81e      	bhi.n	4032be <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  403280:	281f      	cmp	r0, #31
  403282:	d80c      	bhi.n	40329e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403284:	4b11      	ldr	r3, [pc, #68]	; (4032cc <pmc_enable_periph_clk+0x50>)
  403286:	699a      	ldr	r2, [r3, #24]
  403288:	2301      	movs	r3, #1
  40328a:	4083      	lsls	r3, r0
  40328c:	4393      	bics	r3, r2
  40328e:	d018      	beq.n	4032c2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  403290:	2301      	movs	r3, #1
  403292:	fa03 f000 	lsl.w	r0, r3, r0
  403296:	4b0d      	ldr	r3, [pc, #52]	; (4032cc <pmc_enable_periph_clk+0x50>)
  403298:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40329a:	2000      	movs	r0, #0
  40329c:	4770      	bx	lr
		ul_id -= 32;
  40329e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4032a0:	4b0a      	ldr	r3, [pc, #40]	; (4032cc <pmc_enable_periph_clk+0x50>)
  4032a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4032a6:	2301      	movs	r3, #1
  4032a8:	4083      	lsls	r3, r0
  4032aa:	4393      	bics	r3, r2
  4032ac:	d00b      	beq.n	4032c6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4032ae:	2301      	movs	r3, #1
  4032b0:	fa03 f000 	lsl.w	r0, r3, r0
  4032b4:	4b05      	ldr	r3, [pc, #20]	; (4032cc <pmc_enable_periph_clk+0x50>)
  4032b6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4032ba:	2000      	movs	r0, #0
  4032bc:	4770      	bx	lr
		return 1;
  4032be:	2001      	movs	r0, #1
  4032c0:	4770      	bx	lr
	return 0;
  4032c2:	2000      	movs	r0, #0
  4032c4:	4770      	bx	lr
  4032c6:	2000      	movs	r0, #0
}
  4032c8:	4770      	bx	lr
  4032ca:	bf00      	nop
  4032cc:	400e0400 	.word	0x400e0400

004032d0 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4032d0:	2822      	cmp	r0, #34	; 0x22
  4032d2:	d822      	bhi.n	40331a <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  4032d4:	281f      	cmp	r0, #31
  4032d6:	d80e      	bhi.n	4032f6 <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  4032d8:	4b11      	ldr	r3, [pc, #68]	; (403320 <pmc_disable_periph_clk+0x50>)
  4032da:	699a      	ldr	r2, [r3, #24]
  4032dc:	2301      	movs	r3, #1
  4032de:	4083      	lsls	r3, r0
  4032e0:	4393      	bics	r3, r2
  4032e2:	d001      	beq.n	4032e8 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  4032e4:	2000      	movs	r0, #0
  4032e6:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  4032e8:	2301      	movs	r3, #1
  4032ea:	fa03 f000 	lsl.w	r0, r3, r0
  4032ee:	4b0c      	ldr	r3, [pc, #48]	; (403320 <pmc_disable_periph_clk+0x50>)
  4032f0:	6158      	str	r0, [r3, #20]
	return 0;
  4032f2:	2000      	movs	r0, #0
  4032f4:	4770      	bx	lr
		ul_id -= 32;
  4032f6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  4032f8:	4b09      	ldr	r3, [pc, #36]	; (403320 <pmc_disable_periph_clk+0x50>)
  4032fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4032fe:	2301      	movs	r3, #1
  403300:	4083      	lsls	r3, r0
  403302:	4393      	bics	r3, r2
  403304:	d001      	beq.n	40330a <pmc_disable_periph_clk+0x3a>
	return 0;
  403306:	2000      	movs	r0, #0
}
  403308:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  40330a:	2301      	movs	r3, #1
  40330c:	fa03 f000 	lsl.w	r0, r3, r0
  403310:	4b03      	ldr	r3, [pc, #12]	; (403320 <pmc_disable_periph_clk+0x50>)
  403312:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  403316:	2000      	movs	r0, #0
  403318:	4770      	bx	lr
		return 1;
  40331a:	2001      	movs	r0, #1
  40331c:	4770      	bx	lr
  40331e:	bf00      	nop
  403320:	400e0400 	.word	0x400e0400

00403324 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  403324:	0200      	lsls	r0, r0, #8
  403326:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  40332a:	f040 0001 	orr.w	r0, r0, #1
  40332e:	4b01      	ldr	r3, [pc, #4]	; (403334 <pmc_switch_udpck_to_pllbck+0x10>)
  403330:	6398      	str	r0, [r3, #56]	; 0x38
  403332:	4770      	bx	lr
  403334:	400e0400 	.word	0x400e0400

00403338 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  403338:	2280      	movs	r2, #128	; 0x80
  40333a:	4b01      	ldr	r3, [pc, #4]	; (403340 <pmc_enable_udpck+0x8>)
  40333c:	601a      	str	r2, [r3, #0]
  40333e:	4770      	bx	lr
  403340:	400e0400 	.word	0x400e0400

00403344 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  403344:	4b03      	ldr	r3, [pc, #12]	; (403354 <pmc_set_fast_startup_input+0x10>)
  403346:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  403348:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  40334c:	4310      	orrs	r0, r2
  40334e:	6718      	str	r0, [r3, #112]	; 0x70
  403350:	4770      	bx	lr
  403352:	bf00      	nop
  403354:	400e0400 	.word	0x400e0400

00403358 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  403358:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40335a:	0189      	lsls	r1, r1, #6
  40335c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40335e:	2402      	movs	r4, #2
  403360:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  403362:	f04f 31ff 	mov.w	r1, #4294967295
  403366:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  403368:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40336a:	605a      	str	r2, [r3, #4]
}
  40336c:	bc10      	pop	{r4}
  40336e:	4770      	bx	lr

00403370 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  403370:	0189      	lsls	r1, r1, #6
  403372:	2305      	movs	r3, #5
  403374:	5043      	str	r3, [r0, r1]
  403376:	4770      	bx	lr

00403378 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  403378:	0189      	lsls	r1, r1, #6
  40337a:	2302      	movs	r3, #2
  40337c:	5043      	str	r3, [r0, r1]
  40337e:	4770      	bx	lr

00403380 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  403380:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  403384:	61ca      	str	r2, [r1, #28]
  403386:	4770      	bx	lr

00403388 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  403388:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  40338c:	624a      	str	r2, [r1, #36]	; 0x24
  40338e:	4770      	bx	lr

00403390 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  403390:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  403394:	6a08      	ldr	r0, [r1, #32]
}
  403396:	4770      	bx	lr

00403398 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  403398:	4b02      	ldr	r3, [pc, #8]	; (4033a4 <pmc_is_wakeup_clocks_restored+0xc>)
  40339a:	7818      	ldrb	r0, [r3, #0]
}
  40339c:	f080 0001 	eor.w	r0, r0, #1
  4033a0:	4770      	bx	lr
  4033a2:	bf00      	nop
  4033a4:	20000df0 	.word	0x20000df0

004033a8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4033a8:	4770      	bx	lr

004033aa <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4033aa:	e7fe      	b.n	4033aa <Dummy_Handler>

004033ac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4033ac:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4033ae:	4b1c      	ldr	r3, [pc, #112]	; (403420 <Reset_Handler+0x74>)
  4033b0:	4a1c      	ldr	r2, [pc, #112]	; (403424 <Reset_Handler+0x78>)
  4033b2:	429a      	cmp	r2, r3
  4033b4:	d010      	beq.n	4033d8 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
  4033b6:	4b1c      	ldr	r3, [pc, #112]	; (403428 <Reset_Handler+0x7c>)
  4033b8:	4a19      	ldr	r2, [pc, #100]	; (403420 <Reset_Handler+0x74>)
  4033ba:	429a      	cmp	r2, r3
  4033bc:	d20c      	bcs.n	4033d8 <Reset_Handler+0x2c>
  4033be:	3b01      	subs	r3, #1
  4033c0:	1a9b      	subs	r3, r3, r2
  4033c2:	f023 0303 	bic.w	r3, r3, #3
  4033c6:	3304      	adds	r3, #4
  4033c8:	4413      	add	r3, r2
  4033ca:	4916      	ldr	r1, [pc, #88]	; (403424 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
  4033cc:	f851 0b04 	ldr.w	r0, [r1], #4
  4033d0:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4033d4:	429a      	cmp	r2, r3
  4033d6:	d1f9      	bne.n	4033cc <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4033d8:	4b14      	ldr	r3, [pc, #80]	; (40342c <Reset_Handler+0x80>)
  4033da:	4a15      	ldr	r2, [pc, #84]	; (403430 <Reset_Handler+0x84>)
  4033dc:	429a      	cmp	r2, r3
  4033de:	d20a      	bcs.n	4033f6 <Reset_Handler+0x4a>
  4033e0:	3b01      	subs	r3, #1
  4033e2:	1a9b      	subs	r3, r3, r2
  4033e4:	f023 0303 	bic.w	r3, r3, #3
  4033e8:	3304      	adds	r3, #4
  4033ea:	4413      	add	r3, r2
		*pDest++ = 0;
  4033ec:	2100      	movs	r1, #0
  4033ee:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4033f2:	4293      	cmp	r3, r2
  4033f4:	d1fb      	bne.n	4033ee <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4033f6:	4b0f      	ldr	r3, [pc, #60]	; (403434 <Reset_Handler+0x88>)
  4033f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
  4033fc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  403400:	490d      	ldr	r1, [pc, #52]	; (403438 <Reset_Handler+0x8c>)
  403402:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  403404:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  403408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  40340c:	d203      	bcs.n	403416 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  40340e:	688b      	ldr	r3, [r1, #8]
  403410:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403414:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  403416:	4b09      	ldr	r3, [pc, #36]	; (40343c <Reset_Handler+0x90>)
  403418:	4798      	blx	r3

	/* Branch to main function */
	main();
  40341a:	4b09      	ldr	r3, [pc, #36]	; (403440 <Reset_Handler+0x94>)
  40341c:	4798      	blx	r3
  40341e:	e7fe      	b.n	40341e <Reset_Handler+0x72>
  403420:	20000000 	.word	0x20000000
  403424:	004084cc 	.word	0x004084cc
  403428:	20000bb8 	.word	0x20000bb8
  40342c:	20000ec0 	.word	0x20000ec0
  403430:	20000bb8 	.word	0x20000bb8
  403434:	00400000 	.word	0x00400000
  403438:	e000ed00 	.word	0xe000ed00
  40343c:	004036a1 	.word	0x004036a1
  403440:	0040358d 	.word	0x0040358d

00403444 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  403444:	4b3c      	ldr	r3, [pc, #240]	; (403538 <SystemCoreClockUpdate+0xf4>)
  403446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403448:	f003 0303 	and.w	r3, r3, #3
  40344c:	2b03      	cmp	r3, #3
  40344e:	d80e      	bhi.n	40346e <SystemCoreClockUpdate+0x2a>
  403450:	e8df f003 	tbb	[pc, r3]
  403454:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  403458:	4b38      	ldr	r3, [pc, #224]	; (40353c <SystemCoreClockUpdate+0xf8>)
  40345a:	695b      	ldr	r3, [r3, #20]
  40345c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403460:	bf14      	ite	ne
  403462:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403466:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40346a:	4b35      	ldr	r3, [pc, #212]	; (403540 <SystemCoreClockUpdate+0xfc>)
  40346c:	601a      	str	r2, [r3, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40346e:	4b32      	ldr	r3, [pc, #200]	; (403538 <SystemCoreClockUpdate+0xf4>)
  403470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403472:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403476:	2b70      	cmp	r3, #112	; 0x70
  403478:	d055      	beq.n	403526 <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40347a:	4b2f      	ldr	r3, [pc, #188]	; (403538 <SystemCoreClockUpdate+0xf4>)
  40347c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40347e:	4930      	ldr	r1, [pc, #192]	; (403540 <SystemCoreClockUpdate+0xfc>)
  403480:	f3c2 1202 	ubfx	r2, r2, #4, #3
  403484:	680b      	ldr	r3, [r1, #0]
  403486:	40d3      	lsrs	r3, r2
  403488:	600b      	str	r3, [r1, #0]
  40348a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40348c:	4b2a      	ldr	r3, [pc, #168]	; (403538 <SystemCoreClockUpdate+0xf4>)
  40348e:	6a1b      	ldr	r3, [r3, #32]
  403490:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403494:	d003      	beq.n	40349e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403496:	4a2b      	ldr	r2, [pc, #172]	; (403544 <SystemCoreClockUpdate+0x100>)
  403498:	4b29      	ldr	r3, [pc, #164]	; (403540 <SystemCoreClockUpdate+0xfc>)
  40349a:	601a      	str	r2, [r3, #0]
  40349c:	e7e7      	b.n	40346e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40349e:	4a2a      	ldr	r2, [pc, #168]	; (403548 <SystemCoreClockUpdate+0x104>)
  4034a0:	4b27      	ldr	r3, [pc, #156]	; (403540 <SystemCoreClockUpdate+0xfc>)
  4034a2:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4034a4:	4b24      	ldr	r3, [pc, #144]	; (403538 <SystemCoreClockUpdate+0xf4>)
  4034a6:	6a1b      	ldr	r3, [r3, #32]
  4034a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4034ac:	2b10      	cmp	r3, #16
  4034ae:	d005      	beq.n	4034bc <SystemCoreClockUpdate+0x78>
  4034b0:	2b20      	cmp	r3, #32
  4034b2:	d1dc      	bne.n	40346e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
  4034b4:	4a23      	ldr	r2, [pc, #140]	; (403544 <SystemCoreClockUpdate+0x100>)
  4034b6:	4b22      	ldr	r3, [pc, #136]	; (403540 <SystemCoreClockUpdate+0xfc>)
  4034b8:	601a      	str	r2, [r3, #0]
				break;
  4034ba:	e7d8      	b.n	40346e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
  4034bc:	4a23      	ldr	r2, [pc, #140]	; (40354c <SystemCoreClockUpdate+0x108>)
  4034be:	4b20      	ldr	r3, [pc, #128]	; (403540 <SystemCoreClockUpdate+0xfc>)
  4034c0:	601a      	str	r2, [r3, #0]
				break;
  4034c2:	e7d4      	b.n	40346e <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4034c4:	4b1c      	ldr	r3, [pc, #112]	; (403538 <SystemCoreClockUpdate+0xf4>)
  4034c6:	6a1b      	ldr	r3, [r3, #32]
  4034c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4034cc:	d018      	beq.n	403500 <SystemCoreClockUpdate+0xbc>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4034ce:	4a1d      	ldr	r2, [pc, #116]	; (403544 <SystemCoreClockUpdate+0x100>)
  4034d0:	4b1b      	ldr	r3, [pc, #108]	; (403540 <SystemCoreClockUpdate+0xfc>)
  4034d2:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  4034d4:	4b18      	ldr	r3, [pc, #96]	; (403538 <SystemCoreClockUpdate+0xf4>)
  4034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4034d8:	f003 0303 	and.w	r3, r3, #3
  4034dc:	2b02      	cmp	r3, #2
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  4034de:	4a16      	ldr	r2, [pc, #88]	; (403538 <SystemCoreClockUpdate+0xf4>)
  4034e0:	bf07      	ittee	eq
  4034e2:	6a91      	ldreq	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  4034e4:	6a92      	ldreq	r2, [r2, #40]	; 0x28
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  4034e6:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  4034e8:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4034ea:	4815      	ldr	r0, [pc, #84]	; (403540 <SystemCoreClockUpdate+0xfc>)
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  4034ec:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4034f0:	6803      	ldr	r3, [r0, #0]
  4034f2:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  4034f6:	b2d2      	uxtb	r2, r2
  4034f8:	fbb3 f3f2 	udiv	r3, r3, r2
  4034fc:	6003      	str	r3, [r0, #0]
  4034fe:	e7b6      	b.n	40346e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403500:	4a11      	ldr	r2, [pc, #68]	; (403548 <SystemCoreClockUpdate+0x104>)
  403502:	4b0f      	ldr	r3, [pc, #60]	; (403540 <SystemCoreClockUpdate+0xfc>)
  403504:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  403506:	4b0c      	ldr	r3, [pc, #48]	; (403538 <SystemCoreClockUpdate+0xf4>)
  403508:	6a1b      	ldr	r3, [r3, #32]
  40350a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40350e:	2b10      	cmp	r3, #16
  403510:	d005      	beq.n	40351e <SystemCoreClockUpdate+0xda>
  403512:	2b20      	cmp	r3, #32
  403514:	d1de      	bne.n	4034d4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  403516:	4a0b      	ldr	r2, [pc, #44]	; (403544 <SystemCoreClockUpdate+0x100>)
  403518:	4b09      	ldr	r3, [pc, #36]	; (403540 <SystemCoreClockUpdate+0xfc>)
  40351a:	601a      	str	r2, [r3, #0]
				break;
  40351c:	e7da      	b.n	4034d4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  40351e:	4a0b      	ldr	r2, [pc, #44]	; (40354c <SystemCoreClockUpdate+0x108>)
  403520:	4b07      	ldr	r3, [pc, #28]	; (403540 <SystemCoreClockUpdate+0xfc>)
  403522:	601a      	str	r2, [r3, #0]
				break;
  403524:	e7d6      	b.n	4034d4 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  403526:	4a06      	ldr	r2, [pc, #24]	; (403540 <SystemCoreClockUpdate+0xfc>)
  403528:	6813      	ldr	r3, [r2, #0]
  40352a:	4909      	ldr	r1, [pc, #36]	; (403550 <SystemCoreClockUpdate+0x10c>)
  40352c:	fba1 1303 	umull	r1, r3, r1, r3
  403530:	085b      	lsrs	r3, r3, #1
  403532:	6013      	str	r3, [r2, #0]
  403534:	4770      	bx	lr
  403536:	bf00      	nop
  403538:	400e0400 	.word	0x400e0400
  40353c:	400e1410 	.word	0x400e1410
  403540:	20000204 	.word	0x20000204
  403544:	00b71b00 	.word	0x00b71b00
  403548:	003d0900 	.word	0x003d0900
  40354c:	007a1200 	.word	0x007a1200
  403550:	aaaaaaab 	.word	0xaaaaaaab

00403554 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403554:	4b0a      	ldr	r3, [pc, #40]	; (403580 <_sbrk+0x2c>)
  403556:	681b      	ldr	r3, [r3, #0]
  403558:	b153      	cbz	r3, 403570 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40355a:	4b09      	ldr	r3, [pc, #36]	; (403580 <_sbrk+0x2c>)
  40355c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40355e:	181a      	adds	r2, r3, r0
  403560:	4908      	ldr	r1, [pc, #32]	; (403584 <_sbrk+0x30>)
  403562:	4291      	cmp	r1, r2
  403564:	db08      	blt.n	403578 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  403566:	4610      	mov	r0, r2
  403568:	4a05      	ldr	r2, [pc, #20]	; (403580 <_sbrk+0x2c>)
  40356a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40356c:	4618      	mov	r0, r3
  40356e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  403570:	4a05      	ldr	r2, [pc, #20]	; (403588 <_sbrk+0x34>)
  403572:	4b03      	ldr	r3, [pc, #12]	; (403580 <_sbrk+0x2c>)
  403574:	601a      	str	r2, [r3, #0]
  403576:	e7f0      	b.n	40355a <_sbrk+0x6>
		return (caddr_t) -1;	
  403578:	f04f 30ff 	mov.w	r0, #4294967295
}
  40357c:	4770      	bx	lr
  40357e:	bf00      	nop
  403580:	20000df4 	.word	0x20000df4
  403584:	2000bffc 	.word	0x2000bffc
  403588:	20002ec0 	.word	0x20002ec0

0040358c <main>:
}
*/


int main (void)
{
  40358c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403590:	b08c      	sub	sp, #48	; 0x30
	/* Insert system clock initialization code here (sysclk_init()). */
	wdt_disable(WDT);
  403592:	4836      	ldr	r0, [pc, #216]	; (40366c <main+0xe0>)
  403594:	4b36      	ldr	r3, [pc, #216]	; (403670 <main+0xe4>)
  403596:	4798      	blx	r3
	sysclk_init(); // clock init, ASF
  403598:	4b36      	ldr	r3, [pc, #216]	; (403674 <main+0xe8>)
  40359a:	4798      	blx	r3
	board_init();  // ASF function, empty function??
  40359c:	4b36      	ldr	r3, [pc, #216]	; (403678 <main+0xec>)
  40359e:	4798      	blx	r3
	core_init(); //core.c init
  4035a0:	4b36      	ldr	r3, [pc, #216]	; (40367c <main+0xf0>)
  4035a2:	4798      	blx	r3
	
	COM_t *USB = getComInterface();
  4035a4:	4b36      	ldr	r3, [pc, #216]	; (403680 <main+0xf4>)
  4035a6:	4798      	blx	r3
  4035a8:	4604      	mov	r4, r0
	USB->init(NULL);
  4035aa:	6803      	ldr	r3, [r0, #0]
  4035ac:	2000      	movs	r0, #0
  4035ae:	4798      	blx	r3

	daq_settings_t master_settings;
	
	master_settings.acquisitionNbr = 4;
  4035b0:	2304      	movs	r3, #4
  4035b2:	f8ad 301e 	strh.w	r3, [sp, #30]
	master_settings.acqusitionTime = 10000;
  4035b6:	f242 7210 	movw	r2, #10000	; 0x2710
  4035ba:	f8ad 201c 	strh.w	r2, [sp, #28]
	master_settings.averaging = 6;
  4035be:	2206      	movs	r2, #6
  4035c0:	f8ad 2020 	strh.w	r2, [sp, #32]
	master_settings.sequence[0] = 1;
  4035c4:	2201      	movs	r2, #1
  4035c6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	master_settings.sequence[1] = 2;
  4035ca:	2202      	movs	r2, #2
  4035cc:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
	master_settings.sequence[2] = 3;
  4035d0:	2203      	movs	r2, #3
  4035d2:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
	master_settings.sequence[3] = 4;
  4035d6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	master_settings.binMode = (uint8_t)ASCII_MODE;
  4035da:	2300      	movs	r3, #0
  4035dc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	master_settings.DACval[0] = 2000;
  4035e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  4035e4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	master_settings.DACval[1] = 2000;
  4035e8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	
	core_configure(&master_settings);
  4035ec:	a807      	add	r0, sp, #28
  4035ee:	4b25      	ldr	r3, [pc, #148]	; (403684 <main+0xf8>)
  4035f0:	4798      	blx	r3
		if(USB->available())
		{
			/*
			Parse incoming command from USB, save result in incomingCMD struct. If command is supported, function returns int > 0.
			*/
			if (parseCommand(USB->read(), &incomingCMD, USB))
  4035f2:	4f25      	ldr	r7, [pc, #148]	; (403688 <main+0xfc>)
					USB->len = sprintf((char*)USB->buf, "ERROR setting command\n\r");
				}
			}
			else
			{
				USB->len = sprintf((char*)USB->buf, "Command syntax ERROR\n\r");
  4035f4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 403694 <main+0x108>
  4035f8:	e018      	b.n	40362c <main+0xa0>
  4035fa:	4645      	mov	r5, r8
  4035fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4035fe:	6160      	str	r0, [r4, #20]
  403600:	61a1      	str	r1, [r4, #24]
  403602:	61e2      	str	r2, [r4, #28]
  403604:	6223      	str	r3, [r4, #32]
  403606:	6828      	ldr	r0, [r5, #0]
  403608:	6260      	str	r0, [r4, #36]	; 0x24
  40360a:	88aa      	ldrh	r2, [r5, #4]
  40360c:	79ab      	ldrb	r3, [r5, #6]
  40360e:	8522      	strh	r2, [r4, #40]	; 0x28
  403610:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  403614:	2316      	movs	r3, #22
  403616:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			}
			USB->printBuf(USB->buf, USB->len);
  40361a:	6923      	ldr	r3, [r4, #16]
  40361c:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
  403620:	f104 0014 	add.w	r0, r4, #20
  403624:	4798      	blx	r3
		}

		DacSetVal(&master_settings);
  403626:	a807      	add	r0, sp, #28
  403628:	4b18      	ldr	r3, [pc, #96]	; (40368c <main+0x100>)
  40362a:	4798      	blx	r3
		if(USB->available())
  40362c:	6863      	ldr	r3, [r4, #4]
  40362e:	4798      	blx	r3
  403630:	2800      	cmp	r0, #0
  403632:	d0f8      	beq.n	403626 <main+0x9a>
			if (parseCommand(USB->read(), &incomingCMD, USB))
  403634:	68a3      	ldr	r3, [r4, #8]
  403636:	4798      	blx	r3
  403638:	4622      	mov	r2, r4
  40363a:	a901      	add	r1, sp, #4
  40363c:	47b8      	blx	r7
  40363e:	2800      	cmp	r0, #0
  403640:	d0db      	beq.n	4035fa <main+0x6e>
				if(!incomingCMD.funcPtr(incomingCMD.par, &master_settings, USB))
  403642:	4622      	mov	r2, r4
  403644:	a907      	add	r1, sp, #28
  403646:	a803      	add	r0, sp, #12
  403648:	9b02      	ldr	r3, [sp, #8]
  40364a:	4798      	blx	r3
  40364c:	2800      	cmp	r0, #0
  40364e:	d1e4      	bne.n	40361a <main+0x8e>
					USB->len = sprintf((char*)USB->buf, "ERROR setting command\n\r");
  403650:	4d0f      	ldr	r5, [pc, #60]	; (403690 <main+0x104>)
  403652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403654:	6160      	str	r0, [r4, #20]
  403656:	61a1      	str	r1, [r4, #24]
  403658:	61e2      	str	r2, [r4, #28]
  40365a:	6223      	str	r3, [r4, #32]
  40365c:	cd03      	ldmia	r5!, {r0, r1}
  40365e:	6260      	str	r0, [r4, #36]	; 0x24
  403660:	62a1      	str	r1, [r4, #40]	; 0x28
  403662:	2317      	movs	r3, #23
  403664:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  403668:	e7d7      	b.n	40361a <main+0x8e>
  40366a:	bf00      	nop
  40366c:	400e1450 	.word	0x400e1450
  403670:	00402641 	.word	0x00402641
  403674:	00403015 	.word	0x00403015
  403678:	004033a9 	.word	0x004033a9
  40367c:	004026ed 	.word	0x004026ed
  403680:	004026a9 	.word	0x004026a9
  403684:	004028fd 	.word	0x004028fd
  403688:	00402e9d 	.word	0x00402e9d
  40368c:	0040285d 	.word	0x0040285d
  403690:	004081e8 	.word	0x004081e8
  403694:	00408200 	.word	0x00408200

00403698 <atoi>:
  403698:	220a      	movs	r2, #10
  40369a:	2100      	movs	r1, #0
  40369c:	f000 b9d4 	b.w	403a48 <strtol>

004036a0 <__libc_init_array>:
  4036a0:	b570      	push	{r4, r5, r6, lr}
  4036a2:	4e0f      	ldr	r6, [pc, #60]	; (4036e0 <__libc_init_array+0x40>)
  4036a4:	4d0f      	ldr	r5, [pc, #60]	; (4036e4 <__libc_init_array+0x44>)
  4036a6:	1b76      	subs	r6, r6, r5
  4036a8:	10b6      	asrs	r6, r6, #2
  4036aa:	bf18      	it	ne
  4036ac:	2400      	movne	r4, #0
  4036ae:	d005      	beq.n	4036bc <__libc_init_array+0x1c>
  4036b0:	3401      	adds	r4, #1
  4036b2:	f855 3b04 	ldr.w	r3, [r5], #4
  4036b6:	4798      	blx	r3
  4036b8:	42a6      	cmp	r6, r4
  4036ba:	d1f9      	bne.n	4036b0 <__libc_init_array+0x10>
  4036bc:	4e0a      	ldr	r6, [pc, #40]	; (4036e8 <__libc_init_array+0x48>)
  4036be:	4d0b      	ldr	r5, [pc, #44]	; (4036ec <__libc_init_array+0x4c>)
  4036c0:	f004 feee 	bl	4084a0 <_init>
  4036c4:	1b76      	subs	r6, r6, r5
  4036c6:	10b6      	asrs	r6, r6, #2
  4036c8:	bf18      	it	ne
  4036ca:	2400      	movne	r4, #0
  4036cc:	d006      	beq.n	4036dc <__libc_init_array+0x3c>
  4036ce:	3401      	adds	r4, #1
  4036d0:	f855 3b04 	ldr.w	r3, [r5], #4
  4036d4:	4798      	blx	r3
  4036d6:	42a6      	cmp	r6, r4
  4036d8:	d1f9      	bne.n	4036ce <__libc_init_array+0x2e>
  4036da:	bd70      	pop	{r4, r5, r6, pc}
  4036dc:	bd70      	pop	{r4, r5, r6, pc}
  4036de:	bf00      	nop
  4036e0:	004084ac 	.word	0x004084ac
  4036e4:	004084ac 	.word	0x004084ac
  4036e8:	004084b4 	.word	0x004084b4
  4036ec:	004084ac 	.word	0x004084ac

004036f0 <memcpy>:
  4036f0:	4684      	mov	ip, r0
  4036f2:	ea41 0300 	orr.w	r3, r1, r0
  4036f6:	f013 0303 	ands.w	r3, r3, #3
  4036fa:	d149      	bne.n	403790 <memcpy+0xa0>
  4036fc:	3a40      	subs	r2, #64	; 0x40
  4036fe:	d323      	bcc.n	403748 <memcpy+0x58>
  403700:	680b      	ldr	r3, [r1, #0]
  403702:	6003      	str	r3, [r0, #0]
  403704:	684b      	ldr	r3, [r1, #4]
  403706:	6043      	str	r3, [r0, #4]
  403708:	688b      	ldr	r3, [r1, #8]
  40370a:	6083      	str	r3, [r0, #8]
  40370c:	68cb      	ldr	r3, [r1, #12]
  40370e:	60c3      	str	r3, [r0, #12]
  403710:	690b      	ldr	r3, [r1, #16]
  403712:	6103      	str	r3, [r0, #16]
  403714:	694b      	ldr	r3, [r1, #20]
  403716:	6143      	str	r3, [r0, #20]
  403718:	698b      	ldr	r3, [r1, #24]
  40371a:	6183      	str	r3, [r0, #24]
  40371c:	69cb      	ldr	r3, [r1, #28]
  40371e:	61c3      	str	r3, [r0, #28]
  403720:	6a0b      	ldr	r3, [r1, #32]
  403722:	6203      	str	r3, [r0, #32]
  403724:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  403726:	6243      	str	r3, [r0, #36]	; 0x24
  403728:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  40372a:	6283      	str	r3, [r0, #40]	; 0x28
  40372c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  40372e:	62c3      	str	r3, [r0, #44]	; 0x2c
  403730:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403732:	6303      	str	r3, [r0, #48]	; 0x30
  403734:	6b4b      	ldr	r3, [r1, #52]	; 0x34
  403736:	6343      	str	r3, [r0, #52]	; 0x34
  403738:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  40373a:	6383      	str	r3, [r0, #56]	; 0x38
  40373c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  40373e:	63c3      	str	r3, [r0, #60]	; 0x3c
  403740:	3040      	adds	r0, #64	; 0x40
  403742:	3140      	adds	r1, #64	; 0x40
  403744:	3a40      	subs	r2, #64	; 0x40
  403746:	d2db      	bcs.n	403700 <memcpy+0x10>
  403748:	3230      	adds	r2, #48	; 0x30
  40374a:	d30b      	bcc.n	403764 <memcpy+0x74>
  40374c:	680b      	ldr	r3, [r1, #0]
  40374e:	6003      	str	r3, [r0, #0]
  403750:	684b      	ldr	r3, [r1, #4]
  403752:	6043      	str	r3, [r0, #4]
  403754:	688b      	ldr	r3, [r1, #8]
  403756:	6083      	str	r3, [r0, #8]
  403758:	68cb      	ldr	r3, [r1, #12]
  40375a:	60c3      	str	r3, [r0, #12]
  40375c:	3010      	adds	r0, #16
  40375e:	3110      	adds	r1, #16
  403760:	3a10      	subs	r2, #16
  403762:	d2f3      	bcs.n	40374c <memcpy+0x5c>
  403764:	320c      	adds	r2, #12
  403766:	d305      	bcc.n	403774 <memcpy+0x84>
  403768:	f851 3b04 	ldr.w	r3, [r1], #4
  40376c:	f840 3b04 	str.w	r3, [r0], #4
  403770:	3a04      	subs	r2, #4
  403772:	d2f9      	bcs.n	403768 <memcpy+0x78>
  403774:	3204      	adds	r2, #4
  403776:	d008      	beq.n	40378a <memcpy+0x9a>
  403778:	07d2      	lsls	r2, r2, #31
  40377a:	bf1c      	itt	ne
  40377c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403780:	f800 3b01 	strbne.w	r3, [r0], #1
  403784:	d301      	bcc.n	40378a <memcpy+0x9a>
  403786:	880b      	ldrh	r3, [r1, #0]
  403788:	8003      	strh	r3, [r0, #0]
  40378a:	4660      	mov	r0, ip
  40378c:	4770      	bx	lr
  40378e:	bf00      	nop
  403790:	2a08      	cmp	r2, #8
  403792:	d313      	bcc.n	4037bc <memcpy+0xcc>
  403794:	078b      	lsls	r3, r1, #30
  403796:	d0b1      	beq.n	4036fc <memcpy+0xc>
  403798:	f010 0303 	ands.w	r3, r0, #3
  40379c:	d0ae      	beq.n	4036fc <memcpy+0xc>
  40379e:	f1c3 0304 	rsb	r3, r3, #4
  4037a2:	1ad2      	subs	r2, r2, r3
  4037a4:	07db      	lsls	r3, r3, #31
  4037a6:	bf1c      	itt	ne
  4037a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4037ac:	f800 3b01 	strbne.w	r3, [r0], #1
  4037b0:	d3a4      	bcc.n	4036fc <memcpy+0xc>
  4037b2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4037b6:	f820 3b02 	strh.w	r3, [r0], #2
  4037ba:	e79f      	b.n	4036fc <memcpy+0xc>
  4037bc:	3a04      	subs	r2, #4
  4037be:	d3d9      	bcc.n	403774 <memcpy+0x84>
  4037c0:	3a01      	subs	r2, #1
  4037c2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4037c6:	f800 3b01 	strb.w	r3, [r0], #1
  4037ca:	d2f9      	bcs.n	4037c0 <memcpy+0xd0>
  4037cc:	780b      	ldrb	r3, [r1, #0]
  4037ce:	7003      	strb	r3, [r0, #0]
  4037d0:	784b      	ldrb	r3, [r1, #1]
  4037d2:	7043      	strb	r3, [r0, #1]
  4037d4:	788b      	ldrb	r3, [r1, #2]
  4037d6:	7083      	strb	r3, [r0, #2]
  4037d8:	4660      	mov	r0, ip
  4037da:	4770      	bx	lr

004037dc <memset>:
  4037dc:	b470      	push	{r4, r5, r6}
  4037de:	0786      	lsls	r6, r0, #30
  4037e0:	d046      	beq.n	403870 <memset+0x94>
  4037e2:	1e54      	subs	r4, r2, #1
  4037e4:	2a00      	cmp	r2, #0
  4037e6:	d041      	beq.n	40386c <memset+0x90>
  4037e8:	b2ca      	uxtb	r2, r1
  4037ea:	4603      	mov	r3, r0
  4037ec:	e002      	b.n	4037f4 <memset+0x18>
  4037ee:	f114 34ff 	adds.w	r4, r4, #4294967295
  4037f2:	d33b      	bcc.n	40386c <memset+0x90>
  4037f4:	f803 2b01 	strb.w	r2, [r3], #1
  4037f8:	079d      	lsls	r5, r3, #30
  4037fa:	d1f8      	bne.n	4037ee <memset+0x12>
  4037fc:	2c03      	cmp	r4, #3
  4037fe:	d92e      	bls.n	40385e <memset+0x82>
  403800:	b2cd      	uxtb	r5, r1
  403802:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403806:	2c0f      	cmp	r4, #15
  403808:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40380c:	d919      	bls.n	403842 <memset+0x66>
  40380e:	4626      	mov	r6, r4
  403810:	f103 0210 	add.w	r2, r3, #16
  403814:	3e10      	subs	r6, #16
  403816:	2e0f      	cmp	r6, #15
  403818:	f842 5c10 	str.w	r5, [r2, #-16]
  40381c:	f842 5c0c 	str.w	r5, [r2, #-12]
  403820:	f842 5c08 	str.w	r5, [r2, #-8]
  403824:	f842 5c04 	str.w	r5, [r2, #-4]
  403828:	f102 0210 	add.w	r2, r2, #16
  40382c:	d8f2      	bhi.n	403814 <memset+0x38>
  40382e:	f1a4 0210 	sub.w	r2, r4, #16
  403832:	f022 020f 	bic.w	r2, r2, #15
  403836:	f004 040f 	and.w	r4, r4, #15
  40383a:	3210      	adds	r2, #16
  40383c:	2c03      	cmp	r4, #3
  40383e:	4413      	add	r3, r2
  403840:	d90d      	bls.n	40385e <memset+0x82>
  403842:	461e      	mov	r6, r3
  403844:	4622      	mov	r2, r4
  403846:	3a04      	subs	r2, #4
  403848:	2a03      	cmp	r2, #3
  40384a:	f846 5b04 	str.w	r5, [r6], #4
  40384e:	d8fa      	bhi.n	403846 <memset+0x6a>
  403850:	1f22      	subs	r2, r4, #4
  403852:	f022 0203 	bic.w	r2, r2, #3
  403856:	3204      	adds	r2, #4
  403858:	4413      	add	r3, r2
  40385a:	f004 0403 	and.w	r4, r4, #3
  40385e:	b12c      	cbz	r4, 40386c <memset+0x90>
  403860:	b2c9      	uxtb	r1, r1
  403862:	441c      	add	r4, r3
  403864:	f803 1b01 	strb.w	r1, [r3], #1
  403868:	429c      	cmp	r4, r3
  40386a:	d1fb      	bne.n	403864 <memset+0x88>
  40386c:	bc70      	pop	{r4, r5, r6}
  40386e:	4770      	bx	lr
  403870:	4614      	mov	r4, r2
  403872:	4603      	mov	r3, r0
  403874:	e7c2      	b.n	4037fc <memset+0x20>
  403876:	bf00      	nop

00403878 <sprintf>:
  403878:	b40e      	push	{r1, r2, r3}
  40387a:	4601      	mov	r1, r0
  40387c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40387e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  403882:	f44f 7702 	mov.w	r7, #520	; 0x208
  403886:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40388a:	b09c      	sub	sp, #112	; 0x70
  40388c:	ac21      	add	r4, sp, #132	; 0x84
  40388e:	f854 2b04 	ldr.w	r2, [r4], #4
  403892:	4b0b      	ldr	r3, [pc, #44]	; (4038c0 <sprintf+0x48>)
  403894:	9102      	str	r1, [sp, #8]
  403896:	9106      	str	r1, [sp, #24]
  403898:	6818      	ldr	r0, [r3, #0]
  40389a:	a902      	add	r1, sp, #8
  40389c:	4623      	mov	r3, r4
  40389e:	9401      	str	r4, [sp, #4]
  4038a0:	f8ad 7014 	strh.w	r7, [sp, #20]
  4038a4:	9504      	str	r5, [sp, #16]
  4038a6:	9507      	str	r5, [sp, #28]
  4038a8:	f8ad 6016 	strh.w	r6, [sp, #22]
  4038ac:	f000 f8e2 	bl	403a74 <_svfprintf_r>
  4038b0:	2200      	movs	r2, #0
  4038b2:	9b02      	ldr	r3, [sp, #8]
  4038b4:	701a      	strb	r2, [r3, #0]
  4038b6:	b01c      	add	sp, #112	; 0x70
  4038b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4038bc:	b003      	add	sp, #12
  4038be:	4770      	bx	lr
  4038c0:	20000208 	.word	0x20000208

004038c4 <strlen>:
  4038c4:	f020 0103 	bic.w	r1, r0, #3
  4038c8:	f010 0003 	ands.w	r0, r0, #3
  4038cc:	f1c0 0000 	rsb	r0, r0, #0
  4038d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4038d4:	f100 0c04 	add.w	ip, r0, #4
  4038d8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4038dc:	f06f 0200 	mvn.w	r2, #0
  4038e0:	bf1c      	itt	ne
  4038e2:	fa22 f20c 	lsrne.w	r2, r2, ip
  4038e6:	4313      	orrne	r3, r2
  4038e8:	f04f 0c01 	mov.w	ip, #1
  4038ec:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4038f0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4038f4:	eba3 020c 	sub.w	r2, r3, ip
  4038f8:	ea22 0203 	bic.w	r2, r2, r3
  4038fc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  403900:	bf04      	itt	eq
  403902:	f851 3b04 	ldreq.w	r3, [r1], #4
  403906:	3004      	addeq	r0, #4
  403908:	d0f4      	beq.n	4038f4 <strlen+0x30>
  40390a:	f1c2 0100 	rsb	r1, r2, #0
  40390e:	ea02 0201 	and.w	r2, r2, r1
  403912:	fab2 f282 	clz	r2, r2
  403916:	f1c2 021f 	rsb	r2, r2, #31
  40391a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40391e:	4770      	bx	lr

00403920 <_strtol_l.isra.0>:
  403920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403924:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  403928:	460f      	mov	r7, r1
  40392a:	4680      	mov	r8, r0
  40392c:	4616      	mov	r6, r2
  40392e:	461d      	mov	r5, r3
  403930:	468a      	mov	sl, r1
  403932:	e000      	b.n	403936 <_strtol_l.isra.0+0x16>
  403934:	46a2      	mov	sl, r4
  403936:	4654      	mov	r4, sl
  403938:	4648      	mov	r0, r9
  40393a:	f814 bb01 	ldrb.w	fp, [r4], #1
  40393e:	f002 fc31 	bl	4061a4 <__locale_ctype_ptr_l>
  403942:	4458      	add	r0, fp
  403944:	7842      	ldrb	r2, [r0, #1]
  403946:	f012 0208 	ands.w	r2, r2, #8
  40394a:	d1f3      	bne.n	403934 <_strtol_l.isra.0+0x14>
  40394c:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  403950:	d04f      	beq.n	4039f2 <_strtol_l.isra.0+0xd2>
  403952:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  403956:	bf04      	itt	eq
  403958:	f894 b000 	ldrbeq.w	fp, [r4]
  40395c:	f10a 0402 	addeq.w	r4, sl, #2
  403960:	b11d      	cbz	r5, 40396a <_strtol_l.isra.0+0x4a>
  403962:	2d10      	cmp	r5, #16
  403964:	d056      	beq.n	403a14 <_strtol_l.isra.0+0xf4>
  403966:	46ac      	mov	ip, r5
  403968:	e004      	b.n	403974 <_strtol_l.isra.0+0x54>
  40396a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  40396e:	d060      	beq.n	403a32 <_strtol_l.isra.0+0x112>
  403970:	250a      	movs	r5, #10
  403972:	46ac      	mov	ip, r5
  403974:	2a00      	cmp	r2, #0
  403976:	bf0c      	ite	eq
  403978:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  40397c:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  403980:	2100      	movs	r1, #0
  403982:	fbb9 fefc 	udiv	lr, r9, ip
  403986:	4608      	mov	r0, r1
  403988:	fb0c 9a1e 	mls	sl, ip, lr, r9
  40398c:	e005      	b.n	40399a <_strtol_l.isra.0+0x7a>
  40398e:	d029      	beq.n	4039e4 <_strtol_l.isra.0+0xc4>
  403990:	2101      	movs	r1, #1
  403992:	fb0c 3000 	mla	r0, ip, r0, r3
  403996:	f814 bb01 	ldrb.w	fp, [r4], #1
  40399a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  40399e:	2b09      	cmp	r3, #9
  4039a0:	d905      	bls.n	4039ae <_strtol_l.isra.0+0x8e>
  4039a2:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  4039a6:	2b19      	cmp	r3, #25
  4039a8:	d80b      	bhi.n	4039c2 <_strtol_l.isra.0+0xa2>
  4039aa:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  4039ae:	429d      	cmp	r5, r3
  4039b0:	dd0f      	ble.n	4039d2 <_strtol_l.isra.0+0xb2>
  4039b2:	f1b1 3fff 	cmp.w	r1, #4294967295
  4039b6:	d0ee      	beq.n	403996 <_strtol_l.isra.0+0x76>
  4039b8:	4586      	cmp	lr, r0
  4039ba:	d2e8      	bcs.n	40398e <_strtol_l.isra.0+0x6e>
  4039bc:	f04f 31ff 	mov.w	r1, #4294967295
  4039c0:	e7e9      	b.n	403996 <_strtol_l.isra.0+0x76>
  4039c2:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  4039c6:	2b19      	cmp	r3, #25
  4039c8:	d803      	bhi.n	4039d2 <_strtol_l.isra.0+0xb2>
  4039ca:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  4039ce:	429d      	cmp	r5, r3
  4039d0:	dcef      	bgt.n	4039b2 <_strtol_l.isra.0+0x92>
  4039d2:	1c4b      	adds	r3, r1, #1
  4039d4:	d013      	beq.n	4039fe <_strtol_l.isra.0+0xde>
  4039d6:	b102      	cbz	r2, 4039da <_strtol_l.isra.0+0xba>
  4039d8:	4240      	negs	r0, r0
  4039da:	b146      	cbz	r6, 4039ee <_strtol_l.isra.0+0xce>
  4039dc:	b9c1      	cbnz	r1, 403a10 <_strtol_l.isra.0+0xf0>
  4039de:	6037      	str	r7, [r6, #0]
  4039e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039e4:	459a      	cmp	sl, r3
  4039e6:	dad3      	bge.n	403990 <_strtol_l.isra.0+0x70>
  4039e8:	f04f 31ff 	mov.w	r1, #4294967295
  4039ec:	e7d3      	b.n	403996 <_strtol_l.isra.0+0x76>
  4039ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039f2:	f894 b000 	ldrb.w	fp, [r4]
  4039f6:	2201      	movs	r2, #1
  4039f8:	f10a 0402 	add.w	r4, sl, #2
  4039fc:	e7b0      	b.n	403960 <_strtol_l.isra.0+0x40>
  4039fe:	2322      	movs	r3, #34	; 0x22
  403a00:	f8c8 3000 	str.w	r3, [r8]
  403a04:	b1ee      	cbz	r6, 403a42 <_strtol_l.isra.0+0x122>
  403a06:	1e67      	subs	r7, r4, #1
  403a08:	4648      	mov	r0, r9
  403a0a:	6037      	str	r7, [r6, #0]
  403a0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a10:	4681      	mov	r9, r0
  403a12:	e7f8      	b.n	403a06 <_strtol_l.isra.0+0xe6>
  403a14:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  403a18:	d1a5      	bne.n	403966 <_strtol_l.isra.0+0x46>
  403a1a:	7823      	ldrb	r3, [r4, #0]
  403a1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  403a20:	2b58      	cmp	r3, #88	; 0x58
  403a22:	d1a0      	bne.n	403966 <_strtol_l.isra.0+0x46>
  403a24:	f04f 0c10 	mov.w	ip, #16
  403a28:	f894 b001 	ldrb.w	fp, [r4, #1]
  403a2c:	4665      	mov	r5, ip
  403a2e:	3402      	adds	r4, #2
  403a30:	e7a0      	b.n	403974 <_strtol_l.isra.0+0x54>
  403a32:	7823      	ldrb	r3, [r4, #0]
  403a34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  403a38:	2b58      	cmp	r3, #88	; 0x58
  403a3a:	d0f3      	beq.n	403a24 <_strtol_l.isra.0+0x104>
  403a3c:	2508      	movs	r5, #8
  403a3e:	46ac      	mov	ip, r5
  403a40:	e798      	b.n	403974 <_strtol_l.isra.0+0x54>
  403a42:	4648      	mov	r0, r9
  403a44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00403a48 <strtol>:
  403a48:	4b08      	ldr	r3, [pc, #32]	; (403a6c <strtol+0x24>)
  403a4a:	b570      	push	{r4, r5, r6, lr}
  403a4c:	681d      	ldr	r5, [r3, #0]
  403a4e:	4e08      	ldr	r6, [pc, #32]	; (403a70 <strtol+0x28>)
  403a50:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  403a52:	b082      	sub	sp, #8
  403a54:	2c00      	cmp	r4, #0
  403a56:	bf08      	it	eq
  403a58:	4634      	moveq	r4, r6
  403a5a:	4613      	mov	r3, r2
  403a5c:	9400      	str	r4, [sp, #0]
  403a5e:	460a      	mov	r2, r1
  403a60:	4601      	mov	r1, r0
  403a62:	4628      	mov	r0, r5
  403a64:	f7ff ff5c 	bl	403920 <_strtol_l.isra.0>
  403a68:	b002      	add	sp, #8
  403a6a:	bd70      	pop	{r4, r5, r6, pc}
  403a6c:	20000208 	.word	0x20000208
  403a70:	2000063c 	.word	0x2000063c

00403a74 <_svfprintf_r>:
  403a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a78:	b0c3      	sub	sp, #268	; 0x10c
  403a7a:	460c      	mov	r4, r1
  403a7c:	910b      	str	r1, [sp, #44]	; 0x2c
  403a7e:	4692      	mov	sl, r2
  403a80:	930f      	str	r3, [sp, #60]	; 0x3c
  403a82:	900c      	str	r0, [sp, #48]	; 0x30
  403a84:	f002 fb92 	bl	4061ac <_localeconv_r>
  403a88:	6803      	ldr	r3, [r0, #0]
  403a8a:	4618      	mov	r0, r3
  403a8c:	931a      	str	r3, [sp, #104]	; 0x68
  403a8e:	f7ff ff19 	bl	4038c4 <strlen>
  403a92:	89a3      	ldrh	r3, [r4, #12]
  403a94:	9019      	str	r0, [sp, #100]	; 0x64
  403a96:	0619      	lsls	r1, r3, #24
  403a98:	d503      	bpl.n	403aa2 <_svfprintf_r+0x2e>
  403a9a:	6923      	ldr	r3, [r4, #16]
  403a9c:	2b00      	cmp	r3, #0
  403a9e:	f001 8035 	beq.w	404b0c <_svfprintf_r+0x1098>
  403aa2:	2300      	movs	r3, #0
  403aa4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403aa8:	46c8      	mov	r8, r9
  403aaa:	9315      	str	r3, [sp, #84]	; 0x54
  403aac:	9313      	str	r3, [sp, #76]	; 0x4c
  403aae:	9314      	str	r3, [sp, #80]	; 0x50
  403ab0:	9318      	str	r3, [sp, #96]	; 0x60
  403ab2:	931b      	str	r3, [sp, #108]	; 0x6c
  403ab4:	9309      	str	r3, [sp, #36]	; 0x24
  403ab6:	9316      	str	r3, [sp, #88]	; 0x58
  403ab8:	9317      	str	r3, [sp, #92]	; 0x5c
  403aba:	9327      	str	r3, [sp, #156]	; 0x9c
  403abc:	9326      	str	r3, [sp, #152]	; 0x98
  403abe:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403ac2:	f89a 3000 	ldrb.w	r3, [sl]
  403ac6:	4654      	mov	r4, sl
  403ac8:	b1eb      	cbz	r3, 403b06 <_svfprintf_r+0x92>
  403aca:	2b25      	cmp	r3, #37	; 0x25
  403acc:	d102      	bne.n	403ad4 <_svfprintf_r+0x60>
  403ace:	e01a      	b.n	403b06 <_svfprintf_r+0x92>
  403ad0:	2b25      	cmp	r3, #37	; 0x25
  403ad2:	d003      	beq.n	403adc <_svfprintf_r+0x68>
  403ad4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403ad8:	2b00      	cmp	r3, #0
  403ada:	d1f9      	bne.n	403ad0 <_svfprintf_r+0x5c>
  403adc:	eba4 050a 	sub.w	r5, r4, sl
  403ae0:	b18d      	cbz	r5, 403b06 <_svfprintf_r+0x92>
  403ae2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ae4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403ae6:	3301      	adds	r3, #1
  403ae8:	442a      	add	r2, r5
  403aea:	2b07      	cmp	r3, #7
  403aec:	f8c8 a000 	str.w	sl, [r8]
  403af0:	f8c8 5004 	str.w	r5, [r8, #4]
  403af4:	9227      	str	r2, [sp, #156]	; 0x9c
  403af6:	9326      	str	r3, [sp, #152]	; 0x98
  403af8:	f300 808a 	bgt.w	403c10 <_svfprintf_r+0x19c>
  403afc:	f108 0808 	add.w	r8, r8, #8
  403b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403b02:	442b      	add	r3, r5
  403b04:	9309      	str	r3, [sp, #36]	; 0x24
  403b06:	7823      	ldrb	r3, [r4, #0]
  403b08:	2b00      	cmp	r3, #0
  403b0a:	f000 8089 	beq.w	403c20 <_svfprintf_r+0x1ac>
  403b0e:	2300      	movs	r3, #0
  403b10:	f04f 30ff 	mov.w	r0, #4294967295
  403b14:	461a      	mov	r2, r3
  403b16:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403b1a:	4619      	mov	r1, r3
  403b1c:	930d      	str	r3, [sp, #52]	; 0x34
  403b1e:	469b      	mov	fp, r3
  403b20:	7863      	ldrb	r3, [r4, #1]
  403b22:	f104 0a01 	add.w	sl, r4, #1
  403b26:	900a      	str	r0, [sp, #40]	; 0x28
  403b28:	f10a 0a01 	add.w	sl, sl, #1
  403b2c:	f1a3 0020 	sub.w	r0, r3, #32
  403b30:	2858      	cmp	r0, #88	; 0x58
  403b32:	f200 83b7 	bhi.w	4042a4 <_svfprintf_r+0x830>
  403b36:	e8df f010 	tbh	[pc, r0, lsl #1]
  403b3a:	034c      	.short	0x034c
  403b3c:	03b503b5 	.word	0x03b503b5
  403b40:	03b50354 	.word	0x03b50354
  403b44:	03b503b5 	.word	0x03b503b5
  403b48:	03b503b5 	.word	0x03b503b5
  403b4c:	005903b5 	.word	0x005903b5
  403b50:	03b50359 	.word	0x03b50359
  403b54:	02140066 	.word	0x02140066
  403b58:	022f03b5 	.word	0x022f03b5
  403b5c:	03a503a5 	.word	0x03a503a5
  403b60:	03a503a5 	.word	0x03a503a5
  403b64:	03a503a5 	.word	0x03a503a5
  403b68:	03a503a5 	.word	0x03a503a5
  403b6c:	03b503a5 	.word	0x03b503a5
  403b70:	03b503b5 	.word	0x03b503b5
  403b74:	03b503b5 	.word	0x03b503b5
  403b78:	03b503b5 	.word	0x03b503b5
  403b7c:	03b503b5 	.word	0x03b503b5
  403b80:	028b03b5 	.word	0x028b03b5
  403b84:	03b502d3 	.word	0x03b502d3
  403b88:	03b502d3 	.word	0x03b502d3
  403b8c:	03b503b5 	.word	0x03b503b5
  403b90:	031b03b5 	.word	0x031b03b5
  403b94:	03b503b5 	.word	0x03b503b5
  403b98:	03b50320 	.word	0x03b50320
  403b9c:	03b503b5 	.word	0x03b503b5
  403ba0:	03b503b5 	.word	0x03b503b5
  403ba4:	03b50234 	.word	0x03b50234
  403ba8:	024b03b5 	.word	0x024b03b5
  403bac:	03b503b5 	.word	0x03b503b5
  403bb0:	03b503b5 	.word	0x03b503b5
  403bb4:	03b503b5 	.word	0x03b503b5
  403bb8:	03b503b5 	.word	0x03b503b5
  403bbc:	03b503b5 	.word	0x03b503b5
  403bc0:	039e0276 	.word	0x039e0276
  403bc4:	02d302d3 	.word	0x02d302d3
  403bc8:	036302d3 	.word	0x036302d3
  403bcc:	03b5039e 	.word	0x03b5039e
  403bd0:	036803b5 	.word	0x036803b5
  403bd4:	037503b5 	.word	0x037503b5
  403bd8:	038c01dd 	.word	0x038c01dd
  403bdc:	03b5035e 	.word	0x03b5035e
  403be0:	03b501f2 	.word	0x03b501f2
  403be4:	03b50087 	.word	0x03b50087
  403be8:	033203b5 	.word	0x033203b5
  403bec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403bee:	6823      	ldr	r3, [r4, #0]
  403bf0:	4618      	mov	r0, r3
  403bf2:	930d      	str	r3, [sp, #52]	; 0x34
  403bf4:	4623      	mov	r3, r4
  403bf6:	2800      	cmp	r0, #0
  403bf8:	f103 0304 	add.w	r3, r3, #4
  403bfc:	930f      	str	r3, [sp, #60]	; 0x3c
  403bfe:	da04      	bge.n	403c0a <_svfprintf_r+0x196>
  403c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403c02:	425b      	negs	r3, r3
  403c04:	930d      	str	r3, [sp, #52]	; 0x34
  403c06:	f04b 0b04 	orr.w	fp, fp, #4
  403c0a:	f89a 3000 	ldrb.w	r3, [sl]
  403c0e:	e78b      	b.n	403b28 <_svfprintf_r+0xb4>
  403c10:	aa25      	add	r2, sp, #148	; 0x94
  403c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403c14:	980c      	ldr	r0, [sp, #48]	; 0x30
  403c16:	f003 fb0d 	bl	407234 <__ssprint_r>
  403c1a:	b940      	cbnz	r0, 403c2e <_svfprintf_r+0x1ba>
  403c1c:	46c8      	mov	r8, r9
  403c1e:	e76f      	b.n	403b00 <_svfprintf_r+0x8c>
  403c20:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403c22:	b123      	cbz	r3, 403c2e <_svfprintf_r+0x1ba>
  403c24:	980c      	ldr	r0, [sp, #48]	; 0x30
  403c26:	aa25      	add	r2, sp, #148	; 0x94
  403c28:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403c2a:	f003 fb03 	bl	407234 <__ssprint_r>
  403c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403c30:	899b      	ldrh	r3, [r3, #12]
  403c32:	f013 0f40 	tst.w	r3, #64	; 0x40
  403c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403c38:	bf18      	it	ne
  403c3a:	f04f 33ff 	movne.w	r3, #4294967295
  403c3e:	9309      	str	r3, [sp, #36]	; 0x24
  403c40:	9809      	ldr	r0, [sp, #36]	; 0x24
  403c42:	b043      	add	sp, #268	; 0x10c
  403c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c48:	f01b 0f20 	tst.w	fp, #32
  403c4c:	9311      	str	r3, [sp, #68]	; 0x44
  403c4e:	f040 81af 	bne.w	403fb0 <_svfprintf_r+0x53c>
  403c52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403c54:	f01b 0f10 	tst.w	fp, #16
  403c58:	4613      	mov	r3, r2
  403c5a:	f040 859a 	bne.w	404792 <_svfprintf_r+0xd1e>
  403c5e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403c62:	f000 8596 	beq.w	404792 <_svfprintf_r+0xd1e>
  403c66:	2500      	movs	r5, #0
  403c68:	2301      	movs	r3, #1
  403c6a:	8814      	ldrh	r4, [r2, #0]
  403c6c:	3204      	adds	r2, #4
  403c6e:	920f      	str	r2, [sp, #60]	; 0x3c
  403c70:	2200      	movs	r2, #0
  403c72:	4617      	mov	r7, r2
  403c74:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
  403c78:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c7a:	1c4a      	adds	r2, r1, #1
  403c7c:	f000 8210 	beq.w	4040a0 <_svfprintf_r+0x62c>
  403c80:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403c84:	9207      	str	r2, [sp, #28]
  403c86:	ea54 0205 	orrs.w	r2, r4, r5
  403c8a:	f040 820f 	bne.w	4040ac <_svfprintf_r+0x638>
  403c8e:	2900      	cmp	r1, #0
  403c90:	f040 8431 	bne.w	4044f6 <_svfprintf_r+0xa82>
  403c94:	2b00      	cmp	r3, #0
  403c96:	f040 8539 	bne.w	40470c <_svfprintf_r+0xc98>
  403c9a:	f01b 0301 	ands.w	r3, fp, #1
  403c9e:	930e      	str	r3, [sp, #56]	; 0x38
  403ca0:	f000 8662 	beq.w	404968 <_svfprintf_r+0xef4>
  403ca4:	2330      	movs	r3, #48	; 0x30
  403ca6:	ae42      	add	r6, sp, #264	; 0x108
  403ca8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403cb0:	4293      	cmp	r3, r2
  403cb2:	bfb8      	it	lt
  403cb4:	4613      	movlt	r3, r2
  403cb6:	9308      	str	r3, [sp, #32]
  403cb8:	2300      	movs	r3, #0
  403cba:	9312      	str	r3, [sp, #72]	; 0x48
  403cbc:	b117      	cbz	r7, 403cc4 <_svfprintf_r+0x250>
  403cbe:	9b08      	ldr	r3, [sp, #32]
  403cc0:	3301      	adds	r3, #1
  403cc2:	9308      	str	r3, [sp, #32]
  403cc4:	9b07      	ldr	r3, [sp, #28]
  403cc6:	f013 0302 	ands.w	r3, r3, #2
  403cca:	9310      	str	r3, [sp, #64]	; 0x40
  403ccc:	d002      	beq.n	403cd4 <_svfprintf_r+0x260>
  403cce:	9b08      	ldr	r3, [sp, #32]
  403cd0:	3302      	adds	r3, #2
  403cd2:	9308      	str	r3, [sp, #32]
  403cd4:	9b07      	ldr	r3, [sp, #28]
  403cd6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403cda:	f040 8310 	bne.w	4042fe <_svfprintf_r+0x88a>
  403cde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403ce0:	9a08      	ldr	r2, [sp, #32]
  403ce2:	eba3 0b02 	sub.w	fp, r3, r2
  403ce6:	f1bb 0f00 	cmp.w	fp, #0
  403cea:	f340 8308 	ble.w	4042fe <_svfprintf_r+0x88a>
  403cee:	f1bb 0f10 	cmp.w	fp, #16
  403cf2:	f340 87b2 	ble.w	404c5a <_svfprintf_r+0x11e6>
  403cf6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403cf8:	4643      	mov	r3, r8
  403cfa:	4621      	mov	r1, r4
  403cfc:	46a8      	mov	r8, r5
  403cfe:	2710      	movs	r7, #16
  403d00:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403d02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403d04:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403d06:	e006      	b.n	403d16 <_svfprintf_r+0x2a2>
  403d08:	f1ab 0b10 	sub.w	fp, fp, #16
  403d0c:	f1bb 0f10 	cmp.w	fp, #16
  403d10:	f103 0308 	add.w	r3, r3, #8
  403d14:	dd18      	ble.n	403d48 <_svfprintf_r+0x2d4>
  403d16:	3201      	adds	r2, #1
  403d18:	48ab      	ldr	r0, [pc, #684]	; (403fc8 <_svfprintf_r+0x554>)
  403d1a:	3110      	adds	r1, #16
  403d1c:	2a07      	cmp	r2, #7
  403d1e:	9127      	str	r1, [sp, #156]	; 0x9c
  403d20:	9226      	str	r2, [sp, #152]	; 0x98
  403d22:	e883 0081 	stmia.w	r3, {r0, r7}
  403d26:	ddef      	ble.n	403d08 <_svfprintf_r+0x294>
  403d28:	aa25      	add	r2, sp, #148	; 0x94
  403d2a:	4629      	mov	r1, r5
  403d2c:	4620      	mov	r0, r4
  403d2e:	f003 fa81 	bl	407234 <__ssprint_r>
  403d32:	2800      	cmp	r0, #0
  403d34:	f47f af7b 	bne.w	403c2e <_svfprintf_r+0x1ba>
  403d38:	f1ab 0b10 	sub.w	fp, fp, #16
  403d3c:	f1bb 0f10 	cmp.w	fp, #16
  403d40:	464b      	mov	r3, r9
  403d42:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403d44:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403d46:	dce6      	bgt.n	403d16 <_svfprintf_r+0x2a2>
  403d48:	4645      	mov	r5, r8
  403d4a:	460c      	mov	r4, r1
  403d4c:	4698      	mov	r8, r3
  403d4e:	3201      	adds	r2, #1
  403d50:	4b9d      	ldr	r3, [pc, #628]	; (403fc8 <_svfprintf_r+0x554>)
  403d52:	445c      	add	r4, fp
  403d54:	2a07      	cmp	r2, #7
  403d56:	9427      	str	r4, [sp, #156]	; 0x9c
  403d58:	9226      	str	r2, [sp, #152]	; 0x98
  403d5a:	e888 0808 	stmia.w	r8, {r3, fp}
  403d5e:	f300 82c3 	bgt.w	4042e8 <_svfprintf_r+0x874>
  403d62:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403d66:	f108 0808 	add.w	r8, r8, #8
  403d6a:	b187      	cbz	r7, 403d8e <_svfprintf_r+0x31a>
  403d6c:	2101      	movs	r1, #1
  403d6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d70:	440c      	add	r4, r1
  403d72:	440b      	add	r3, r1
  403d74:	f10d 0277 	add.w	r2, sp, #119	; 0x77
  403d78:	2b07      	cmp	r3, #7
  403d7a:	9427      	str	r4, [sp, #156]	; 0x9c
  403d7c:	9326      	str	r3, [sp, #152]	; 0x98
  403d7e:	f8c8 1004 	str.w	r1, [r8, #4]
  403d82:	f8c8 2000 	str.w	r2, [r8]
  403d86:	f300 83cd 	bgt.w	404524 <_svfprintf_r+0xab0>
  403d8a:	f108 0808 	add.w	r8, r8, #8
  403d8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403d90:	b17b      	cbz	r3, 403db2 <_svfprintf_r+0x33e>
  403d92:	2102      	movs	r1, #2
  403d94:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d96:	440c      	add	r4, r1
  403d98:	3301      	adds	r3, #1
  403d9a:	aa1e      	add	r2, sp, #120	; 0x78
  403d9c:	2b07      	cmp	r3, #7
  403d9e:	9427      	str	r4, [sp, #156]	; 0x9c
  403da0:	9326      	str	r3, [sp, #152]	; 0x98
  403da2:	f8c8 1004 	str.w	r1, [r8, #4]
  403da6:	f8c8 2000 	str.w	r2, [r8]
  403daa:	f300 8411 	bgt.w	4045d0 <_svfprintf_r+0xb5c>
  403dae:	f108 0808 	add.w	r8, r8, #8
  403db2:	2d80      	cmp	r5, #128	; 0x80
  403db4:	f000 8304 	beq.w	4043c0 <_svfprintf_r+0x94c>
  403db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403dbc:	1a9f      	subs	r7, r3, r2
  403dbe:	2f00      	cmp	r7, #0
  403dc0:	dd37      	ble.n	403e32 <_svfprintf_r+0x3be>
  403dc2:	2f10      	cmp	r7, #16
  403dc4:	f340 8679 	ble.w	404aba <_svfprintf_r+0x1046>
  403dc8:	4d80      	ldr	r5, [pc, #512]	; (403fcc <_svfprintf_r+0x558>)
  403dca:	4642      	mov	r2, r8
  403dcc:	4621      	mov	r1, r4
  403dce:	46b0      	mov	r8, r6
  403dd0:	f04f 0b10 	mov.w	fp, #16
  403dd4:	462e      	mov	r6, r5
  403dd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403dd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403dda:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403ddc:	e004      	b.n	403de8 <_svfprintf_r+0x374>
  403dde:	3f10      	subs	r7, #16
  403de0:	2f10      	cmp	r7, #16
  403de2:	f102 0208 	add.w	r2, r2, #8
  403de6:	dd15      	ble.n	403e14 <_svfprintf_r+0x3a0>
  403de8:	3301      	adds	r3, #1
  403dea:	3110      	adds	r1, #16
  403dec:	2b07      	cmp	r3, #7
  403dee:	9127      	str	r1, [sp, #156]	; 0x9c
  403df0:	9326      	str	r3, [sp, #152]	; 0x98
  403df2:	e882 0840 	stmia.w	r2, {r6, fp}
  403df6:	ddf2      	ble.n	403dde <_svfprintf_r+0x36a>
  403df8:	aa25      	add	r2, sp, #148	; 0x94
  403dfa:	4629      	mov	r1, r5
  403dfc:	4620      	mov	r0, r4
  403dfe:	f003 fa19 	bl	407234 <__ssprint_r>
  403e02:	2800      	cmp	r0, #0
  403e04:	f47f af13 	bne.w	403c2e <_svfprintf_r+0x1ba>
  403e08:	3f10      	subs	r7, #16
  403e0a:	2f10      	cmp	r7, #16
  403e0c:	464a      	mov	r2, r9
  403e0e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403e10:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e12:	dce9      	bgt.n	403de8 <_svfprintf_r+0x374>
  403e14:	4635      	mov	r5, r6
  403e16:	460c      	mov	r4, r1
  403e18:	4646      	mov	r6, r8
  403e1a:	4690      	mov	r8, r2
  403e1c:	3301      	adds	r3, #1
  403e1e:	443c      	add	r4, r7
  403e20:	2b07      	cmp	r3, #7
  403e22:	9427      	str	r4, [sp, #156]	; 0x9c
  403e24:	9326      	str	r3, [sp, #152]	; 0x98
  403e26:	e888 00a0 	stmia.w	r8, {r5, r7}
  403e2a:	f300 8370 	bgt.w	40450e <_svfprintf_r+0xa9a>
  403e2e:	f108 0808 	add.w	r8, r8, #8
  403e32:	9b07      	ldr	r3, [sp, #28]
  403e34:	05df      	lsls	r7, r3, #23
  403e36:	f100 8264 	bmi.w	404302 <_svfprintf_r+0x88e>
  403e3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e3c:	990e      	ldr	r1, [sp, #56]	; 0x38
  403e3e:	3301      	adds	r3, #1
  403e40:	440c      	add	r4, r1
  403e42:	2b07      	cmp	r3, #7
  403e44:	9427      	str	r4, [sp, #156]	; 0x9c
  403e46:	f8c8 6000 	str.w	r6, [r8]
  403e4a:	f8c8 1004 	str.w	r1, [r8, #4]
  403e4e:	9326      	str	r3, [sp, #152]	; 0x98
  403e50:	f300 83b3 	bgt.w	4045ba <_svfprintf_r+0xb46>
  403e54:	f108 0808 	add.w	r8, r8, #8
  403e58:	9b07      	ldr	r3, [sp, #28]
  403e5a:	075b      	lsls	r3, r3, #29
  403e5c:	d53b      	bpl.n	403ed6 <_svfprintf_r+0x462>
  403e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403e60:	9a08      	ldr	r2, [sp, #32]
  403e62:	1a9d      	subs	r5, r3, r2
  403e64:	2d00      	cmp	r5, #0
  403e66:	dd36      	ble.n	403ed6 <_svfprintf_r+0x462>
  403e68:	2d10      	cmp	r5, #16
  403e6a:	f340 8721 	ble.w	404cb0 <_svfprintf_r+0x123c>
  403e6e:	2610      	movs	r6, #16
  403e70:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e72:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403e74:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  403e78:	e004      	b.n	403e84 <_svfprintf_r+0x410>
  403e7a:	3d10      	subs	r5, #16
  403e7c:	2d10      	cmp	r5, #16
  403e7e:	f108 0808 	add.w	r8, r8, #8
  403e82:	dd16      	ble.n	403eb2 <_svfprintf_r+0x43e>
  403e84:	3301      	adds	r3, #1
  403e86:	4a50      	ldr	r2, [pc, #320]	; (403fc8 <_svfprintf_r+0x554>)
  403e88:	3410      	adds	r4, #16
  403e8a:	2b07      	cmp	r3, #7
  403e8c:	9427      	str	r4, [sp, #156]	; 0x9c
  403e8e:	9326      	str	r3, [sp, #152]	; 0x98
  403e90:	e888 0044 	stmia.w	r8, {r2, r6}
  403e94:	ddf1      	ble.n	403e7a <_svfprintf_r+0x406>
  403e96:	aa25      	add	r2, sp, #148	; 0x94
  403e98:	4659      	mov	r1, fp
  403e9a:	4638      	mov	r0, r7
  403e9c:	f003 f9ca 	bl	407234 <__ssprint_r>
  403ea0:	2800      	cmp	r0, #0
  403ea2:	f47f aec4 	bne.w	403c2e <_svfprintf_r+0x1ba>
  403ea6:	3d10      	subs	r5, #16
  403ea8:	2d10      	cmp	r5, #16
  403eaa:	46c8      	mov	r8, r9
  403eac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403eae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403eb0:	dce8      	bgt.n	403e84 <_svfprintf_r+0x410>
  403eb2:	3301      	adds	r3, #1
  403eb4:	4a44      	ldr	r2, [pc, #272]	; (403fc8 <_svfprintf_r+0x554>)
  403eb6:	442c      	add	r4, r5
  403eb8:	2b07      	cmp	r3, #7
  403eba:	9427      	str	r4, [sp, #156]	; 0x9c
  403ebc:	9326      	str	r3, [sp, #152]	; 0x98
  403ebe:	e888 0024 	stmia.w	r8, {r2, r5}
  403ec2:	dd08      	ble.n	403ed6 <_svfprintf_r+0x462>
  403ec4:	aa25      	add	r2, sp, #148	; 0x94
  403ec6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403ec8:	980c      	ldr	r0, [sp, #48]	; 0x30
  403eca:	f003 f9b3 	bl	407234 <__ssprint_r>
  403ece:	2800      	cmp	r0, #0
  403ed0:	f47f aead 	bne.w	403c2e <_svfprintf_r+0x1ba>
  403ed4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403eda:	9908      	ldr	r1, [sp, #32]
  403edc:	428a      	cmp	r2, r1
  403ede:	bfac      	ite	ge
  403ee0:	189b      	addge	r3, r3, r2
  403ee2:	185b      	addlt	r3, r3, r1
  403ee4:	9309      	str	r3, [sp, #36]	; 0x24
  403ee6:	2c00      	cmp	r4, #0
  403ee8:	f040 82fb 	bne.w	4044e2 <_svfprintf_r+0xa6e>
  403eec:	2300      	movs	r3, #0
  403eee:	46c8      	mov	r8, r9
  403ef0:	9326      	str	r3, [sp, #152]	; 0x98
  403ef2:	e5e6      	b.n	403ac2 <_svfprintf_r+0x4e>
  403ef4:	9311      	str	r3, [sp, #68]	; 0x44
  403ef6:	f01b 0320 	ands.w	r3, fp, #32
  403efa:	f040 8145 	bne.w	404188 <_svfprintf_r+0x714>
  403efe:	f01b 0210 	ands.w	r2, fp, #16
  403f02:	f040 8466 	bne.w	4047d2 <_svfprintf_r+0xd5e>
  403f06:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403f0a:	f000 8462 	beq.w	4047d2 <_svfprintf_r+0xd5e>
  403f0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403f10:	4613      	mov	r3, r2
  403f12:	460a      	mov	r2, r1
  403f14:	3204      	adds	r2, #4
  403f16:	880c      	ldrh	r4, [r1, #0]
  403f18:	2500      	movs	r5, #0
  403f1a:	920f      	str	r2, [sp, #60]	; 0x3c
  403f1c:	e6a8      	b.n	403c70 <_svfprintf_r+0x1fc>
  403f1e:	2500      	movs	r5, #0
  403f20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403f22:	9311      	str	r3, [sp, #68]	; 0x44
  403f24:	6816      	ldr	r6, [r2, #0]
  403f26:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  403f2a:	1d14      	adds	r4, r2, #4
  403f2c:	2e00      	cmp	r6, #0
  403f2e:	f000 86cd 	beq.w	404ccc <_svfprintf_r+0x1258>
  403f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403f34:	1c53      	adds	r3, r2, #1
  403f36:	f000 861b 	beq.w	404b70 <_svfprintf_r+0x10fc>
  403f3a:	4629      	mov	r1, r5
  403f3c:	4630      	mov	r0, r6
  403f3e:	f002 fbff 	bl	406740 <memchr>
  403f42:	2800      	cmp	r0, #0
  403f44:	f000 870d 	beq.w	404d62 <_svfprintf_r+0x12ee>
  403f48:	1b83      	subs	r3, r0, r6
  403f4a:	950a      	str	r5, [sp, #40]	; 0x28
  403f4c:	930e      	str	r3, [sp, #56]	; 0x38
  403f4e:	940f      	str	r4, [sp, #60]	; 0x3c
  403f50:	f8cd b01c 	str.w	fp, [sp, #28]
  403f54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403f58:	9308      	str	r3, [sp, #32]
  403f5a:	9512      	str	r5, [sp, #72]	; 0x48
  403f5c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403f60:	e6ac      	b.n	403cbc <_svfprintf_r+0x248>
  403f62:	f89a 3000 	ldrb.w	r3, [sl]
  403f66:	f10a 0401 	add.w	r4, sl, #1
  403f6a:	2b2a      	cmp	r3, #42	; 0x2a
  403f6c:	f000 87c2 	beq.w	404ef4 <_svfprintf_r+0x1480>
  403f70:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403f74:	2809      	cmp	r0, #9
  403f76:	46a2      	mov	sl, r4
  403f78:	f200 8718 	bhi.w	404dac <_svfprintf_r+0x1338>
  403f7c:	2300      	movs	r3, #0
  403f7e:	461c      	mov	r4, r3
  403f80:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403f84:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403f88:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403f8c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403f90:	2809      	cmp	r0, #9
  403f92:	d9f5      	bls.n	403f80 <_svfprintf_r+0x50c>
  403f94:	940a      	str	r4, [sp, #40]	; 0x28
  403f96:	e5c9      	b.n	403b2c <_svfprintf_r+0xb8>
  403f98:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403f9c:	f89a 3000 	ldrb.w	r3, [sl]
  403fa0:	e5c2      	b.n	403b28 <_svfprintf_r+0xb4>
  403fa2:	f04b 0b10 	orr.w	fp, fp, #16
  403fa6:	f01b 0f20 	tst.w	fp, #32
  403faa:	9311      	str	r3, [sp, #68]	; 0x44
  403fac:	f43f ae51 	beq.w	403c52 <_svfprintf_r+0x1de>
  403fb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403fb2:	3407      	adds	r4, #7
  403fb4:	f024 0307 	bic.w	r3, r4, #7
  403fb8:	f103 0208 	add.w	r2, r3, #8
  403fbc:	e9d3 4500 	ldrd	r4, r5, [r3]
  403fc0:	920f      	str	r2, [sp, #60]	; 0x3c
  403fc2:	2301      	movs	r3, #1
  403fc4:	e654      	b.n	403c70 <_svfprintf_r+0x1fc>
  403fc6:	bf00      	nop
  403fc8:	00408260 	.word	0x00408260
  403fcc:	00408270 	.word	0x00408270
  403fd0:	9311      	str	r3, [sp, #68]	; 0x44
  403fd2:	2a00      	cmp	r2, #0
  403fd4:	f040 87ad 	bne.w	404f32 <_svfprintf_r+0x14be>
  403fd8:	4bbe      	ldr	r3, [pc, #760]	; (4042d4 <_svfprintf_r+0x860>)
  403fda:	f01b 0f20 	tst.w	fp, #32
  403fde:	9318      	str	r3, [sp, #96]	; 0x60
  403fe0:	f040 80e7 	bne.w	4041b2 <_svfprintf_r+0x73e>
  403fe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403fe6:	f01b 0f10 	tst.w	fp, #16
  403fea:	4613      	mov	r3, r2
  403fec:	f040 83d8 	bne.w	4047a0 <_svfprintf_r+0xd2c>
  403ff0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403ff4:	f000 83d4 	beq.w	4047a0 <_svfprintf_r+0xd2c>
  403ff8:	2500      	movs	r5, #0
  403ffa:	3304      	adds	r3, #4
  403ffc:	8814      	ldrh	r4, [r2, #0]
  403ffe:	930f      	str	r3, [sp, #60]	; 0x3c
  404000:	f01b 0f01 	tst.w	fp, #1
  404004:	f000 80e3 	beq.w	4041ce <_svfprintf_r+0x75a>
  404008:	ea54 0305 	orrs.w	r3, r4, r5
  40400c:	f000 80df 	beq.w	4041ce <_svfprintf_r+0x75a>
  404010:	2330      	movs	r3, #48	; 0x30
  404012:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404016:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40401a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40401e:	f04b 0b02 	orr.w	fp, fp, #2
  404022:	2302      	movs	r3, #2
  404024:	e624      	b.n	403c70 <_svfprintf_r+0x1fc>
  404026:	2201      	movs	r2, #1
  404028:	9311      	str	r3, [sp, #68]	; 0x44
  40402a:	2300      	movs	r3, #0
  40402c:	4611      	mov	r1, r2
  40402e:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404030:	9208      	str	r2, [sp, #32]
  404032:	6802      	ldr	r2, [r0, #0]
  404034:	461f      	mov	r7, r3
  404036:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40403a:	930a      	str	r3, [sp, #40]	; 0x28
  40403c:	9312      	str	r3, [sp, #72]	; 0x48
  40403e:	1d03      	adds	r3, r0, #4
  404040:	f8cd b01c 	str.w	fp, [sp, #28]
  404044:	910e      	str	r1, [sp, #56]	; 0x38
  404046:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40404a:	930f      	str	r3, [sp, #60]	; 0x3c
  40404c:	ae28      	add	r6, sp, #160	; 0xa0
  40404e:	e639      	b.n	403cc4 <_svfprintf_r+0x250>
  404050:	9311      	str	r3, [sp, #68]	; 0x44
  404052:	2a00      	cmp	r2, #0
  404054:	f040 8784 	bne.w	404f60 <_svfprintf_r+0x14ec>
  404058:	f04b 0b10 	orr.w	fp, fp, #16
  40405c:	f01b 0f20 	tst.w	fp, #32
  404060:	f040 8475 	bne.w	40494e <_svfprintf_r+0xeda>
  404064:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404066:	f01b 0f10 	tst.w	fp, #16
  40406a:	4613      	mov	r3, r2
  40406c:	f040 839d 	bne.w	4047aa <_svfprintf_r+0xd36>
  404070:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404074:	f000 8399 	beq.w	4047aa <_svfprintf_r+0xd36>
  404078:	f9b2 4000 	ldrsh.w	r4, [r2]
  40407c:	3304      	adds	r3, #4
  40407e:	17e5      	asrs	r5, r4, #31
  404080:	930f      	str	r3, [sp, #60]	; 0x3c
  404082:	4622      	mov	r2, r4
  404084:	462b      	mov	r3, r5
  404086:	2a00      	cmp	r2, #0
  404088:	f173 0300 	sbcs.w	r3, r3, #0
  40408c:	f2c0 8398 	blt.w	4047c0 <_svfprintf_r+0xd4c>
  404090:	990a      	ldr	r1, [sp, #40]	; 0x28
  404092:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404096:	1c4a      	adds	r2, r1, #1
  404098:	f04f 0301 	mov.w	r3, #1
  40409c:	f47f adf0 	bne.w	403c80 <_svfprintf_r+0x20c>
  4040a0:	ea54 0205 	orrs.w	r2, r4, r5
  4040a4:	f000 8229 	beq.w	4044fa <_svfprintf_r+0xa86>
  4040a8:	f8cd b01c 	str.w	fp, [sp, #28]
  4040ac:	2b01      	cmp	r3, #1
  4040ae:	f000 830e 	beq.w	4046ce <_svfprintf_r+0xc5a>
  4040b2:	2b02      	cmp	r3, #2
  4040b4:	f040 829c 	bne.w	4045f0 <_svfprintf_r+0xb7c>
  4040b8:	464e      	mov	r6, r9
  4040ba:	9818      	ldr	r0, [sp, #96]	; 0x60
  4040bc:	0923      	lsrs	r3, r4, #4
  4040be:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4040c2:	0929      	lsrs	r1, r5, #4
  4040c4:	f004 020f 	and.w	r2, r4, #15
  4040c8:	460d      	mov	r5, r1
  4040ca:	461c      	mov	r4, r3
  4040cc:	5c83      	ldrb	r3, [r0, r2]
  4040ce:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4040d2:	ea54 0305 	orrs.w	r3, r4, r5
  4040d6:	d1f1      	bne.n	4040bc <_svfprintf_r+0x648>
  4040d8:	eba9 0306 	sub.w	r3, r9, r6
  4040dc:	930e      	str	r3, [sp, #56]	; 0x38
  4040de:	e5e5      	b.n	403cac <_svfprintf_r+0x238>
  4040e0:	9311      	str	r3, [sp, #68]	; 0x44
  4040e2:	2a00      	cmp	r2, #0
  4040e4:	f040 8738 	bne.w	404f58 <_svfprintf_r+0x14e4>
  4040e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4040ea:	f01b 0f08 	tst.w	fp, #8
  4040ee:	f104 0407 	add.w	r4, r4, #7
  4040f2:	f000 84cf 	beq.w	404a94 <_svfprintf_r+0x1020>
  4040f6:	f024 0307 	bic.w	r3, r4, #7
  4040fa:	f103 0208 	add.w	r2, r3, #8
  4040fe:	920f      	str	r2, [sp, #60]	; 0x3c
  404100:	681a      	ldr	r2, [r3, #0]
  404102:	685b      	ldr	r3, [r3, #4]
  404104:	9215      	str	r2, [sp, #84]	; 0x54
  404106:	9314      	str	r3, [sp, #80]	; 0x50
  404108:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40410a:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40410c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404110:	4628      	mov	r0, r5
  404112:	4621      	mov	r1, r4
  404114:	f04f 32ff 	mov.w	r2, #4294967295
  404118:	4b6f      	ldr	r3, [pc, #444]	; (4042d8 <_svfprintf_r+0x864>)
  40411a:	f003 fdf9 	bl	407d10 <__aeabi_dcmpun>
  40411e:	2800      	cmp	r0, #0
  404120:	f040 8434 	bne.w	40498c <_svfprintf_r+0xf18>
  404124:	4628      	mov	r0, r5
  404126:	4621      	mov	r1, r4
  404128:	f04f 32ff 	mov.w	r2, #4294967295
  40412c:	4b6a      	ldr	r3, [pc, #424]	; (4042d8 <_svfprintf_r+0x864>)
  40412e:	f003 fdd1 	bl	407cd4 <__aeabi_dcmple>
  404132:	2800      	cmp	r0, #0
  404134:	f040 842a 	bne.w	40498c <_svfprintf_r+0xf18>
  404138:	a815      	add	r0, sp, #84	; 0x54
  40413a:	c80d      	ldmia	r0, {r0, r2, r3}
  40413c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40413e:	f003 fdbf 	bl	407cc0 <__aeabi_dcmplt>
  404142:	2800      	cmp	r0, #0
  404144:	f040 85d4 	bne.w	404cf0 <_svfprintf_r+0x127c>
  404148:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40414c:	2303      	movs	r3, #3
  40414e:	461a      	mov	r2, r3
  404150:	9308      	str	r3, [sp, #32]
  404152:	2300      	movs	r3, #0
  404154:	4e61      	ldr	r6, [pc, #388]	; (4042dc <_svfprintf_r+0x868>)
  404156:	4619      	mov	r1, r3
  404158:	930a      	str	r3, [sp, #40]	; 0x28
  40415a:	4b61      	ldr	r3, [pc, #388]	; (4042e0 <_svfprintf_r+0x86c>)
  40415c:	920e      	str	r2, [sp, #56]	; 0x38
  40415e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404160:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404164:	9007      	str	r0, [sp, #28]
  404166:	9112      	str	r1, [sp, #72]	; 0x48
  404168:	2a47      	cmp	r2, #71	; 0x47
  40416a:	bfd8      	it	le
  40416c:	461e      	movle	r6, r3
  40416e:	e5a5      	b.n	403cbc <_svfprintf_r+0x248>
  404170:	f04b 0b08 	orr.w	fp, fp, #8
  404174:	f89a 3000 	ldrb.w	r3, [sl]
  404178:	e4d6      	b.n	403b28 <_svfprintf_r+0xb4>
  40417a:	f04b 0b10 	orr.w	fp, fp, #16
  40417e:	9311      	str	r3, [sp, #68]	; 0x44
  404180:	f01b 0320 	ands.w	r3, fp, #32
  404184:	f43f aebb 	beq.w	403efe <_svfprintf_r+0x48a>
  404188:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40418a:	3407      	adds	r4, #7
  40418c:	f024 0307 	bic.w	r3, r4, #7
  404190:	f103 0208 	add.w	r2, r3, #8
  404194:	e9d3 4500 	ldrd	r4, r5, [r3]
  404198:	920f      	str	r2, [sp, #60]	; 0x3c
  40419a:	2300      	movs	r3, #0
  40419c:	e568      	b.n	403c70 <_svfprintf_r+0x1fc>
  40419e:	9311      	str	r3, [sp, #68]	; 0x44
  4041a0:	2a00      	cmp	r2, #0
  4041a2:	f040 86c2 	bne.w	404f2a <_svfprintf_r+0x14b6>
  4041a6:	4b4f      	ldr	r3, [pc, #316]	; (4042e4 <_svfprintf_r+0x870>)
  4041a8:	f01b 0f20 	tst.w	fp, #32
  4041ac:	9318      	str	r3, [sp, #96]	; 0x60
  4041ae:	f43f af19 	beq.w	403fe4 <_svfprintf_r+0x570>
  4041b2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4041b4:	f01b 0f01 	tst.w	fp, #1
  4041b8:	f104 0407 	add.w	r4, r4, #7
  4041bc:	f024 0307 	bic.w	r3, r4, #7
  4041c0:	f103 0208 	add.w	r2, r3, #8
  4041c4:	920f      	str	r2, [sp, #60]	; 0x3c
  4041c6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4041ca:	f47f af1d 	bne.w	404008 <_svfprintf_r+0x594>
  4041ce:	2302      	movs	r3, #2
  4041d0:	e54e      	b.n	403c70 <_svfprintf_r+0x1fc>
  4041d2:	f89a 3000 	ldrb.w	r3, [sl]
  4041d6:	2900      	cmp	r1, #0
  4041d8:	f47f aca6 	bne.w	403b28 <_svfprintf_r+0xb4>
  4041dc:	2201      	movs	r2, #1
  4041de:	2120      	movs	r1, #32
  4041e0:	e4a2      	b.n	403b28 <_svfprintf_r+0xb4>
  4041e2:	f04b 0b01 	orr.w	fp, fp, #1
  4041e6:	f89a 3000 	ldrb.w	r3, [sl]
  4041ea:	e49d      	b.n	403b28 <_svfprintf_r+0xb4>
  4041ec:	f89a 3000 	ldrb.w	r3, [sl]
  4041f0:	2201      	movs	r2, #1
  4041f2:	212b      	movs	r1, #43	; 0x2b
  4041f4:	e498      	b.n	403b28 <_svfprintf_r+0xb4>
  4041f6:	f04b 0b20 	orr.w	fp, fp, #32
  4041fa:	f89a 3000 	ldrb.w	r3, [sl]
  4041fe:	e493      	b.n	403b28 <_svfprintf_r+0xb4>
  404200:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404204:	f89a 3000 	ldrb.w	r3, [sl]
  404208:	e48e      	b.n	403b28 <_svfprintf_r+0xb4>
  40420a:	f89a 3000 	ldrb.w	r3, [sl]
  40420e:	2b6c      	cmp	r3, #108	; 0x6c
  404210:	bf03      	ittte	eq
  404212:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404216:	f04b 0b20 	orreq.w	fp, fp, #32
  40421a:	f10a 0a01 	addeq.w	sl, sl, #1
  40421e:	f04b 0b10 	orrne.w	fp, fp, #16
  404222:	e481      	b.n	403b28 <_svfprintf_r+0xb4>
  404224:	2a00      	cmp	r2, #0
  404226:	f040 867c 	bne.w	404f22 <_svfprintf_r+0x14ae>
  40422a:	f01b 0f20 	tst.w	fp, #32
  40422e:	f040 8452 	bne.w	404ad6 <_svfprintf_r+0x1062>
  404232:	f01b 0f10 	tst.w	fp, #16
  404236:	f040 8438 	bne.w	404aaa <_svfprintf_r+0x1036>
  40423a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40423e:	f000 8434 	beq.w	404aaa <_svfprintf_r+0x1036>
  404242:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404244:	6813      	ldr	r3, [r2, #0]
  404246:	3204      	adds	r2, #4
  404248:	920f      	str	r2, [sp, #60]	; 0x3c
  40424a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40424e:	801a      	strh	r2, [r3, #0]
  404250:	e437      	b.n	403ac2 <_svfprintf_r+0x4e>
  404252:	2378      	movs	r3, #120	; 0x78
  404254:	2230      	movs	r2, #48	; 0x30
  404256:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404258:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  40425c:	9311      	str	r3, [sp, #68]	; 0x44
  40425e:	1d03      	adds	r3, r0, #4
  404260:	930f      	str	r3, [sp, #60]	; 0x3c
  404262:	4b20      	ldr	r3, [pc, #128]	; (4042e4 <_svfprintf_r+0x870>)
  404264:	6804      	ldr	r4, [r0, #0]
  404266:	9318      	str	r3, [sp, #96]	; 0x60
  404268:	f04b 0b02 	orr.w	fp, fp, #2
  40426c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404270:	2500      	movs	r5, #0
  404272:	2302      	movs	r3, #2
  404274:	e4fc      	b.n	403c70 <_svfprintf_r+0x1fc>
  404276:	9311      	str	r3, [sp, #68]	; 0x44
  404278:	2a00      	cmp	r2, #0
  40427a:	f43f aeef 	beq.w	40405c <_svfprintf_r+0x5e8>
  40427e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404282:	e6eb      	b.n	40405c <_svfprintf_r+0x5e8>
  404284:	2000      	movs	r0, #0
  404286:	4604      	mov	r4, r0
  404288:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40428c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404290:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404294:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404298:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40429c:	2809      	cmp	r0, #9
  40429e:	d9f5      	bls.n	40428c <_svfprintf_r+0x818>
  4042a0:	940d      	str	r4, [sp, #52]	; 0x34
  4042a2:	e443      	b.n	403b2c <_svfprintf_r+0xb8>
  4042a4:	9311      	str	r3, [sp, #68]	; 0x44
  4042a6:	2a00      	cmp	r2, #0
  4042a8:	f040 864a 	bne.w	404f40 <_svfprintf_r+0x14cc>
  4042ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4042ae:	2a00      	cmp	r2, #0
  4042b0:	f43f acb6 	beq.w	403c20 <_svfprintf_r+0x1ac>
  4042b4:	2300      	movs	r3, #0
  4042b6:	2101      	movs	r1, #1
  4042b8:	461f      	mov	r7, r3
  4042ba:	9108      	str	r1, [sp, #32]
  4042bc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4042c0:	f8cd b01c 	str.w	fp, [sp, #28]
  4042c4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4042c8:	930a      	str	r3, [sp, #40]	; 0x28
  4042ca:	9312      	str	r3, [sp, #72]	; 0x48
  4042cc:	910e      	str	r1, [sp, #56]	; 0x38
  4042ce:	ae28      	add	r6, sp, #160	; 0xa0
  4042d0:	e4f8      	b.n	403cc4 <_svfprintf_r+0x250>
  4042d2:	bf00      	nop
  4042d4:	0040822c 	.word	0x0040822c
  4042d8:	7fefffff 	.word	0x7fefffff
  4042dc:	00408220 	.word	0x00408220
  4042e0:	0040821c 	.word	0x0040821c
  4042e4:	00408240 	.word	0x00408240
  4042e8:	aa25      	add	r2, sp, #148	; 0x94
  4042ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4042ec:	980c      	ldr	r0, [sp, #48]	; 0x30
  4042ee:	f002 ffa1 	bl	407234 <__ssprint_r>
  4042f2:	2800      	cmp	r0, #0
  4042f4:	f47f ac9b 	bne.w	403c2e <_svfprintf_r+0x1ba>
  4042f8:	46c8      	mov	r8, r9
  4042fa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4042fe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404300:	e533      	b.n	403d6a <_svfprintf_r+0x2f6>
  404302:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404304:	2b65      	cmp	r3, #101	; 0x65
  404306:	f340 809a 	ble.w	40443e <_svfprintf_r+0x9ca>
  40430a:	a815      	add	r0, sp, #84	; 0x54
  40430c:	c80d      	ldmia	r0, {r0, r2, r3}
  40430e:	9914      	ldr	r1, [sp, #80]	; 0x50
  404310:	f003 fccc 	bl	407cac <__aeabi_dcmpeq>
  404314:	2800      	cmp	r0, #0
  404316:	f000 8193 	beq.w	404640 <_svfprintf_r+0xbcc>
  40431a:	2101      	movs	r1, #1
  40431c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40431e:	4ab5      	ldr	r2, [pc, #724]	; (4045f4 <_svfprintf_r+0xb80>)
  404320:	440b      	add	r3, r1
  404322:	440c      	add	r4, r1
  404324:	2b07      	cmp	r3, #7
  404326:	9427      	str	r4, [sp, #156]	; 0x9c
  404328:	9326      	str	r3, [sp, #152]	; 0x98
  40432a:	f8c8 1004 	str.w	r1, [r8, #4]
  40432e:	f8c8 2000 	str.w	r2, [r8]
  404332:	f300 83c6 	bgt.w	404ac2 <_svfprintf_r+0x104e>
  404336:	f108 0808 	add.w	r8, r8, #8
  40433a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40433c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40433e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404340:	4293      	cmp	r3, r2
  404342:	db03      	blt.n	40434c <_svfprintf_r+0x8d8>
  404344:	9b07      	ldr	r3, [sp, #28]
  404346:	07dd      	lsls	r5, r3, #31
  404348:	f57f ad86 	bpl.w	403e58 <_svfprintf_r+0x3e4>
  40434c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40434e:	9919      	ldr	r1, [sp, #100]	; 0x64
  404350:	3301      	adds	r3, #1
  404352:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404354:	440c      	add	r4, r1
  404356:	2b07      	cmp	r3, #7
  404358:	f8c8 2000 	str.w	r2, [r8]
  40435c:	f8c8 1004 	str.w	r1, [r8, #4]
  404360:	9427      	str	r4, [sp, #156]	; 0x9c
  404362:	9326      	str	r3, [sp, #152]	; 0x98
  404364:	f300 83c4 	bgt.w	404af0 <_svfprintf_r+0x107c>
  404368:	f108 0808 	add.w	r8, r8, #8
  40436c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40436e:	1e5e      	subs	r6, r3, #1
  404370:	2e00      	cmp	r6, #0
  404372:	f77f ad71 	ble.w	403e58 <_svfprintf_r+0x3e4>
  404376:	2e10      	cmp	r6, #16
  404378:	f340 8575 	ble.w	404e66 <_svfprintf_r+0x13f2>
  40437c:	4622      	mov	r2, r4
  40437e:	2710      	movs	r7, #16
  404380:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404382:	4d9d      	ldr	r5, [pc, #628]	; (4045f8 <_svfprintf_r+0xb84>)
  404384:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404388:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40438a:	e005      	b.n	404398 <_svfprintf_r+0x924>
  40438c:	f108 0808 	add.w	r8, r8, #8
  404390:	3e10      	subs	r6, #16
  404392:	2e10      	cmp	r6, #16
  404394:	f340 8225 	ble.w	4047e2 <_svfprintf_r+0xd6e>
  404398:	3301      	adds	r3, #1
  40439a:	3210      	adds	r2, #16
  40439c:	2b07      	cmp	r3, #7
  40439e:	9227      	str	r2, [sp, #156]	; 0x9c
  4043a0:	9326      	str	r3, [sp, #152]	; 0x98
  4043a2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4043a6:	ddf1      	ble.n	40438c <_svfprintf_r+0x918>
  4043a8:	aa25      	add	r2, sp, #148	; 0x94
  4043aa:	4621      	mov	r1, r4
  4043ac:	4658      	mov	r0, fp
  4043ae:	f002 ff41 	bl	407234 <__ssprint_r>
  4043b2:	2800      	cmp	r0, #0
  4043b4:	f47f ac3b 	bne.w	403c2e <_svfprintf_r+0x1ba>
  4043b8:	46c8      	mov	r8, r9
  4043ba:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4043bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043be:	e7e7      	b.n	404390 <_svfprintf_r+0x91c>
  4043c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4043c2:	9a08      	ldr	r2, [sp, #32]
  4043c4:	1a9f      	subs	r7, r3, r2
  4043c6:	2f00      	cmp	r7, #0
  4043c8:	f77f acf6 	ble.w	403db8 <_svfprintf_r+0x344>
  4043cc:	2f10      	cmp	r7, #16
  4043ce:	f340 84a8 	ble.w	404d22 <_svfprintf_r+0x12ae>
  4043d2:	4d89      	ldr	r5, [pc, #548]	; (4045f8 <_svfprintf_r+0xb84>)
  4043d4:	4642      	mov	r2, r8
  4043d6:	4621      	mov	r1, r4
  4043d8:	46b0      	mov	r8, r6
  4043da:	f04f 0b10 	mov.w	fp, #16
  4043de:	462e      	mov	r6, r5
  4043e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4043e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4043e6:	e004      	b.n	4043f2 <_svfprintf_r+0x97e>
  4043e8:	3f10      	subs	r7, #16
  4043ea:	2f10      	cmp	r7, #16
  4043ec:	f102 0208 	add.w	r2, r2, #8
  4043f0:	dd15      	ble.n	40441e <_svfprintf_r+0x9aa>
  4043f2:	3301      	adds	r3, #1
  4043f4:	3110      	adds	r1, #16
  4043f6:	2b07      	cmp	r3, #7
  4043f8:	9127      	str	r1, [sp, #156]	; 0x9c
  4043fa:	9326      	str	r3, [sp, #152]	; 0x98
  4043fc:	e882 0840 	stmia.w	r2, {r6, fp}
  404400:	ddf2      	ble.n	4043e8 <_svfprintf_r+0x974>
  404402:	aa25      	add	r2, sp, #148	; 0x94
  404404:	4629      	mov	r1, r5
  404406:	4620      	mov	r0, r4
  404408:	f002 ff14 	bl	407234 <__ssprint_r>
  40440c:	2800      	cmp	r0, #0
  40440e:	f47f ac0e 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404412:	3f10      	subs	r7, #16
  404414:	2f10      	cmp	r7, #16
  404416:	464a      	mov	r2, r9
  404418:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40441a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40441c:	dce9      	bgt.n	4043f2 <_svfprintf_r+0x97e>
  40441e:	4635      	mov	r5, r6
  404420:	460c      	mov	r4, r1
  404422:	4646      	mov	r6, r8
  404424:	4690      	mov	r8, r2
  404426:	3301      	adds	r3, #1
  404428:	443c      	add	r4, r7
  40442a:	2b07      	cmp	r3, #7
  40442c:	9427      	str	r4, [sp, #156]	; 0x9c
  40442e:	9326      	str	r3, [sp, #152]	; 0x98
  404430:	e888 00a0 	stmia.w	r8, {r5, r7}
  404434:	f300 829e 	bgt.w	404974 <_svfprintf_r+0xf00>
  404438:	f108 0808 	add.w	r8, r8, #8
  40443c:	e4bc      	b.n	403db8 <_svfprintf_r+0x344>
  40443e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404440:	2b01      	cmp	r3, #1
  404442:	f340 824f 	ble.w	4048e4 <_svfprintf_r+0xe70>
  404446:	2301      	movs	r3, #1
  404448:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40444a:	441c      	add	r4, r3
  40444c:	441f      	add	r7, r3
  40444e:	2f07      	cmp	r7, #7
  404450:	9427      	str	r4, [sp, #156]	; 0x9c
  404452:	f8c8 6000 	str.w	r6, [r8]
  404456:	9726      	str	r7, [sp, #152]	; 0x98
  404458:	f8c8 3004 	str.w	r3, [r8, #4]
  40445c:	f300 825f 	bgt.w	40491e <_svfprintf_r+0xeaa>
  404460:	f108 0808 	add.w	r8, r8, #8
  404464:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404466:	3701      	adds	r7, #1
  404468:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40446a:	4414      	add	r4, r2
  40446c:	2f07      	cmp	r7, #7
  40446e:	9427      	str	r4, [sp, #156]	; 0x9c
  404470:	9726      	str	r7, [sp, #152]	; 0x98
  404472:	f8c8 3000 	str.w	r3, [r8]
  404476:	f8c8 2004 	str.w	r2, [r8, #4]
  40447a:	f300 825c 	bgt.w	404936 <_svfprintf_r+0xec2>
  40447e:	f108 0808 	add.w	r8, r8, #8
  404482:	a815      	add	r0, sp, #84	; 0x54
  404484:	c80d      	ldmia	r0, {r0, r2, r3}
  404486:	9914      	ldr	r1, [sp, #80]	; 0x50
  404488:	f003 fc10 	bl	407cac <__aeabi_dcmpeq>
  40448c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40448e:	2800      	cmp	r0, #0
  404490:	f040 8141 	bne.w	404716 <_svfprintf_r+0xca2>
  404494:	3b01      	subs	r3, #1
  404496:	3701      	adds	r7, #1
  404498:	3601      	adds	r6, #1
  40449a:	441c      	add	r4, r3
  40449c:	2f07      	cmp	r7, #7
  40449e:	f8c8 6000 	str.w	r6, [r8]
  4044a2:	9726      	str	r7, [sp, #152]	; 0x98
  4044a4:	9427      	str	r4, [sp, #156]	; 0x9c
  4044a6:	f8c8 3004 	str.w	r3, [r8, #4]
  4044aa:	f300 8166 	bgt.w	40477a <_svfprintf_r+0xd06>
  4044ae:	f108 0808 	add.w	r8, r8, #8
  4044b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4044b4:	3701      	adds	r7, #1
  4044b6:	4414      	add	r4, r2
  4044b8:	ab21      	add	r3, sp, #132	; 0x84
  4044ba:	2f07      	cmp	r7, #7
  4044bc:	9427      	str	r4, [sp, #156]	; 0x9c
  4044be:	9726      	str	r7, [sp, #152]	; 0x98
  4044c0:	f8c8 2004 	str.w	r2, [r8, #4]
  4044c4:	f8c8 3000 	str.w	r3, [r8]
  4044c8:	f77f acc4 	ble.w	403e54 <_svfprintf_r+0x3e0>
  4044cc:	aa25      	add	r2, sp, #148	; 0x94
  4044ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4044d0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4044d2:	f002 feaf 	bl	407234 <__ssprint_r>
  4044d6:	2800      	cmp	r0, #0
  4044d8:	f47f aba9 	bne.w	403c2e <_svfprintf_r+0x1ba>
  4044dc:	46c8      	mov	r8, r9
  4044de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4044e0:	e4ba      	b.n	403e58 <_svfprintf_r+0x3e4>
  4044e2:	aa25      	add	r2, sp, #148	; 0x94
  4044e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4044e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4044e8:	f002 fea4 	bl	407234 <__ssprint_r>
  4044ec:	2800      	cmp	r0, #0
  4044ee:	f43f acfd 	beq.w	403eec <_svfprintf_r+0x478>
  4044f2:	f7ff bb9c 	b.w	403c2e <_svfprintf_r+0x1ba>
  4044f6:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4044fa:	2b01      	cmp	r3, #1
  4044fc:	f000 817e 	beq.w	4047fc <_svfprintf_r+0xd88>
  404500:	2b02      	cmp	r3, #2
  404502:	d171      	bne.n	4045e8 <_svfprintf_r+0xb74>
  404504:	f8cd b01c 	str.w	fp, [sp, #28]
  404508:	2400      	movs	r4, #0
  40450a:	2500      	movs	r5, #0
  40450c:	e5d4      	b.n	4040b8 <_svfprintf_r+0x644>
  40450e:	aa25      	add	r2, sp, #148	; 0x94
  404510:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404512:	980c      	ldr	r0, [sp, #48]	; 0x30
  404514:	f002 fe8e 	bl	407234 <__ssprint_r>
  404518:	2800      	cmp	r0, #0
  40451a:	f47f ab88 	bne.w	403c2e <_svfprintf_r+0x1ba>
  40451e:	46c8      	mov	r8, r9
  404520:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404522:	e486      	b.n	403e32 <_svfprintf_r+0x3be>
  404524:	aa25      	add	r2, sp, #148	; 0x94
  404526:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404528:	980c      	ldr	r0, [sp, #48]	; 0x30
  40452a:	f002 fe83 	bl	407234 <__ssprint_r>
  40452e:	2800      	cmp	r0, #0
  404530:	f47f ab7d 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404534:	46c8      	mov	r8, r9
  404536:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404538:	e429      	b.n	403d8e <_svfprintf_r+0x31a>
  40453a:	2001      	movs	r0, #1
  40453c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40453e:	4a2d      	ldr	r2, [pc, #180]	; (4045f4 <_svfprintf_r+0xb80>)
  404540:	4403      	add	r3, r0
  404542:	4404      	add	r4, r0
  404544:	2b07      	cmp	r3, #7
  404546:	9427      	str	r4, [sp, #156]	; 0x9c
  404548:	9326      	str	r3, [sp, #152]	; 0x98
  40454a:	f8c8 0004 	str.w	r0, [r8, #4]
  40454e:	f8c8 2000 	str.w	r2, [r8]
  404552:	f340 82d8 	ble.w	404b06 <_svfprintf_r+0x1092>
  404556:	aa25      	add	r2, sp, #148	; 0x94
  404558:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40455a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40455c:	f002 fe6a 	bl	407234 <__ssprint_r>
  404560:	2800      	cmp	r0, #0
  404562:	f47f ab64 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404566:	46c8      	mov	r8, r9
  404568:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40456a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40456c:	b929      	cbnz	r1, 40457a <_svfprintf_r+0xb06>
  40456e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404570:	b91b      	cbnz	r3, 40457a <_svfprintf_r+0xb06>
  404572:	9b07      	ldr	r3, [sp, #28]
  404574:	07d8      	lsls	r0, r3, #31
  404576:	f57f ac6f 	bpl.w	403e58 <_svfprintf_r+0x3e4>
  40457a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40457c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40457e:	4602      	mov	r2, r0
  404580:	3301      	adds	r3, #1
  404582:	4422      	add	r2, r4
  404584:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  404586:	2b07      	cmp	r3, #7
  404588:	9227      	str	r2, [sp, #156]	; 0x9c
  40458a:	f8c8 4000 	str.w	r4, [r8]
  40458e:	f8c8 0004 	str.w	r0, [r8, #4]
  404592:	9326      	str	r3, [sp, #152]	; 0x98
  404594:	f300 8431 	bgt.w	404dfa <_svfprintf_r+0x1386>
  404598:	f108 0808 	add.w	r8, r8, #8
  40459c:	2900      	cmp	r1, #0
  40459e:	f2c0 8409 	blt.w	404db4 <_svfprintf_r+0x1340>
  4045a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4045a4:	3301      	adds	r3, #1
  4045a6:	188c      	adds	r4, r1, r2
  4045a8:	2b07      	cmp	r3, #7
  4045aa:	9427      	str	r4, [sp, #156]	; 0x9c
  4045ac:	9326      	str	r3, [sp, #152]	; 0x98
  4045ae:	f8c8 6000 	str.w	r6, [r8]
  4045b2:	f8c8 1004 	str.w	r1, [r8, #4]
  4045b6:	f77f ac4d 	ble.w	403e54 <_svfprintf_r+0x3e0>
  4045ba:	aa25      	add	r2, sp, #148	; 0x94
  4045bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045be:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045c0:	f002 fe38 	bl	407234 <__ssprint_r>
  4045c4:	2800      	cmp	r0, #0
  4045c6:	f47f ab32 	bne.w	403c2e <_svfprintf_r+0x1ba>
  4045ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4045cc:	46c8      	mov	r8, r9
  4045ce:	e443      	b.n	403e58 <_svfprintf_r+0x3e4>
  4045d0:	aa25      	add	r2, sp, #148	; 0x94
  4045d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045d6:	f002 fe2d 	bl	407234 <__ssprint_r>
  4045da:	2800      	cmp	r0, #0
  4045dc:	f47f ab27 	bne.w	403c2e <_svfprintf_r+0x1ba>
  4045e0:	46c8      	mov	r8, r9
  4045e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4045e4:	f7ff bbe5 	b.w	403db2 <_svfprintf_r+0x33e>
  4045e8:	2400      	movs	r4, #0
  4045ea:	2500      	movs	r5, #0
  4045ec:	f8cd b01c 	str.w	fp, [sp, #28]
  4045f0:	4649      	mov	r1, r9
  4045f2:	e004      	b.n	4045fe <_svfprintf_r+0xb8a>
  4045f4:	0040825c 	.word	0x0040825c
  4045f8:	00408270 	.word	0x00408270
  4045fc:	4631      	mov	r1, r6
  4045fe:	08e2      	lsrs	r2, r4, #3
  404600:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404604:	08e8      	lsrs	r0, r5, #3
  404606:	f004 0307 	and.w	r3, r4, #7
  40460a:	4605      	mov	r5, r0
  40460c:	4614      	mov	r4, r2
  40460e:	3330      	adds	r3, #48	; 0x30
  404610:	ea54 0205 	orrs.w	r2, r4, r5
  404614:	f801 3c01 	strb.w	r3, [r1, #-1]
  404618:	f101 36ff 	add.w	r6, r1, #4294967295
  40461c:	d1ee      	bne.n	4045fc <_svfprintf_r+0xb88>
  40461e:	9a07      	ldr	r2, [sp, #28]
  404620:	07d2      	lsls	r2, r2, #31
  404622:	f57f ad59 	bpl.w	4040d8 <_svfprintf_r+0x664>
  404626:	2b30      	cmp	r3, #48	; 0x30
  404628:	f43f ad56 	beq.w	4040d8 <_svfprintf_r+0x664>
  40462c:	2330      	movs	r3, #48	; 0x30
  40462e:	3902      	subs	r1, #2
  404630:	f806 3c01 	strb.w	r3, [r6, #-1]
  404634:	eba9 0301 	sub.w	r3, r9, r1
  404638:	930e      	str	r3, [sp, #56]	; 0x38
  40463a:	460e      	mov	r6, r1
  40463c:	f7ff bb36 	b.w	403cac <_svfprintf_r+0x238>
  404640:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404642:	2900      	cmp	r1, #0
  404644:	f77f af79 	ble.w	40453a <_svfprintf_r+0xac6>
  404648:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40464a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40464c:	4293      	cmp	r3, r2
  40464e:	bfa8      	it	ge
  404650:	4613      	movge	r3, r2
  404652:	2b00      	cmp	r3, #0
  404654:	461f      	mov	r7, r3
  404656:	dd0b      	ble.n	404670 <_svfprintf_r+0xbfc>
  404658:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40465a:	443c      	add	r4, r7
  40465c:	3301      	adds	r3, #1
  40465e:	2b07      	cmp	r3, #7
  404660:	9427      	str	r4, [sp, #156]	; 0x9c
  404662:	e888 00c0 	stmia.w	r8, {r6, r7}
  404666:	9326      	str	r3, [sp, #152]	; 0x98
  404668:	f300 82fb 	bgt.w	404c62 <_svfprintf_r+0x11ee>
  40466c:	f108 0808 	add.w	r8, r8, #8
  404670:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404672:	2f00      	cmp	r7, #0
  404674:	bfa8      	it	ge
  404676:	1bdb      	subge	r3, r3, r7
  404678:	2b00      	cmp	r3, #0
  40467a:	461f      	mov	r7, r3
  40467c:	f340 80d7 	ble.w	40482e <_svfprintf_r+0xdba>
  404680:	2b10      	cmp	r3, #16
  404682:	f340 8434 	ble.w	404eee <_svfprintf_r+0x147a>
  404686:	4dba      	ldr	r5, [pc, #744]	; (404970 <_svfprintf_r+0xefc>)
  404688:	4642      	mov	r2, r8
  40468a:	4621      	mov	r1, r4
  40468c:	46b0      	mov	r8, r6
  40468e:	f04f 0b10 	mov.w	fp, #16
  404692:	462e      	mov	r6, r5
  404694:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404696:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404698:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40469a:	e004      	b.n	4046a6 <_svfprintf_r+0xc32>
  40469c:	3208      	adds	r2, #8
  40469e:	3f10      	subs	r7, #16
  4046a0:	2f10      	cmp	r7, #16
  4046a2:	f340 80b5 	ble.w	404810 <_svfprintf_r+0xd9c>
  4046a6:	3301      	adds	r3, #1
  4046a8:	3110      	adds	r1, #16
  4046aa:	2b07      	cmp	r3, #7
  4046ac:	9127      	str	r1, [sp, #156]	; 0x9c
  4046ae:	9326      	str	r3, [sp, #152]	; 0x98
  4046b0:	e882 0840 	stmia.w	r2, {r6, fp}
  4046b4:	ddf2      	ble.n	40469c <_svfprintf_r+0xc28>
  4046b6:	aa25      	add	r2, sp, #148	; 0x94
  4046b8:	4629      	mov	r1, r5
  4046ba:	4620      	mov	r0, r4
  4046bc:	f002 fdba 	bl	407234 <__ssprint_r>
  4046c0:	2800      	cmp	r0, #0
  4046c2:	f47f aab4 	bne.w	403c2e <_svfprintf_r+0x1ba>
  4046c6:	464a      	mov	r2, r9
  4046c8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4046ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046cc:	e7e7      	b.n	40469e <_svfprintf_r+0xc2a>
  4046ce:	2d00      	cmp	r5, #0
  4046d0:	bf08      	it	eq
  4046d2:	2c0a      	cmpeq	r4, #10
  4046d4:	f0c0 8090 	bcc.w	4047f8 <_svfprintf_r+0xd84>
  4046d8:	464e      	mov	r6, r9
  4046da:	4620      	mov	r0, r4
  4046dc:	4629      	mov	r1, r5
  4046de:	220a      	movs	r2, #10
  4046e0:	2300      	movs	r3, #0
  4046e2:	f003 fb53 	bl	407d8c <__aeabi_uldivmod>
  4046e6:	3230      	adds	r2, #48	; 0x30
  4046e8:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4046ec:	4620      	mov	r0, r4
  4046ee:	4629      	mov	r1, r5
  4046f0:	2300      	movs	r3, #0
  4046f2:	220a      	movs	r2, #10
  4046f4:	f003 fb4a 	bl	407d8c <__aeabi_uldivmod>
  4046f8:	4604      	mov	r4, r0
  4046fa:	460d      	mov	r5, r1
  4046fc:	ea54 0305 	orrs.w	r3, r4, r5
  404700:	d1eb      	bne.n	4046da <_svfprintf_r+0xc66>
  404702:	eba9 0306 	sub.w	r3, r9, r6
  404706:	930e      	str	r3, [sp, #56]	; 0x38
  404708:	f7ff bad0 	b.w	403cac <_svfprintf_r+0x238>
  40470c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40470e:	464e      	mov	r6, r9
  404710:	930e      	str	r3, [sp, #56]	; 0x38
  404712:	f7ff bacb 	b.w	403cac <_svfprintf_r+0x238>
  404716:	1e5e      	subs	r6, r3, #1
  404718:	2e00      	cmp	r6, #0
  40471a:	f77f aeca 	ble.w	4044b2 <_svfprintf_r+0xa3e>
  40471e:	2e10      	cmp	r6, #16
  404720:	f340 83e3 	ble.w	404eea <_svfprintf_r+0x1476>
  404724:	4622      	mov	r2, r4
  404726:	f04f 0b10 	mov.w	fp, #16
  40472a:	4d91      	ldr	r5, [pc, #580]	; (404970 <_svfprintf_r+0xefc>)
  40472c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40472e:	e004      	b.n	40473a <_svfprintf_r+0xcc6>
  404730:	3e10      	subs	r6, #16
  404732:	2e10      	cmp	r6, #16
  404734:	f108 0808 	add.w	r8, r8, #8
  404738:	dd15      	ble.n	404766 <_svfprintf_r+0xcf2>
  40473a:	3701      	adds	r7, #1
  40473c:	3210      	adds	r2, #16
  40473e:	2f07      	cmp	r7, #7
  404740:	9227      	str	r2, [sp, #156]	; 0x9c
  404742:	9726      	str	r7, [sp, #152]	; 0x98
  404744:	e888 0820 	stmia.w	r8, {r5, fp}
  404748:	ddf2      	ble.n	404730 <_svfprintf_r+0xcbc>
  40474a:	aa25      	add	r2, sp, #148	; 0x94
  40474c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40474e:	4620      	mov	r0, r4
  404750:	f002 fd70 	bl	407234 <__ssprint_r>
  404754:	2800      	cmp	r0, #0
  404756:	f47f aa6a 	bne.w	403c2e <_svfprintf_r+0x1ba>
  40475a:	3e10      	subs	r6, #16
  40475c:	2e10      	cmp	r6, #16
  40475e:	46c8      	mov	r8, r9
  404760:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404762:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404764:	dce9      	bgt.n	40473a <_svfprintf_r+0xcc6>
  404766:	4614      	mov	r4, r2
  404768:	3701      	adds	r7, #1
  40476a:	4434      	add	r4, r6
  40476c:	2f07      	cmp	r7, #7
  40476e:	9427      	str	r4, [sp, #156]	; 0x9c
  404770:	9726      	str	r7, [sp, #152]	; 0x98
  404772:	e888 0060 	stmia.w	r8, {r5, r6}
  404776:	f77f ae9a 	ble.w	4044ae <_svfprintf_r+0xa3a>
  40477a:	aa25      	add	r2, sp, #148	; 0x94
  40477c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40477e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404780:	f002 fd58 	bl	407234 <__ssprint_r>
  404784:	2800      	cmp	r0, #0
  404786:	f47f aa52 	bne.w	403c2e <_svfprintf_r+0x1ba>
  40478a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40478c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40478e:	46c8      	mov	r8, r9
  404790:	e68f      	b.n	4044b2 <_svfprintf_r+0xa3e>
  404792:	3204      	adds	r2, #4
  404794:	681c      	ldr	r4, [r3, #0]
  404796:	2500      	movs	r5, #0
  404798:	2301      	movs	r3, #1
  40479a:	920f      	str	r2, [sp, #60]	; 0x3c
  40479c:	f7ff ba68 	b.w	403c70 <_svfprintf_r+0x1fc>
  4047a0:	681c      	ldr	r4, [r3, #0]
  4047a2:	3304      	adds	r3, #4
  4047a4:	930f      	str	r3, [sp, #60]	; 0x3c
  4047a6:	2500      	movs	r5, #0
  4047a8:	e42a      	b.n	404000 <_svfprintf_r+0x58c>
  4047aa:	681c      	ldr	r4, [r3, #0]
  4047ac:	3304      	adds	r3, #4
  4047ae:	17e5      	asrs	r5, r4, #31
  4047b0:	4622      	mov	r2, r4
  4047b2:	930f      	str	r3, [sp, #60]	; 0x3c
  4047b4:	462b      	mov	r3, r5
  4047b6:	2a00      	cmp	r2, #0
  4047b8:	f173 0300 	sbcs.w	r3, r3, #0
  4047bc:	f6bf ac68 	bge.w	404090 <_svfprintf_r+0x61c>
  4047c0:	272d      	movs	r7, #45	; 0x2d
  4047c2:	4264      	negs	r4, r4
  4047c4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4047c8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4047cc:	2301      	movs	r3, #1
  4047ce:	f7ff ba53 	b.w	403c78 <_svfprintf_r+0x204>
  4047d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4047d4:	2500      	movs	r5, #0
  4047d6:	460a      	mov	r2, r1
  4047d8:	3204      	adds	r2, #4
  4047da:	680c      	ldr	r4, [r1, #0]
  4047dc:	920f      	str	r2, [sp, #60]	; 0x3c
  4047de:	f7ff ba47 	b.w	403c70 <_svfprintf_r+0x1fc>
  4047e2:	4614      	mov	r4, r2
  4047e4:	3301      	adds	r3, #1
  4047e6:	4434      	add	r4, r6
  4047e8:	2b07      	cmp	r3, #7
  4047ea:	9427      	str	r4, [sp, #156]	; 0x9c
  4047ec:	9326      	str	r3, [sp, #152]	; 0x98
  4047ee:	e888 0060 	stmia.w	r8, {r5, r6}
  4047f2:	f77f ab2f 	ble.w	403e54 <_svfprintf_r+0x3e0>
  4047f6:	e6e0      	b.n	4045ba <_svfprintf_r+0xb46>
  4047f8:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4047fc:	2301      	movs	r3, #1
  4047fe:	ae42      	add	r6, sp, #264	; 0x108
  404800:	3430      	adds	r4, #48	; 0x30
  404802:	f8cd b01c 	str.w	fp, [sp, #28]
  404806:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40480a:	930e      	str	r3, [sp, #56]	; 0x38
  40480c:	f7ff ba4e 	b.w	403cac <_svfprintf_r+0x238>
  404810:	4635      	mov	r5, r6
  404812:	460c      	mov	r4, r1
  404814:	4646      	mov	r6, r8
  404816:	4690      	mov	r8, r2
  404818:	3301      	adds	r3, #1
  40481a:	443c      	add	r4, r7
  40481c:	2b07      	cmp	r3, #7
  40481e:	9427      	str	r4, [sp, #156]	; 0x9c
  404820:	9326      	str	r3, [sp, #152]	; 0x98
  404822:	e888 00a0 	stmia.w	r8, {r5, r7}
  404826:	f300 8246 	bgt.w	404cb6 <_svfprintf_r+0x1242>
  40482a:	f108 0808 	add.w	r8, r8, #8
  40482e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404832:	429a      	cmp	r2, r3
  404834:	db45      	blt.n	4048c2 <_svfprintf_r+0xe4e>
  404836:	9b07      	ldr	r3, [sp, #28]
  404838:	07d9      	lsls	r1, r3, #31
  40483a:	d442      	bmi.n	4048c2 <_svfprintf_r+0xe4e>
  40483c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40483e:	9812      	ldr	r0, [sp, #72]	; 0x48
  404840:	1a9a      	subs	r2, r3, r2
  404842:	1a1d      	subs	r5, r3, r0
  404844:	4295      	cmp	r5, r2
  404846:	bfa8      	it	ge
  404848:	4615      	movge	r5, r2
  40484a:	2d00      	cmp	r5, #0
  40484c:	dd0e      	ble.n	40486c <_svfprintf_r+0xdf8>
  40484e:	9926      	ldr	r1, [sp, #152]	; 0x98
  404850:	4406      	add	r6, r0
  404852:	3101      	adds	r1, #1
  404854:	442c      	add	r4, r5
  404856:	2907      	cmp	r1, #7
  404858:	f8c8 6000 	str.w	r6, [r8]
  40485c:	9427      	str	r4, [sp, #156]	; 0x9c
  40485e:	f8c8 5004 	str.w	r5, [r8, #4]
  404862:	9126      	str	r1, [sp, #152]	; 0x98
  404864:	f300 8216 	bgt.w	404c94 <_svfprintf_r+0x1220>
  404868:	f108 0808 	add.w	r8, r8, #8
  40486c:	2d00      	cmp	r5, #0
  40486e:	bfb4      	ite	lt
  404870:	4616      	movlt	r6, r2
  404872:	1b56      	subge	r6, r2, r5
  404874:	2e00      	cmp	r6, #0
  404876:	f77f aaef 	ble.w	403e58 <_svfprintf_r+0x3e4>
  40487a:	2e10      	cmp	r6, #16
  40487c:	f340 82f3 	ble.w	404e66 <_svfprintf_r+0x13f2>
  404880:	4622      	mov	r2, r4
  404882:	2710      	movs	r7, #16
  404884:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404886:	4d3a      	ldr	r5, [pc, #232]	; (404970 <_svfprintf_r+0xefc>)
  404888:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40488c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40488e:	e004      	b.n	40489a <_svfprintf_r+0xe26>
  404890:	f108 0808 	add.w	r8, r8, #8
  404894:	3e10      	subs	r6, #16
  404896:	2e10      	cmp	r6, #16
  404898:	dda3      	ble.n	4047e2 <_svfprintf_r+0xd6e>
  40489a:	3301      	adds	r3, #1
  40489c:	3210      	adds	r2, #16
  40489e:	2b07      	cmp	r3, #7
  4048a0:	9227      	str	r2, [sp, #156]	; 0x9c
  4048a2:	9326      	str	r3, [sp, #152]	; 0x98
  4048a4:	e888 00a0 	stmia.w	r8, {r5, r7}
  4048a8:	ddf2      	ble.n	404890 <_svfprintf_r+0xe1c>
  4048aa:	aa25      	add	r2, sp, #148	; 0x94
  4048ac:	4621      	mov	r1, r4
  4048ae:	4658      	mov	r0, fp
  4048b0:	f002 fcc0 	bl	407234 <__ssprint_r>
  4048b4:	2800      	cmp	r0, #0
  4048b6:	f47f a9ba 	bne.w	403c2e <_svfprintf_r+0x1ba>
  4048ba:	46c8      	mov	r8, r9
  4048bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048c0:	e7e8      	b.n	404894 <_svfprintf_r+0xe20>
  4048c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048c4:	9819      	ldr	r0, [sp, #100]	; 0x64
  4048c6:	3301      	adds	r3, #1
  4048c8:	991a      	ldr	r1, [sp, #104]	; 0x68
  4048ca:	4404      	add	r4, r0
  4048cc:	2b07      	cmp	r3, #7
  4048ce:	9427      	str	r4, [sp, #156]	; 0x9c
  4048d0:	f8c8 1000 	str.w	r1, [r8]
  4048d4:	f8c8 0004 	str.w	r0, [r8, #4]
  4048d8:	9326      	str	r3, [sp, #152]	; 0x98
  4048da:	f300 81cf 	bgt.w	404c7c <_svfprintf_r+0x1208>
  4048de:	f108 0808 	add.w	r8, r8, #8
  4048e2:	e7ab      	b.n	40483c <_svfprintf_r+0xdc8>
  4048e4:	9b07      	ldr	r3, [sp, #28]
  4048e6:	07da      	lsls	r2, r3, #31
  4048e8:	f53f adad 	bmi.w	404446 <_svfprintf_r+0x9d2>
  4048ec:	2301      	movs	r3, #1
  4048ee:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4048f0:	441c      	add	r4, r3
  4048f2:	441f      	add	r7, r3
  4048f4:	2f07      	cmp	r7, #7
  4048f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4048f8:	f8c8 6000 	str.w	r6, [r8]
  4048fc:	9726      	str	r7, [sp, #152]	; 0x98
  4048fe:	f8c8 3004 	str.w	r3, [r8, #4]
  404902:	f77f add4 	ble.w	4044ae <_svfprintf_r+0xa3a>
  404906:	aa25      	add	r2, sp, #148	; 0x94
  404908:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40490a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40490c:	f002 fc92 	bl	407234 <__ssprint_r>
  404910:	2800      	cmp	r0, #0
  404912:	f47f a98c 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404916:	46c8      	mov	r8, r9
  404918:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40491a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40491c:	e5c9      	b.n	4044b2 <_svfprintf_r+0xa3e>
  40491e:	aa25      	add	r2, sp, #148	; 0x94
  404920:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404922:	980c      	ldr	r0, [sp, #48]	; 0x30
  404924:	f002 fc86 	bl	407234 <__ssprint_r>
  404928:	2800      	cmp	r0, #0
  40492a:	f47f a980 	bne.w	403c2e <_svfprintf_r+0x1ba>
  40492e:	46c8      	mov	r8, r9
  404930:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404932:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404934:	e596      	b.n	404464 <_svfprintf_r+0x9f0>
  404936:	aa25      	add	r2, sp, #148	; 0x94
  404938:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40493a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40493c:	f002 fc7a 	bl	407234 <__ssprint_r>
  404940:	2800      	cmp	r0, #0
  404942:	f47f a974 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404946:	46c8      	mov	r8, r9
  404948:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40494a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40494c:	e599      	b.n	404482 <_svfprintf_r+0xa0e>
  40494e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404950:	3407      	adds	r4, #7
  404952:	f024 0407 	bic.w	r4, r4, #7
  404956:	f104 0108 	add.w	r1, r4, #8
  40495a:	e9d4 2300 	ldrd	r2, r3, [r4]
  40495e:	910f      	str	r1, [sp, #60]	; 0x3c
  404960:	4614      	mov	r4, r2
  404962:	461d      	mov	r5, r3
  404964:	f7ff bb8f 	b.w	404086 <_svfprintf_r+0x612>
  404968:	464e      	mov	r6, r9
  40496a:	f7ff b99f 	b.w	403cac <_svfprintf_r+0x238>
  40496e:	bf00      	nop
  404970:	00408270 	.word	0x00408270
  404974:	aa25      	add	r2, sp, #148	; 0x94
  404976:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404978:	980c      	ldr	r0, [sp, #48]	; 0x30
  40497a:	f002 fc5b 	bl	407234 <__ssprint_r>
  40497e:	2800      	cmp	r0, #0
  404980:	f47f a955 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404984:	46c8      	mov	r8, r9
  404986:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404988:	f7ff ba16 	b.w	403db8 <_svfprintf_r+0x344>
  40498c:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40498e:	4622      	mov	r2, r4
  404990:	4620      	mov	r0, r4
  404992:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404994:	4623      	mov	r3, r4
  404996:	4621      	mov	r1, r4
  404998:	f003 f9ba 	bl	407d10 <__aeabi_dcmpun>
  40499c:	2800      	cmp	r0, #0
  40499e:	f040 8273 	bne.w	404e88 <_svfprintf_r+0x1414>
  4049a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4049a4:	3301      	adds	r3, #1
  4049a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4049a8:	f023 0320 	bic.w	r3, r3, #32
  4049ac:	930e      	str	r3, [sp, #56]	; 0x38
  4049ae:	f000 819c 	beq.w	404cea <_svfprintf_r+0x1276>
  4049b2:	2b47      	cmp	r3, #71	; 0x47
  4049b4:	f000 80d6 	beq.w	404b64 <_svfprintf_r+0x10f0>
  4049b8:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4049bc:	9307      	str	r3, [sp, #28]
  4049be:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4049c0:	1e1f      	subs	r7, r3, #0
  4049c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4049c4:	9308      	str	r3, [sp, #32]
  4049c6:	bfb7      	itett	lt
  4049c8:	463b      	movlt	r3, r7
  4049ca:	2300      	movge	r3, #0
  4049cc:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4049d0:	232d      	movlt	r3, #45	; 0x2d
  4049d2:	9310      	str	r3, [sp, #64]	; 0x40
  4049d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4049d6:	2b66      	cmp	r3, #102	; 0x66
  4049d8:	f000 8190 	beq.w	404cfc <_svfprintf_r+0x1288>
  4049dc:	2b46      	cmp	r3, #70	; 0x46
  4049de:	f000 80a4 	beq.w	404b2a <_svfprintf_r+0x10b6>
  4049e2:	2002      	movs	r0, #2
  4049e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4049e6:	a923      	add	r1, sp, #140	; 0x8c
  4049e8:	2b45      	cmp	r3, #69	; 0x45
  4049ea:	bf0a      	itet	eq
  4049ec:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4049ee:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4049f0:	1c5d      	addeq	r5, r3, #1
  4049f2:	e88d 0021 	stmia.w	sp, {r0, r5}
  4049f6:	9104      	str	r1, [sp, #16]
  4049f8:	a820      	add	r0, sp, #128	; 0x80
  4049fa:	a91f      	add	r1, sp, #124	; 0x7c
  4049fc:	463b      	mov	r3, r7
  4049fe:	9003      	str	r0, [sp, #12]
  404a00:	9a08      	ldr	r2, [sp, #32]
  404a02:	9102      	str	r1, [sp, #8]
  404a04:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a06:	f000 fb5b 	bl	4050c0 <_dtoa_r>
  404a0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a0c:	4606      	mov	r6, r0
  404a0e:	2b67      	cmp	r3, #103	; 0x67
  404a10:	f040 81ba 	bne.w	404d88 <_svfprintf_r+0x1314>
  404a14:	f01b 0f01 	tst.w	fp, #1
  404a18:	f000 8223 	beq.w	404e62 <_svfprintf_r+0x13ee>
  404a1c:	1974      	adds	r4, r6, r5
  404a1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404a20:	9808      	ldr	r0, [sp, #32]
  404a22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404a24:	4639      	mov	r1, r7
  404a26:	f003 f941 	bl	407cac <__aeabi_dcmpeq>
  404a2a:	2800      	cmp	r0, #0
  404a2c:	f040 8124 	bne.w	404c78 <_svfprintf_r+0x1204>
  404a30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404a32:	42a3      	cmp	r3, r4
  404a34:	d206      	bcs.n	404a44 <_svfprintf_r+0xfd0>
  404a36:	2130      	movs	r1, #48	; 0x30
  404a38:	1c5a      	adds	r2, r3, #1
  404a3a:	9223      	str	r2, [sp, #140]	; 0x8c
  404a3c:	7019      	strb	r1, [r3, #0]
  404a3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404a40:	429c      	cmp	r4, r3
  404a42:	d8f9      	bhi.n	404a38 <_svfprintf_r+0xfc4>
  404a44:	1b9b      	subs	r3, r3, r6
  404a46:	9313      	str	r3, [sp, #76]	; 0x4c
  404a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404a4a:	2b47      	cmp	r3, #71	; 0x47
  404a4c:	f000 80a2 	beq.w	404b94 <_svfprintf_r+0x1120>
  404a50:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a52:	2b65      	cmp	r3, #101	; 0x65
  404a54:	f340 81a7 	ble.w	404da6 <_svfprintf_r+0x1332>
  404a58:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a5a:	2b66      	cmp	r3, #102	; 0x66
  404a5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404a5e:	9312      	str	r3, [sp, #72]	; 0x48
  404a60:	f000 8171 	beq.w	404d46 <_svfprintf_r+0x12d2>
  404a64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a66:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404a68:	4619      	mov	r1, r3
  404a6a:	4291      	cmp	r1, r2
  404a6c:	f300 815d 	bgt.w	404d2a <_svfprintf_r+0x12b6>
  404a70:	f01b 0f01 	tst.w	fp, #1
  404a74:	f040 81f0 	bne.w	404e58 <_svfprintf_r+0x13e4>
  404a78:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404a7c:	9308      	str	r3, [sp, #32]
  404a7e:	2367      	movs	r3, #103	; 0x67
  404a80:	920e      	str	r2, [sp, #56]	; 0x38
  404a82:	9311      	str	r3, [sp, #68]	; 0x44
  404a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404a86:	2b00      	cmp	r3, #0
  404a88:	d17d      	bne.n	404b86 <_svfprintf_r+0x1112>
  404a8a:	930a      	str	r3, [sp, #40]	; 0x28
  404a8c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404a90:	f7ff b914 	b.w	403cbc <_svfprintf_r+0x248>
  404a94:	f024 0407 	bic.w	r4, r4, #7
  404a98:	6823      	ldr	r3, [r4, #0]
  404a9a:	9315      	str	r3, [sp, #84]	; 0x54
  404a9c:	6863      	ldr	r3, [r4, #4]
  404a9e:	9314      	str	r3, [sp, #80]	; 0x50
  404aa0:	f104 0308 	add.w	r3, r4, #8
  404aa4:	930f      	str	r3, [sp, #60]	; 0x3c
  404aa6:	f7ff bb2f 	b.w	404108 <_svfprintf_r+0x694>
  404aaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404aac:	6813      	ldr	r3, [r2, #0]
  404aae:	3204      	adds	r2, #4
  404ab0:	920f      	str	r2, [sp, #60]	; 0x3c
  404ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404ab4:	601a      	str	r2, [r3, #0]
  404ab6:	f7ff b804 	b.w	403ac2 <_svfprintf_r+0x4e>
  404aba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404abc:	4daf      	ldr	r5, [pc, #700]	; (404d7c <_svfprintf_r+0x1308>)
  404abe:	f7ff b9ad 	b.w	403e1c <_svfprintf_r+0x3a8>
  404ac2:	aa25      	add	r2, sp, #148	; 0x94
  404ac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ac6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ac8:	f002 fbb4 	bl	407234 <__ssprint_r>
  404acc:	2800      	cmp	r0, #0
  404ace:	f47f a8ae 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404ad2:	46c8      	mov	r8, r9
  404ad4:	e431      	b.n	40433a <_svfprintf_r+0x8c6>
  404ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ad8:	4613      	mov	r3, r2
  404ada:	3304      	adds	r3, #4
  404adc:	930f      	str	r3, [sp, #60]	; 0x3c
  404ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ae0:	6811      	ldr	r1, [r2, #0]
  404ae2:	17dd      	asrs	r5, r3, #31
  404ae4:	461a      	mov	r2, r3
  404ae6:	462b      	mov	r3, r5
  404ae8:	e9c1 2300 	strd	r2, r3, [r1]
  404aec:	f7fe bfe9 	b.w	403ac2 <_svfprintf_r+0x4e>
  404af0:	aa25      	add	r2, sp, #148	; 0x94
  404af2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404af4:	980c      	ldr	r0, [sp, #48]	; 0x30
  404af6:	f002 fb9d 	bl	407234 <__ssprint_r>
  404afa:	2800      	cmp	r0, #0
  404afc:	f47f a897 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404b00:	46c8      	mov	r8, r9
  404b02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b04:	e432      	b.n	40436c <_svfprintf_r+0x8f8>
  404b06:	f108 0808 	add.w	r8, r8, #8
  404b0a:	e52f      	b.n	40456c <_svfprintf_r+0xaf8>
  404b0c:	2140      	movs	r1, #64	; 0x40
  404b0e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b10:	f001 fb5e 	bl	4061d0 <_malloc_r>
  404b14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404b16:	6010      	str	r0, [r2, #0]
  404b18:	6110      	str	r0, [r2, #16]
  404b1a:	2800      	cmp	r0, #0
  404b1c:	f000 8214 	beq.w	404f48 <_svfprintf_r+0x14d4>
  404b20:	2340      	movs	r3, #64	; 0x40
  404b22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404b24:	6153      	str	r3, [r2, #20]
  404b26:	f7fe bfbc 	b.w	403aa2 <_svfprintf_r+0x2e>
  404b2a:	2003      	movs	r0, #3
  404b2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404b2e:	a923      	add	r1, sp, #140	; 0x8c
  404b30:	e88d 0011 	stmia.w	sp, {r0, r4}
  404b34:	9104      	str	r1, [sp, #16]
  404b36:	a820      	add	r0, sp, #128	; 0x80
  404b38:	a91f      	add	r1, sp, #124	; 0x7c
  404b3a:	9003      	str	r0, [sp, #12]
  404b3c:	9a08      	ldr	r2, [sp, #32]
  404b3e:	463b      	mov	r3, r7
  404b40:	9102      	str	r1, [sp, #8]
  404b42:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b44:	f000 fabc 	bl	4050c0 <_dtoa_r>
  404b48:	4625      	mov	r5, r4
  404b4a:	4606      	mov	r6, r0
  404b4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b4e:	1974      	adds	r4, r6, r5
  404b50:	2b46      	cmp	r3, #70	; 0x46
  404b52:	f47f af64 	bne.w	404a1e <_svfprintf_r+0xfaa>
  404b56:	7833      	ldrb	r3, [r6, #0]
  404b58:	2b30      	cmp	r3, #48	; 0x30
  404b5a:	f000 8187 	beq.w	404e6c <_svfprintf_r+0x13f8>
  404b5e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404b60:	442c      	add	r4, r5
  404b62:	e75c      	b.n	404a1e <_svfprintf_r+0xfaa>
  404b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b66:	2b00      	cmp	r3, #0
  404b68:	bf08      	it	eq
  404b6a:	2301      	moveq	r3, #1
  404b6c:	930a      	str	r3, [sp, #40]	; 0x28
  404b6e:	e723      	b.n	4049b8 <_svfprintf_r+0xf44>
  404b70:	4630      	mov	r0, r6
  404b72:	950a      	str	r5, [sp, #40]	; 0x28
  404b74:	f7fe fea6 	bl	4038c4 <strlen>
  404b78:	940f      	str	r4, [sp, #60]	; 0x3c
  404b7a:	900e      	str	r0, [sp, #56]	; 0x38
  404b7c:	f8cd b01c 	str.w	fp, [sp, #28]
  404b80:	4603      	mov	r3, r0
  404b82:	f7ff b9e7 	b.w	403f54 <_svfprintf_r+0x4e0>
  404b86:	272d      	movs	r7, #45	; 0x2d
  404b88:	2300      	movs	r3, #0
  404b8a:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404b8e:	930a      	str	r3, [sp, #40]	; 0x28
  404b90:	f7ff b895 	b.w	403cbe <_svfprintf_r+0x24a>
  404b94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404b96:	461a      	mov	r2, r3
  404b98:	9312      	str	r3, [sp, #72]	; 0x48
  404b9a:	3303      	adds	r3, #3
  404b9c:	db04      	blt.n	404ba8 <_svfprintf_r+0x1134>
  404b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ba0:	4619      	mov	r1, r3
  404ba2:	4291      	cmp	r1, r2
  404ba4:	f6bf af5e 	bge.w	404a64 <_svfprintf_r+0xff0>
  404ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404baa:	3b02      	subs	r3, #2
  404bac:	9311      	str	r3, [sp, #68]	; 0x44
  404bae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404bb0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404bb4:	3b01      	subs	r3, #1
  404bb6:	2b00      	cmp	r3, #0
  404bb8:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
  404bbc:	bfb4      	ite	lt
  404bbe:	222d      	movlt	r2, #45	; 0x2d
  404bc0:	222b      	movge	r2, #43	; 0x2b
  404bc2:	931f      	str	r3, [sp, #124]	; 0x7c
  404bc4:	bfb8      	it	lt
  404bc6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404bc8:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  404bcc:	bfb8      	it	lt
  404bce:	f1c3 0301 	rsblt	r3, r3, #1
  404bd2:	2b09      	cmp	r3, #9
  404bd4:	f340 811f 	ble.w	404e16 <_svfprintf_r+0x13a2>
  404bd8:	f10d 0093 	add.w	r0, sp, #147	; 0x93
  404bdc:	4601      	mov	r1, r0
  404bde:	4c68      	ldr	r4, [pc, #416]	; (404d80 <_svfprintf_r+0x130c>)
  404be0:	e000      	b.n	404be4 <_svfprintf_r+0x1170>
  404be2:	4611      	mov	r1, r2
  404be4:	fb84 5203 	smull	r5, r2, r4, r3
  404be8:	17dd      	asrs	r5, r3, #31
  404bea:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
  404bee:	eb05 0285 	add.w	r2, r5, r5, lsl #2
  404bf2:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404bf6:	3230      	adds	r2, #48	; 0x30
  404bf8:	2d09      	cmp	r5, #9
  404bfa:	f801 2c01 	strb.w	r2, [r1, #-1]
  404bfe:	462b      	mov	r3, r5
  404c00:	f101 32ff 	add.w	r2, r1, #4294967295
  404c04:	dced      	bgt.n	404be2 <_svfprintf_r+0x116e>
  404c06:	3330      	adds	r3, #48	; 0x30
  404c08:	3902      	subs	r1, #2
  404c0a:	b2dc      	uxtb	r4, r3
  404c0c:	4288      	cmp	r0, r1
  404c0e:	f802 4c01 	strb.w	r4, [r2, #-1]
  404c12:	f240 8192 	bls.w	404f3a <_svfprintf_r+0x14c6>
  404c16:	f10d 0186 	add.w	r1, sp, #134	; 0x86
  404c1a:	4613      	mov	r3, r2
  404c1c:	e001      	b.n	404c22 <_svfprintf_r+0x11ae>
  404c1e:	f813 4b01 	ldrb.w	r4, [r3], #1
  404c22:	4283      	cmp	r3, r0
  404c24:	f801 4b01 	strb.w	r4, [r1], #1
  404c28:	d1f9      	bne.n	404c1e <_svfprintf_r+0x11aa>
  404c2a:	3301      	adds	r3, #1
  404c2c:	1a9b      	subs	r3, r3, r2
  404c2e:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404c32:	4413      	add	r3, r2
  404c34:	aa21      	add	r2, sp, #132	; 0x84
  404c36:	1a9b      	subs	r3, r3, r2
  404c38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404c3a:	931b      	str	r3, [sp, #108]	; 0x6c
  404c3c:	2a01      	cmp	r2, #1
  404c3e:	4413      	add	r3, r2
  404c40:	930e      	str	r3, [sp, #56]	; 0x38
  404c42:	f340 8148 	ble.w	404ed6 <_svfprintf_r+0x1462>
  404c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404c48:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404c4a:	4413      	add	r3, r2
  404c4c:	930e      	str	r3, [sp, #56]	; 0x38
  404c4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404c52:	9308      	str	r3, [sp, #32]
  404c54:	2300      	movs	r3, #0
  404c56:	9312      	str	r3, [sp, #72]	; 0x48
  404c58:	e714      	b.n	404a84 <_svfprintf_r+0x1010>
  404c5a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404c5e:	f7ff b876 	b.w	403d4e <_svfprintf_r+0x2da>
  404c62:	aa25      	add	r2, sp, #148	; 0x94
  404c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c66:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c68:	f002 fae4 	bl	407234 <__ssprint_r>
  404c6c:	2800      	cmp	r0, #0
  404c6e:	f47e afde 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404c72:	46c8      	mov	r8, r9
  404c74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c76:	e4fb      	b.n	404670 <_svfprintf_r+0xbfc>
  404c78:	4623      	mov	r3, r4
  404c7a:	e6e3      	b.n	404a44 <_svfprintf_r+0xfd0>
  404c7c:	aa25      	add	r2, sp, #148	; 0x94
  404c7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c80:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c82:	f002 fad7 	bl	407234 <__ssprint_r>
  404c86:	2800      	cmp	r0, #0
  404c88:	f47e afd1 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404c8c:	46c8      	mov	r8, r9
  404c8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404c90:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c92:	e5d3      	b.n	40483c <_svfprintf_r+0xdc8>
  404c94:	aa25      	add	r2, sp, #148	; 0x94
  404c96:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c98:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c9a:	f002 facb 	bl	407234 <__ssprint_r>
  404c9e:	2800      	cmp	r0, #0
  404ca0:	f47e afc5 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404ca4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404ca6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404ca8:	46c8      	mov	r8, r9
  404caa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404cac:	1a9a      	subs	r2, r3, r2
  404cae:	e5dd      	b.n	40486c <_svfprintf_r+0xdf8>
  404cb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404cb2:	f7ff b8fe 	b.w	403eb2 <_svfprintf_r+0x43e>
  404cb6:	aa25      	add	r2, sp, #148	; 0x94
  404cb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cba:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cbc:	f002 faba 	bl	407234 <__ssprint_r>
  404cc0:	2800      	cmp	r0, #0
  404cc2:	f47e afb4 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404cc6:	46c8      	mov	r8, r9
  404cc8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404cca:	e5b0      	b.n	40482e <_svfprintf_r+0xdba>
  404ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404cce:	4637      	mov	r7, r6
  404cd0:	2b06      	cmp	r3, #6
  404cd2:	bf28      	it	cs
  404cd4:	2306      	movcs	r3, #6
  404cd6:	960a      	str	r6, [sp, #40]	; 0x28
  404cd8:	9612      	str	r6, [sp, #72]	; 0x48
  404cda:	9308      	str	r3, [sp, #32]
  404cdc:	940f      	str	r4, [sp, #60]	; 0x3c
  404cde:	f8cd b01c 	str.w	fp, [sp, #28]
  404ce2:	930e      	str	r3, [sp, #56]	; 0x38
  404ce4:	4e27      	ldr	r6, [pc, #156]	; (404d84 <_svfprintf_r+0x1310>)
  404ce6:	f7fe bfe9 	b.w	403cbc <_svfprintf_r+0x248>
  404cea:	2306      	movs	r3, #6
  404cec:	930a      	str	r3, [sp, #40]	; 0x28
  404cee:	e663      	b.n	4049b8 <_svfprintf_r+0xf44>
  404cf0:	232d      	movs	r3, #45	; 0x2d
  404cf2:	461f      	mov	r7, r3
  404cf4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404cf8:	f7ff ba28 	b.w	40414c <_svfprintf_r+0x6d8>
  404cfc:	2003      	movs	r0, #3
  404cfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404d00:	a923      	add	r1, sp, #140	; 0x8c
  404d02:	e88d 0011 	stmia.w	sp, {r0, r4}
  404d06:	9104      	str	r1, [sp, #16]
  404d08:	a820      	add	r0, sp, #128	; 0x80
  404d0a:	a91f      	add	r1, sp, #124	; 0x7c
  404d0c:	9003      	str	r0, [sp, #12]
  404d0e:	9a08      	ldr	r2, [sp, #32]
  404d10:	463b      	mov	r3, r7
  404d12:	9102      	str	r1, [sp, #8]
  404d14:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d16:	f000 f9d3 	bl	4050c0 <_dtoa_r>
  404d1a:	4625      	mov	r5, r4
  404d1c:	4606      	mov	r6, r0
  404d1e:	1904      	adds	r4, r0, r4
  404d20:	e719      	b.n	404b56 <_svfprintf_r+0x10e2>
  404d22:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d24:	4d15      	ldr	r5, [pc, #84]	; (404d7c <_svfprintf_r+0x1308>)
  404d26:	f7ff bb7e 	b.w	404426 <_svfprintf_r+0x9b2>
  404d2a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404d2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404d2e:	4413      	add	r3, r2
  404d30:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404d32:	930e      	str	r3, [sp, #56]	; 0x38
  404d34:	2a00      	cmp	r2, #0
  404d36:	f340 80c7 	ble.w	404ec8 <_svfprintf_r+0x1454>
  404d3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404d3e:	9308      	str	r3, [sp, #32]
  404d40:	2367      	movs	r3, #103	; 0x67
  404d42:	9311      	str	r3, [sp, #68]	; 0x44
  404d44:	e69e      	b.n	404a84 <_svfprintf_r+0x1010>
  404d46:	2b00      	cmp	r3, #0
  404d48:	f340 80e1 	ble.w	404f0e <_svfprintf_r+0x149a>
  404d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404d4e:	2a00      	cmp	r2, #0
  404d50:	f040 80b0 	bne.w	404eb4 <_svfprintf_r+0x1440>
  404d54:	f01b 0f01 	tst.w	fp, #1
  404d58:	f040 80ac 	bne.w	404eb4 <_svfprintf_r+0x1440>
  404d5c:	9308      	str	r3, [sp, #32]
  404d5e:	930e      	str	r3, [sp, #56]	; 0x38
  404d60:	e690      	b.n	404a84 <_svfprintf_r+0x1010>
  404d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d64:	940f      	str	r4, [sp, #60]	; 0x3c
  404d66:	9308      	str	r3, [sp, #32]
  404d68:	930e      	str	r3, [sp, #56]	; 0x38
  404d6a:	900a      	str	r0, [sp, #40]	; 0x28
  404d6c:	f8cd b01c 	str.w	fp, [sp, #28]
  404d70:	9012      	str	r0, [sp, #72]	; 0x48
  404d72:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404d76:	f7fe bfa1 	b.w	403cbc <_svfprintf_r+0x248>
  404d7a:	bf00      	nop
  404d7c:	00408270 	.word	0x00408270
  404d80:	66666667 	.word	0x66666667
  404d84:	00408254 	.word	0x00408254
  404d88:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d8a:	2b47      	cmp	r3, #71	; 0x47
  404d8c:	f47f ae46 	bne.w	404a1c <_svfprintf_r+0xfa8>
  404d90:	f01b 0f01 	tst.w	fp, #1
  404d94:	f47f aeda 	bne.w	404b4c <_svfprintf_r+0x10d8>
  404d98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404d9a:	1b9b      	subs	r3, r3, r6
  404d9c:	9313      	str	r3, [sp, #76]	; 0x4c
  404d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404da0:	2b47      	cmp	r3, #71	; 0x47
  404da2:	f43f aef7 	beq.w	404b94 <_svfprintf_r+0x1120>
  404da6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404da8:	9312      	str	r3, [sp, #72]	; 0x48
  404daa:	e700      	b.n	404bae <_svfprintf_r+0x113a>
  404dac:	2000      	movs	r0, #0
  404dae:	900a      	str	r0, [sp, #40]	; 0x28
  404db0:	f7fe bebc 	b.w	403b2c <_svfprintf_r+0xb8>
  404db4:	424f      	negs	r7, r1
  404db6:	3110      	adds	r1, #16
  404db8:	da35      	bge.n	404e26 <_svfprintf_r+0x13b2>
  404dba:	2410      	movs	r4, #16
  404dbc:	4d6a      	ldr	r5, [pc, #424]	; (404f68 <_svfprintf_r+0x14f4>)
  404dbe:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404dc2:	e004      	b.n	404dce <_svfprintf_r+0x135a>
  404dc4:	f108 0808 	add.w	r8, r8, #8
  404dc8:	3f10      	subs	r7, #16
  404dca:	2f10      	cmp	r7, #16
  404dcc:	dd2c      	ble.n	404e28 <_svfprintf_r+0x13b4>
  404dce:	3301      	adds	r3, #1
  404dd0:	3210      	adds	r2, #16
  404dd2:	2b07      	cmp	r3, #7
  404dd4:	9227      	str	r2, [sp, #156]	; 0x9c
  404dd6:	9326      	str	r3, [sp, #152]	; 0x98
  404dd8:	f8c8 5000 	str.w	r5, [r8]
  404ddc:	f8c8 4004 	str.w	r4, [r8, #4]
  404de0:	ddf0      	ble.n	404dc4 <_svfprintf_r+0x1350>
  404de2:	aa25      	add	r2, sp, #148	; 0x94
  404de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404de6:	4658      	mov	r0, fp
  404de8:	f002 fa24 	bl	407234 <__ssprint_r>
  404dec:	2800      	cmp	r0, #0
  404dee:	f47e af1e 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404df2:	46c8      	mov	r8, r9
  404df4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404df6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404df8:	e7e6      	b.n	404dc8 <_svfprintf_r+0x1354>
  404dfa:	aa25      	add	r2, sp, #148	; 0x94
  404dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404dfe:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e00:	f002 fa18 	bl	407234 <__ssprint_r>
  404e04:	2800      	cmp	r0, #0
  404e06:	f47e af12 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404e0a:	46c8      	mov	r8, r9
  404e0c:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404e0e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404e10:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e12:	f7ff bbc3 	b.w	40459c <_svfprintf_r+0xb28>
  404e16:	2230      	movs	r2, #48	; 0x30
  404e18:	4413      	add	r3, r2
  404e1a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  404e1e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  404e22:	ab22      	add	r3, sp, #136	; 0x88
  404e24:	e706      	b.n	404c34 <_svfprintf_r+0x11c0>
  404e26:	4d50      	ldr	r5, [pc, #320]	; (404f68 <_svfprintf_r+0x14f4>)
  404e28:	3301      	adds	r3, #1
  404e2a:	443a      	add	r2, r7
  404e2c:	2b07      	cmp	r3, #7
  404e2e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404e32:	9227      	str	r2, [sp, #156]	; 0x9c
  404e34:	9326      	str	r3, [sp, #152]	; 0x98
  404e36:	f108 0808 	add.w	r8, r8, #8
  404e3a:	f77f abb2 	ble.w	4045a2 <_svfprintf_r+0xb2e>
  404e3e:	aa25      	add	r2, sp, #148	; 0x94
  404e40:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e42:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e44:	f002 f9f6 	bl	407234 <__ssprint_r>
  404e48:	2800      	cmp	r0, #0
  404e4a:	f47e aef0 	bne.w	403c2e <_svfprintf_r+0x1ba>
  404e4e:	46c8      	mov	r8, r9
  404e50:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404e52:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e54:	f7ff bba5 	b.w	4045a2 <_svfprintf_r+0xb2e>
  404e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404e5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404e5c:	4413      	add	r3, r2
  404e5e:	930e      	str	r3, [sp, #56]	; 0x38
  404e60:	e76b      	b.n	404d3a <_svfprintf_r+0x12c6>
  404e62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404e64:	e5ee      	b.n	404a44 <_svfprintf_r+0xfd0>
  404e66:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e68:	4d3f      	ldr	r5, [pc, #252]	; (404f68 <_svfprintf_r+0x14f4>)
  404e6a:	e4bb      	b.n	4047e4 <_svfprintf_r+0xd70>
  404e6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404e6e:	9808      	ldr	r0, [sp, #32]
  404e70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404e72:	4639      	mov	r1, r7
  404e74:	f002 ff1a 	bl	407cac <__aeabi_dcmpeq>
  404e78:	2800      	cmp	r0, #0
  404e7a:	f47f ae70 	bne.w	404b5e <_svfprintf_r+0x10ea>
  404e7e:	f1c5 0501 	rsb	r5, r5, #1
  404e82:	951f      	str	r5, [sp, #124]	; 0x7c
  404e84:	442c      	add	r4, r5
  404e86:	e5ca      	b.n	404a1e <_svfprintf_r+0xfaa>
  404e88:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404e8a:	4e38      	ldr	r6, [pc, #224]	; (404f6c <_svfprintf_r+0x14f8>)
  404e8c:	2b00      	cmp	r3, #0
  404e8e:	bfbe      	ittt	lt
  404e90:	232d      	movlt	r3, #45	; 0x2d
  404e92:	461f      	movlt	r7, r3
  404e94:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
  404e98:	f04f 0303 	mov.w	r3, #3
  404e9c:	461a      	mov	r2, r3
  404e9e:	9308      	str	r3, [sp, #32]
  404ea0:	f04f 0300 	mov.w	r3, #0
  404ea4:	bfa8      	it	ge
  404ea6:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  404eaa:	4619      	mov	r1, r3
  404eac:	930a      	str	r3, [sp, #40]	; 0x28
  404eae:	4b30      	ldr	r3, [pc, #192]	; (404f70 <_svfprintf_r+0x14fc>)
  404eb0:	f7ff b954 	b.w	40415c <_svfprintf_r+0x6e8>
  404eb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404eb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404eb8:	4413      	add	r3, r2
  404eba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404ebc:	441a      	add	r2, r3
  404ebe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404ec2:	920e      	str	r2, [sp, #56]	; 0x38
  404ec4:	9308      	str	r3, [sp, #32]
  404ec6:	e5dd      	b.n	404a84 <_svfprintf_r+0x1010>
  404ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404eca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404ecc:	f1c3 0301 	rsb	r3, r3, #1
  404ed0:	441a      	add	r2, r3
  404ed2:	4613      	mov	r3, r2
  404ed4:	e7c3      	b.n	404e5e <_svfprintf_r+0x13ea>
  404ed6:	f01b 0301 	ands.w	r3, fp, #1
  404eda:	9312      	str	r3, [sp, #72]	; 0x48
  404edc:	f47f aeb3 	bne.w	404c46 <_svfprintf_r+0x11d2>
  404ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404ee2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404ee6:	9308      	str	r3, [sp, #32]
  404ee8:	e5cc      	b.n	404a84 <_svfprintf_r+0x1010>
  404eea:	4d1f      	ldr	r5, [pc, #124]	; (404f68 <_svfprintf_r+0x14f4>)
  404eec:	e43c      	b.n	404768 <_svfprintf_r+0xcf4>
  404eee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ef0:	4d1d      	ldr	r5, [pc, #116]	; (404f68 <_svfprintf_r+0x14f4>)
  404ef2:	e491      	b.n	404818 <_svfprintf_r+0xda4>
  404ef4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404ef6:	f89a 3001 	ldrb.w	r3, [sl, #1]
  404efa:	6828      	ldr	r0, [r5, #0]
  404efc:	46a2      	mov	sl, r4
  404efe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  404f02:	900a      	str	r0, [sp, #40]	; 0x28
  404f04:	4628      	mov	r0, r5
  404f06:	3004      	adds	r0, #4
  404f08:	900f      	str	r0, [sp, #60]	; 0x3c
  404f0a:	f7fe be0d 	b.w	403b28 <_svfprintf_r+0xb4>
  404f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f10:	b913      	cbnz	r3, 404f18 <_svfprintf_r+0x14a4>
  404f12:	f01b 0f01 	tst.w	fp, #1
  404f16:	d002      	beq.n	404f1e <_svfprintf_r+0x14aa>
  404f18:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404f1a:	3301      	adds	r3, #1
  404f1c:	e7cd      	b.n	404eba <_svfprintf_r+0x1446>
  404f1e:	2301      	movs	r3, #1
  404f20:	e71c      	b.n	404d5c <_svfprintf_r+0x12e8>
  404f22:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404f26:	f7ff b980 	b.w	40422a <_svfprintf_r+0x7b6>
  404f2a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404f2e:	f7ff b93a 	b.w	4041a6 <_svfprintf_r+0x732>
  404f32:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404f36:	f7ff b84f 	b.w	403fd8 <_svfprintf_r+0x564>
  404f3a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  404f3e:	e679      	b.n	404c34 <_svfprintf_r+0x11c0>
  404f40:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404f44:	f7ff b9b2 	b.w	4042ac <_svfprintf_r+0x838>
  404f48:	f04f 32ff 	mov.w	r2, #4294967295
  404f4c:	230c      	movs	r3, #12
  404f4e:	9209      	str	r2, [sp, #36]	; 0x24
  404f50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404f52:	6013      	str	r3, [r2, #0]
  404f54:	f7fe be74 	b.w	403c40 <_svfprintf_r+0x1cc>
  404f58:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404f5c:	f7ff b8c4 	b.w	4040e8 <_svfprintf_r+0x674>
  404f60:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404f64:	f7ff b878 	b.w	404058 <_svfprintf_r+0x5e4>
  404f68:	00408270 	.word	0x00408270
  404f6c:	00408228 	.word	0x00408228
  404f70:	00408224 	.word	0x00408224

00404f74 <register_fini>:
  404f74:	4b02      	ldr	r3, [pc, #8]	; (404f80 <register_fini+0xc>)
  404f76:	b113      	cbz	r3, 404f7e <register_fini+0xa>
  404f78:	4802      	ldr	r0, [pc, #8]	; (404f84 <register_fini+0x10>)
  404f7a:	f000 b805 	b.w	404f88 <atexit>
  404f7e:	4770      	bx	lr
  404f80:	00000000 	.word	0x00000000
  404f84:	00405f05 	.word	0x00405f05

00404f88 <atexit>:
  404f88:	2300      	movs	r3, #0
  404f8a:	4601      	mov	r1, r0
  404f8c:	461a      	mov	r2, r3
  404f8e:	4618      	mov	r0, r3
  404f90:	f002 b9da 	b.w	407348 <__register_exitproc>

00404f94 <quorem>:
  404f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f98:	6903      	ldr	r3, [r0, #16]
  404f9a:	690f      	ldr	r7, [r1, #16]
  404f9c:	b083      	sub	sp, #12
  404f9e:	429f      	cmp	r7, r3
  404fa0:	f300 8088 	bgt.w	4050b4 <quorem+0x120>
  404fa4:	3f01      	subs	r7, #1
  404fa6:	f101 0614 	add.w	r6, r1, #20
  404faa:	f100 0a14 	add.w	sl, r0, #20
  404fae:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
  404fb2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  404fb6:	3301      	adds	r3, #1
  404fb8:	fbb2 f8f3 	udiv	r8, r2, r3
  404fbc:	00bb      	lsls	r3, r7, #2
  404fbe:	9300      	str	r3, [sp, #0]
  404fc0:	eb06 0903 	add.w	r9, r6, r3
  404fc4:	4453      	add	r3, sl
  404fc6:	9301      	str	r3, [sp, #4]
  404fc8:	f1b8 0f00 	cmp.w	r8, #0
  404fcc:	d03b      	beq.n	405046 <quorem+0xb2>
  404fce:	2300      	movs	r3, #0
  404fd0:	46b4      	mov	ip, r6
  404fd2:	461c      	mov	r4, r3
  404fd4:	46d6      	mov	lr, sl
  404fd6:	f85c 2b04 	ldr.w	r2, [ip], #4
  404fda:	f8de 5000 	ldr.w	r5, [lr]
  404fde:	fa1f fb82 	uxth.w	fp, r2
  404fe2:	fb08 330b 	mla	r3, r8, fp, r3
  404fe6:	0c12      	lsrs	r2, r2, #16
  404fe8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
  404fec:	fb08 bb02 	mla	fp, r8, r2, fp
  404ff0:	b29a      	uxth	r2, r3
  404ff2:	1aa2      	subs	r2, r4, r2
  404ff4:	b2ab      	uxth	r3, r5
  404ff6:	fa1f f48b 	uxth.w	r4, fp
  404ffa:	441a      	add	r2, r3
  404ffc:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
  405000:	eb04 4422 	add.w	r4, r4, r2, asr #16
  405004:	b292      	uxth	r2, r2
  405006:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  40500a:	45e1      	cmp	r9, ip
  40500c:	f84e 2b04 	str.w	r2, [lr], #4
  405010:	ea4f 4424 	mov.w	r4, r4, asr #16
  405014:	ea4f 431b 	mov.w	r3, fp, lsr #16
  405018:	d2dd      	bcs.n	404fd6 <quorem+0x42>
  40501a:	9b00      	ldr	r3, [sp, #0]
  40501c:	f85a 3003 	ldr.w	r3, [sl, r3]
  405020:	b98b      	cbnz	r3, 405046 <quorem+0xb2>
  405022:	9c01      	ldr	r4, [sp, #4]
  405024:	1f23      	subs	r3, r4, #4
  405026:	459a      	cmp	sl, r3
  405028:	d20c      	bcs.n	405044 <quorem+0xb0>
  40502a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40502e:	b94b      	cbnz	r3, 405044 <quorem+0xb0>
  405030:	f1a4 0308 	sub.w	r3, r4, #8
  405034:	e002      	b.n	40503c <quorem+0xa8>
  405036:	681a      	ldr	r2, [r3, #0]
  405038:	3b04      	subs	r3, #4
  40503a:	b91a      	cbnz	r2, 405044 <quorem+0xb0>
  40503c:	459a      	cmp	sl, r3
  40503e:	f107 37ff 	add.w	r7, r7, #4294967295
  405042:	d3f8      	bcc.n	405036 <quorem+0xa2>
  405044:	6107      	str	r7, [r0, #16]
  405046:	4604      	mov	r4, r0
  405048:	f001 fe2e 	bl	406ca8 <__mcmp>
  40504c:	2800      	cmp	r0, #0
  40504e:	db2d      	blt.n	4050ac <quorem+0x118>
  405050:	4655      	mov	r5, sl
  405052:	2300      	movs	r3, #0
  405054:	f108 0801 	add.w	r8, r8, #1
  405058:	f856 1b04 	ldr.w	r1, [r6], #4
  40505c:	6828      	ldr	r0, [r5, #0]
  40505e:	b28a      	uxth	r2, r1
  405060:	1a9a      	subs	r2, r3, r2
  405062:	0c0b      	lsrs	r3, r1, #16
  405064:	b281      	uxth	r1, r0
  405066:	440a      	add	r2, r1
  405068:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40506c:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405070:	b292      	uxth	r2, r2
  405072:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405076:	45b1      	cmp	r9, r6
  405078:	f845 2b04 	str.w	r2, [r5], #4
  40507c:	ea4f 4323 	mov.w	r3, r3, asr #16
  405080:	d2ea      	bcs.n	405058 <quorem+0xc4>
  405082:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  405086:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  40508a:	b97a      	cbnz	r2, 4050ac <quorem+0x118>
  40508c:	1f1a      	subs	r2, r3, #4
  40508e:	4592      	cmp	sl, r2
  405090:	d20b      	bcs.n	4050aa <quorem+0x116>
  405092:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405096:	b942      	cbnz	r2, 4050aa <quorem+0x116>
  405098:	3b08      	subs	r3, #8
  40509a:	e002      	b.n	4050a2 <quorem+0x10e>
  40509c:	681a      	ldr	r2, [r3, #0]
  40509e:	3b04      	subs	r3, #4
  4050a0:	b91a      	cbnz	r2, 4050aa <quorem+0x116>
  4050a2:	459a      	cmp	sl, r3
  4050a4:	f107 37ff 	add.w	r7, r7, #4294967295
  4050a8:	d3f8      	bcc.n	40509c <quorem+0x108>
  4050aa:	6127      	str	r7, [r4, #16]
  4050ac:	4640      	mov	r0, r8
  4050ae:	b003      	add	sp, #12
  4050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050b4:	2000      	movs	r0, #0
  4050b6:	b003      	add	sp, #12
  4050b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050bc:	0000      	movs	r0, r0
	...

004050c0 <_dtoa_r>:
  4050c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050c4:	6c05      	ldr	r5, [r0, #64]	; 0x40
  4050c6:	b09b      	sub	sp, #108	; 0x6c
  4050c8:	4604      	mov	r4, r0
  4050ca:	4692      	mov	sl, r2
  4050cc:	469b      	mov	fp, r3
  4050ce:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4050d0:	b14d      	cbz	r5, 4050e6 <_dtoa_r+0x26>
  4050d2:	2301      	movs	r3, #1
  4050d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4050d6:	4629      	mov	r1, r5
  4050d8:	4093      	lsls	r3, r2
  4050da:	60ab      	str	r3, [r5, #8]
  4050dc:	606a      	str	r2, [r5, #4]
  4050de:	f001 fc0b 	bl	4068f8 <_Bfree>
  4050e2:	2300      	movs	r3, #0
  4050e4:	6423      	str	r3, [r4, #64]	; 0x40
  4050e6:	f1bb 0f00 	cmp.w	fp, #0
  4050ea:	465d      	mov	r5, fp
  4050ec:	db35      	blt.n	40515a <_dtoa_r+0x9a>
  4050ee:	2300      	movs	r3, #0
  4050f0:	6033      	str	r3, [r6, #0]
  4050f2:	4b9d      	ldr	r3, [pc, #628]	; (405368 <_dtoa_r+0x2a8>)
  4050f4:	43ab      	bics	r3, r5
  4050f6:	d015      	beq.n	405124 <_dtoa_r+0x64>
  4050f8:	2200      	movs	r2, #0
  4050fa:	2300      	movs	r3, #0
  4050fc:	4650      	mov	r0, sl
  4050fe:	4659      	mov	r1, fp
  405100:	f002 fdd4 	bl	407cac <__aeabi_dcmpeq>
  405104:	4680      	mov	r8, r0
  405106:	2800      	cmp	r0, #0
  405108:	d02d      	beq.n	405166 <_dtoa_r+0xa6>
  40510a:	2301      	movs	r3, #1
  40510c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40510e:	6013      	str	r3, [r2, #0]
  405110:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405112:	2b00      	cmp	r3, #0
  405114:	f000 80bd 	beq.w	405292 <_dtoa_r+0x1d2>
  405118:	4894      	ldr	r0, [pc, #592]	; (40536c <_dtoa_r+0x2ac>)
  40511a:	6018      	str	r0, [r3, #0]
  40511c:	3801      	subs	r0, #1
  40511e:	b01b      	add	sp, #108	; 0x6c
  405120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405124:	f242 730f 	movw	r3, #9999	; 0x270f
  405128:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40512a:	6013      	str	r3, [r2, #0]
  40512c:	f1ba 0f00 	cmp.w	sl, #0
  405130:	d10d      	bne.n	40514e <_dtoa_r+0x8e>
  405132:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405136:	b955      	cbnz	r5, 40514e <_dtoa_r+0x8e>
  405138:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40513a:	488d      	ldr	r0, [pc, #564]	; (405370 <_dtoa_r+0x2b0>)
  40513c:	2b00      	cmp	r3, #0
  40513e:	d0ee      	beq.n	40511e <_dtoa_r+0x5e>
  405140:	f100 0308 	add.w	r3, r0, #8
  405144:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405146:	6013      	str	r3, [r2, #0]
  405148:	b01b      	add	sp, #108	; 0x6c
  40514a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40514e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405150:	4888      	ldr	r0, [pc, #544]	; (405374 <_dtoa_r+0x2b4>)
  405152:	2b00      	cmp	r3, #0
  405154:	d0e3      	beq.n	40511e <_dtoa_r+0x5e>
  405156:	1cc3      	adds	r3, r0, #3
  405158:	e7f4      	b.n	405144 <_dtoa_r+0x84>
  40515a:	2301      	movs	r3, #1
  40515c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405160:	6033      	str	r3, [r6, #0]
  405162:	46ab      	mov	fp, r5
  405164:	e7c5      	b.n	4050f2 <_dtoa_r+0x32>
  405166:	aa18      	add	r2, sp, #96	; 0x60
  405168:	ab19      	add	r3, sp, #100	; 0x64
  40516a:	9201      	str	r2, [sp, #4]
  40516c:	9300      	str	r3, [sp, #0]
  40516e:	4652      	mov	r2, sl
  405170:	465b      	mov	r3, fp
  405172:	4620      	mov	r0, r4
  405174:	f001 fe42 	bl	406dfc <__d2b>
  405178:	0d2b      	lsrs	r3, r5, #20
  40517a:	4681      	mov	r9, r0
  40517c:	d071      	beq.n	405262 <_dtoa_r+0x1a2>
  40517e:	4650      	mov	r0, sl
  405180:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405184:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405188:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40518a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  40518e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405192:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405196:	2200      	movs	r2, #0
  405198:	4b77      	ldr	r3, [pc, #476]	; (405378 <_dtoa_r+0x2b8>)
  40519a:	f002 f96b 	bl	407474 <__aeabi_dsub>
  40519e:	a36c      	add	r3, pc, #432	; (adr r3, 405350 <_dtoa_r+0x290>)
  4051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051a4:	f002 fb1a 	bl	4077dc <__aeabi_dmul>
  4051a8:	a36b      	add	r3, pc, #428	; (adr r3, 405358 <_dtoa_r+0x298>)
  4051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051ae:	f002 f963 	bl	407478 <__adddf3>
  4051b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4051b6:	4630      	mov	r0, r6
  4051b8:	f002 faaa 	bl	407710 <__aeabi_i2d>
  4051bc:	a368      	add	r3, pc, #416	; (adr r3, 405360 <_dtoa_r+0x2a0>)
  4051be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051c2:	f002 fb0b 	bl	4077dc <__aeabi_dmul>
  4051c6:	4602      	mov	r2, r0
  4051c8:	460b      	mov	r3, r1
  4051ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4051ce:	f002 f953 	bl	407478 <__adddf3>
  4051d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4051d6:	f002 fdb1 	bl	407d3c <__aeabi_d2iz>
  4051da:	2200      	movs	r2, #0
  4051dc:	9002      	str	r0, [sp, #8]
  4051de:	2300      	movs	r3, #0
  4051e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4051e4:	f002 fd6c 	bl	407cc0 <__aeabi_dcmplt>
  4051e8:	2800      	cmp	r0, #0
  4051ea:	f040 816d 	bne.w	4054c8 <_dtoa_r+0x408>
  4051ee:	9d02      	ldr	r5, [sp, #8]
  4051f0:	2d16      	cmp	r5, #22
  4051f2:	f200 8157 	bhi.w	4054a4 <_dtoa_r+0x3e4>
  4051f6:	4961      	ldr	r1, [pc, #388]	; (40537c <_dtoa_r+0x2bc>)
  4051f8:	4652      	mov	r2, sl
  4051fa:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  4051fe:	465b      	mov	r3, fp
  405200:	e9d1 0100 	ldrd	r0, r1, [r1]
  405204:	f002 fd7a 	bl	407cfc <__aeabi_dcmpgt>
  405208:	2800      	cmp	r0, #0
  40520a:	f000 81be 	beq.w	40558a <_dtoa_r+0x4ca>
  40520e:	1e6b      	subs	r3, r5, #1
  405210:	9302      	str	r3, [sp, #8]
  405212:	2300      	movs	r3, #0
  405214:	930e      	str	r3, [sp, #56]	; 0x38
  405216:	1bbf      	subs	r7, r7, r6
  405218:	1e7b      	subs	r3, r7, #1
  40521a:	9308      	str	r3, [sp, #32]
  40521c:	f100 814e 	bmi.w	4054bc <_dtoa_r+0x3fc>
  405220:	2300      	movs	r3, #0
  405222:	930a      	str	r3, [sp, #40]	; 0x28
  405224:	9b02      	ldr	r3, [sp, #8]
  405226:	2b00      	cmp	r3, #0
  405228:	f2c0 813f 	blt.w	4054aa <_dtoa_r+0x3ea>
  40522c:	9a08      	ldr	r2, [sp, #32]
  40522e:	930d      	str	r3, [sp, #52]	; 0x34
  405230:	4611      	mov	r1, r2
  405232:	4419      	add	r1, r3
  405234:	2300      	movs	r3, #0
  405236:	9108      	str	r1, [sp, #32]
  405238:	930c      	str	r3, [sp, #48]	; 0x30
  40523a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40523c:	2b09      	cmp	r3, #9
  40523e:	d82a      	bhi.n	405296 <_dtoa_r+0x1d6>
  405240:	2b05      	cmp	r3, #5
  405242:	f340 8658 	ble.w	405ef6 <_dtoa_r+0xe36>
  405246:	2500      	movs	r5, #0
  405248:	3b04      	subs	r3, #4
  40524a:	9324      	str	r3, [sp, #144]	; 0x90
  40524c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40524e:	3b02      	subs	r3, #2
  405250:	2b03      	cmp	r3, #3
  405252:	f200 863f 	bhi.w	405ed4 <_dtoa_r+0xe14>
  405256:	e8df f013 	tbh	[pc, r3, lsl #1]
  40525a:	03ce      	.short	0x03ce
  40525c:	03d902c3 	.word	0x03d902c3
  405260:	045b      	.short	0x045b
  405262:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405264:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405266:	443e      	add	r6, r7
  405268:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40526c:	2b20      	cmp	r3, #32
  40526e:	f340 8187 	ble.w	405580 <_dtoa_r+0x4c0>
  405272:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405276:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40527a:	409d      	lsls	r5, r3
  40527c:	fa2a f000 	lsr.w	r0, sl, r0
  405280:	4328      	orrs	r0, r5
  405282:	f002 fa35 	bl	4076f0 <__aeabi_ui2d>
  405286:	2301      	movs	r3, #1
  405288:	3e01      	subs	r6, #1
  40528a:	9314      	str	r3, [sp, #80]	; 0x50
  40528c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405290:	e781      	b.n	405196 <_dtoa_r+0xd6>
  405292:	483b      	ldr	r0, [pc, #236]	; (405380 <_dtoa_r+0x2c0>)
  405294:	e743      	b.n	40511e <_dtoa_r+0x5e>
  405296:	2100      	movs	r1, #0
  405298:	4620      	mov	r0, r4
  40529a:	6461      	str	r1, [r4, #68]	; 0x44
  40529c:	9125      	str	r1, [sp, #148]	; 0x94
  40529e:	f001 fb05 	bl	4068ac <_Balloc>
  4052a2:	f04f 33ff 	mov.w	r3, #4294967295
  4052a6:	9307      	str	r3, [sp, #28]
  4052a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4052aa:	2301      	movs	r3, #1
  4052ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4052ae:	9004      	str	r0, [sp, #16]
  4052b0:	6420      	str	r0, [r4, #64]	; 0x40
  4052b2:	9224      	str	r2, [sp, #144]	; 0x90
  4052b4:	930b      	str	r3, [sp, #44]	; 0x2c
  4052b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4052b8:	2b00      	cmp	r3, #0
  4052ba:	f2c0 80d3 	blt.w	405464 <_dtoa_r+0x3a4>
  4052be:	9a02      	ldr	r2, [sp, #8]
  4052c0:	2a0e      	cmp	r2, #14
  4052c2:	f300 80cf 	bgt.w	405464 <_dtoa_r+0x3a4>
  4052c6:	4b2d      	ldr	r3, [pc, #180]	; (40537c <_dtoa_r+0x2bc>)
  4052c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4052d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4052d6:	2b00      	cmp	r3, #0
  4052d8:	f2c0 83b4 	blt.w	405a44 <_dtoa_r+0x984>
  4052dc:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4052e0:	4650      	mov	r0, sl
  4052e2:	462a      	mov	r2, r5
  4052e4:	4633      	mov	r3, r6
  4052e6:	4659      	mov	r1, fp
  4052e8:	f002 fba2 	bl	407a30 <__aeabi_ddiv>
  4052ec:	f002 fd26 	bl	407d3c <__aeabi_d2iz>
  4052f0:	4680      	mov	r8, r0
  4052f2:	f002 fa0d 	bl	407710 <__aeabi_i2d>
  4052f6:	462a      	mov	r2, r5
  4052f8:	4633      	mov	r3, r6
  4052fa:	f002 fa6f 	bl	4077dc <__aeabi_dmul>
  4052fe:	4602      	mov	r2, r0
  405300:	460b      	mov	r3, r1
  405302:	4650      	mov	r0, sl
  405304:	4659      	mov	r1, fp
  405306:	f002 f8b5 	bl	407474 <__aeabi_dsub>
  40530a:	9e07      	ldr	r6, [sp, #28]
  40530c:	9f04      	ldr	r7, [sp, #16]
  40530e:	f108 0530 	add.w	r5, r8, #48	; 0x30
  405312:	2e01      	cmp	r6, #1
  405314:	703d      	strb	r5, [r7, #0]
  405316:	4602      	mov	r2, r0
  405318:	460b      	mov	r3, r1
  40531a:	f107 0501 	add.w	r5, r7, #1
  40531e:	d064      	beq.n	4053ea <_dtoa_r+0x32a>
  405320:	2200      	movs	r2, #0
  405322:	4b18      	ldr	r3, [pc, #96]	; (405384 <_dtoa_r+0x2c4>)
  405324:	f002 fa5a 	bl	4077dc <__aeabi_dmul>
  405328:	2200      	movs	r2, #0
  40532a:	2300      	movs	r3, #0
  40532c:	4606      	mov	r6, r0
  40532e:	460f      	mov	r7, r1
  405330:	f002 fcbc 	bl	407cac <__aeabi_dcmpeq>
  405334:	2800      	cmp	r0, #0
  405336:	f040 8082 	bne.w	40543e <_dtoa_r+0x37e>
  40533a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40533e:	f04f 0a00 	mov.w	sl, #0
  405342:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405346:	f04f 0b00 	mov.w	fp, #0
  40534a:	940b      	str	r4, [sp, #44]	; 0x2c
  40534c:	e029      	b.n	4053a2 <_dtoa_r+0x2e2>
  40534e:	bf00      	nop
  405350:	636f4361 	.word	0x636f4361
  405354:	3fd287a7 	.word	0x3fd287a7
  405358:	8b60c8b3 	.word	0x8b60c8b3
  40535c:	3fc68a28 	.word	0x3fc68a28
  405360:	509f79fb 	.word	0x509f79fb
  405364:	3fd34413 	.word	0x3fd34413
  405368:	7ff00000 	.word	0x7ff00000
  40536c:	0040825d 	.word	0x0040825d
  405370:	00408280 	.word	0x00408280
  405374:	0040828c 	.word	0x0040828c
  405378:	3ff80000 	.word	0x3ff80000
  40537c:	004082c8 	.word	0x004082c8
  405380:	0040825c 	.word	0x0040825c
  405384:	40240000 	.word	0x40240000
  405388:	2200      	movs	r2, #0
  40538a:	4b81      	ldr	r3, [pc, #516]	; (405590 <_dtoa_r+0x4d0>)
  40538c:	f002 fa26 	bl	4077dc <__aeabi_dmul>
  405390:	4652      	mov	r2, sl
  405392:	465b      	mov	r3, fp
  405394:	4606      	mov	r6, r0
  405396:	460f      	mov	r7, r1
  405398:	f002 fc88 	bl	407cac <__aeabi_dcmpeq>
  40539c:	2800      	cmp	r0, #0
  40539e:	f040 83ba 	bne.w	405b16 <_dtoa_r+0xa56>
  4053a2:	4642      	mov	r2, r8
  4053a4:	464b      	mov	r3, r9
  4053a6:	4630      	mov	r0, r6
  4053a8:	4639      	mov	r1, r7
  4053aa:	f002 fb41 	bl	407a30 <__aeabi_ddiv>
  4053ae:	f002 fcc5 	bl	407d3c <__aeabi_d2iz>
  4053b2:	4604      	mov	r4, r0
  4053b4:	f002 f9ac 	bl	407710 <__aeabi_i2d>
  4053b8:	4642      	mov	r2, r8
  4053ba:	464b      	mov	r3, r9
  4053bc:	f002 fa0e 	bl	4077dc <__aeabi_dmul>
  4053c0:	4602      	mov	r2, r0
  4053c2:	460b      	mov	r3, r1
  4053c4:	4630      	mov	r0, r6
  4053c6:	4639      	mov	r1, r7
  4053c8:	f002 f854 	bl	407474 <__aeabi_dsub>
  4053cc:	f104 0630 	add.w	r6, r4, #48	; 0x30
  4053d0:	f805 6b01 	strb.w	r6, [r5], #1
  4053d4:	9e04      	ldr	r6, [sp, #16]
  4053d6:	9f07      	ldr	r7, [sp, #28]
  4053d8:	1bae      	subs	r6, r5, r6
  4053da:	42be      	cmp	r6, r7
  4053dc:	4602      	mov	r2, r0
  4053de:	460b      	mov	r3, r1
  4053e0:	d1d2      	bne.n	405388 <_dtoa_r+0x2c8>
  4053e2:	46a0      	mov	r8, r4
  4053e4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  4053e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4053ea:	4610      	mov	r0, r2
  4053ec:	4619      	mov	r1, r3
  4053ee:	f002 f843 	bl	407478 <__adddf3>
  4053f2:	4606      	mov	r6, r0
  4053f4:	460f      	mov	r7, r1
  4053f6:	4602      	mov	r2, r0
  4053f8:	460b      	mov	r3, r1
  4053fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4053fe:	f002 fc5f 	bl	407cc0 <__aeabi_dcmplt>
  405402:	b948      	cbnz	r0, 405418 <_dtoa_r+0x358>
  405404:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405408:	4632      	mov	r2, r6
  40540a:	463b      	mov	r3, r7
  40540c:	f002 fc4e 	bl	407cac <__aeabi_dcmpeq>
  405410:	b1a8      	cbz	r0, 40543e <_dtoa_r+0x37e>
  405412:	f018 0f01 	tst.w	r8, #1
  405416:	d012      	beq.n	40543e <_dtoa_r+0x37e>
  405418:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40541c:	1e6b      	subs	r3, r5, #1
  40541e:	9a04      	ldr	r2, [sp, #16]
  405420:	e004      	b.n	40542c <_dtoa_r+0x36c>
  405422:	429a      	cmp	r2, r3
  405424:	f000 8402 	beq.w	405c2c <_dtoa_r+0xb6c>
  405428:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40542c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405430:	f103 0501 	add.w	r5, r3, #1
  405434:	d0f5      	beq.n	405422 <_dtoa_r+0x362>
  405436:	f108 0801 	add.w	r8, r8, #1
  40543a:	f883 8000 	strb.w	r8, [r3]
  40543e:	4649      	mov	r1, r9
  405440:	4620      	mov	r0, r4
  405442:	f001 fa59 	bl	4068f8 <_Bfree>
  405446:	2200      	movs	r2, #0
  405448:	9b02      	ldr	r3, [sp, #8]
  40544a:	702a      	strb	r2, [r5, #0]
  40544c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40544e:	3301      	adds	r3, #1
  405450:	6013      	str	r3, [r2, #0]
  405452:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405454:	2b00      	cmp	r3, #0
  405456:	f000 839f 	beq.w	405b98 <_dtoa_r+0xad8>
  40545a:	9804      	ldr	r0, [sp, #16]
  40545c:	601d      	str	r5, [r3, #0]
  40545e:	b01b      	add	sp, #108	; 0x6c
  405460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405464:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405466:	2a00      	cmp	r2, #0
  405468:	d03e      	beq.n	4054e8 <_dtoa_r+0x428>
  40546a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40546c:	2a01      	cmp	r2, #1
  40546e:	f340 8311 	ble.w	405a94 <_dtoa_r+0x9d4>
  405472:	9b07      	ldr	r3, [sp, #28]
  405474:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405476:	1e5f      	subs	r7, r3, #1
  405478:	42ba      	cmp	r2, r7
  40547a:	f2c0 8390 	blt.w	405b9e <_dtoa_r+0xade>
  40547e:	1bd7      	subs	r7, r2, r7
  405480:	9b07      	ldr	r3, [sp, #28]
  405482:	2b00      	cmp	r3, #0
  405484:	f2c0 848c 	blt.w	405da0 <_dtoa_r+0xce0>
  405488:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40548a:	9b07      	ldr	r3, [sp, #28]
  40548c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40548e:	2101      	movs	r1, #1
  405490:	441a      	add	r2, r3
  405492:	920a      	str	r2, [sp, #40]	; 0x28
  405494:	9a08      	ldr	r2, [sp, #32]
  405496:	4620      	mov	r0, r4
  405498:	441a      	add	r2, r3
  40549a:	9208      	str	r2, [sp, #32]
  40549c:	f001 fac8 	bl	406a30 <__i2b>
  4054a0:	4606      	mov	r6, r0
  4054a2:	e023      	b.n	4054ec <_dtoa_r+0x42c>
  4054a4:	2301      	movs	r3, #1
  4054a6:	930e      	str	r3, [sp, #56]	; 0x38
  4054a8:	e6b5      	b.n	405216 <_dtoa_r+0x156>
  4054aa:	2300      	movs	r3, #0
  4054ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4054ae:	930d      	str	r3, [sp, #52]	; 0x34
  4054b0:	9b02      	ldr	r3, [sp, #8]
  4054b2:	1ad2      	subs	r2, r2, r3
  4054b4:	425b      	negs	r3, r3
  4054b6:	920a      	str	r2, [sp, #40]	; 0x28
  4054b8:	930c      	str	r3, [sp, #48]	; 0x30
  4054ba:	e6be      	b.n	40523a <_dtoa_r+0x17a>
  4054bc:	f1c7 0301 	rsb	r3, r7, #1
  4054c0:	930a      	str	r3, [sp, #40]	; 0x28
  4054c2:	2300      	movs	r3, #0
  4054c4:	9308      	str	r3, [sp, #32]
  4054c6:	e6ad      	b.n	405224 <_dtoa_r+0x164>
  4054c8:	9d02      	ldr	r5, [sp, #8]
  4054ca:	4628      	mov	r0, r5
  4054cc:	f002 f920 	bl	407710 <__aeabi_i2d>
  4054d0:	4602      	mov	r2, r0
  4054d2:	460b      	mov	r3, r1
  4054d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4054d8:	f002 fbe8 	bl	407cac <__aeabi_dcmpeq>
  4054dc:	2800      	cmp	r0, #0
  4054de:	f47f ae86 	bne.w	4051ee <_dtoa_r+0x12e>
  4054e2:	1e6b      	subs	r3, r5, #1
  4054e4:	9302      	str	r3, [sp, #8]
  4054e6:	e682      	b.n	4051ee <_dtoa_r+0x12e>
  4054e8:	ad0a      	add	r5, sp, #40	; 0x28
  4054ea:	cde0      	ldmia	r5, {r5, r6, r7}
  4054ec:	2d00      	cmp	r5, #0
  4054ee:	dd0c      	ble.n	40550a <_dtoa_r+0x44a>
  4054f0:	9908      	ldr	r1, [sp, #32]
  4054f2:	2900      	cmp	r1, #0
  4054f4:	460b      	mov	r3, r1
  4054f6:	dd08      	ble.n	40550a <_dtoa_r+0x44a>
  4054f8:	42a9      	cmp	r1, r5
  4054fa:	bfa8      	it	ge
  4054fc:	462b      	movge	r3, r5
  4054fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405500:	1aed      	subs	r5, r5, r3
  405502:	1ad2      	subs	r2, r2, r3
  405504:	1acb      	subs	r3, r1, r3
  405506:	920a      	str	r2, [sp, #40]	; 0x28
  405508:	9308      	str	r3, [sp, #32]
  40550a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40550c:	b1d3      	cbz	r3, 405544 <_dtoa_r+0x484>
  40550e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405510:	2b00      	cmp	r3, #0
  405512:	f000 82b8 	beq.w	405a86 <_dtoa_r+0x9c6>
  405516:	2f00      	cmp	r7, #0
  405518:	dd10      	ble.n	40553c <_dtoa_r+0x47c>
  40551a:	4631      	mov	r1, r6
  40551c:	463a      	mov	r2, r7
  40551e:	4620      	mov	r0, r4
  405520:	f001 fb22 	bl	406b68 <__pow5mult>
  405524:	464a      	mov	r2, r9
  405526:	4601      	mov	r1, r0
  405528:	4606      	mov	r6, r0
  40552a:	4620      	mov	r0, r4
  40552c:	f001 fa8a 	bl	406a44 <__multiply>
  405530:	4603      	mov	r3, r0
  405532:	4649      	mov	r1, r9
  405534:	4620      	mov	r0, r4
  405536:	4699      	mov	r9, r3
  405538:	f001 f9de 	bl	4068f8 <_Bfree>
  40553c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40553e:	1bda      	subs	r2, r3, r7
  405540:	f040 82a2 	bne.w	405a88 <_dtoa_r+0x9c8>
  405544:	2101      	movs	r1, #1
  405546:	4620      	mov	r0, r4
  405548:	f001 fa72 	bl	406a30 <__i2b>
  40554c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40554e:	4680      	mov	r8, r0
  405550:	2b00      	cmp	r3, #0
  405552:	dd1f      	ble.n	405594 <_dtoa_r+0x4d4>
  405554:	4601      	mov	r1, r0
  405556:	461a      	mov	r2, r3
  405558:	4620      	mov	r0, r4
  40555a:	f001 fb05 	bl	406b68 <__pow5mult>
  40555e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405560:	4680      	mov	r8, r0
  405562:	2b01      	cmp	r3, #1
  405564:	f340 8255 	ble.w	405a12 <_dtoa_r+0x952>
  405568:	2300      	movs	r3, #0
  40556a:	930c      	str	r3, [sp, #48]	; 0x30
  40556c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405570:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405574:	6918      	ldr	r0, [r3, #16]
  405576:	f001 fa0b 	bl	406990 <__hi0bits>
  40557a:	f1c0 0020 	rsb	r0, r0, #32
  40557e:	e013      	b.n	4055a8 <_dtoa_r+0x4e8>
  405580:	f1c3 0520 	rsb	r5, r3, #32
  405584:	fa0a f005 	lsl.w	r0, sl, r5
  405588:	e67b      	b.n	405282 <_dtoa_r+0x1c2>
  40558a:	900e      	str	r0, [sp, #56]	; 0x38
  40558c:	e643      	b.n	405216 <_dtoa_r+0x156>
  40558e:	bf00      	nop
  405590:	40240000 	.word	0x40240000
  405594:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405596:	2b01      	cmp	r3, #1
  405598:	f340 8285 	ble.w	405aa6 <_dtoa_r+0x9e6>
  40559c:	2300      	movs	r3, #0
  40559e:	930c      	str	r3, [sp, #48]	; 0x30
  4055a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4055a2:	2001      	movs	r0, #1
  4055a4:	2b00      	cmp	r3, #0
  4055a6:	d1e1      	bne.n	40556c <_dtoa_r+0x4ac>
  4055a8:	9a08      	ldr	r2, [sp, #32]
  4055aa:	4410      	add	r0, r2
  4055ac:	f010 001f 	ands.w	r0, r0, #31
  4055b0:	f000 80a1 	beq.w	4056f6 <_dtoa_r+0x636>
  4055b4:	f1c0 0320 	rsb	r3, r0, #32
  4055b8:	2b04      	cmp	r3, #4
  4055ba:	f340 8486 	ble.w	405eca <_dtoa_r+0xe0a>
  4055be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055c0:	f1c0 001c 	rsb	r0, r0, #28
  4055c4:	4403      	add	r3, r0
  4055c6:	930a      	str	r3, [sp, #40]	; 0x28
  4055c8:	4613      	mov	r3, r2
  4055ca:	4403      	add	r3, r0
  4055cc:	4405      	add	r5, r0
  4055ce:	9308      	str	r3, [sp, #32]
  4055d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055d2:	2b00      	cmp	r3, #0
  4055d4:	dd05      	ble.n	4055e2 <_dtoa_r+0x522>
  4055d6:	4649      	mov	r1, r9
  4055d8:	461a      	mov	r2, r3
  4055da:	4620      	mov	r0, r4
  4055dc:	f001 fb14 	bl	406c08 <__lshift>
  4055e0:	4681      	mov	r9, r0
  4055e2:	9b08      	ldr	r3, [sp, #32]
  4055e4:	2b00      	cmp	r3, #0
  4055e6:	dd05      	ble.n	4055f4 <_dtoa_r+0x534>
  4055e8:	4641      	mov	r1, r8
  4055ea:	461a      	mov	r2, r3
  4055ec:	4620      	mov	r0, r4
  4055ee:	f001 fb0b 	bl	406c08 <__lshift>
  4055f2:	4680      	mov	r8, r0
  4055f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4055f6:	2b00      	cmp	r3, #0
  4055f8:	f040 8086 	bne.w	405708 <_dtoa_r+0x648>
  4055fc:	9b07      	ldr	r3, [sp, #28]
  4055fe:	2b00      	cmp	r3, #0
  405600:	f340 8264 	ble.w	405acc <_dtoa_r+0xa0c>
  405604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405606:	2b00      	cmp	r3, #0
  405608:	f000 8098 	beq.w	40573c <_dtoa_r+0x67c>
  40560c:	2d00      	cmp	r5, #0
  40560e:	dd05      	ble.n	40561c <_dtoa_r+0x55c>
  405610:	4631      	mov	r1, r6
  405612:	462a      	mov	r2, r5
  405614:	4620      	mov	r0, r4
  405616:	f001 faf7 	bl	406c08 <__lshift>
  40561a:	4606      	mov	r6, r0
  40561c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40561e:	2b00      	cmp	r3, #0
  405620:	f040 8336 	bne.w	405c90 <_dtoa_r+0xbd0>
  405624:	9608      	str	r6, [sp, #32]
  405626:	9b07      	ldr	r3, [sp, #28]
  405628:	9a04      	ldr	r2, [sp, #16]
  40562a:	3b01      	subs	r3, #1
  40562c:	18d3      	adds	r3, r2, r3
  40562e:	930b      	str	r3, [sp, #44]	; 0x2c
  405630:	4617      	mov	r7, r2
  405632:	f00a 0301 	and.w	r3, sl, #1
  405636:	46c2      	mov	sl, r8
  405638:	f8dd b020 	ldr.w	fp, [sp, #32]
  40563c:	930c      	str	r3, [sp, #48]	; 0x30
  40563e:	4651      	mov	r1, sl
  405640:	4648      	mov	r0, r9
  405642:	f7ff fca7 	bl	404f94 <quorem>
  405646:	4631      	mov	r1, r6
  405648:	4605      	mov	r5, r0
  40564a:	4648      	mov	r0, r9
  40564c:	f001 fb2c 	bl	406ca8 <__mcmp>
  405650:	465a      	mov	r2, fp
  405652:	9007      	str	r0, [sp, #28]
  405654:	4651      	mov	r1, sl
  405656:	4620      	mov	r0, r4
  405658:	f001 fb42 	bl	406ce0 <__mdiff>
  40565c:	68c2      	ldr	r2, [r0, #12]
  40565e:	4680      	mov	r8, r0
  405660:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405664:	2a00      	cmp	r2, #0
  405666:	f040 8229 	bne.w	405abc <_dtoa_r+0x9fc>
  40566a:	4601      	mov	r1, r0
  40566c:	4648      	mov	r0, r9
  40566e:	930a      	str	r3, [sp, #40]	; 0x28
  405670:	f001 fb1a 	bl	406ca8 <__mcmp>
  405674:	4641      	mov	r1, r8
  405676:	9008      	str	r0, [sp, #32]
  405678:	4620      	mov	r0, r4
  40567a:	f001 f93d 	bl	4068f8 <_Bfree>
  40567e:	9a08      	ldr	r2, [sp, #32]
  405680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405682:	b932      	cbnz	r2, 405692 <_dtoa_r+0x5d2>
  405684:	9924      	ldr	r1, [sp, #144]	; 0x90
  405686:	b921      	cbnz	r1, 405692 <_dtoa_r+0x5d2>
  405688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40568a:	2a00      	cmp	r2, #0
  40568c:	f000 83ee 	beq.w	405e6c <_dtoa_r+0xdac>
  405690:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405692:	9907      	ldr	r1, [sp, #28]
  405694:	2900      	cmp	r1, #0
  405696:	f2c0 829f 	blt.w	405bd8 <_dtoa_r+0xb18>
  40569a:	d105      	bne.n	4056a8 <_dtoa_r+0x5e8>
  40569c:	9924      	ldr	r1, [sp, #144]	; 0x90
  40569e:	b919      	cbnz	r1, 4056a8 <_dtoa_r+0x5e8>
  4056a0:	990c      	ldr	r1, [sp, #48]	; 0x30
  4056a2:	2900      	cmp	r1, #0
  4056a4:	f000 8298 	beq.w	405bd8 <_dtoa_r+0xb18>
  4056a8:	2a00      	cmp	r2, #0
  4056aa:	f300 8305 	bgt.w	405cb8 <_dtoa_r+0xbf8>
  4056ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4056b0:	f107 0801 	add.w	r8, r7, #1
  4056b4:	4297      	cmp	r7, r2
  4056b6:	703b      	strb	r3, [r7, #0]
  4056b8:	4645      	mov	r5, r8
  4056ba:	f000 830b 	beq.w	405cd4 <_dtoa_r+0xc14>
  4056be:	4649      	mov	r1, r9
  4056c0:	2300      	movs	r3, #0
  4056c2:	220a      	movs	r2, #10
  4056c4:	4620      	mov	r0, r4
  4056c6:	f001 f921 	bl	40690c <__multadd>
  4056ca:	455e      	cmp	r6, fp
  4056cc:	4681      	mov	r9, r0
  4056ce:	4631      	mov	r1, r6
  4056d0:	f04f 0300 	mov.w	r3, #0
  4056d4:	f04f 020a 	mov.w	r2, #10
  4056d8:	4620      	mov	r0, r4
  4056da:	f000 81e9 	beq.w	405ab0 <_dtoa_r+0x9f0>
  4056de:	f001 f915 	bl	40690c <__multadd>
  4056e2:	4659      	mov	r1, fp
  4056e4:	4606      	mov	r6, r0
  4056e6:	2300      	movs	r3, #0
  4056e8:	220a      	movs	r2, #10
  4056ea:	4620      	mov	r0, r4
  4056ec:	f001 f90e 	bl	40690c <__multadd>
  4056f0:	4647      	mov	r7, r8
  4056f2:	4683      	mov	fp, r0
  4056f4:	e7a3      	b.n	40563e <_dtoa_r+0x57e>
  4056f6:	201c      	movs	r0, #28
  4056f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4056fa:	4405      	add	r5, r0
  4056fc:	4403      	add	r3, r0
  4056fe:	930a      	str	r3, [sp, #40]	; 0x28
  405700:	9b08      	ldr	r3, [sp, #32]
  405702:	4403      	add	r3, r0
  405704:	9308      	str	r3, [sp, #32]
  405706:	e763      	b.n	4055d0 <_dtoa_r+0x510>
  405708:	4641      	mov	r1, r8
  40570a:	4648      	mov	r0, r9
  40570c:	f001 facc 	bl	406ca8 <__mcmp>
  405710:	2800      	cmp	r0, #0
  405712:	f6bf af73 	bge.w	4055fc <_dtoa_r+0x53c>
  405716:	9f02      	ldr	r7, [sp, #8]
  405718:	4649      	mov	r1, r9
  40571a:	2300      	movs	r3, #0
  40571c:	220a      	movs	r2, #10
  40571e:	4620      	mov	r0, r4
  405720:	3f01      	subs	r7, #1
  405722:	9702      	str	r7, [sp, #8]
  405724:	f001 f8f2 	bl	40690c <__multadd>
  405728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40572a:	4681      	mov	r9, r0
  40572c:	2b00      	cmp	r3, #0
  40572e:	f040 83b5 	bne.w	405e9c <_dtoa_r+0xddc>
  405732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405734:	2b00      	cmp	r3, #0
  405736:	f340 83be 	ble.w	405eb6 <_dtoa_r+0xdf6>
  40573a:	9307      	str	r3, [sp, #28]
  40573c:	f8dd a010 	ldr.w	sl, [sp, #16]
  405740:	9f07      	ldr	r7, [sp, #28]
  405742:	4655      	mov	r5, sl
  405744:	e006      	b.n	405754 <_dtoa_r+0x694>
  405746:	4649      	mov	r1, r9
  405748:	2300      	movs	r3, #0
  40574a:	220a      	movs	r2, #10
  40574c:	4620      	mov	r0, r4
  40574e:	f001 f8dd 	bl	40690c <__multadd>
  405752:	4681      	mov	r9, r0
  405754:	4641      	mov	r1, r8
  405756:	4648      	mov	r0, r9
  405758:	f7ff fc1c 	bl	404f94 <quorem>
  40575c:	3030      	adds	r0, #48	; 0x30
  40575e:	f805 0b01 	strb.w	r0, [r5], #1
  405762:	eba5 030a 	sub.w	r3, r5, sl
  405766:	42bb      	cmp	r3, r7
  405768:	dbed      	blt.n	405746 <_dtoa_r+0x686>
  40576a:	9b04      	ldr	r3, [sp, #16]
  40576c:	9a07      	ldr	r2, [sp, #28]
  40576e:	4682      	mov	sl, r0
  405770:	2a01      	cmp	r2, #1
  405772:	bfac      	ite	ge
  405774:	189b      	addge	r3, r3, r2
  405776:	3301      	addlt	r3, #1
  405778:	f04f 0b00 	mov.w	fp, #0
  40577c:	461d      	mov	r5, r3
  40577e:	4649      	mov	r1, r9
  405780:	2201      	movs	r2, #1
  405782:	4620      	mov	r0, r4
  405784:	f001 fa40 	bl	406c08 <__lshift>
  405788:	4641      	mov	r1, r8
  40578a:	4681      	mov	r9, r0
  40578c:	f001 fa8c 	bl	406ca8 <__mcmp>
  405790:	2800      	cmp	r0, #0
  405792:	f340 823f 	ble.w	405c14 <_dtoa_r+0xb54>
  405796:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40579a:	1e6b      	subs	r3, r5, #1
  40579c:	9904      	ldr	r1, [sp, #16]
  40579e:	e004      	b.n	4057aa <_dtoa_r+0x6ea>
  4057a0:	428b      	cmp	r3, r1
  4057a2:	f000 81ae 	beq.w	405b02 <_dtoa_r+0xa42>
  4057a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4057aa:	2a39      	cmp	r2, #57	; 0x39
  4057ac:	f103 0501 	add.w	r5, r3, #1
  4057b0:	d0f6      	beq.n	4057a0 <_dtoa_r+0x6e0>
  4057b2:	3201      	adds	r2, #1
  4057b4:	701a      	strb	r2, [r3, #0]
  4057b6:	4641      	mov	r1, r8
  4057b8:	4620      	mov	r0, r4
  4057ba:	f001 f89d 	bl	4068f8 <_Bfree>
  4057be:	2e00      	cmp	r6, #0
  4057c0:	f43f ae3d 	beq.w	40543e <_dtoa_r+0x37e>
  4057c4:	f1bb 0f00 	cmp.w	fp, #0
  4057c8:	d005      	beq.n	4057d6 <_dtoa_r+0x716>
  4057ca:	45b3      	cmp	fp, r6
  4057cc:	d003      	beq.n	4057d6 <_dtoa_r+0x716>
  4057ce:	4659      	mov	r1, fp
  4057d0:	4620      	mov	r0, r4
  4057d2:	f001 f891 	bl	4068f8 <_Bfree>
  4057d6:	4631      	mov	r1, r6
  4057d8:	4620      	mov	r0, r4
  4057da:	f001 f88d 	bl	4068f8 <_Bfree>
  4057de:	e62e      	b.n	40543e <_dtoa_r+0x37e>
  4057e0:	2300      	movs	r3, #0
  4057e2:	930b      	str	r3, [sp, #44]	; 0x2c
  4057e4:	9b02      	ldr	r3, [sp, #8]
  4057e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4057e8:	4413      	add	r3, r2
  4057ea:	930f      	str	r3, [sp, #60]	; 0x3c
  4057ec:	3301      	adds	r3, #1
  4057ee:	2b01      	cmp	r3, #1
  4057f0:	461f      	mov	r7, r3
  4057f2:	461e      	mov	r6, r3
  4057f4:	bfb8      	it	lt
  4057f6:	2701      	movlt	r7, #1
  4057f8:	9307      	str	r3, [sp, #28]
  4057fa:	2100      	movs	r1, #0
  4057fc:	2f17      	cmp	r7, #23
  4057fe:	6461      	str	r1, [r4, #68]	; 0x44
  405800:	d90a      	bls.n	405818 <_dtoa_r+0x758>
  405802:	2201      	movs	r2, #1
  405804:	2304      	movs	r3, #4
  405806:	005b      	lsls	r3, r3, #1
  405808:	f103 0014 	add.w	r0, r3, #20
  40580c:	4287      	cmp	r7, r0
  40580e:	4611      	mov	r1, r2
  405810:	f102 0201 	add.w	r2, r2, #1
  405814:	d2f7      	bcs.n	405806 <_dtoa_r+0x746>
  405816:	6461      	str	r1, [r4, #68]	; 0x44
  405818:	4620      	mov	r0, r4
  40581a:	f001 f847 	bl	4068ac <_Balloc>
  40581e:	2e0e      	cmp	r6, #14
  405820:	9004      	str	r0, [sp, #16]
  405822:	6420      	str	r0, [r4, #64]	; 0x40
  405824:	f63f ad47 	bhi.w	4052b6 <_dtoa_r+0x1f6>
  405828:	2d00      	cmp	r5, #0
  40582a:	f43f ad44 	beq.w	4052b6 <_dtoa_r+0x1f6>
  40582e:	9902      	ldr	r1, [sp, #8]
  405830:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405834:	2900      	cmp	r1, #0
  405836:	f340 8203 	ble.w	405c40 <_dtoa_r+0xb80>
  40583a:	4bb9      	ldr	r3, [pc, #740]	; (405b20 <_dtoa_r+0xa60>)
  40583c:	f001 020f 	and.w	r2, r1, #15
  405840:	110d      	asrs	r5, r1, #4
  405842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405846:	06e9      	lsls	r1, r5, #27
  405848:	e9d3 6700 	ldrd	r6, r7, [r3]
  40584c:	f140 81af 	bpl.w	405bae <_dtoa_r+0xaee>
  405850:	4bb4      	ldr	r3, [pc, #720]	; (405b24 <_dtoa_r+0xa64>)
  405852:	4650      	mov	r0, sl
  405854:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405858:	4659      	mov	r1, fp
  40585a:	f002 f8e9 	bl	407a30 <__aeabi_ddiv>
  40585e:	f04f 0a03 	mov.w	sl, #3
  405862:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405866:	f005 050f 	and.w	r5, r5, #15
  40586a:	b18d      	cbz	r5, 405890 <_dtoa_r+0x7d0>
  40586c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405b24 <_dtoa_r+0xa64>
  405870:	07ea      	lsls	r2, r5, #31
  405872:	d509      	bpl.n	405888 <_dtoa_r+0x7c8>
  405874:	e9d8 2300 	ldrd	r2, r3, [r8]
  405878:	4630      	mov	r0, r6
  40587a:	4639      	mov	r1, r7
  40587c:	f001 ffae 	bl	4077dc <__aeabi_dmul>
  405880:	4606      	mov	r6, r0
  405882:	460f      	mov	r7, r1
  405884:	f10a 0a01 	add.w	sl, sl, #1
  405888:	106d      	asrs	r5, r5, #1
  40588a:	f108 0808 	add.w	r8, r8, #8
  40588e:	d1ef      	bne.n	405870 <_dtoa_r+0x7b0>
  405890:	463b      	mov	r3, r7
  405892:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405896:	4632      	mov	r2, r6
  405898:	f002 f8ca 	bl	407a30 <__aeabi_ddiv>
  40589c:	4607      	mov	r7, r0
  40589e:	4688      	mov	r8, r1
  4058a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4058a2:	b143      	cbz	r3, 4058b6 <_dtoa_r+0x7f6>
  4058a4:	2200      	movs	r2, #0
  4058a6:	4ba0      	ldr	r3, [pc, #640]	; (405b28 <_dtoa_r+0xa68>)
  4058a8:	4638      	mov	r0, r7
  4058aa:	4641      	mov	r1, r8
  4058ac:	f002 fa08 	bl	407cc0 <__aeabi_dcmplt>
  4058b0:	2800      	cmp	r0, #0
  4058b2:	f040 8287 	bne.w	405dc4 <_dtoa_r+0xd04>
  4058b6:	4650      	mov	r0, sl
  4058b8:	f001 ff2a 	bl	407710 <__aeabi_i2d>
  4058bc:	463a      	mov	r2, r7
  4058be:	4643      	mov	r3, r8
  4058c0:	f001 ff8c 	bl	4077dc <__aeabi_dmul>
  4058c4:	4b99      	ldr	r3, [pc, #612]	; (405b2c <_dtoa_r+0xa6c>)
  4058c6:	2200      	movs	r2, #0
  4058c8:	f001 fdd6 	bl	407478 <__adddf3>
  4058cc:	9b07      	ldr	r3, [sp, #28]
  4058ce:	4605      	mov	r5, r0
  4058d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4058d4:	2b00      	cmp	r3, #0
  4058d6:	f000 813f 	beq.w	405b58 <_dtoa_r+0xa98>
  4058da:	9b02      	ldr	r3, [sp, #8]
  4058dc:	9315      	str	r3, [sp, #84]	; 0x54
  4058de:	9b07      	ldr	r3, [sp, #28]
  4058e0:	9312      	str	r3, [sp, #72]	; 0x48
  4058e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4058e4:	2b00      	cmp	r3, #0
  4058e6:	f000 81fb 	beq.w	405ce0 <_dtoa_r+0xc20>
  4058ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4058ec:	4b8c      	ldr	r3, [pc, #560]	; (405b20 <_dtoa_r+0xa60>)
  4058ee:	2000      	movs	r0, #0
  4058f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4058f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4058f8:	498d      	ldr	r1, [pc, #564]	; (405b30 <_dtoa_r+0xa70>)
  4058fa:	f002 f899 	bl	407a30 <__aeabi_ddiv>
  4058fe:	462a      	mov	r2, r5
  405900:	4633      	mov	r3, r6
  405902:	f001 fdb7 	bl	407474 <__aeabi_dsub>
  405906:	4682      	mov	sl, r0
  405908:	468b      	mov	fp, r1
  40590a:	4638      	mov	r0, r7
  40590c:	4641      	mov	r1, r8
  40590e:	f002 fa15 	bl	407d3c <__aeabi_d2iz>
  405912:	4605      	mov	r5, r0
  405914:	f001 fefc 	bl	407710 <__aeabi_i2d>
  405918:	4602      	mov	r2, r0
  40591a:	460b      	mov	r3, r1
  40591c:	4638      	mov	r0, r7
  40591e:	4641      	mov	r1, r8
  405920:	f001 fda8 	bl	407474 <__aeabi_dsub>
  405924:	3530      	adds	r5, #48	; 0x30
  405926:	fa5f f885 	uxtb.w	r8, r5
  40592a:	9d04      	ldr	r5, [sp, #16]
  40592c:	4606      	mov	r6, r0
  40592e:	460f      	mov	r7, r1
  405930:	f885 8000 	strb.w	r8, [r5]
  405934:	4602      	mov	r2, r0
  405936:	460b      	mov	r3, r1
  405938:	4650      	mov	r0, sl
  40593a:	4659      	mov	r1, fp
  40593c:	3501      	adds	r5, #1
  40593e:	f002 f9dd 	bl	407cfc <__aeabi_dcmpgt>
  405942:	2800      	cmp	r0, #0
  405944:	d154      	bne.n	4059f0 <_dtoa_r+0x930>
  405946:	4632      	mov	r2, r6
  405948:	463b      	mov	r3, r7
  40594a:	2000      	movs	r0, #0
  40594c:	4976      	ldr	r1, [pc, #472]	; (405b28 <_dtoa_r+0xa68>)
  40594e:	f001 fd91 	bl	407474 <__aeabi_dsub>
  405952:	4602      	mov	r2, r0
  405954:	460b      	mov	r3, r1
  405956:	4650      	mov	r0, sl
  405958:	4659      	mov	r1, fp
  40595a:	f002 f9cf 	bl	407cfc <__aeabi_dcmpgt>
  40595e:	2800      	cmp	r0, #0
  405960:	f040 8270 	bne.w	405e44 <_dtoa_r+0xd84>
  405964:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405966:	2a01      	cmp	r2, #1
  405968:	f000 8112 	beq.w	405b90 <_dtoa_r+0xad0>
  40596c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40596e:	9a04      	ldr	r2, [sp, #16]
  405970:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405974:	4413      	add	r3, r2
  405976:	4699      	mov	r9, r3
  405978:	e00f      	b.n	40599a <_dtoa_r+0x8da>
  40597a:	4632      	mov	r2, r6
  40597c:	463b      	mov	r3, r7
  40597e:	2000      	movs	r0, #0
  405980:	4969      	ldr	r1, [pc, #420]	; (405b28 <_dtoa_r+0xa68>)
  405982:	f001 fd77 	bl	407474 <__aeabi_dsub>
  405986:	4652      	mov	r2, sl
  405988:	465b      	mov	r3, fp
  40598a:	f002 f999 	bl	407cc0 <__aeabi_dcmplt>
  40598e:	2800      	cmp	r0, #0
  405990:	f040 8256 	bne.w	405e40 <_dtoa_r+0xd80>
  405994:	454d      	cmp	r5, r9
  405996:	f000 80f9 	beq.w	405b8c <_dtoa_r+0xacc>
  40599a:	4650      	mov	r0, sl
  40599c:	4659      	mov	r1, fp
  40599e:	2200      	movs	r2, #0
  4059a0:	4b64      	ldr	r3, [pc, #400]	; (405b34 <_dtoa_r+0xa74>)
  4059a2:	f001 ff1b 	bl	4077dc <__aeabi_dmul>
  4059a6:	2200      	movs	r2, #0
  4059a8:	4b62      	ldr	r3, [pc, #392]	; (405b34 <_dtoa_r+0xa74>)
  4059aa:	4682      	mov	sl, r0
  4059ac:	468b      	mov	fp, r1
  4059ae:	4630      	mov	r0, r6
  4059b0:	4639      	mov	r1, r7
  4059b2:	f001 ff13 	bl	4077dc <__aeabi_dmul>
  4059b6:	460f      	mov	r7, r1
  4059b8:	4606      	mov	r6, r0
  4059ba:	f002 f9bf 	bl	407d3c <__aeabi_d2iz>
  4059be:	4680      	mov	r8, r0
  4059c0:	f001 fea6 	bl	407710 <__aeabi_i2d>
  4059c4:	4602      	mov	r2, r0
  4059c6:	460b      	mov	r3, r1
  4059c8:	4630      	mov	r0, r6
  4059ca:	4639      	mov	r1, r7
  4059cc:	f001 fd52 	bl	407474 <__aeabi_dsub>
  4059d0:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4059d4:	fa5f f888 	uxtb.w	r8, r8
  4059d8:	f805 8b01 	strb.w	r8, [r5], #1
  4059dc:	4652      	mov	r2, sl
  4059de:	465b      	mov	r3, fp
  4059e0:	4606      	mov	r6, r0
  4059e2:	460f      	mov	r7, r1
  4059e4:	f002 f96c 	bl	407cc0 <__aeabi_dcmplt>
  4059e8:	2800      	cmp	r0, #0
  4059ea:	d0c6      	beq.n	40597a <_dtoa_r+0x8ba>
  4059ec:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4059f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4059f2:	9302      	str	r3, [sp, #8]
  4059f4:	e523      	b.n	40543e <_dtoa_r+0x37e>
  4059f6:	2300      	movs	r3, #0
  4059f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4059fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4059fc:	2b00      	cmp	r3, #0
  4059fe:	f340 80dd 	ble.w	405bbc <_dtoa_r+0xafc>
  405a02:	461f      	mov	r7, r3
  405a04:	461e      	mov	r6, r3
  405a06:	930f      	str	r3, [sp, #60]	; 0x3c
  405a08:	9307      	str	r3, [sp, #28]
  405a0a:	e6f6      	b.n	4057fa <_dtoa_r+0x73a>
  405a0c:	2301      	movs	r3, #1
  405a0e:	930b      	str	r3, [sp, #44]	; 0x2c
  405a10:	e7f3      	b.n	4059fa <_dtoa_r+0x93a>
  405a12:	f1ba 0f00 	cmp.w	sl, #0
  405a16:	f47f ada7 	bne.w	405568 <_dtoa_r+0x4a8>
  405a1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405a1e:	2b00      	cmp	r3, #0
  405a20:	f47f adbc 	bne.w	40559c <_dtoa_r+0x4dc>
  405a24:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405a28:	0d3f      	lsrs	r7, r7, #20
  405a2a:	053f      	lsls	r7, r7, #20
  405a2c:	2f00      	cmp	r7, #0
  405a2e:	f000 820d 	beq.w	405e4c <_dtoa_r+0xd8c>
  405a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a34:	3301      	adds	r3, #1
  405a36:	930a      	str	r3, [sp, #40]	; 0x28
  405a38:	9b08      	ldr	r3, [sp, #32]
  405a3a:	3301      	adds	r3, #1
  405a3c:	9308      	str	r3, [sp, #32]
  405a3e:	2301      	movs	r3, #1
  405a40:	930c      	str	r3, [sp, #48]	; 0x30
  405a42:	e5ad      	b.n	4055a0 <_dtoa_r+0x4e0>
  405a44:	9b07      	ldr	r3, [sp, #28]
  405a46:	2b00      	cmp	r3, #0
  405a48:	f73f ac48 	bgt.w	4052dc <_dtoa_r+0x21c>
  405a4c:	f040 8222 	bne.w	405e94 <_dtoa_r+0xdd4>
  405a50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405a54:	2200      	movs	r2, #0
  405a56:	4b38      	ldr	r3, [pc, #224]	; (405b38 <_dtoa_r+0xa78>)
  405a58:	f001 fec0 	bl	4077dc <__aeabi_dmul>
  405a5c:	4652      	mov	r2, sl
  405a5e:	465b      	mov	r3, fp
  405a60:	f002 f942 	bl	407ce8 <__aeabi_dcmpge>
  405a64:	f8dd 801c 	ldr.w	r8, [sp, #28]
  405a68:	4646      	mov	r6, r8
  405a6a:	2800      	cmp	r0, #0
  405a6c:	d041      	beq.n	405af2 <_dtoa_r+0xa32>
  405a6e:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405a70:	9d04      	ldr	r5, [sp, #16]
  405a72:	43db      	mvns	r3, r3
  405a74:	9302      	str	r3, [sp, #8]
  405a76:	4641      	mov	r1, r8
  405a78:	4620      	mov	r0, r4
  405a7a:	f000 ff3d 	bl	4068f8 <_Bfree>
  405a7e:	2e00      	cmp	r6, #0
  405a80:	f43f acdd 	beq.w	40543e <_dtoa_r+0x37e>
  405a84:	e6a7      	b.n	4057d6 <_dtoa_r+0x716>
  405a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405a88:	4649      	mov	r1, r9
  405a8a:	4620      	mov	r0, r4
  405a8c:	f001 f86c 	bl	406b68 <__pow5mult>
  405a90:	4681      	mov	r9, r0
  405a92:	e557      	b.n	405544 <_dtoa_r+0x484>
  405a94:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405a96:	2a00      	cmp	r2, #0
  405a98:	f000 8188 	beq.w	405dac <_dtoa_r+0xcec>
  405a9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405aa0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405aa2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405aa4:	e4f2      	b.n	40548c <_dtoa_r+0x3cc>
  405aa6:	f1ba 0f00 	cmp.w	sl, #0
  405aaa:	f47f ad77 	bne.w	40559c <_dtoa_r+0x4dc>
  405aae:	e7b4      	b.n	405a1a <_dtoa_r+0x95a>
  405ab0:	f000 ff2c 	bl	40690c <__multadd>
  405ab4:	4647      	mov	r7, r8
  405ab6:	4606      	mov	r6, r0
  405ab8:	4683      	mov	fp, r0
  405aba:	e5c0      	b.n	40563e <_dtoa_r+0x57e>
  405abc:	4601      	mov	r1, r0
  405abe:	4620      	mov	r0, r4
  405ac0:	9308      	str	r3, [sp, #32]
  405ac2:	f000 ff19 	bl	4068f8 <_Bfree>
  405ac6:	2201      	movs	r2, #1
  405ac8:	9b08      	ldr	r3, [sp, #32]
  405aca:	e5e2      	b.n	405692 <_dtoa_r+0x5d2>
  405acc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405ace:	2b02      	cmp	r3, #2
  405ad0:	f77f ad98 	ble.w	405604 <_dtoa_r+0x544>
  405ad4:	9b07      	ldr	r3, [sp, #28]
  405ad6:	2b00      	cmp	r3, #0
  405ad8:	d1c9      	bne.n	405a6e <_dtoa_r+0x9ae>
  405ada:	4641      	mov	r1, r8
  405adc:	2205      	movs	r2, #5
  405ade:	4620      	mov	r0, r4
  405ae0:	f000 ff14 	bl	40690c <__multadd>
  405ae4:	4601      	mov	r1, r0
  405ae6:	4680      	mov	r8, r0
  405ae8:	4648      	mov	r0, r9
  405aea:	f001 f8dd 	bl	406ca8 <__mcmp>
  405aee:	2800      	cmp	r0, #0
  405af0:	ddbd      	ble.n	405a6e <_dtoa_r+0x9ae>
  405af2:	2331      	movs	r3, #49	; 0x31
  405af4:	9a02      	ldr	r2, [sp, #8]
  405af6:	9904      	ldr	r1, [sp, #16]
  405af8:	3201      	adds	r2, #1
  405afa:	9202      	str	r2, [sp, #8]
  405afc:	700b      	strb	r3, [r1, #0]
  405afe:	1c4d      	adds	r5, r1, #1
  405b00:	e7b9      	b.n	405a76 <_dtoa_r+0x9b6>
  405b02:	2331      	movs	r3, #49	; 0x31
  405b04:	9a02      	ldr	r2, [sp, #8]
  405b06:	3201      	adds	r2, #1
  405b08:	9202      	str	r2, [sp, #8]
  405b0a:	9a04      	ldr	r2, [sp, #16]
  405b0c:	7013      	strb	r3, [r2, #0]
  405b0e:	e652      	b.n	4057b6 <_dtoa_r+0x6f6>
  405b10:	2301      	movs	r3, #1
  405b12:	930b      	str	r3, [sp, #44]	; 0x2c
  405b14:	e666      	b.n	4057e4 <_dtoa_r+0x724>
  405b16:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  405b1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405b1c:	e48f      	b.n	40543e <_dtoa_r+0x37e>
  405b1e:	bf00      	nop
  405b20:	004082c8 	.word	0x004082c8
  405b24:	004082a0 	.word	0x004082a0
  405b28:	3ff00000 	.word	0x3ff00000
  405b2c:	401c0000 	.word	0x401c0000
  405b30:	3fe00000 	.word	0x3fe00000
  405b34:	40240000 	.word	0x40240000
  405b38:	40140000 	.word	0x40140000
  405b3c:	4650      	mov	r0, sl
  405b3e:	f001 fde7 	bl	407710 <__aeabi_i2d>
  405b42:	463a      	mov	r2, r7
  405b44:	4643      	mov	r3, r8
  405b46:	f001 fe49 	bl	4077dc <__aeabi_dmul>
  405b4a:	2200      	movs	r2, #0
  405b4c:	4bc1      	ldr	r3, [pc, #772]	; (405e54 <_dtoa_r+0xd94>)
  405b4e:	f001 fc93 	bl	407478 <__adddf3>
  405b52:	4605      	mov	r5, r0
  405b54:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405b58:	4641      	mov	r1, r8
  405b5a:	2200      	movs	r2, #0
  405b5c:	4bbe      	ldr	r3, [pc, #760]	; (405e58 <_dtoa_r+0xd98>)
  405b5e:	4638      	mov	r0, r7
  405b60:	f001 fc88 	bl	407474 <__aeabi_dsub>
  405b64:	462a      	mov	r2, r5
  405b66:	4633      	mov	r3, r6
  405b68:	4682      	mov	sl, r0
  405b6a:	468b      	mov	fp, r1
  405b6c:	f002 f8c6 	bl	407cfc <__aeabi_dcmpgt>
  405b70:	4680      	mov	r8, r0
  405b72:	2800      	cmp	r0, #0
  405b74:	f040 8110 	bne.w	405d98 <_dtoa_r+0xcd8>
  405b78:	462a      	mov	r2, r5
  405b7a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405b7e:	4650      	mov	r0, sl
  405b80:	4659      	mov	r1, fp
  405b82:	f002 f89d 	bl	407cc0 <__aeabi_dcmplt>
  405b86:	b118      	cbz	r0, 405b90 <_dtoa_r+0xad0>
  405b88:	4646      	mov	r6, r8
  405b8a:	e770      	b.n	405a6e <_dtoa_r+0x9ae>
  405b8c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405b90:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405b94:	f7ff bb8f 	b.w	4052b6 <_dtoa_r+0x1f6>
  405b98:	9804      	ldr	r0, [sp, #16]
  405b9a:	f7ff bac0 	b.w	40511e <_dtoa_r+0x5e>
  405b9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405ba2:	1afb      	subs	r3, r7, r3
  405ba4:	441a      	add	r2, r3
  405ba6:	970c      	str	r7, [sp, #48]	; 0x30
  405ba8:	920d      	str	r2, [sp, #52]	; 0x34
  405baa:	2700      	movs	r7, #0
  405bac:	e468      	b.n	405480 <_dtoa_r+0x3c0>
  405bae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405bb2:	f04f 0a02 	mov.w	sl, #2
  405bb6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405bba:	e656      	b.n	40586a <_dtoa_r+0x7aa>
  405bbc:	2100      	movs	r1, #0
  405bbe:	2301      	movs	r3, #1
  405bc0:	4620      	mov	r0, r4
  405bc2:	6461      	str	r1, [r4, #68]	; 0x44
  405bc4:	9325      	str	r3, [sp, #148]	; 0x94
  405bc6:	f000 fe71 	bl	4068ac <_Balloc>
  405bca:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405bcc:	9004      	str	r0, [sp, #16]
  405bce:	9307      	str	r3, [sp, #28]
  405bd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405bd2:	6420      	str	r0, [r4, #64]	; 0x40
  405bd4:	930f      	str	r3, [sp, #60]	; 0x3c
  405bd6:	e627      	b.n	405828 <_dtoa_r+0x768>
  405bd8:	2a00      	cmp	r2, #0
  405bda:	46d0      	mov	r8, sl
  405bdc:	f8cd b020 	str.w	fp, [sp, #32]
  405be0:	469a      	mov	sl, r3
  405be2:	dd11      	ble.n	405c08 <_dtoa_r+0xb48>
  405be4:	4649      	mov	r1, r9
  405be6:	2201      	movs	r2, #1
  405be8:	4620      	mov	r0, r4
  405bea:	f001 f80d 	bl	406c08 <__lshift>
  405bee:	4641      	mov	r1, r8
  405bf0:	4681      	mov	r9, r0
  405bf2:	f001 f859 	bl	406ca8 <__mcmp>
  405bf6:	2800      	cmp	r0, #0
  405bf8:	f340 8145 	ble.w	405e86 <_dtoa_r+0xdc6>
  405bfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405c00:	f000 8105 	beq.w	405e0e <_dtoa_r+0xd4e>
  405c04:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405c08:	46b3      	mov	fp, r6
  405c0a:	f887 a000 	strb.w	sl, [r7]
  405c0e:	1c7d      	adds	r5, r7, #1
  405c10:	9e08      	ldr	r6, [sp, #32]
  405c12:	e5d0      	b.n	4057b6 <_dtoa_r+0x6f6>
  405c14:	d104      	bne.n	405c20 <_dtoa_r+0xb60>
  405c16:	f01a 0f01 	tst.w	sl, #1
  405c1a:	d001      	beq.n	405c20 <_dtoa_r+0xb60>
  405c1c:	e5bb      	b.n	405796 <_dtoa_r+0x6d6>
  405c1e:	4615      	mov	r5, r2
  405c20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405c24:	1e6a      	subs	r2, r5, #1
  405c26:	2b30      	cmp	r3, #48	; 0x30
  405c28:	d0f9      	beq.n	405c1e <_dtoa_r+0xb5e>
  405c2a:	e5c4      	b.n	4057b6 <_dtoa_r+0x6f6>
  405c2c:	2230      	movs	r2, #48	; 0x30
  405c2e:	9904      	ldr	r1, [sp, #16]
  405c30:	700a      	strb	r2, [r1, #0]
  405c32:	9a02      	ldr	r2, [sp, #8]
  405c34:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405c38:	3201      	adds	r2, #1
  405c3a:	9202      	str	r2, [sp, #8]
  405c3c:	f7ff bbfb 	b.w	405436 <_dtoa_r+0x376>
  405c40:	f000 80bb 	beq.w	405dba <_dtoa_r+0xcfa>
  405c44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405c48:	9b02      	ldr	r3, [sp, #8]
  405c4a:	f04f 0a02 	mov.w	sl, #2
  405c4e:	425d      	negs	r5, r3
  405c50:	4b82      	ldr	r3, [pc, #520]	; (405e5c <_dtoa_r+0xd9c>)
  405c52:	f005 020f 	and.w	r2, r5, #15
  405c56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c5e:	f001 fdbd 	bl	4077dc <__aeabi_dmul>
  405c62:	112d      	asrs	r5, r5, #4
  405c64:	4607      	mov	r7, r0
  405c66:	4688      	mov	r8, r1
  405c68:	f43f ae1a 	beq.w	4058a0 <_dtoa_r+0x7e0>
  405c6c:	4e7c      	ldr	r6, [pc, #496]	; (405e60 <_dtoa_r+0xda0>)
  405c6e:	07eb      	lsls	r3, r5, #31
  405c70:	d509      	bpl.n	405c86 <_dtoa_r+0xbc6>
  405c72:	e9d6 2300 	ldrd	r2, r3, [r6]
  405c76:	4638      	mov	r0, r7
  405c78:	4641      	mov	r1, r8
  405c7a:	f001 fdaf 	bl	4077dc <__aeabi_dmul>
  405c7e:	4607      	mov	r7, r0
  405c80:	4688      	mov	r8, r1
  405c82:	f10a 0a01 	add.w	sl, sl, #1
  405c86:	106d      	asrs	r5, r5, #1
  405c88:	f106 0608 	add.w	r6, r6, #8
  405c8c:	d1ef      	bne.n	405c6e <_dtoa_r+0xbae>
  405c8e:	e607      	b.n	4058a0 <_dtoa_r+0x7e0>
  405c90:	6871      	ldr	r1, [r6, #4]
  405c92:	4620      	mov	r0, r4
  405c94:	f000 fe0a 	bl	4068ac <_Balloc>
  405c98:	4605      	mov	r5, r0
  405c9a:	6933      	ldr	r3, [r6, #16]
  405c9c:	f106 010c 	add.w	r1, r6, #12
  405ca0:	3302      	adds	r3, #2
  405ca2:	009a      	lsls	r2, r3, #2
  405ca4:	300c      	adds	r0, #12
  405ca6:	f7fd fd23 	bl	4036f0 <memcpy>
  405caa:	4629      	mov	r1, r5
  405cac:	2201      	movs	r2, #1
  405cae:	4620      	mov	r0, r4
  405cb0:	f000 ffaa 	bl	406c08 <__lshift>
  405cb4:	9008      	str	r0, [sp, #32]
  405cb6:	e4b6      	b.n	405626 <_dtoa_r+0x566>
  405cb8:	2b39      	cmp	r3, #57	; 0x39
  405cba:	f8cd b020 	str.w	fp, [sp, #32]
  405cbe:	46d0      	mov	r8, sl
  405cc0:	f000 80a5 	beq.w	405e0e <_dtoa_r+0xd4e>
  405cc4:	f103 0a01 	add.w	sl, r3, #1
  405cc8:	46b3      	mov	fp, r6
  405cca:	f887 a000 	strb.w	sl, [r7]
  405cce:	1c7d      	adds	r5, r7, #1
  405cd0:	9e08      	ldr	r6, [sp, #32]
  405cd2:	e570      	b.n	4057b6 <_dtoa_r+0x6f6>
  405cd4:	465a      	mov	r2, fp
  405cd6:	46d0      	mov	r8, sl
  405cd8:	46b3      	mov	fp, r6
  405cda:	469a      	mov	sl, r3
  405cdc:	4616      	mov	r6, r2
  405cde:	e54e      	b.n	40577e <_dtoa_r+0x6be>
  405ce0:	9812      	ldr	r0, [sp, #72]	; 0x48
  405ce2:	495e      	ldr	r1, [pc, #376]	; (405e5c <_dtoa_r+0xd9c>)
  405ce4:	462a      	mov	r2, r5
  405ce6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  405cea:	4633      	mov	r3, r6
  405cec:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405cf0:	f001 fd74 	bl	4077dc <__aeabi_dmul>
  405cf4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405cf8:	4638      	mov	r0, r7
  405cfa:	4641      	mov	r1, r8
  405cfc:	f002 f81e 	bl	407d3c <__aeabi_d2iz>
  405d00:	4605      	mov	r5, r0
  405d02:	f001 fd05 	bl	407710 <__aeabi_i2d>
  405d06:	4602      	mov	r2, r0
  405d08:	460b      	mov	r3, r1
  405d0a:	4638      	mov	r0, r7
  405d0c:	4641      	mov	r1, r8
  405d0e:	f001 fbb1 	bl	407474 <__aeabi_dsub>
  405d12:	4606      	mov	r6, r0
  405d14:	9812      	ldr	r0, [sp, #72]	; 0x48
  405d16:	9a04      	ldr	r2, [sp, #16]
  405d18:	3530      	adds	r5, #48	; 0x30
  405d1a:	2801      	cmp	r0, #1
  405d1c:	7015      	strb	r5, [r2, #0]
  405d1e:	460f      	mov	r7, r1
  405d20:	f102 0501 	add.w	r5, r2, #1
  405d24:	d026      	beq.n	405d74 <_dtoa_r+0xcb4>
  405d26:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405d28:	9a04      	ldr	r2, [sp, #16]
  405d2a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405d2e:	4413      	add	r3, r2
  405d30:	f04f 0a00 	mov.w	sl, #0
  405d34:	4699      	mov	r9, r3
  405d36:	f8df b130 	ldr.w	fp, [pc, #304]	; 405e68 <_dtoa_r+0xda8>
  405d3a:	4652      	mov	r2, sl
  405d3c:	465b      	mov	r3, fp
  405d3e:	4630      	mov	r0, r6
  405d40:	4639      	mov	r1, r7
  405d42:	f001 fd4b 	bl	4077dc <__aeabi_dmul>
  405d46:	460f      	mov	r7, r1
  405d48:	4606      	mov	r6, r0
  405d4a:	f001 fff7 	bl	407d3c <__aeabi_d2iz>
  405d4e:	4680      	mov	r8, r0
  405d50:	f001 fcde 	bl	407710 <__aeabi_i2d>
  405d54:	4602      	mov	r2, r0
  405d56:	460b      	mov	r3, r1
  405d58:	4630      	mov	r0, r6
  405d5a:	4639      	mov	r1, r7
  405d5c:	f001 fb8a 	bl	407474 <__aeabi_dsub>
  405d60:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405d64:	f805 8b01 	strb.w	r8, [r5], #1
  405d68:	454d      	cmp	r5, r9
  405d6a:	4606      	mov	r6, r0
  405d6c:	460f      	mov	r7, r1
  405d6e:	d1e4      	bne.n	405d3a <_dtoa_r+0xc7a>
  405d70:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405d74:	2200      	movs	r2, #0
  405d76:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  405d7a:	4b3a      	ldr	r3, [pc, #232]	; (405e64 <_dtoa_r+0xda4>)
  405d7c:	f001 fb7c 	bl	407478 <__adddf3>
  405d80:	4632      	mov	r2, r6
  405d82:	463b      	mov	r3, r7
  405d84:	f001 ff9c 	bl	407cc0 <__aeabi_dcmplt>
  405d88:	2800      	cmp	r0, #0
  405d8a:	d046      	beq.n	405e1a <_dtoa_r+0xd5a>
  405d8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405d8e:	9302      	str	r3, [sp, #8]
  405d90:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405d94:	f7ff bb42 	b.w	40541c <_dtoa_r+0x35c>
  405d98:	f04f 0800 	mov.w	r8, #0
  405d9c:	4646      	mov	r6, r8
  405d9e:	e6a8      	b.n	405af2 <_dtoa_r+0xa32>
  405da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405da2:	9a07      	ldr	r2, [sp, #28]
  405da4:	1a9d      	subs	r5, r3, r2
  405da6:	2300      	movs	r3, #0
  405da8:	f7ff bb70 	b.w	40548c <_dtoa_r+0x3cc>
  405dac:	9b18      	ldr	r3, [sp, #96]	; 0x60
  405dae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405db0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405db4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405db6:	f7ff bb69 	b.w	40548c <_dtoa_r+0x3cc>
  405dba:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  405dbe:	f04f 0a02 	mov.w	sl, #2
  405dc2:	e56d      	b.n	4058a0 <_dtoa_r+0x7e0>
  405dc4:	9b07      	ldr	r3, [sp, #28]
  405dc6:	2b00      	cmp	r3, #0
  405dc8:	f43f aeb8 	beq.w	405b3c <_dtoa_r+0xa7c>
  405dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405dce:	2b00      	cmp	r3, #0
  405dd0:	f77f aede 	ble.w	405b90 <_dtoa_r+0xad0>
  405dd4:	2200      	movs	r2, #0
  405dd6:	4b24      	ldr	r3, [pc, #144]	; (405e68 <_dtoa_r+0xda8>)
  405dd8:	4638      	mov	r0, r7
  405dda:	4641      	mov	r1, r8
  405ddc:	f001 fcfe 	bl	4077dc <__aeabi_dmul>
  405de0:	4607      	mov	r7, r0
  405de2:	4688      	mov	r8, r1
  405de4:	f10a 0001 	add.w	r0, sl, #1
  405de8:	f001 fc92 	bl	407710 <__aeabi_i2d>
  405dec:	463a      	mov	r2, r7
  405dee:	4643      	mov	r3, r8
  405df0:	f001 fcf4 	bl	4077dc <__aeabi_dmul>
  405df4:	2200      	movs	r2, #0
  405df6:	4b17      	ldr	r3, [pc, #92]	; (405e54 <_dtoa_r+0xd94>)
  405df8:	f001 fb3e 	bl	407478 <__adddf3>
  405dfc:	9a02      	ldr	r2, [sp, #8]
  405dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405e00:	3a01      	subs	r2, #1
  405e02:	4605      	mov	r5, r0
  405e04:	9215      	str	r2, [sp, #84]	; 0x54
  405e06:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405e0a:	9312      	str	r3, [sp, #72]	; 0x48
  405e0c:	e569      	b.n	4058e2 <_dtoa_r+0x822>
  405e0e:	2239      	movs	r2, #57	; 0x39
  405e10:	46b3      	mov	fp, r6
  405e12:	703a      	strb	r2, [r7, #0]
  405e14:	9e08      	ldr	r6, [sp, #32]
  405e16:	1c7d      	adds	r5, r7, #1
  405e18:	e4bf      	b.n	40579a <_dtoa_r+0x6da>
  405e1a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  405e1e:	2000      	movs	r0, #0
  405e20:	4910      	ldr	r1, [pc, #64]	; (405e64 <_dtoa_r+0xda4>)
  405e22:	f001 fb27 	bl	407474 <__aeabi_dsub>
  405e26:	4632      	mov	r2, r6
  405e28:	463b      	mov	r3, r7
  405e2a:	f001 ff67 	bl	407cfc <__aeabi_dcmpgt>
  405e2e:	b908      	cbnz	r0, 405e34 <_dtoa_r+0xd74>
  405e30:	e6ae      	b.n	405b90 <_dtoa_r+0xad0>
  405e32:	4615      	mov	r5, r2
  405e34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405e38:	1e6a      	subs	r2, r5, #1
  405e3a:	2b30      	cmp	r3, #48	; 0x30
  405e3c:	d0f9      	beq.n	405e32 <_dtoa_r+0xd72>
  405e3e:	e5d7      	b.n	4059f0 <_dtoa_r+0x930>
  405e40:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405e44:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405e46:	9302      	str	r3, [sp, #8]
  405e48:	f7ff bae8 	b.w	40541c <_dtoa_r+0x35c>
  405e4c:	970c      	str	r7, [sp, #48]	; 0x30
  405e4e:	f7ff bba7 	b.w	4055a0 <_dtoa_r+0x4e0>
  405e52:	bf00      	nop
  405e54:	401c0000 	.word	0x401c0000
  405e58:	40140000 	.word	0x40140000
  405e5c:	004082c8 	.word	0x004082c8
  405e60:	004082a0 	.word	0x004082a0
  405e64:	3fe00000 	.word	0x3fe00000
  405e68:	40240000 	.word	0x40240000
  405e6c:	2b39      	cmp	r3, #57	; 0x39
  405e6e:	f8cd b020 	str.w	fp, [sp, #32]
  405e72:	46d0      	mov	r8, sl
  405e74:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405e78:	469a      	mov	sl, r3
  405e7a:	d0c8      	beq.n	405e0e <_dtoa_r+0xd4e>
  405e7c:	f1bb 0f00 	cmp.w	fp, #0
  405e80:	f73f aec0 	bgt.w	405c04 <_dtoa_r+0xb44>
  405e84:	e6c0      	b.n	405c08 <_dtoa_r+0xb48>
  405e86:	f47f aebf 	bne.w	405c08 <_dtoa_r+0xb48>
  405e8a:	f01a 0f01 	tst.w	sl, #1
  405e8e:	f43f aebb 	beq.w	405c08 <_dtoa_r+0xb48>
  405e92:	e6b3      	b.n	405bfc <_dtoa_r+0xb3c>
  405e94:	f04f 0800 	mov.w	r8, #0
  405e98:	4646      	mov	r6, r8
  405e9a:	e5e8      	b.n	405a6e <_dtoa_r+0x9ae>
  405e9c:	4631      	mov	r1, r6
  405e9e:	2300      	movs	r3, #0
  405ea0:	220a      	movs	r2, #10
  405ea2:	4620      	mov	r0, r4
  405ea4:	f000 fd32 	bl	40690c <__multadd>
  405ea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405eaa:	4606      	mov	r6, r0
  405eac:	2b00      	cmp	r3, #0
  405eae:	dd07      	ble.n	405ec0 <_dtoa_r+0xe00>
  405eb0:	9307      	str	r3, [sp, #28]
  405eb2:	f7ff bbab 	b.w	40560c <_dtoa_r+0x54c>
  405eb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405eb8:	2b02      	cmp	r3, #2
  405eba:	dc1f      	bgt.n	405efc <_dtoa_r+0xe3c>
  405ebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405ebe:	e43c      	b.n	40573a <_dtoa_r+0x67a>
  405ec0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405ec2:	2b02      	cmp	r3, #2
  405ec4:	dc1a      	bgt.n	405efc <_dtoa_r+0xe3c>
  405ec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405ec8:	e7f2      	b.n	405eb0 <_dtoa_r+0xdf0>
  405eca:	f43f ab81 	beq.w	4055d0 <_dtoa_r+0x510>
  405ece:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405ed2:	e411      	b.n	4056f8 <_dtoa_r+0x638>
  405ed4:	2500      	movs	r5, #0
  405ed6:	4620      	mov	r0, r4
  405ed8:	6465      	str	r5, [r4, #68]	; 0x44
  405eda:	4629      	mov	r1, r5
  405edc:	f000 fce6 	bl	4068ac <_Balloc>
  405ee0:	f04f 33ff 	mov.w	r3, #4294967295
  405ee4:	9307      	str	r3, [sp, #28]
  405ee6:	930f      	str	r3, [sp, #60]	; 0x3c
  405ee8:	2301      	movs	r3, #1
  405eea:	9004      	str	r0, [sp, #16]
  405eec:	9525      	str	r5, [sp, #148]	; 0x94
  405eee:	6420      	str	r0, [r4, #64]	; 0x40
  405ef0:	930b      	str	r3, [sp, #44]	; 0x2c
  405ef2:	f7ff b9e0 	b.w	4052b6 <_dtoa_r+0x1f6>
  405ef6:	2501      	movs	r5, #1
  405ef8:	f7ff b9a8 	b.w	40524c <_dtoa_r+0x18c>
  405efc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405efe:	9307      	str	r3, [sp, #28]
  405f00:	e5e8      	b.n	405ad4 <_dtoa_r+0xa14>
  405f02:	bf00      	nop

00405f04 <__libc_fini_array>:
  405f04:	b538      	push	{r3, r4, r5, lr}
  405f06:	4c0a      	ldr	r4, [pc, #40]	; (405f30 <__libc_fini_array+0x2c>)
  405f08:	4d0a      	ldr	r5, [pc, #40]	; (405f34 <__libc_fini_array+0x30>)
  405f0a:	1b64      	subs	r4, r4, r5
  405f0c:	10a4      	asrs	r4, r4, #2
  405f0e:	d00a      	beq.n	405f26 <__libc_fini_array+0x22>
  405f10:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405f14:	3b01      	subs	r3, #1
  405f16:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405f1a:	3c01      	subs	r4, #1
  405f1c:	f855 3904 	ldr.w	r3, [r5], #-4
  405f20:	4798      	blx	r3
  405f22:	2c00      	cmp	r4, #0
  405f24:	d1f9      	bne.n	405f1a <__libc_fini_array+0x16>
  405f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405f2a:	f002 bac3 	b.w	4084b4 <_fini>
  405f2e:	bf00      	nop
  405f30:	004084c4 	.word	0x004084c4
  405f34:	004084c0 	.word	0x004084c0

00405f38 <_malloc_trim_r>:
  405f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405f3a:	460c      	mov	r4, r1
  405f3c:	4f23      	ldr	r7, [pc, #140]	; (405fcc <_malloc_trim_r+0x94>)
  405f3e:	4606      	mov	r6, r0
  405f40:	f000 fca8 	bl	406894 <__malloc_lock>
  405f44:	68bb      	ldr	r3, [r7, #8]
  405f46:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405f4a:	685d      	ldr	r5, [r3, #4]
  405f4c:	310f      	adds	r1, #15
  405f4e:	f025 0503 	bic.w	r5, r5, #3
  405f52:	4429      	add	r1, r5
  405f54:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405f58:	f021 010f 	bic.w	r1, r1, #15
  405f5c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405f60:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405f64:	db07      	blt.n	405f76 <_malloc_trim_r+0x3e>
  405f66:	2100      	movs	r1, #0
  405f68:	4630      	mov	r0, r6
  405f6a:	f001 f951 	bl	407210 <_sbrk_r>
  405f6e:	68bb      	ldr	r3, [r7, #8]
  405f70:	442b      	add	r3, r5
  405f72:	4298      	cmp	r0, r3
  405f74:	d004      	beq.n	405f80 <_malloc_trim_r+0x48>
  405f76:	4630      	mov	r0, r6
  405f78:	f000 fc92 	bl	4068a0 <__malloc_unlock>
  405f7c:	2000      	movs	r0, #0
  405f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405f80:	4261      	negs	r1, r4
  405f82:	4630      	mov	r0, r6
  405f84:	f001 f944 	bl	407210 <_sbrk_r>
  405f88:	3001      	adds	r0, #1
  405f8a:	d00d      	beq.n	405fa8 <_malloc_trim_r+0x70>
  405f8c:	4b10      	ldr	r3, [pc, #64]	; (405fd0 <_malloc_trim_r+0x98>)
  405f8e:	68ba      	ldr	r2, [r7, #8]
  405f90:	6819      	ldr	r1, [r3, #0]
  405f92:	1b2d      	subs	r5, r5, r4
  405f94:	f045 0501 	orr.w	r5, r5, #1
  405f98:	4630      	mov	r0, r6
  405f9a:	1b09      	subs	r1, r1, r4
  405f9c:	6055      	str	r5, [r2, #4]
  405f9e:	6019      	str	r1, [r3, #0]
  405fa0:	f000 fc7e 	bl	4068a0 <__malloc_unlock>
  405fa4:	2001      	movs	r0, #1
  405fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405fa8:	2100      	movs	r1, #0
  405faa:	4630      	mov	r0, r6
  405fac:	f001 f930 	bl	407210 <_sbrk_r>
  405fb0:	68ba      	ldr	r2, [r7, #8]
  405fb2:	1a83      	subs	r3, r0, r2
  405fb4:	2b0f      	cmp	r3, #15
  405fb6:	ddde      	ble.n	405f76 <_malloc_trim_r+0x3e>
  405fb8:	4c06      	ldr	r4, [pc, #24]	; (405fd4 <_malloc_trim_r+0x9c>)
  405fba:	4905      	ldr	r1, [pc, #20]	; (405fd0 <_malloc_trim_r+0x98>)
  405fbc:	6824      	ldr	r4, [r4, #0]
  405fbe:	f043 0301 	orr.w	r3, r3, #1
  405fc2:	1b00      	subs	r0, r0, r4
  405fc4:	6053      	str	r3, [r2, #4]
  405fc6:	6008      	str	r0, [r1, #0]
  405fc8:	e7d5      	b.n	405f76 <_malloc_trim_r+0x3e>
  405fca:	bf00      	nop
  405fcc:	200007a8 	.word	0x200007a8
  405fd0:	20000df8 	.word	0x20000df8
  405fd4:	20000bb0 	.word	0x20000bb0

00405fd8 <_free_r>:
  405fd8:	2900      	cmp	r1, #0
  405fda:	d044      	beq.n	406066 <_free_r+0x8e>
  405fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405fe0:	460d      	mov	r5, r1
  405fe2:	4680      	mov	r8, r0
  405fe4:	f000 fc56 	bl	406894 <__malloc_lock>
  405fe8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405fec:	4969      	ldr	r1, [pc, #420]	; (406194 <_free_r+0x1bc>)
  405fee:	f1a5 0408 	sub.w	r4, r5, #8
  405ff2:	f027 0301 	bic.w	r3, r7, #1
  405ff6:	18e2      	adds	r2, r4, r3
  405ff8:	688e      	ldr	r6, [r1, #8]
  405ffa:	6850      	ldr	r0, [r2, #4]
  405ffc:	42b2      	cmp	r2, r6
  405ffe:	f020 0003 	bic.w	r0, r0, #3
  406002:	d05e      	beq.n	4060c2 <_free_r+0xea>
  406004:	07fe      	lsls	r6, r7, #31
  406006:	6050      	str	r0, [r2, #4]
  406008:	d40b      	bmi.n	406022 <_free_r+0x4a>
  40600a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40600e:	f101 0e08 	add.w	lr, r1, #8
  406012:	1be4      	subs	r4, r4, r7
  406014:	68a5      	ldr	r5, [r4, #8]
  406016:	443b      	add	r3, r7
  406018:	4575      	cmp	r5, lr
  40601a:	d06d      	beq.n	4060f8 <_free_r+0x120>
  40601c:	68e7      	ldr	r7, [r4, #12]
  40601e:	60ef      	str	r7, [r5, #12]
  406020:	60bd      	str	r5, [r7, #8]
  406022:	1815      	adds	r5, r2, r0
  406024:	686d      	ldr	r5, [r5, #4]
  406026:	07ed      	lsls	r5, r5, #31
  406028:	d53e      	bpl.n	4060a8 <_free_r+0xd0>
  40602a:	f043 0201 	orr.w	r2, r3, #1
  40602e:	6062      	str	r2, [r4, #4]
  406030:	50e3      	str	r3, [r4, r3]
  406032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406036:	d217      	bcs.n	406068 <_free_r+0x90>
  406038:	2201      	movs	r2, #1
  40603a:	08db      	lsrs	r3, r3, #3
  40603c:	1098      	asrs	r0, r3, #2
  40603e:	684d      	ldr	r5, [r1, #4]
  406040:	4413      	add	r3, r2
  406042:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
  406046:	4082      	lsls	r2, r0
  406048:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
  40604c:	432a      	orrs	r2, r5
  40604e:	3808      	subs	r0, #8
  406050:	60e0      	str	r0, [r4, #12]
  406052:	60a7      	str	r7, [r4, #8]
  406054:	604a      	str	r2, [r1, #4]
  406056:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
  40605a:	60fc      	str	r4, [r7, #12]
  40605c:	4640      	mov	r0, r8
  40605e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406062:	f000 bc1d 	b.w	4068a0 <__malloc_unlock>
  406066:	4770      	bx	lr
  406068:	0a5a      	lsrs	r2, r3, #9
  40606a:	2a04      	cmp	r2, #4
  40606c:	d852      	bhi.n	406114 <_free_r+0x13c>
  40606e:	099a      	lsrs	r2, r3, #6
  406070:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406074:	00ff      	lsls	r7, r7, #3
  406076:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40607a:	19c8      	adds	r0, r1, r7
  40607c:	59ca      	ldr	r2, [r1, r7]
  40607e:	3808      	subs	r0, #8
  406080:	4290      	cmp	r0, r2
  406082:	d04f      	beq.n	406124 <_free_r+0x14c>
  406084:	6851      	ldr	r1, [r2, #4]
  406086:	f021 0103 	bic.w	r1, r1, #3
  40608a:	428b      	cmp	r3, r1
  40608c:	d232      	bcs.n	4060f4 <_free_r+0x11c>
  40608e:	6892      	ldr	r2, [r2, #8]
  406090:	4290      	cmp	r0, r2
  406092:	d1f7      	bne.n	406084 <_free_r+0xac>
  406094:	68c3      	ldr	r3, [r0, #12]
  406096:	60a0      	str	r0, [r4, #8]
  406098:	60e3      	str	r3, [r4, #12]
  40609a:	609c      	str	r4, [r3, #8]
  40609c:	60c4      	str	r4, [r0, #12]
  40609e:	4640      	mov	r0, r8
  4060a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4060a4:	f000 bbfc 	b.w	4068a0 <__malloc_unlock>
  4060a8:	6895      	ldr	r5, [r2, #8]
  4060aa:	4f3b      	ldr	r7, [pc, #236]	; (406198 <_free_r+0x1c0>)
  4060ac:	4403      	add	r3, r0
  4060ae:	42bd      	cmp	r5, r7
  4060b0:	d040      	beq.n	406134 <_free_r+0x15c>
  4060b2:	68d0      	ldr	r0, [r2, #12]
  4060b4:	f043 0201 	orr.w	r2, r3, #1
  4060b8:	60e8      	str	r0, [r5, #12]
  4060ba:	6085      	str	r5, [r0, #8]
  4060bc:	6062      	str	r2, [r4, #4]
  4060be:	50e3      	str	r3, [r4, r3]
  4060c0:	e7b7      	b.n	406032 <_free_r+0x5a>
  4060c2:	07ff      	lsls	r7, r7, #31
  4060c4:	4403      	add	r3, r0
  4060c6:	d407      	bmi.n	4060d8 <_free_r+0x100>
  4060c8:	f855 5c08 	ldr.w	r5, [r5, #-8]
  4060cc:	1b64      	subs	r4, r4, r5
  4060ce:	68e2      	ldr	r2, [r4, #12]
  4060d0:	68a0      	ldr	r0, [r4, #8]
  4060d2:	442b      	add	r3, r5
  4060d4:	60c2      	str	r2, [r0, #12]
  4060d6:	6090      	str	r0, [r2, #8]
  4060d8:	4a30      	ldr	r2, [pc, #192]	; (40619c <_free_r+0x1c4>)
  4060da:	f043 0001 	orr.w	r0, r3, #1
  4060de:	6812      	ldr	r2, [r2, #0]
  4060e0:	6060      	str	r0, [r4, #4]
  4060e2:	4293      	cmp	r3, r2
  4060e4:	608c      	str	r4, [r1, #8]
  4060e6:	d3b9      	bcc.n	40605c <_free_r+0x84>
  4060e8:	4b2d      	ldr	r3, [pc, #180]	; (4061a0 <_free_r+0x1c8>)
  4060ea:	4640      	mov	r0, r8
  4060ec:	6819      	ldr	r1, [r3, #0]
  4060ee:	f7ff ff23 	bl	405f38 <_malloc_trim_r>
  4060f2:	e7b3      	b.n	40605c <_free_r+0x84>
  4060f4:	4610      	mov	r0, r2
  4060f6:	e7cd      	b.n	406094 <_free_r+0xbc>
  4060f8:	1811      	adds	r1, r2, r0
  4060fa:	6849      	ldr	r1, [r1, #4]
  4060fc:	07c9      	lsls	r1, r1, #31
  4060fe:	d444      	bmi.n	40618a <_free_r+0x1b2>
  406100:	6891      	ldr	r1, [r2, #8]
  406102:	4403      	add	r3, r0
  406104:	68d2      	ldr	r2, [r2, #12]
  406106:	f043 0001 	orr.w	r0, r3, #1
  40610a:	60ca      	str	r2, [r1, #12]
  40610c:	6091      	str	r1, [r2, #8]
  40610e:	6060      	str	r0, [r4, #4]
  406110:	50e3      	str	r3, [r4, r3]
  406112:	e7a3      	b.n	40605c <_free_r+0x84>
  406114:	2a14      	cmp	r2, #20
  406116:	d816      	bhi.n	406146 <_free_r+0x16e>
  406118:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40611c:	00ff      	lsls	r7, r7, #3
  40611e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406122:	e7aa      	b.n	40607a <_free_r+0xa2>
  406124:	2301      	movs	r3, #1
  406126:	10aa      	asrs	r2, r5, #2
  406128:	684d      	ldr	r5, [r1, #4]
  40612a:	4093      	lsls	r3, r2
  40612c:	432b      	orrs	r3, r5
  40612e:	604b      	str	r3, [r1, #4]
  406130:	4603      	mov	r3, r0
  406132:	e7b0      	b.n	406096 <_free_r+0xbe>
  406134:	f043 0201 	orr.w	r2, r3, #1
  406138:	614c      	str	r4, [r1, #20]
  40613a:	610c      	str	r4, [r1, #16]
  40613c:	60e5      	str	r5, [r4, #12]
  40613e:	60a5      	str	r5, [r4, #8]
  406140:	6062      	str	r2, [r4, #4]
  406142:	50e3      	str	r3, [r4, r3]
  406144:	e78a      	b.n	40605c <_free_r+0x84>
  406146:	2a54      	cmp	r2, #84	; 0x54
  406148:	d806      	bhi.n	406158 <_free_r+0x180>
  40614a:	0b1a      	lsrs	r2, r3, #12
  40614c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406150:	00ff      	lsls	r7, r7, #3
  406152:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406156:	e790      	b.n	40607a <_free_r+0xa2>
  406158:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40615c:	d806      	bhi.n	40616c <_free_r+0x194>
  40615e:	0bda      	lsrs	r2, r3, #15
  406160:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406164:	00ff      	lsls	r7, r7, #3
  406166:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40616a:	e786      	b.n	40607a <_free_r+0xa2>
  40616c:	f240 5054 	movw	r0, #1364	; 0x554
  406170:	4282      	cmp	r2, r0
  406172:	d806      	bhi.n	406182 <_free_r+0x1aa>
  406174:	0c9a      	lsrs	r2, r3, #18
  406176:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40617a:	00ff      	lsls	r7, r7, #3
  40617c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406180:	e77b      	b.n	40607a <_free_r+0xa2>
  406182:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406186:	257e      	movs	r5, #126	; 0x7e
  406188:	e777      	b.n	40607a <_free_r+0xa2>
  40618a:	f043 0101 	orr.w	r1, r3, #1
  40618e:	6061      	str	r1, [r4, #4]
  406190:	6013      	str	r3, [r2, #0]
  406192:	e763      	b.n	40605c <_free_r+0x84>
  406194:	200007a8 	.word	0x200007a8
  406198:	200007b0 	.word	0x200007b0
  40619c:	20000bb4 	.word	0x20000bb4
  4061a0:	20000e28 	.word	0x20000e28

004061a4 <__locale_ctype_ptr_l>:
  4061a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  4061a8:	4770      	bx	lr
  4061aa:	bf00      	nop

004061ac <_localeconv_r>:
  4061ac:	4a04      	ldr	r2, [pc, #16]	; (4061c0 <_localeconv_r+0x14>)
  4061ae:	4b05      	ldr	r3, [pc, #20]	; (4061c4 <_localeconv_r+0x18>)
  4061b0:	6812      	ldr	r2, [r2, #0]
  4061b2:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4061b4:	2800      	cmp	r0, #0
  4061b6:	bf08      	it	eq
  4061b8:	4618      	moveq	r0, r3
  4061ba:	30f0      	adds	r0, #240	; 0xf0
  4061bc:	4770      	bx	lr
  4061be:	bf00      	nop
  4061c0:	20000208 	.word	0x20000208
  4061c4:	2000063c 	.word	0x2000063c

004061c8 <__retarget_lock_acquire_recursive>:
  4061c8:	4770      	bx	lr
  4061ca:	bf00      	nop

004061cc <__retarget_lock_release_recursive>:
  4061cc:	4770      	bx	lr
  4061ce:	bf00      	nop

004061d0 <_malloc_r>:
  4061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061d4:	f101 060b 	add.w	r6, r1, #11
  4061d8:	2e16      	cmp	r6, #22
  4061da:	b083      	sub	sp, #12
  4061dc:	4605      	mov	r5, r0
  4061de:	f240 809e 	bls.w	40631e <_malloc_r+0x14e>
  4061e2:	f036 0607 	bics.w	r6, r6, #7
  4061e6:	f100 80bd 	bmi.w	406364 <_malloc_r+0x194>
  4061ea:	42b1      	cmp	r1, r6
  4061ec:	f200 80ba 	bhi.w	406364 <_malloc_r+0x194>
  4061f0:	f000 fb50 	bl	406894 <__malloc_lock>
  4061f4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4061f8:	f0c0 8285 	bcc.w	406706 <_malloc_r+0x536>
  4061fc:	0a73      	lsrs	r3, r6, #9
  4061fe:	f000 80b8 	beq.w	406372 <_malloc_r+0x1a2>
  406202:	2b04      	cmp	r3, #4
  406204:	f200 816c 	bhi.w	4064e0 <_malloc_r+0x310>
  406208:	09b3      	lsrs	r3, r6, #6
  40620a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40620e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  406212:	00c1      	lsls	r1, r0, #3
  406214:	4fb8      	ldr	r7, [pc, #736]	; (4064f8 <_malloc_r+0x328>)
  406216:	4439      	add	r1, r7
  406218:	684c      	ldr	r4, [r1, #4]
  40621a:	3908      	subs	r1, #8
  40621c:	42a1      	cmp	r1, r4
  40621e:	d106      	bne.n	40622e <_malloc_r+0x5e>
  406220:	e00c      	b.n	40623c <_malloc_r+0x6c>
  406222:	2a00      	cmp	r2, #0
  406224:	f280 80ab 	bge.w	40637e <_malloc_r+0x1ae>
  406228:	68e4      	ldr	r4, [r4, #12]
  40622a:	42a1      	cmp	r1, r4
  40622c:	d006      	beq.n	40623c <_malloc_r+0x6c>
  40622e:	6863      	ldr	r3, [r4, #4]
  406230:	f023 0303 	bic.w	r3, r3, #3
  406234:	1b9a      	subs	r2, r3, r6
  406236:	2a0f      	cmp	r2, #15
  406238:	ddf3      	ble.n	406222 <_malloc_r+0x52>
  40623a:	4670      	mov	r0, lr
  40623c:	693c      	ldr	r4, [r7, #16]
  40623e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 40650c <_malloc_r+0x33c>
  406242:	4574      	cmp	r4, lr
  406244:	f000 819e 	beq.w	406584 <_malloc_r+0x3b4>
  406248:	6863      	ldr	r3, [r4, #4]
  40624a:	f023 0303 	bic.w	r3, r3, #3
  40624e:	1b9a      	subs	r2, r3, r6
  406250:	2a0f      	cmp	r2, #15
  406252:	f300 8183 	bgt.w	40655c <_malloc_r+0x38c>
  406256:	2a00      	cmp	r2, #0
  406258:	f8c7 e014 	str.w	lr, [r7, #20]
  40625c:	f8c7 e010 	str.w	lr, [r7, #16]
  406260:	f280 8091 	bge.w	406386 <_malloc_r+0x1b6>
  406264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406268:	f080 8154 	bcs.w	406514 <_malloc_r+0x344>
  40626c:	2201      	movs	r2, #1
  40626e:	08db      	lsrs	r3, r3, #3
  406270:	6879      	ldr	r1, [r7, #4]
  406272:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  406276:	4413      	add	r3, r2
  406278:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
  40627c:	fa02 f20c 	lsl.w	r2, r2, ip
  406280:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
  406284:	430a      	orrs	r2, r1
  406286:	f1ac 0108 	sub.w	r1, ip, #8
  40628a:	60e1      	str	r1, [r4, #12]
  40628c:	f8c4 8008 	str.w	r8, [r4, #8]
  406290:	607a      	str	r2, [r7, #4]
  406292:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  406296:	f8c8 400c 	str.w	r4, [r8, #12]
  40629a:	2401      	movs	r4, #1
  40629c:	1083      	asrs	r3, r0, #2
  40629e:	409c      	lsls	r4, r3
  4062a0:	4294      	cmp	r4, r2
  4062a2:	d87d      	bhi.n	4063a0 <_malloc_r+0x1d0>
  4062a4:	4214      	tst	r4, r2
  4062a6:	d106      	bne.n	4062b6 <_malloc_r+0xe6>
  4062a8:	f020 0003 	bic.w	r0, r0, #3
  4062ac:	0064      	lsls	r4, r4, #1
  4062ae:	4214      	tst	r4, r2
  4062b0:	f100 0004 	add.w	r0, r0, #4
  4062b4:	d0fa      	beq.n	4062ac <_malloc_r+0xdc>
  4062b6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4062ba:	46cc      	mov	ip, r9
  4062bc:	4680      	mov	r8, r0
  4062be:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4062c2:	459c      	cmp	ip, r3
  4062c4:	d107      	bne.n	4062d6 <_malloc_r+0x106>
  4062c6:	e15f      	b.n	406588 <_malloc_r+0x3b8>
  4062c8:	2a00      	cmp	r2, #0
  4062ca:	f280 816d 	bge.w	4065a8 <_malloc_r+0x3d8>
  4062ce:	68db      	ldr	r3, [r3, #12]
  4062d0:	459c      	cmp	ip, r3
  4062d2:	f000 8159 	beq.w	406588 <_malloc_r+0x3b8>
  4062d6:	6859      	ldr	r1, [r3, #4]
  4062d8:	f021 0103 	bic.w	r1, r1, #3
  4062dc:	1b8a      	subs	r2, r1, r6
  4062de:	2a0f      	cmp	r2, #15
  4062e0:	ddf2      	ble.n	4062c8 <_malloc_r+0xf8>
  4062e2:	68dc      	ldr	r4, [r3, #12]
  4062e4:	f8d3 c008 	ldr.w	ip, [r3, #8]
  4062e8:	f046 0801 	orr.w	r8, r6, #1
  4062ec:	4628      	mov	r0, r5
  4062ee:	441e      	add	r6, r3
  4062f0:	f042 0501 	orr.w	r5, r2, #1
  4062f4:	f8c3 8004 	str.w	r8, [r3, #4]
  4062f8:	f8cc 400c 	str.w	r4, [ip, #12]
  4062fc:	f8c4 c008 	str.w	ip, [r4, #8]
  406300:	617e      	str	r6, [r7, #20]
  406302:	613e      	str	r6, [r7, #16]
  406304:	f8c6 e00c 	str.w	lr, [r6, #12]
  406308:	f8c6 e008 	str.w	lr, [r6, #8]
  40630c:	6075      	str	r5, [r6, #4]
  40630e:	505a      	str	r2, [r3, r1]
  406310:	9300      	str	r3, [sp, #0]
  406312:	f000 fac5 	bl	4068a0 <__malloc_unlock>
  406316:	9b00      	ldr	r3, [sp, #0]
  406318:	f103 0408 	add.w	r4, r3, #8
  40631c:	e01e      	b.n	40635c <_malloc_r+0x18c>
  40631e:	2910      	cmp	r1, #16
  406320:	d820      	bhi.n	406364 <_malloc_r+0x194>
  406322:	f000 fab7 	bl	406894 <__malloc_lock>
  406326:	2610      	movs	r6, #16
  406328:	2318      	movs	r3, #24
  40632a:	2002      	movs	r0, #2
  40632c:	4f72      	ldr	r7, [pc, #456]	; (4064f8 <_malloc_r+0x328>)
  40632e:	443b      	add	r3, r7
  406330:	685c      	ldr	r4, [r3, #4]
  406332:	f1a3 0208 	sub.w	r2, r3, #8
  406336:	4294      	cmp	r4, r2
  406338:	f000 812f 	beq.w	40659a <_malloc_r+0x3ca>
  40633c:	6863      	ldr	r3, [r4, #4]
  40633e:	68e1      	ldr	r1, [r4, #12]
  406340:	f023 0303 	bic.w	r3, r3, #3
  406344:	4423      	add	r3, r4
  406346:	685a      	ldr	r2, [r3, #4]
  406348:	68a6      	ldr	r6, [r4, #8]
  40634a:	f042 0201 	orr.w	r2, r2, #1
  40634e:	60f1      	str	r1, [r6, #12]
  406350:	4628      	mov	r0, r5
  406352:	608e      	str	r6, [r1, #8]
  406354:	605a      	str	r2, [r3, #4]
  406356:	f000 faa3 	bl	4068a0 <__malloc_unlock>
  40635a:	3408      	adds	r4, #8
  40635c:	4620      	mov	r0, r4
  40635e:	b003      	add	sp, #12
  406360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406364:	2400      	movs	r4, #0
  406366:	230c      	movs	r3, #12
  406368:	4620      	mov	r0, r4
  40636a:	602b      	str	r3, [r5, #0]
  40636c:	b003      	add	sp, #12
  40636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406372:	2040      	movs	r0, #64	; 0x40
  406374:	f44f 7100 	mov.w	r1, #512	; 0x200
  406378:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40637c:	e74a      	b.n	406214 <_malloc_r+0x44>
  40637e:	4423      	add	r3, r4
  406380:	685a      	ldr	r2, [r3, #4]
  406382:	68e1      	ldr	r1, [r4, #12]
  406384:	e7e0      	b.n	406348 <_malloc_r+0x178>
  406386:	4423      	add	r3, r4
  406388:	685a      	ldr	r2, [r3, #4]
  40638a:	4628      	mov	r0, r5
  40638c:	f042 0201 	orr.w	r2, r2, #1
  406390:	605a      	str	r2, [r3, #4]
  406392:	3408      	adds	r4, #8
  406394:	f000 fa84 	bl	4068a0 <__malloc_unlock>
  406398:	4620      	mov	r0, r4
  40639a:	b003      	add	sp, #12
  40639c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063a0:	68bc      	ldr	r4, [r7, #8]
  4063a2:	6863      	ldr	r3, [r4, #4]
  4063a4:	f023 0803 	bic.w	r8, r3, #3
  4063a8:	45b0      	cmp	r8, r6
  4063aa:	d304      	bcc.n	4063b6 <_malloc_r+0x1e6>
  4063ac:	eba8 0306 	sub.w	r3, r8, r6
  4063b0:	2b0f      	cmp	r3, #15
  4063b2:	f300 8085 	bgt.w	4064c0 <_malloc_r+0x2f0>
  4063b6:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406510 <_malloc_r+0x340>
  4063ba:	4b50      	ldr	r3, [pc, #320]	; (4064fc <_malloc_r+0x32c>)
  4063bc:	f8d9 2000 	ldr.w	r2, [r9]
  4063c0:	681b      	ldr	r3, [r3, #0]
  4063c2:	3201      	adds	r2, #1
  4063c4:	4433      	add	r3, r6
  4063c6:	eb04 0a08 	add.w	sl, r4, r8
  4063ca:	f000 8154 	beq.w	406676 <_malloc_r+0x4a6>
  4063ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4063d2:	330f      	adds	r3, #15
  4063d4:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4063d8:	f02b 0b0f 	bic.w	fp, fp, #15
  4063dc:	4659      	mov	r1, fp
  4063de:	4628      	mov	r0, r5
  4063e0:	f000 ff16 	bl	407210 <_sbrk_r>
  4063e4:	1c41      	adds	r1, r0, #1
  4063e6:	4602      	mov	r2, r0
  4063e8:	f000 80fb 	beq.w	4065e2 <_malloc_r+0x412>
  4063ec:	4582      	cmp	sl, r0
  4063ee:	f200 80f6 	bhi.w	4065de <_malloc_r+0x40e>
  4063f2:	4b43      	ldr	r3, [pc, #268]	; (406500 <_malloc_r+0x330>)
  4063f4:	6819      	ldr	r1, [r3, #0]
  4063f6:	4459      	add	r1, fp
  4063f8:	6019      	str	r1, [r3, #0]
  4063fa:	f000 814c 	beq.w	406696 <_malloc_r+0x4c6>
  4063fe:	f8d9 0000 	ldr.w	r0, [r9]
  406402:	3001      	adds	r0, #1
  406404:	bf1b      	ittet	ne
  406406:	eba2 0a0a 	subne.w	sl, r2, sl
  40640a:	4451      	addne	r1, sl
  40640c:	f8c9 2000 	streq.w	r2, [r9]
  406410:	6019      	strne	r1, [r3, #0]
  406412:	f012 0107 	ands.w	r1, r2, #7
  406416:	f000 8114 	beq.w	406642 <_malloc_r+0x472>
  40641a:	f1c1 0008 	rsb	r0, r1, #8
  40641e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406422:	4402      	add	r2, r0
  406424:	3108      	adds	r1, #8
  406426:	eb02 090b 	add.w	r9, r2, fp
  40642a:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40642e:	eba1 0909 	sub.w	r9, r1, r9
  406432:	4649      	mov	r1, r9
  406434:	4628      	mov	r0, r5
  406436:	9301      	str	r3, [sp, #4]
  406438:	9200      	str	r2, [sp, #0]
  40643a:	f000 fee9 	bl	407210 <_sbrk_r>
  40643e:	1c43      	adds	r3, r0, #1
  406440:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406444:	f000 8142 	beq.w	4066cc <_malloc_r+0x4fc>
  406448:	1a80      	subs	r0, r0, r2
  40644a:	4448      	add	r0, r9
  40644c:	f040 0001 	orr.w	r0, r0, #1
  406450:	6819      	ldr	r1, [r3, #0]
  406452:	42bc      	cmp	r4, r7
  406454:	4449      	add	r1, r9
  406456:	60ba      	str	r2, [r7, #8]
  406458:	6019      	str	r1, [r3, #0]
  40645a:	6050      	str	r0, [r2, #4]
  40645c:	d017      	beq.n	40648e <_malloc_r+0x2be>
  40645e:	f1b8 0f0f 	cmp.w	r8, #15
  406462:	f240 80fa 	bls.w	40665a <_malloc_r+0x48a>
  406466:	f04f 0c05 	mov.w	ip, #5
  40646a:	6862      	ldr	r2, [r4, #4]
  40646c:	f1a8 000c 	sub.w	r0, r8, #12
  406470:	f020 0007 	bic.w	r0, r0, #7
  406474:	f002 0201 	and.w	r2, r2, #1
  406478:	eb04 0e00 	add.w	lr, r4, r0
  40647c:	4302      	orrs	r2, r0
  40647e:	280f      	cmp	r0, #15
  406480:	6062      	str	r2, [r4, #4]
  406482:	f8ce c004 	str.w	ip, [lr, #4]
  406486:	f8ce c008 	str.w	ip, [lr, #8]
  40648a:	f200 8116 	bhi.w	4066ba <_malloc_r+0x4ea>
  40648e:	4b1d      	ldr	r3, [pc, #116]	; (406504 <_malloc_r+0x334>)
  406490:	68bc      	ldr	r4, [r7, #8]
  406492:	681a      	ldr	r2, [r3, #0]
  406494:	4291      	cmp	r1, r2
  406496:	bf88      	it	hi
  406498:	6019      	strhi	r1, [r3, #0]
  40649a:	4b1b      	ldr	r3, [pc, #108]	; (406508 <_malloc_r+0x338>)
  40649c:	681a      	ldr	r2, [r3, #0]
  40649e:	4291      	cmp	r1, r2
  4064a0:	6862      	ldr	r2, [r4, #4]
  4064a2:	bf88      	it	hi
  4064a4:	6019      	strhi	r1, [r3, #0]
  4064a6:	f022 0203 	bic.w	r2, r2, #3
  4064aa:	4296      	cmp	r6, r2
  4064ac:	eba2 0306 	sub.w	r3, r2, r6
  4064b0:	d801      	bhi.n	4064b6 <_malloc_r+0x2e6>
  4064b2:	2b0f      	cmp	r3, #15
  4064b4:	dc04      	bgt.n	4064c0 <_malloc_r+0x2f0>
  4064b6:	4628      	mov	r0, r5
  4064b8:	f000 f9f2 	bl	4068a0 <__malloc_unlock>
  4064bc:	2400      	movs	r4, #0
  4064be:	e74d      	b.n	40635c <_malloc_r+0x18c>
  4064c0:	f046 0201 	orr.w	r2, r6, #1
  4064c4:	f043 0301 	orr.w	r3, r3, #1
  4064c8:	4426      	add	r6, r4
  4064ca:	6062      	str	r2, [r4, #4]
  4064cc:	4628      	mov	r0, r5
  4064ce:	60be      	str	r6, [r7, #8]
  4064d0:	3408      	adds	r4, #8
  4064d2:	6073      	str	r3, [r6, #4]
  4064d4:	f000 f9e4 	bl	4068a0 <__malloc_unlock>
  4064d8:	4620      	mov	r0, r4
  4064da:	b003      	add	sp, #12
  4064dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064e0:	2b14      	cmp	r3, #20
  4064e2:	d970      	bls.n	4065c6 <_malloc_r+0x3f6>
  4064e4:	2b54      	cmp	r3, #84	; 0x54
  4064e6:	f200 80a2 	bhi.w	40662e <_malloc_r+0x45e>
  4064ea:	0b33      	lsrs	r3, r6, #12
  4064ec:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4064f0:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4064f4:	00c1      	lsls	r1, r0, #3
  4064f6:	e68d      	b.n	406214 <_malloc_r+0x44>
  4064f8:	200007a8 	.word	0x200007a8
  4064fc:	20000e28 	.word	0x20000e28
  406500:	20000df8 	.word	0x20000df8
  406504:	20000e20 	.word	0x20000e20
  406508:	20000e24 	.word	0x20000e24
  40650c:	200007b0 	.word	0x200007b0
  406510:	20000bb0 	.word	0x20000bb0
  406514:	0a5a      	lsrs	r2, r3, #9
  406516:	2a04      	cmp	r2, #4
  406518:	d95b      	bls.n	4065d2 <_malloc_r+0x402>
  40651a:	2a14      	cmp	r2, #20
  40651c:	f200 80ae 	bhi.w	40667c <_malloc_r+0x4ac>
  406520:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406524:	00c9      	lsls	r1, r1, #3
  406526:	325b      	adds	r2, #91	; 0x5b
  406528:	eb07 0c01 	add.w	ip, r7, r1
  40652c:	5879      	ldr	r1, [r7, r1]
  40652e:	f1ac 0c08 	sub.w	ip, ip, #8
  406532:	458c      	cmp	ip, r1
  406534:	f000 8088 	beq.w	406648 <_malloc_r+0x478>
  406538:	684a      	ldr	r2, [r1, #4]
  40653a:	f022 0203 	bic.w	r2, r2, #3
  40653e:	4293      	cmp	r3, r2
  406540:	d273      	bcs.n	40662a <_malloc_r+0x45a>
  406542:	6889      	ldr	r1, [r1, #8]
  406544:	458c      	cmp	ip, r1
  406546:	d1f7      	bne.n	406538 <_malloc_r+0x368>
  406548:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40654c:	687a      	ldr	r2, [r7, #4]
  40654e:	60e3      	str	r3, [r4, #12]
  406550:	f8c4 c008 	str.w	ip, [r4, #8]
  406554:	609c      	str	r4, [r3, #8]
  406556:	f8cc 400c 	str.w	r4, [ip, #12]
  40655a:	e69e      	b.n	40629a <_malloc_r+0xca>
  40655c:	f046 0c01 	orr.w	ip, r6, #1
  406560:	f042 0101 	orr.w	r1, r2, #1
  406564:	4426      	add	r6, r4
  406566:	f8c4 c004 	str.w	ip, [r4, #4]
  40656a:	4628      	mov	r0, r5
  40656c:	617e      	str	r6, [r7, #20]
  40656e:	613e      	str	r6, [r7, #16]
  406570:	f8c6 e00c 	str.w	lr, [r6, #12]
  406574:	f8c6 e008 	str.w	lr, [r6, #8]
  406578:	6071      	str	r1, [r6, #4]
  40657a:	50e2      	str	r2, [r4, r3]
  40657c:	f000 f990 	bl	4068a0 <__malloc_unlock>
  406580:	3408      	adds	r4, #8
  406582:	e6eb      	b.n	40635c <_malloc_r+0x18c>
  406584:	687a      	ldr	r2, [r7, #4]
  406586:	e688      	b.n	40629a <_malloc_r+0xca>
  406588:	f108 0801 	add.w	r8, r8, #1
  40658c:	f018 0f03 	tst.w	r8, #3
  406590:	f10c 0c08 	add.w	ip, ip, #8
  406594:	f47f ae93 	bne.w	4062be <_malloc_r+0xee>
  406598:	e02d      	b.n	4065f6 <_malloc_r+0x426>
  40659a:	68dc      	ldr	r4, [r3, #12]
  40659c:	42a3      	cmp	r3, r4
  40659e:	bf08      	it	eq
  4065a0:	3002      	addeq	r0, #2
  4065a2:	f43f ae4b 	beq.w	40623c <_malloc_r+0x6c>
  4065a6:	e6c9      	b.n	40633c <_malloc_r+0x16c>
  4065a8:	461c      	mov	r4, r3
  4065aa:	4419      	add	r1, r3
  4065ac:	684a      	ldr	r2, [r1, #4]
  4065ae:	68db      	ldr	r3, [r3, #12]
  4065b0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4065b4:	f042 0201 	orr.w	r2, r2, #1
  4065b8:	604a      	str	r2, [r1, #4]
  4065ba:	4628      	mov	r0, r5
  4065bc:	60f3      	str	r3, [r6, #12]
  4065be:	609e      	str	r6, [r3, #8]
  4065c0:	f000 f96e 	bl	4068a0 <__malloc_unlock>
  4065c4:	e6ca      	b.n	40635c <_malloc_r+0x18c>
  4065c6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4065ca:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4065ce:	00c1      	lsls	r1, r0, #3
  4065d0:	e620      	b.n	406214 <_malloc_r+0x44>
  4065d2:	099a      	lsrs	r2, r3, #6
  4065d4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4065d8:	00c9      	lsls	r1, r1, #3
  4065da:	3238      	adds	r2, #56	; 0x38
  4065dc:	e7a4      	b.n	406528 <_malloc_r+0x358>
  4065de:	42bc      	cmp	r4, r7
  4065e0:	d054      	beq.n	40668c <_malloc_r+0x4bc>
  4065e2:	68bc      	ldr	r4, [r7, #8]
  4065e4:	6862      	ldr	r2, [r4, #4]
  4065e6:	f022 0203 	bic.w	r2, r2, #3
  4065ea:	e75e      	b.n	4064aa <_malloc_r+0x2da>
  4065ec:	f859 3908 	ldr.w	r3, [r9], #-8
  4065f0:	4599      	cmp	r9, r3
  4065f2:	f040 8086 	bne.w	406702 <_malloc_r+0x532>
  4065f6:	f010 0f03 	tst.w	r0, #3
  4065fa:	f100 30ff 	add.w	r0, r0, #4294967295
  4065fe:	d1f5      	bne.n	4065ec <_malloc_r+0x41c>
  406600:	687b      	ldr	r3, [r7, #4]
  406602:	ea23 0304 	bic.w	r3, r3, r4
  406606:	607b      	str	r3, [r7, #4]
  406608:	0064      	lsls	r4, r4, #1
  40660a:	429c      	cmp	r4, r3
  40660c:	f63f aec8 	bhi.w	4063a0 <_malloc_r+0x1d0>
  406610:	2c00      	cmp	r4, #0
  406612:	f43f aec5 	beq.w	4063a0 <_malloc_r+0x1d0>
  406616:	421c      	tst	r4, r3
  406618:	4640      	mov	r0, r8
  40661a:	f47f ae4c 	bne.w	4062b6 <_malloc_r+0xe6>
  40661e:	0064      	lsls	r4, r4, #1
  406620:	421c      	tst	r4, r3
  406622:	f100 0004 	add.w	r0, r0, #4
  406626:	d0fa      	beq.n	40661e <_malloc_r+0x44e>
  406628:	e645      	b.n	4062b6 <_malloc_r+0xe6>
  40662a:	468c      	mov	ip, r1
  40662c:	e78c      	b.n	406548 <_malloc_r+0x378>
  40662e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406632:	d815      	bhi.n	406660 <_malloc_r+0x490>
  406634:	0bf3      	lsrs	r3, r6, #15
  406636:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40663a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40663e:	00c1      	lsls	r1, r0, #3
  406640:	e5e8      	b.n	406214 <_malloc_r+0x44>
  406642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406646:	e6ee      	b.n	406426 <_malloc_r+0x256>
  406648:	2101      	movs	r1, #1
  40664a:	687b      	ldr	r3, [r7, #4]
  40664c:	1092      	asrs	r2, r2, #2
  40664e:	fa01 f202 	lsl.w	r2, r1, r2
  406652:	431a      	orrs	r2, r3
  406654:	607a      	str	r2, [r7, #4]
  406656:	4663      	mov	r3, ip
  406658:	e779      	b.n	40654e <_malloc_r+0x37e>
  40665a:	2301      	movs	r3, #1
  40665c:	6053      	str	r3, [r2, #4]
  40665e:	e72a      	b.n	4064b6 <_malloc_r+0x2e6>
  406660:	f240 5254 	movw	r2, #1364	; 0x554
  406664:	4293      	cmp	r3, r2
  406666:	d822      	bhi.n	4066ae <_malloc_r+0x4de>
  406668:	0cb3      	lsrs	r3, r6, #18
  40666a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40666e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  406672:	00c1      	lsls	r1, r0, #3
  406674:	e5ce      	b.n	406214 <_malloc_r+0x44>
  406676:	f103 0b10 	add.w	fp, r3, #16
  40667a:	e6af      	b.n	4063dc <_malloc_r+0x20c>
  40667c:	2a54      	cmp	r2, #84	; 0x54
  40667e:	d829      	bhi.n	4066d4 <_malloc_r+0x504>
  406680:	0b1a      	lsrs	r2, r3, #12
  406682:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406686:	00c9      	lsls	r1, r1, #3
  406688:	326e      	adds	r2, #110	; 0x6e
  40668a:	e74d      	b.n	406528 <_malloc_r+0x358>
  40668c:	4b20      	ldr	r3, [pc, #128]	; (406710 <_malloc_r+0x540>)
  40668e:	6819      	ldr	r1, [r3, #0]
  406690:	4459      	add	r1, fp
  406692:	6019      	str	r1, [r3, #0]
  406694:	e6b3      	b.n	4063fe <_malloc_r+0x22e>
  406696:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40669a:	2800      	cmp	r0, #0
  40669c:	f47f aeaf 	bne.w	4063fe <_malloc_r+0x22e>
  4066a0:	eb08 030b 	add.w	r3, r8, fp
  4066a4:	68ba      	ldr	r2, [r7, #8]
  4066a6:	f043 0301 	orr.w	r3, r3, #1
  4066aa:	6053      	str	r3, [r2, #4]
  4066ac:	e6ef      	b.n	40648e <_malloc_r+0x2be>
  4066ae:	207f      	movs	r0, #127	; 0x7f
  4066b0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4066b4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4066b8:	e5ac      	b.n	406214 <_malloc_r+0x44>
  4066ba:	f104 0108 	add.w	r1, r4, #8
  4066be:	4628      	mov	r0, r5
  4066c0:	9300      	str	r3, [sp, #0]
  4066c2:	f7ff fc89 	bl	405fd8 <_free_r>
  4066c6:	9b00      	ldr	r3, [sp, #0]
  4066c8:	6819      	ldr	r1, [r3, #0]
  4066ca:	e6e0      	b.n	40648e <_malloc_r+0x2be>
  4066cc:	2001      	movs	r0, #1
  4066ce:	f04f 0900 	mov.w	r9, #0
  4066d2:	e6bd      	b.n	406450 <_malloc_r+0x280>
  4066d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4066d8:	d805      	bhi.n	4066e6 <_malloc_r+0x516>
  4066da:	0bda      	lsrs	r2, r3, #15
  4066dc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4066e0:	00c9      	lsls	r1, r1, #3
  4066e2:	3277      	adds	r2, #119	; 0x77
  4066e4:	e720      	b.n	406528 <_malloc_r+0x358>
  4066e6:	f240 5154 	movw	r1, #1364	; 0x554
  4066ea:	428a      	cmp	r2, r1
  4066ec:	d805      	bhi.n	4066fa <_malloc_r+0x52a>
  4066ee:	0c9a      	lsrs	r2, r3, #18
  4066f0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4066f4:	00c9      	lsls	r1, r1, #3
  4066f6:	327c      	adds	r2, #124	; 0x7c
  4066f8:	e716      	b.n	406528 <_malloc_r+0x358>
  4066fa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4066fe:	227e      	movs	r2, #126	; 0x7e
  406700:	e712      	b.n	406528 <_malloc_r+0x358>
  406702:	687b      	ldr	r3, [r7, #4]
  406704:	e780      	b.n	406608 <_malloc_r+0x438>
  406706:	08f0      	lsrs	r0, r6, #3
  406708:	f106 0308 	add.w	r3, r6, #8
  40670c:	e60e      	b.n	40632c <_malloc_r+0x15c>
  40670e:	bf00      	nop
  406710:	20000df8 	.word	0x20000df8

00406714 <__ascii_mbtowc>:
  406714:	b082      	sub	sp, #8
  406716:	b149      	cbz	r1, 40672c <__ascii_mbtowc+0x18>
  406718:	b15a      	cbz	r2, 406732 <__ascii_mbtowc+0x1e>
  40671a:	b16b      	cbz	r3, 406738 <__ascii_mbtowc+0x24>
  40671c:	7813      	ldrb	r3, [r2, #0]
  40671e:	600b      	str	r3, [r1, #0]
  406720:	7812      	ldrb	r2, [r2, #0]
  406722:	1c10      	adds	r0, r2, #0
  406724:	bf18      	it	ne
  406726:	2001      	movne	r0, #1
  406728:	b002      	add	sp, #8
  40672a:	4770      	bx	lr
  40672c:	a901      	add	r1, sp, #4
  40672e:	2a00      	cmp	r2, #0
  406730:	d1f3      	bne.n	40671a <__ascii_mbtowc+0x6>
  406732:	4610      	mov	r0, r2
  406734:	b002      	add	sp, #8
  406736:	4770      	bx	lr
  406738:	f06f 0001 	mvn.w	r0, #1
  40673c:	e7f4      	b.n	406728 <__ascii_mbtowc+0x14>
  40673e:	bf00      	nop

00406740 <memchr>:
  406740:	0783      	lsls	r3, r0, #30
  406742:	b470      	push	{r4, r5, r6}
  406744:	b2cd      	uxtb	r5, r1
  406746:	d03d      	beq.n	4067c4 <memchr+0x84>
  406748:	1e54      	subs	r4, r2, #1
  40674a:	b30a      	cbz	r2, 406790 <memchr+0x50>
  40674c:	7803      	ldrb	r3, [r0, #0]
  40674e:	42ab      	cmp	r3, r5
  406750:	d01f      	beq.n	406792 <memchr+0x52>
  406752:	1c43      	adds	r3, r0, #1
  406754:	e005      	b.n	406762 <memchr+0x22>
  406756:	f114 34ff 	adds.w	r4, r4, #4294967295
  40675a:	d319      	bcc.n	406790 <memchr+0x50>
  40675c:	7802      	ldrb	r2, [r0, #0]
  40675e:	42aa      	cmp	r2, r5
  406760:	d017      	beq.n	406792 <memchr+0x52>
  406762:	f013 0f03 	tst.w	r3, #3
  406766:	4618      	mov	r0, r3
  406768:	f103 0301 	add.w	r3, r3, #1
  40676c:	d1f3      	bne.n	406756 <memchr+0x16>
  40676e:	2c03      	cmp	r4, #3
  406770:	d811      	bhi.n	406796 <memchr+0x56>
  406772:	b34c      	cbz	r4, 4067c8 <memchr+0x88>
  406774:	7803      	ldrb	r3, [r0, #0]
  406776:	42ab      	cmp	r3, r5
  406778:	d00b      	beq.n	406792 <memchr+0x52>
  40677a:	4404      	add	r4, r0
  40677c:	1c43      	adds	r3, r0, #1
  40677e:	e002      	b.n	406786 <memchr+0x46>
  406780:	7802      	ldrb	r2, [r0, #0]
  406782:	42aa      	cmp	r2, r5
  406784:	d005      	beq.n	406792 <memchr+0x52>
  406786:	429c      	cmp	r4, r3
  406788:	4618      	mov	r0, r3
  40678a:	f103 0301 	add.w	r3, r3, #1
  40678e:	d1f7      	bne.n	406780 <memchr+0x40>
  406790:	2000      	movs	r0, #0
  406792:	bc70      	pop	{r4, r5, r6}
  406794:	4770      	bx	lr
  406796:	0209      	lsls	r1, r1, #8
  406798:	b289      	uxth	r1, r1
  40679a:	4329      	orrs	r1, r5
  40679c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4067a0:	6803      	ldr	r3, [r0, #0]
  4067a2:	4606      	mov	r6, r0
  4067a4:	404b      	eors	r3, r1
  4067a6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4067aa:	ea22 0303 	bic.w	r3, r2, r3
  4067ae:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4067b2:	f100 0004 	add.w	r0, r0, #4
  4067b6:	d103      	bne.n	4067c0 <memchr+0x80>
  4067b8:	3c04      	subs	r4, #4
  4067ba:	2c03      	cmp	r4, #3
  4067bc:	d8f0      	bhi.n	4067a0 <memchr+0x60>
  4067be:	e7d8      	b.n	406772 <memchr+0x32>
  4067c0:	4630      	mov	r0, r6
  4067c2:	e7d7      	b.n	406774 <memchr+0x34>
  4067c4:	4614      	mov	r4, r2
  4067c6:	e7d2      	b.n	40676e <memchr+0x2e>
  4067c8:	4620      	mov	r0, r4
  4067ca:	e7e2      	b.n	406792 <memchr+0x52>

004067cc <memmove>:
  4067cc:	4288      	cmp	r0, r1
  4067ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  4067d0:	d90d      	bls.n	4067ee <memmove+0x22>
  4067d2:	188b      	adds	r3, r1, r2
  4067d4:	4298      	cmp	r0, r3
  4067d6:	d20a      	bcs.n	4067ee <memmove+0x22>
  4067d8:	1884      	adds	r4, r0, r2
  4067da:	2a00      	cmp	r2, #0
  4067dc:	d051      	beq.n	406882 <memmove+0xb6>
  4067de:	4622      	mov	r2, r4
  4067e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4067e4:	4299      	cmp	r1, r3
  4067e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4067ea:	d1f9      	bne.n	4067e0 <memmove+0x14>
  4067ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4067ee:	2a0f      	cmp	r2, #15
  4067f0:	d948      	bls.n	406884 <memmove+0xb8>
  4067f2:	ea41 0300 	orr.w	r3, r1, r0
  4067f6:	079b      	lsls	r3, r3, #30
  4067f8:	d146      	bne.n	406888 <memmove+0xbc>
  4067fa:	4615      	mov	r5, r2
  4067fc:	f100 0410 	add.w	r4, r0, #16
  406800:	f101 0310 	add.w	r3, r1, #16
  406804:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406808:	3d10      	subs	r5, #16
  40680a:	f844 6c10 	str.w	r6, [r4, #-16]
  40680e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406812:	2d0f      	cmp	r5, #15
  406814:	f844 6c0c 	str.w	r6, [r4, #-12]
  406818:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40681c:	f104 0410 	add.w	r4, r4, #16
  406820:	f844 6c18 	str.w	r6, [r4, #-24]
  406824:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406828:	f103 0310 	add.w	r3, r3, #16
  40682c:	f844 6c14 	str.w	r6, [r4, #-20]
  406830:	d8e8      	bhi.n	406804 <memmove+0x38>
  406832:	f1a2 0310 	sub.w	r3, r2, #16
  406836:	f023 030f 	bic.w	r3, r3, #15
  40683a:	f002 0e0f 	and.w	lr, r2, #15
  40683e:	3310      	adds	r3, #16
  406840:	f1be 0f03 	cmp.w	lr, #3
  406844:	4419      	add	r1, r3
  406846:	4403      	add	r3, r0
  406848:	d921      	bls.n	40688e <memmove+0xc2>
  40684a:	460e      	mov	r6, r1
  40684c:	4674      	mov	r4, lr
  40684e:	1f1d      	subs	r5, r3, #4
  406850:	f856 7b04 	ldr.w	r7, [r6], #4
  406854:	3c04      	subs	r4, #4
  406856:	2c03      	cmp	r4, #3
  406858:	f845 7f04 	str.w	r7, [r5, #4]!
  40685c:	d8f8      	bhi.n	406850 <memmove+0x84>
  40685e:	f1ae 0404 	sub.w	r4, lr, #4
  406862:	f024 0403 	bic.w	r4, r4, #3
  406866:	3404      	adds	r4, #4
  406868:	4421      	add	r1, r4
  40686a:	4423      	add	r3, r4
  40686c:	f002 0203 	and.w	r2, r2, #3
  406870:	b162      	cbz	r2, 40688c <memmove+0xc0>
  406872:	3b01      	subs	r3, #1
  406874:	440a      	add	r2, r1
  406876:	f811 4b01 	ldrb.w	r4, [r1], #1
  40687a:	428a      	cmp	r2, r1
  40687c:	f803 4f01 	strb.w	r4, [r3, #1]!
  406880:	d1f9      	bne.n	406876 <memmove+0xaa>
  406882:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406884:	4603      	mov	r3, r0
  406886:	e7f3      	b.n	406870 <memmove+0xa4>
  406888:	4603      	mov	r3, r0
  40688a:	e7f2      	b.n	406872 <memmove+0xa6>
  40688c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40688e:	4672      	mov	r2, lr
  406890:	e7ee      	b.n	406870 <memmove+0xa4>
  406892:	bf00      	nop

00406894 <__malloc_lock>:
  406894:	4801      	ldr	r0, [pc, #4]	; (40689c <__malloc_lock+0x8>)
  406896:	f7ff bc97 	b.w	4061c8 <__retarget_lock_acquire_recursive>
  40689a:	bf00      	nop
  40689c:	20000ea8 	.word	0x20000ea8

004068a0 <__malloc_unlock>:
  4068a0:	4801      	ldr	r0, [pc, #4]	; (4068a8 <__malloc_unlock+0x8>)
  4068a2:	f7ff bc93 	b.w	4061cc <__retarget_lock_release_recursive>
  4068a6:	bf00      	nop
  4068a8:	20000ea8 	.word	0x20000ea8

004068ac <_Balloc>:
  4068ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4068ae:	b570      	push	{r4, r5, r6, lr}
  4068b0:	4605      	mov	r5, r0
  4068b2:	460c      	mov	r4, r1
  4068b4:	b14b      	cbz	r3, 4068ca <_Balloc+0x1e>
  4068b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4068ba:	b180      	cbz	r0, 4068de <_Balloc+0x32>
  4068bc:	6802      	ldr	r2, [r0, #0]
  4068be:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4068c2:	2300      	movs	r3, #0
  4068c4:	6103      	str	r3, [r0, #16]
  4068c6:	60c3      	str	r3, [r0, #12]
  4068c8:	bd70      	pop	{r4, r5, r6, pc}
  4068ca:	2221      	movs	r2, #33	; 0x21
  4068cc:	2104      	movs	r1, #4
  4068ce:	f000 fd9d 	bl	40740c <_calloc_r>
  4068d2:	64e8      	str	r0, [r5, #76]	; 0x4c
  4068d4:	4603      	mov	r3, r0
  4068d6:	2800      	cmp	r0, #0
  4068d8:	d1ed      	bne.n	4068b6 <_Balloc+0xa>
  4068da:	2000      	movs	r0, #0
  4068dc:	bd70      	pop	{r4, r5, r6, pc}
  4068de:	2101      	movs	r1, #1
  4068e0:	fa01 f604 	lsl.w	r6, r1, r4
  4068e4:	1d72      	adds	r2, r6, #5
  4068e6:	4628      	mov	r0, r5
  4068e8:	0092      	lsls	r2, r2, #2
  4068ea:	f000 fd8f 	bl	40740c <_calloc_r>
  4068ee:	2800      	cmp	r0, #0
  4068f0:	d0f3      	beq.n	4068da <_Balloc+0x2e>
  4068f2:	6044      	str	r4, [r0, #4]
  4068f4:	6086      	str	r6, [r0, #8]
  4068f6:	e7e4      	b.n	4068c2 <_Balloc+0x16>

004068f8 <_Bfree>:
  4068f8:	b131      	cbz	r1, 406908 <_Bfree+0x10>
  4068fa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4068fc:	684a      	ldr	r2, [r1, #4]
  4068fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406902:	6008      	str	r0, [r1, #0]
  406904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406908:	4770      	bx	lr
  40690a:	bf00      	nop

0040690c <__multadd>:
  40690c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40690e:	460c      	mov	r4, r1
  406910:	4605      	mov	r5, r0
  406912:	f04f 0e00 	mov.w	lr, #0
  406916:	690e      	ldr	r6, [r1, #16]
  406918:	b083      	sub	sp, #12
  40691a:	f101 0714 	add.w	r7, r1, #20
  40691e:	6838      	ldr	r0, [r7, #0]
  406920:	f10e 0e01 	add.w	lr, lr, #1
  406924:	b281      	uxth	r1, r0
  406926:	fb02 3301 	mla	r3, r2, r1, r3
  40692a:	0c01      	lsrs	r1, r0, #16
  40692c:	0c18      	lsrs	r0, r3, #16
  40692e:	fb02 0101 	mla	r1, r2, r1, r0
  406932:	b29b      	uxth	r3, r3
  406934:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406938:	4576      	cmp	r6, lr
  40693a:	f847 3b04 	str.w	r3, [r7], #4
  40693e:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406942:	dcec      	bgt.n	40691e <__multadd+0x12>
  406944:	b13b      	cbz	r3, 406956 <__multadd+0x4a>
  406946:	68a2      	ldr	r2, [r4, #8]
  406948:	4296      	cmp	r6, r2
  40694a:	da07      	bge.n	40695c <__multadd+0x50>
  40694c:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  406950:	3601      	adds	r6, #1
  406952:	6153      	str	r3, [r2, #20]
  406954:	6126      	str	r6, [r4, #16]
  406956:	4620      	mov	r0, r4
  406958:	b003      	add	sp, #12
  40695a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40695c:	6861      	ldr	r1, [r4, #4]
  40695e:	4628      	mov	r0, r5
  406960:	3101      	adds	r1, #1
  406962:	9301      	str	r3, [sp, #4]
  406964:	f7ff ffa2 	bl	4068ac <_Balloc>
  406968:	4607      	mov	r7, r0
  40696a:	6922      	ldr	r2, [r4, #16]
  40696c:	f104 010c 	add.w	r1, r4, #12
  406970:	3202      	adds	r2, #2
  406972:	0092      	lsls	r2, r2, #2
  406974:	300c      	adds	r0, #12
  406976:	f7fc febb 	bl	4036f0 <memcpy>
  40697a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  40697c:	6861      	ldr	r1, [r4, #4]
  40697e:	9b01      	ldr	r3, [sp, #4]
  406980:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406984:	6020      	str	r0, [r4, #0]
  406986:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  40698a:	463c      	mov	r4, r7
  40698c:	e7de      	b.n	40694c <__multadd+0x40>
  40698e:	bf00      	nop

00406990 <__hi0bits>:
  406990:	0c02      	lsrs	r2, r0, #16
  406992:	0412      	lsls	r2, r2, #16
  406994:	4603      	mov	r3, r0
  406996:	b9b2      	cbnz	r2, 4069c6 <__hi0bits+0x36>
  406998:	0403      	lsls	r3, r0, #16
  40699a:	2010      	movs	r0, #16
  40699c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4069a0:	bf04      	itt	eq
  4069a2:	021b      	lsleq	r3, r3, #8
  4069a4:	3008      	addeq	r0, #8
  4069a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4069aa:	bf04      	itt	eq
  4069ac:	011b      	lsleq	r3, r3, #4
  4069ae:	3004      	addeq	r0, #4
  4069b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4069b4:	bf04      	itt	eq
  4069b6:	009b      	lsleq	r3, r3, #2
  4069b8:	3002      	addeq	r0, #2
  4069ba:	2b00      	cmp	r3, #0
  4069bc:	db02      	blt.n	4069c4 <__hi0bits+0x34>
  4069be:	005b      	lsls	r3, r3, #1
  4069c0:	d403      	bmi.n	4069ca <__hi0bits+0x3a>
  4069c2:	2020      	movs	r0, #32
  4069c4:	4770      	bx	lr
  4069c6:	2000      	movs	r0, #0
  4069c8:	e7e8      	b.n	40699c <__hi0bits+0xc>
  4069ca:	3001      	adds	r0, #1
  4069cc:	4770      	bx	lr
  4069ce:	bf00      	nop

004069d0 <__lo0bits>:
  4069d0:	6803      	ldr	r3, [r0, #0]
  4069d2:	4601      	mov	r1, r0
  4069d4:	f013 0207 	ands.w	r2, r3, #7
  4069d8:	d007      	beq.n	4069ea <__lo0bits+0x1a>
  4069da:	07da      	lsls	r2, r3, #31
  4069dc:	d421      	bmi.n	406a22 <__lo0bits+0x52>
  4069de:	0798      	lsls	r0, r3, #30
  4069e0:	d421      	bmi.n	406a26 <__lo0bits+0x56>
  4069e2:	089b      	lsrs	r3, r3, #2
  4069e4:	600b      	str	r3, [r1, #0]
  4069e6:	2002      	movs	r0, #2
  4069e8:	4770      	bx	lr
  4069ea:	b298      	uxth	r0, r3
  4069ec:	b198      	cbz	r0, 406a16 <__lo0bits+0x46>
  4069ee:	4610      	mov	r0, r2
  4069f0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4069f4:	bf04      	itt	eq
  4069f6:	0a1b      	lsreq	r3, r3, #8
  4069f8:	3008      	addeq	r0, #8
  4069fa:	071a      	lsls	r2, r3, #28
  4069fc:	bf04      	itt	eq
  4069fe:	091b      	lsreq	r3, r3, #4
  406a00:	3004      	addeq	r0, #4
  406a02:	079a      	lsls	r2, r3, #30
  406a04:	bf04      	itt	eq
  406a06:	089b      	lsreq	r3, r3, #2
  406a08:	3002      	addeq	r0, #2
  406a0a:	07da      	lsls	r2, r3, #31
  406a0c:	d407      	bmi.n	406a1e <__lo0bits+0x4e>
  406a0e:	085b      	lsrs	r3, r3, #1
  406a10:	d104      	bne.n	406a1c <__lo0bits+0x4c>
  406a12:	2020      	movs	r0, #32
  406a14:	4770      	bx	lr
  406a16:	0c1b      	lsrs	r3, r3, #16
  406a18:	2010      	movs	r0, #16
  406a1a:	e7e9      	b.n	4069f0 <__lo0bits+0x20>
  406a1c:	3001      	adds	r0, #1
  406a1e:	600b      	str	r3, [r1, #0]
  406a20:	4770      	bx	lr
  406a22:	2000      	movs	r0, #0
  406a24:	4770      	bx	lr
  406a26:	085b      	lsrs	r3, r3, #1
  406a28:	600b      	str	r3, [r1, #0]
  406a2a:	2001      	movs	r0, #1
  406a2c:	4770      	bx	lr
  406a2e:	bf00      	nop

00406a30 <__i2b>:
  406a30:	b510      	push	{r4, lr}
  406a32:	460c      	mov	r4, r1
  406a34:	2101      	movs	r1, #1
  406a36:	f7ff ff39 	bl	4068ac <_Balloc>
  406a3a:	2201      	movs	r2, #1
  406a3c:	6144      	str	r4, [r0, #20]
  406a3e:	6102      	str	r2, [r0, #16]
  406a40:	bd10      	pop	{r4, pc}
  406a42:	bf00      	nop

00406a44 <__multiply>:
  406a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a48:	690c      	ldr	r4, [r1, #16]
  406a4a:	6915      	ldr	r5, [r2, #16]
  406a4c:	b083      	sub	sp, #12
  406a4e:	42ac      	cmp	r4, r5
  406a50:	468b      	mov	fp, r1
  406a52:	4616      	mov	r6, r2
  406a54:	da04      	bge.n	406a60 <__multiply+0x1c>
  406a56:	4622      	mov	r2, r4
  406a58:	46b3      	mov	fp, r6
  406a5a:	462c      	mov	r4, r5
  406a5c:	460e      	mov	r6, r1
  406a5e:	4615      	mov	r5, r2
  406a60:	f8db 3008 	ldr.w	r3, [fp, #8]
  406a64:	eb04 0805 	add.w	r8, r4, r5
  406a68:	f8db 1004 	ldr.w	r1, [fp, #4]
  406a6c:	4598      	cmp	r8, r3
  406a6e:	bfc8      	it	gt
  406a70:	3101      	addgt	r1, #1
  406a72:	f7ff ff1b 	bl	4068ac <_Balloc>
  406a76:	f100 0914 	add.w	r9, r0, #20
  406a7a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406a7e:	45d1      	cmp	r9, sl
  406a80:	9000      	str	r0, [sp, #0]
  406a82:	d205      	bcs.n	406a90 <__multiply+0x4c>
  406a84:	464b      	mov	r3, r9
  406a86:	2100      	movs	r1, #0
  406a88:	f843 1b04 	str.w	r1, [r3], #4
  406a8c:	459a      	cmp	sl, r3
  406a8e:	d8fb      	bhi.n	406a88 <__multiply+0x44>
  406a90:	f106 0c14 	add.w	ip, r6, #20
  406a94:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406a98:	f10b 0b14 	add.w	fp, fp, #20
  406a9c:	459c      	cmp	ip, r3
  406a9e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406aa2:	d24b      	bcs.n	406b3c <__multiply+0xf8>
  406aa4:	f8cd a004 	str.w	sl, [sp, #4]
  406aa8:	469a      	mov	sl, r3
  406aaa:	f8dc 5000 	ldr.w	r5, [ip]
  406aae:	b2af      	uxth	r7, r5
  406ab0:	b1e7      	cbz	r7, 406aec <__multiply+0xa8>
  406ab2:	464d      	mov	r5, r9
  406ab4:	465e      	mov	r6, fp
  406ab6:	2100      	movs	r1, #0
  406ab8:	f856 2b04 	ldr.w	r2, [r6], #4
  406abc:	6828      	ldr	r0, [r5, #0]
  406abe:	b293      	uxth	r3, r2
  406ac0:	b284      	uxth	r4, r0
  406ac2:	0c12      	lsrs	r2, r2, #16
  406ac4:	fb07 4303 	mla	r3, r7, r3, r4
  406ac8:	0c00      	lsrs	r0, r0, #16
  406aca:	fb07 0202 	mla	r2, r7, r2, r0
  406ace:	440b      	add	r3, r1
  406ad0:	eb02 4113 	add.w	r1, r2, r3, lsr #16
  406ad4:	b29b      	uxth	r3, r3
  406ad6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406ada:	45b6      	cmp	lr, r6
  406adc:	f845 3b04 	str.w	r3, [r5], #4
  406ae0:	ea4f 4111 	mov.w	r1, r1, lsr #16
  406ae4:	d8e8      	bhi.n	406ab8 <__multiply+0x74>
  406ae6:	6029      	str	r1, [r5, #0]
  406ae8:	f8dc 5000 	ldr.w	r5, [ip]
  406aec:	0c2d      	lsrs	r5, r5, #16
  406aee:	d01d      	beq.n	406b2c <__multiply+0xe8>
  406af0:	f8d9 3000 	ldr.w	r3, [r9]
  406af4:	4648      	mov	r0, r9
  406af6:	461c      	mov	r4, r3
  406af8:	4659      	mov	r1, fp
  406afa:	2200      	movs	r2, #0
  406afc:	880e      	ldrh	r6, [r1, #0]
  406afe:	0c24      	lsrs	r4, r4, #16
  406b00:	fb05 4406 	mla	r4, r5, r6, r4
  406b04:	b29b      	uxth	r3, r3
  406b06:	4422      	add	r2, r4
  406b08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406b0c:	f840 3b04 	str.w	r3, [r0], #4
  406b10:	f851 3b04 	ldr.w	r3, [r1], #4
  406b14:	6804      	ldr	r4, [r0, #0]
  406b16:	0c1b      	lsrs	r3, r3, #16
  406b18:	b2a6      	uxth	r6, r4
  406b1a:	fb05 6303 	mla	r3, r5, r3, r6
  406b1e:	458e      	cmp	lr, r1
  406b20:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406b24:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406b28:	d8e8      	bhi.n	406afc <__multiply+0xb8>
  406b2a:	6003      	str	r3, [r0, #0]
  406b2c:	f10c 0c04 	add.w	ip, ip, #4
  406b30:	45e2      	cmp	sl, ip
  406b32:	f109 0904 	add.w	r9, r9, #4
  406b36:	d8b8      	bhi.n	406aaa <__multiply+0x66>
  406b38:	f8dd a004 	ldr.w	sl, [sp, #4]
  406b3c:	f1b8 0f00 	cmp.w	r8, #0
  406b40:	dd0b      	ble.n	406b5a <__multiply+0x116>
  406b42:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406b46:	f1aa 0a04 	sub.w	sl, sl, #4
  406b4a:	b11b      	cbz	r3, 406b54 <__multiply+0x110>
  406b4c:	e005      	b.n	406b5a <__multiply+0x116>
  406b4e:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406b52:	b913      	cbnz	r3, 406b5a <__multiply+0x116>
  406b54:	f1b8 0801 	subs.w	r8, r8, #1
  406b58:	d1f9      	bne.n	406b4e <__multiply+0x10a>
  406b5a:	9800      	ldr	r0, [sp, #0]
  406b5c:	f8c0 8010 	str.w	r8, [r0, #16]
  406b60:	b003      	add	sp, #12
  406b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b66:	bf00      	nop

00406b68 <__pow5mult>:
  406b68:	f012 0303 	ands.w	r3, r2, #3
  406b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406b70:	4614      	mov	r4, r2
  406b72:	4607      	mov	r7, r0
  406b74:	d12e      	bne.n	406bd4 <__pow5mult+0x6c>
  406b76:	460d      	mov	r5, r1
  406b78:	10a4      	asrs	r4, r4, #2
  406b7a:	d01c      	beq.n	406bb6 <__pow5mult+0x4e>
  406b7c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406b7e:	b396      	cbz	r6, 406be6 <__pow5mult+0x7e>
  406b80:	07e3      	lsls	r3, r4, #31
  406b82:	f04f 0800 	mov.w	r8, #0
  406b86:	d406      	bmi.n	406b96 <__pow5mult+0x2e>
  406b88:	1064      	asrs	r4, r4, #1
  406b8a:	d014      	beq.n	406bb6 <__pow5mult+0x4e>
  406b8c:	6830      	ldr	r0, [r6, #0]
  406b8e:	b1a8      	cbz	r0, 406bbc <__pow5mult+0x54>
  406b90:	4606      	mov	r6, r0
  406b92:	07e3      	lsls	r3, r4, #31
  406b94:	d5f8      	bpl.n	406b88 <__pow5mult+0x20>
  406b96:	4632      	mov	r2, r6
  406b98:	4629      	mov	r1, r5
  406b9a:	4638      	mov	r0, r7
  406b9c:	f7ff ff52 	bl	406a44 <__multiply>
  406ba0:	b1b5      	cbz	r5, 406bd0 <__pow5mult+0x68>
  406ba2:	686a      	ldr	r2, [r5, #4]
  406ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406ba6:	1064      	asrs	r4, r4, #1
  406ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406bac:	6029      	str	r1, [r5, #0]
  406bae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406bb2:	4605      	mov	r5, r0
  406bb4:	d1ea      	bne.n	406b8c <__pow5mult+0x24>
  406bb6:	4628      	mov	r0, r5
  406bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406bbc:	4632      	mov	r2, r6
  406bbe:	4631      	mov	r1, r6
  406bc0:	4638      	mov	r0, r7
  406bc2:	f7ff ff3f 	bl	406a44 <__multiply>
  406bc6:	6030      	str	r0, [r6, #0]
  406bc8:	f8c0 8000 	str.w	r8, [r0]
  406bcc:	4606      	mov	r6, r0
  406bce:	e7e0      	b.n	406b92 <__pow5mult+0x2a>
  406bd0:	4605      	mov	r5, r0
  406bd2:	e7d9      	b.n	406b88 <__pow5mult+0x20>
  406bd4:	4a0b      	ldr	r2, [pc, #44]	; (406c04 <__pow5mult+0x9c>)
  406bd6:	3b01      	subs	r3, #1
  406bd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  406bdc:	2300      	movs	r3, #0
  406bde:	f7ff fe95 	bl	40690c <__multadd>
  406be2:	4605      	mov	r5, r0
  406be4:	e7c8      	b.n	406b78 <__pow5mult+0x10>
  406be6:	2101      	movs	r1, #1
  406be8:	4638      	mov	r0, r7
  406bea:	f7ff fe5f 	bl	4068ac <_Balloc>
  406bee:	f240 2171 	movw	r1, #625	; 0x271
  406bf2:	2201      	movs	r2, #1
  406bf4:	2300      	movs	r3, #0
  406bf6:	6141      	str	r1, [r0, #20]
  406bf8:	6102      	str	r2, [r0, #16]
  406bfa:	4606      	mov	r6, r0
  406bfc:	64b8      	str	r0, [r7, #72]	; 0x48
  406bfe:	6003      	str	r3, [r0, #0]
  406c00:	e7be      	b.n	406b80 <__pow5mult+0x18>
  406c02:	bf00      	nop
  406c04:	00408390 	.word	0x00408390

00406c08 <__lshift>:
  406c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406c0c:	690b      	ldr	r3, [r1, #16]
  406c0e:	1154      	asrs	r4, r2, #5
  406c10:	eb04 0803 	add.w	r8, r4, r3
  406c14:	688b      	ldr	r3, [r1, #8]
  406c16:	f108 0501 	add.w	r5, r8, #1
  406c1a:	429d      	cmp	r5, r3
  406c1c:	460e      	mov	r6, r1
  406c1e:	4691      	mov	r9, r2
  406c20:	4607      	mov	r7, r0
  406c22:	6849      	ldr	r1, [r1, #4]
  406c24:	dd04      	ble.n	406c30 <__lshift+0x28>
  406c26:	005b      	lsls	r3, r3, #1
  406c28:	429d      	cmp	r5, r3
  406c2a:	f101 0101 	add.w	r1, r1, #1
  406c2e:	dcfa      	bgt.n	406c26 <__lshift+0x1e>
  406c30:	4638      	mov	r0, r7
  406c32:	f7ff fe3b 	bl	4068ac <_Balloc>
  406c36:	2c00      	cmp	r4, #0
  406c38:	f100 0314 	add.w	r3, r0, #20
  406c3c:	dd06      	ble.n	406c4c <__lshift+0x44>
  406c3e:	2100      	movs	r1, #0
  406c40:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406c44:	f843 1b04 	str.w	r1, [r3], #4
  406c48:	429a      	cmp	r2, r3
  406c4a:	d1fb      	bne.n	406c44 <__lshift+0x3c>
  406c4c:	6934      	ldr	r4, [r6, #16]
  406c4e:	f106 0114 	add.w	r1, r6, #20
  406c52:	f019 091f 	ands.w	r9, r9, #31
  406c56:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406c5a:	d01d      	beq.n	406c98 <__lshift+0x90>
  406c5c:	2200      	movs	r2, #0
  406c5e:	f1c9 0c20 	rsb	ip, r9, #32
  406c62:	680c      	ldr	r4, [r1, #0]
  406c64:	fa04 f409 	lsl.w	r4, r4, r9
  406c68:	4314      	orrs	r4, r2
  406c6a:	f843 4b04 	str.w	r4, [r3], #4
  406c6e:	f851 2b04 	ldr.w	r2, [r1], #4
  406c72:	458e      	cmp	lr, r1
  406c74:	fa22 f20c 	lsr.w	r2, r2, ip
  406c78:	d8f3      	bhi.n	406c62 <__lshift+0x5a>
  406c7a:	601a      	str	r2, [r3, #0]
  406c7c:	b10a      	cbz	r2, 406c82 <__lshift+0x7a>
  406c7e:	f108 0502 	add.w	r5, r8, #2
  406c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406c84:	6872      	ldr	r2, [r6, #4]
  406c86:	3d01      	subs	r5, #1
  406c88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406c8c:	6105      	str	r5, [r0, #16]
  406c8e:	6031      	str	r1, [r6, #0]
  406c90:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406c98:	3b04      	subs	r3, #4
  406c9a:	f851 2b04 	ldr.w	r2, [r1], #4
  406c9e:	458e      	cmp	lr, r1
  406ca0:	f843 2f04 	str.w	r2, [r3, #4]!
  406ca4:	d8f9      	bhi.n	406c9a <__lshift+0x92>
  406ca6:	e7ec      	b.n	406c82 <__lshift+0x7a>

00406ca8 <__mcmp>:
  406ca8:	b430      	push	{r4, r5}
  406caa:	690b      	ldr	r3, [r1, #16]
  406cac:	4605      	mov	r5, r0
  406cae:	6900      	ldr	r0, [r0, #16]
  406cb0:	1ac0      	subs	r0, r0, r3
  406cb2:	d10f      	bne.n	406cd4 <__mcmp+0x2c>
  406cb4:	009b      	lsls	r3, r3, #2
  406cb6:	3514      	adds	r5, #20
  406cb8:	3114      	adds	r1, #20
  406cba:	4419      	add	r1, r3
  406cbc:	442b      	add	r3, r5
  406cbe:	e001      	b.n	406cc4 <__mcmp+0x1c>
  406cc0:	429d      	cmp	r5, r3
  406cc2:	d207      	bcs.n	406cd4 <__mcmp+0x2c>
  406cc4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406cc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406ccc:	4294      	cmp	r4, r2
  406cce:	d0f7      	beq.n	406cc0 <__mcmp+0x18>
  406cd0:	d302      	bcc.n	406cd8 <__mcmp+0x30>
  406cd2:	2001      	movs	r0, #1
  406cd4:	bc30      	pop	{r4, r5}
  406cd6:	4770      	bx	lr
  406cd8:	f04f 30ff 	mov.w	r0, #4294967295
  406cdc:	e7fa      	b.n	406cd4 <__mcmp+0x2c>
  406cde:	bf00      	nop

00406ce0 <__mdiff>:
  406ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ce4:	690c      	ldr	r4, [r1, #16]
  406ce6:	4689      	mov	r9, r1
  406ce8:	6911      	ldr	r1, [r2, #16]
  406cea:	4692      	mov	sl, r2
  406cec:	1a64      	subs	r4, r4, r1
  406cee:	2c00      	cmp	r4, #0
  406cf0:	d117      	bne.n	406d22 <__mdiff+0x42>
  406cf2:	0089      	lsls	r1, r1, #2
  406cf4:	f109 0714 	add.w	r7, r9, #20
  406cf8:	f102 0614 	add.w	r6, r2, #20
  406cfc:	187b      	adds	r3, r7, r1
  406cfe:	4431      	add	r1, r6
  406d00:	e001      	b.n	406d06 <__mdiff+0x26>
  406d02:	429f      	cmp	r7, r3
  406d04:	d265      	bcs.n	406dd2 <__mdiff+0xf2>
  406d06:	f853 5d04 	ldr.w	r5, [r3, #-4]!
  406d0a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406d0e:	4295      	cmp	r5, r2
  406d10:	d0f7      	beq.n	406d02 <__mdiff+0x22>
  406d12:	d267      	bcs.n	406de4 <__mdiff+0x104>
  406d14:	464b      	mov	r3, r9
  406d16:	46bb      	mov	fp, r7
  406d18:	46d1      	mov	r9, sl
  406d1a:	4637      	mov	r7, r6
  406d1c:	469a      	mov	sl, r3
  406d1e:	2401      	movs	r4, #1
  406d20:	e005      	b.n	406d2e <__mdiff+0x4e>
  406d22:	db61      	blt.n	406de8 <__mdiff+0x108>
  406d24:	2400      	movs	r4, #0
  406d26:	f109 0714 	add.w	r7, r9, #20
  406d2a:	f10a 0b14 	add.w	fp, sl, #20
  406d2e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  406d32:	f7ff fdbb 	bl	4068ac <_Balloc>
  406d36:	465d      	mov	r5, fp
  406d38:	f04f 0800 	mov.w	r8, #0
  406d3c:	f8d9 e010 	ldr.w	lr, [r9, #16]
  406d40:	f8da 3010 	ldr.w	r3, [sl, #16]
  406d44:	463e      	mov	r6, r7
  406d46:	60c4      	str	r4, [r0, #12]
  406d48:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
  406d4c:	eb07 078e 	add.w	r7, r7, lr, lsl #2
  406d50:	f100 0414 	add.w	r4, r0, #20
  406d54:	f856 9b04 	ldr.w	r9, [r6], #4
  406d58:	f855 2b04 	ldr.w	r2, [r5], #4
  406d5c:	fa1f f389 	uxth.w	r3, r9
  406d60:	4443      	add	r3, r8
  406d62:	fa1f f882 	uxth.w	r8, r2
  406d66:	0c12      	lsrs	r2, r2, #16
  406d68:	eba3 0308 	sub.w	r3, r3, r8
  406d6c:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  406d70:	eb02 4223 	add.w	r2, r2, r3, asr #16
  406d74:	b29b      	uxth	r3, r3
  406d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406d7a:	45ac      	cmp	ip, r5
  406d7c:	f844 3b04 	str.w	r3, [r4], #4
  406d80:	ea4f 4822 	mov.w	r8, r2, asr #16
  406d84:	d8e6      	bhi.n	406d54 <__mdiff+0x74>
  406d86:	42b7      	cmp	r7, r6
  406d88:	d917      	bls.n	406dba <__mdiff+0xda>
  406d8a:	46a4      	mov	ip, r4
  406d8c:	4635      	mov	r5, r6
  406d8e:	f855 3b04 	ldr.w	r3, [r5], #4
  406d92:	b299      	uxth	r1, r3
  406d94:	4441      	add	r1, r8
  406d96:	140a      	asrs	r2, r1, #16
  406d98:	eb02 4213 	add.w	r2, r2, r3, lsr #16
  406d9c:	b289      	uxth	r1, r1
  406d9e:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
  406da2:	42af      	cmp	r7, r5
  406da4:	f84c 3b04 	str.w	r3, [ip], #4
  406da8:	ea4f 4822 	mov.w	r8, r2, asr #16
  406dac:	d8ef      	bhi.n	406d8e <__mdiff+0xae>
  406dae:	43f6      	mvns	r6, r6
  406db0:	4437      	add	r7, r6
  406db2:	f027 0703 	bic.w	r7, r7, #3
  406db6:	3704      	adds	r7, #4
  406db8:	443c      	add	r4, r7
  406dba:	3c04      	subs	r4, #4
  406dbc:	b92b      	cbnz	r3, 406dca <__mdiff+0xea>
  406dbe:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406dc2:	f10e 3eff 	add.w	lr, lr, #4294967295
  406dc6:	2b00      	cmp	r3, #0
  406dc8:	d0f9      	beq.n	406dbe <__mdiff+0xde>
  406dca:	f8c0 e010 	str.w	lr, [r0, #16]
  406dce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dd2:	2100      	movs	r1, #0
  406dd4:	f7ff fd6a 	bl	4068ac <_Balloc>
  406dd8:	2201      	movs	r2, #1
  406dda:	2300      	movs	r3, #0
  406ddc:	6102      	str	r2, [r0, #16]
  406dde:	6143      	str	r3, [r0, #20]
  406de0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406de4:	46b3      	mov	fp, r6
  406de6:	e7a2      	b.n	406d2e <__mdiff+0x4e>
  406de8:	464b      	mov	r3, r9
  406dea:	f109 0b14 	add.w	fp, r9, #20
  406dee:	f102 0714 	add.w	r7, r2, #20
  406df2:	4691      	mov	r9, r2
  406df4:	2401      	movs	r4, #1
  406df6:	469a      	mov	sl, r3
  406df8:	e799      	b.n	406d2e <__mdiff+0x4e>
  406dfa:	bf00      	nop

00406dfc <__d2b>:
  406dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  406dfe:	2101      	movs	r1, #1
  406e00:	b083      	sub	sp, #12
  406e02:	461c      	mov	r4, r3
  406e04:	f3c3 550a 	ubfx	r5, r3, #20, #11
  406e08:	4616      	mov	r6, r2
  406e0a:	f7ff fd4f 	bl	4068ac <_Balloc>
  406e0e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406e12:	4607      	mov	r7, r0
  406e14:	b10d      	cbz	r5, 406e1a <__d2b+0x1e>
  406e16:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406e1a:	9401      	str	r4, [sp, #4]
  406e1c:	b306      	cbz	r6, 406e60 <__d2b+0x64>
  406e1e:	a802      	add	r0, sp, #8
  406e20:	f840 6d08 	str.w	r6, [r0, #-8]!
  406e24:	f7ff fdd4 	bl	4069d0 <__lo0bits>
  406e28:	2800      	cmp	r0, #0
  406e2a:	d130      	bne.n	406e8e <__d2b+0x92>
  406e2c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406e30:	617a      	str	r2, [r7, #20]
  406e32:	2b00      	cmp	r3, #0
  406e34:	bf0c      	ite	eq
  406e36:	2101      	moveq	r1, #1
  406e38:	2102      	movne	r1, #2
  406e3a:	61bb      	str	r3, [r7, #24]
  406e3c:	6139      	str	r1, [r7, #16]
  406e3e:	b9d5      	cbnz	r5, 406e76 <__d2b+0x7a>
  406e40:	9a08      	ldr	r2, [sp, #32]
  406e42:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  406e46:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406e4a:	6010      	str	r0, [r2, #0]
  406e4c:	6918      	ldr	r0, [r3, #16]
  406e4e:	f7ff fd9f 	bl	406990 <__hi0bits>
  406e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406e54:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406e58:	6018      	str	r0, [r3, #0]
  406e5a:	4638      	mov	r0, r7
  406e5c:	b003      	add	sp, #12
  406e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406e60:	a801      	add	r0, sp, #4
  406e62:	f7ff fdb5 	bl	4069d0 <__lo0bits>
  406e66:	2201      	movs	r2, #1
  406e68:	9b01      	ldr	r3, [sp, #4]
  406e6a:	4611      	mov	r1, r2
  406e6c:	3020      	adds	r0, #32
  406e6e:	613a      	str	r2, [r7, #16]
  406e70:	617b      	str	r3, [r7, #20]
  406e72:	2d00      	cmp	r5, #0
  406e74:	d0e4      	beq.n	406e40 <__d2b+0x44>
  406e76:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
  406e7a:	9a08      	ldr	r2, [sp, #32]
  406e7c:	4403      	add	r3, r0
  406e7e:	6013      	str	r3, [r2, #0]
  406e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406e82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406e86:	6018      	str	r0, [r3, #0]
  406e88:	4638      	mov	r0, r7
  406e8a:	b003      	add	sp, #12
  406e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406e8e:	9b01      	ldr	r3, [sp, #4]
  406e90:	f1c0 0220 	rsb	r2, r0, #32
  406e94:	9900      	ldr	r1, [sp, #0]
  406e96:	fa03 f202 	lsl.w	r2, r3, r2
  406e9a:	430a      	orrs	r2, r1
  406e9c:	40c3      	lsrs	r3, r0
  406e9e:	9301      	str	r3, [sp, #4]
  406ea0:	617a      	str	r2, [r7, #20]
  406ea2:	e7c6      	b.n	406e32 <__d2b+0x36>

00406ea4 <_realloc_r>:
  406ea4:	2900      	cmp	r1, #0
  406ea6:	f000 8094 	beq.w	406fd2 <_realloc_r+0x12e>
  406eaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406eae:	460c      	mov	r4, r1
  406eb0:	4615      	mov	r5, r2
  406eb2:	b083      	sub	sp, #12
  406eb4:	4680      	mov	r8, r0
  406eb6:	f105 060b 	add.w	r6, r5, #11
  406eba:	f7ff fceb 	bl	406894 <__malloc_lock>
  406ebe:	f854 ec04 	ldr.w	lr, [r4, #-4]
  406ec2:	2e16      	cmp	r6, #22
  406ec4:	f02e 0703 	bic.w	r7, lr, #3
  406ec8:	f1a4 0908 	sub.w	r9, r4, #8
  406ecc:	d83c      	bhi.n	406f48 <_realloc_r+0xa4>
  406ece:	2210      	movs	r2, #16
  406ed0:	4616      	mov	r6, r2
  406ed2:	42b5      	cmp	r5, r6
  406ed4:	d83d      	bhi.n	406f52 <_realloc_r+0xae>
  406ed6:	4297      	cmp	r7, r2
  406ed8:	da43      	bge.n	406f62 <_realloc_r+0xbe>
  406eda:	4bc6      	ldr	r3, [pc, #792]	; (4071f4 <_realloc_r+0x350>)
  406edc:	eb09 0007 	add.w	r0, r9, r7
  406ee0:	6899      	ldr	r1, [r3, #8]
  406ee2:	4288      	cmp	r0, r1
  406ee4:	f000 80c3 	beq.w	40706e <_realloc_r+0x1ca>
  406ee8:	6843      	ldr	r3, [r0, #4]
  406eea:	f023 0101 	bic.w	r1, r3, #1
  406eee:	4401      	add	r1, r0
  406ef0:	6849      	ldr	r1, [r1, #4]
  406ef2:	07c9      	lsls	r1, r1, #31
  406ef4:	d54d      	bpl.n	406f92 <_realloc_r+0xee>
  406ef6:	f01e 0f01 	tst.w	lr, #1
  406efa:	f000 809b 	beq.w	407034 <_realloc_r+0x190>
  406efe:	4629      	mov	r1, r5
  406f00:	4640      	mov	r0, r8
  406f02:	f7ff f965 	bl	4061d0 <_malloc_r>
  406f06:	4605      	mov	r5, r0
  406f08:	2800      	cmp	r0, #0
  406f0a:	d03b      	beq.n	406f84 <_realloc_r+0xe0>
  406f0c:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406f10:	f1a0 0208 	sub.w	r2, r0, #8
  406f14:	f023 0301 	bic.w	r3, r3, #1
  406f18:	444b      	add	r3, r9
  406f1a:	429a      	cmp	r2, r3
  406f1c:	f000 812b 	beq.w	407176 <_realloc_r+0x2d2>
  406f20:	1f3a      	subs	r2, r7, #4
  406f22:	2a24      	cmp	r2, #36	; 0x24
  406f24:	f200 8118 	bhi.w	407158 <_realloc_r+0x2b4>
  406f28:	2a13      	cmp	r2, #19
  406f2a:	f200 80eb 	bhi.w	407104 <_realloc_r+0x260>
  406f2e:	4603      	mov	r3, r0
  406f30:	4622      	mov	r2, r4
  406f32:	6811      	ldr	r1, [r2, #0]
  406f34:	6019      	str	r1, [r3, #0]
  406f36:	6851      	ldr	r1, [r2, #4]
  406f38:	6059      	str	r1, [r3, #4]
  406f3a:	6892      	ldr	r2, [r2, #8]
  406f3c:	609a      	str	r2, [r3, #8]
  406f3e:	4621      	mov	r1, r4
  406f40:	4640      	mov	r0, r8
  406f42:	f7ff f849 	bl	405fd8 <_free_r>
  406f46:	e01d      	b.n	406f84 <_realloc_r+0xe0>
  406f48:	f026 0607 	bic.w	r6, r6, #7
  406f4c:	2e00      	cmp	r6, #0
  406f4e:	4632      	mov	r2, r6
  406f50:	dabf      	bge.n	406ed2 <_realloc_r+0x2e>
  406f52:	2500      	movs	r5, #0
  406f54:	230c      	movs	r3, #12
  406f56:	4628      	mov	r0, r5
  406f58:	f8c8 3000 	str.w	r3, [r8]
  406f5c:	b003      	add	sp, #12
  406f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f62:	4625      	mov	r5, r4
  406f64:	1bbb      	subs	r3, r7, r6
  406f66:	2b0f      	cmp	r3, #15
  406f68:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406f6c:	d81d      	bhi.n	406faa <_realloc_r+0x106>
  406f6e:	f002 0201 	and.w	r2, r2, #1
  406f72:	433a      	orrs	r2, r7
  406f74:	eb09 0107 	add.w	r1, r9, r7
  406f78:	f8c9 2004 	str.w	r2, [r9, #4]
  406f7c:	684b      	ldr	r3, [r1, #4]
  406f7e:	f043 0301 	orr.w	r3, r3, #1
  406f82:	604b      	str	r3, [r1, #4]
  406f84:	4640      	mov	r0, r8
  406f86:	f7ff fc8b 	bl	4068a0 <__malloc_unlock>
  406f8a:	4628      	mov	r0, r5
  406f8c:	b003      	add	sp, #12
  406f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f92:	f023 0303 	bic.w	r3, r3, #3
  406f96:	18f9      	adds	r1, r7, r3
  406f98:	4291      	cmp	r1, r2
  406f9a:	db1d      	blt.n	406fd8 <_realloc_r+0x134>
  406f9c:	68c3      	ldr	r3, [r0, #12]
  406f9e:	6882      	ldr	r2, [r0, #8]
  406fa0:	4625      	mov	r5, r4
  406fa2:	60d3      	str	r3, [r2, #12]
  406fa4:	460f      	mov	r7, r1
  406fa6:	609a      	str	r2, [r3, #8]
  406fa8:	e7dc      	b.n	406f64 <_realloc_r+0xc0>
  406faa:	f002 0201 	and.w	r2, r2, #1
  406fae:	eb09 0106 	add.w	r1, r9, r6
  406fb2:	f043 0301 	orr.w	r3, r3, #1
  406fb6:	4332      	orrs	r2, r6
  406fb8:	f8c9 2004 	str.w	r2, [r9, #4]
  406fbc:	444f      	add	r7, r9
  406fbe:	604b      	str	r3, [r1, #4]
  406fc0:	687b      	ldr	r3, [r7, #4]
  406fc2:	3108      	adds	r1, #8
  406fc4:	f043 0301 	orr.w	r3, r3, #1
  406fc8:	607b      	str	r3, [r7, #4]
  406fca:	4640      	mov	r0, r8
  406fcc:	f7ff f804 	bl	405fd8 <_free_r>
  406fd0:	e7d8      	b.n	406f84 <_realloc_r+0xe0>
  406fd2:	4611      	mov	r1, r2
  406fd4:	f7ff b8fc 	b.w	4061d0 <_malloc_r>
  406fd8:	f01e 0f01 	tst.w	lr, #1
  406fdc:	d18f      	bne.n	406efe <_realloc_r+0x5a>
  406fde:	f854 1c08 	ldr.w	r1, [r4, #-8]
  406fe2:	eba9 0a01 	sub.w	sl, r9, r1
  406fe6:	f8da 1004 	ldr.w	r1, [sl, #4]
  406fea:	f021 0103 	bic.w	r1, r1, #3
  406fee:	440b      	add	r3, r1
  406ff0:	443b      	add	r3, r7
  406ff2:	4293      	cmp	r3, r2
  406ff4:	db26      	blt.n	407044 <_realloc_r+0x1a0>
  406ff6:	4655      	mov	r5, sl
  406ff8:	68c1      	ldr	r1, [r0, #12]
  406ffa:	6880      	ldr	r0, [r0, #8]
  406ffc:	1f3a      	subs	r2, r7, #4
  406ffe:	60c1      	str	r1, [r0, #12]
  407000:	6088      	str	r0, [r1, #8]
  407002:	f855 0f08 	ldr.w	r0, [r5, #8]!
  407006:	f8da 100c 	ldr.w	r1, [sl, #12]
  40700a:	2a24      	cmp	r2, #36	; 0x24
  40700c:	60c1      	str	r1, [r0, #12]
  40700e:	6088      	str	r0, [r1, #8]
  407010:	d826      	bhi.n	407060 <_realloc_r+0x1bc>
  407012:	2a13      	cmp	r2, #19
  407014:	f240 8081 	bls.w	40711a <_realloc_r+0x276>
  407018:	6821      	ldr	r1, [r4, #0]
  40701a:	2a1b      	cmp	r2, #27
  40701c:	f8ca 1008 	str.w	r1, [sl, #8]
  407020:	6861      	ldr	r1, [r4, #4]
  407022:	f8ca 100c 	str.w	r1, [sl, #12]
  407026:	f200 80ad 	bhi.w	407184 <_realloc_r+0x2e0>
  40702a:	f104 0008 	add.w	r0, r4, #8
  40702e:	f10a 0210 	add.w	r2, sl, #16
  407032:	e074      	b.n	40711e <_realloc_r+0x27a>
  407034:	f854 3c08 	ldr.w	r3, [r4, #-8]
  407038:	eba9 0a03 	sub.w	sl, r9, r3
  40703c:	f8da 1004 	ldr.w	r1, [sl, #4]
  407040:	f021 0103 	bic.w	r1, r1, #3
  407044:	187b      	adds	r3, r7, r1
  407046:	4293      	cmp	r3, r2
  407048:	f6ff af59 	blt.w	406efe <_realloc_r+0x5a>
  40704c:	4655      	mov	r5, sl
  40704e:	f8da 100c 	ldr.w	r1, [sl, #12]
  407052:	f855 0f08 	ldr.w	r0, [r5, #8]!
  407056:	1f3a      	subs	r2, r7, #4
  407058:	2a24      	cmp	r2, #36	; 0x24
  40705a:	60c1      	str	r1, [r0, #12]
  40705c:	6088      	str	r0, [r1, #8]
  40705e:	d9d8      	bls.n	407012 <_realloc_r+0x16e>
  407060:	4621      	mov	r1, r4
  407062:	4628      	mov	r0, r5
  407064:	461f      	mov	r7, r3
  407066:	46d1      	mov	r9, sl
  407068:	f7ff fbb0 	bl	4067cc <memmove>
  40706c:	e77a      	b.n	406f64 <_realloc_r+0xc0>
  40706e:	6841      	ldr	r1, [r0, #4]
  407070:	f106 0010 	add.w	r0, r6, #16
  407074:	f021 0b03 	bic.w	fp, r1, #3
  407078:	44bb      	add	fp, r7
  40707a:	4583      	cmp	fp, r0
  40707c:	da58      	bge.n	407130 <_realloc_r+0x28c>
  40707e:	f01e 0f01 	tst.w	lr, #1
  407082:	f47f af3c 	bne.w	406efe <_realloc_r+0x5a>
  407086:	f854 1c08 	ldr.w	r1, [r4, #-8]
  40708a:	eba9 0a01 	sub.w	sl, r9, r1
  40708e:	f8da 1004 	ldr.w	r1, [sl, #4]
  407092:	f021 0103 	bic.w	r1, r1, #3
  407096:	448b      	add	fp, r1
  407098:	4558      	cmp	r0, fp
  40709a:	dcd3      	bgt.n	407044 <_realloc_r+0x1a0>
  40709c:	4655      	mov	r5, sl
  40709e:	f8da 100c 	ldr.w	r1, [sl, #12]
  4070a2:	f855 0f08 	ldr.w	r0, [r5, #8]!
  4070a6:	1f3a      	subs	r2, r7, #4
  4070a8:	2a24      	cmp	r2, #36	; 0x24
  4070aa:	60c1      	str	r1, [r0, #12]
  4070ac:	6088      	str	r0, [r1, #8]
  4070ae:	f200 808d 	bhi.w	4071cc <_realloc_r+0x328>
  4070b2:	2a13      	cmp	r2, #19
  4070b4:	f240 8087 	bls.w	4071c6 <_realloc_r+0x322>
  4070b8:	6821      	ldr	r1, [r4, #0]
  4070ba:	2a1b      	cmp	r2, #27
  4070bc:	f8ca 1008 	str.w	r1, [sl, #8]
  4070c0:	6861      	ldr	r1, [r4, #4]
  4070c2:	f8ca 100c 	str.w	r1, [sl, #12]
  4070c6:	f200 8088 	bhi.w	4071da <_realloc_r+0x336>
  4070ca:	f104 0108 	add.w	r1, r4, #8
  4070ce:	f10a 0210 	add.w	r2, sl, #16
  4070d2:	6808      	ldr	r0, [r1, #0]
  4070d4:	6010      	str	r0, [r2, #0]
  4070d6:	6848      	ldr	r0, [r1, #4]
  4070d8:	6050      	str	r0, [r2, #4]
  4070da:	6889      	ldr	r1, [r1, #8]
  4070dc:	6091      	str	r1, [r2, #8]
  4070de:	ebab 0206 	sub.w	r2, fp, r6
  4070e2:	eb0a 0106 	add.w	r1, sl, r6
  4070e6:	f042 0201 	orr.w	r2, r2, #1
  4070ea:	6099      	str	r1, [r3, #8]
  4070ec:	604a      	str	r2, [r1, #4]
  4070ee:	f8da 3004 	ldr.w	r3, [sl, #4]
  4070f2:	4640      	mov	r0, r8
  4070f4:	f003 0301 	and.w	r3, r3, #1
  4070f8:	431e      	orrs	r6, r3
  4070fa:	f8ca 6004 	str.w	r6, [sl, #4]
  4070fe:	f7ff fbcf 	bl	4068a0 <__malloc_unlock>
  407102:	e742      	b.n	406f8a <_realloc_r+0xe6>
  407104:	6823      	ldr	r3, [r4, #0]
  407106:	2a1b      	cmp	r2, #27
  407108:	6003      	str	r3, [r0, #0]
  40710a:	6863      	ldr	r3, [r4, #4]
  40710c:	6043      	str	r3, [r0, #4]
  40710e:	d827      	bhi.n	407160 <_realloc_r+0x2bc>
  407110:	f100 0308 	add.w	r3, r0, #8
  407114:	f104 0208 	add.w	r2, r4, #8
  407118:	e70b      	b.n	406f32 <_realloc_r+0x8e>
  40711a:	4620      	mov	r0, r4
  40711c:	462a      	mov	r2, r5
  40711e:	6801      	ldr	r1, [r0, #0]
  407120:	461f      	mov	r7, r3
  407122:	6011      	str	r1, [r2, #0]
  407124:	6841      	ldr	r1, [r0, #4]
  407126:	46d1      	mov	r9, sl
  407128:	6051      	str	r1, [r2, #4]
  40712a:	6883      	ldr	r3, [r0, #8]
  40712c:	6093      	str	r3, [r2, #8]
  40712e:	e719      	b.n	406f64 <_realloc_r+0xc0>
  407130:	ebab 0b06 	sub.w	fp, fp, r6
  407134:	eb09 0106 	add.w	r1, r9, r6
  407138:	f04b 0201 	orr.w	r2, fp, #1
  40713c:	6099      	str	r1, [r3, #8]
  40713e:	604a      	str	r2, [r1, #4]
  407140:	f854 3c04 	ldr.w	r3, [r4, #-4]
  407144:	4640      	mov	r0, r8
  407146:	f003 0301 	and.w	r3, r3, #1
  40714a:	431e      	orrs	r6, r3
  40714c:	f844 6c04 	str.w	r6, [r4, #-4]
  407150:	f7ff fba6 	bl	4068a0 <__malloc_unlock>
  407154:	4625      	mov	r5, r4
  407156:	e718      	b.n	406f8a <_realloc_r+0xe6>
  407158:	4621      	mov	r1, r4
  40715a:	f7ff fb37 	bl	4067cc <memmove>
  40715e:	e6ee      	b.n	406f3e <_realloc_r+0x9a>
  407160:	68a3      	ldr	r3, [r4, #8]
  407162:	2a24      	cmp	r2, #36	; 0x24
  407164:	6083      	str	r3, [r0, #8]
  407166:	68e3      	ldr	r3, [r4, #12]
  407168:	60c3      	str	r3, [r0, #12]
  40716a:	d018      	beq.n	40719e <_realloc_r+0x2fa>
  40716c:	f100 0310 	add.w	r3, r0, #16
  407170:	f104 0210 	add.w	r2, r4, #16
  407174:	e6dd      	b.n	406f32 <_realloc_r+0x8e>
  407176:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40717a:	4625      	mov	r5, r4
  40717c:	f023 0303 	bic.w	r3, r3, #3
  407180:	441f      	add	r7, r3
  407182:	e6ef      	b.n	406f64 <_realloc_r+0xc0>
  407184:	68a1      	ldr	r1, [r4, #8]
  407186:	2a24      	cmp	r2, #36	; 0x24
  407188:	f8ca 1010 	str.w	r1, [sl, #16]
  40718c:	68e1      	ldr	r1, [r4, #12]
  40718e:	f8ca 1014 	str.w	r1, [sl, #20]
  407192:	d00d      	beq.n	4071b0 <_realloc_r+0x30c>
  407194:	f104 0010 	add.w	r0, r4, #16
  407198:	f10a 0218 	add.w	r2, sl, #24
  40719c:	e7bf      	b.n	40711e <_realloc_r+0x27a>
  40719e:	6922      	ldr	r2, [r4, #16]
  4071a0:	f100 0318 	add.w	r3, r0, #24
  4071a4:	6102      	str	r2, [r0, #16]
  4071a6:	6961      	ldr	r1, [r4, #20]
  4071a8:	f104 0218 	add.w	r2, r4, #24
  4071ac:	6141      	str	r1, [r0, #20]
  4071ae:	e6c0      	b.n	406f32 <_realloc_r+0x8e>
  4071b0:	6922      	ldr	r2, [r4, #16]
  4071b2:	f104 0018 	add.w	r0, r4, #24
  4071b6:	f8ca 2018 	str.w	r2, [sl, #24]
  4071ba:	6961      	ldr	r1, [r4, #20]
  4071bc:	f10a 0220 	add.w	r2, sl, #32
  4071c0:	f8ca 101c 	str.w	r1, [sl, #28]
  4071c4:	e7ab      	b.n	40711e <_realloc_r+0x27a>
  4071c6:	4621      	mov	r1, r4
  4071c8:	462a      	mov	r2, r5
  4071ca:	e782      	b.n	4070d2 <_realloc_r+0x22e>
  4071cc:	4621      	mov	r1, r4
  4071ce:	4628      	mov	r0, r5
  4071d0:	9301      	str	r3, [sp, #4]
  4071d2:	f7ff fafb 	bl	4067cc <memmove>
  4071d6:	9b01      	ldr	r3, [sp, #4]
  4071d8:	e781      	b.n	4070de <_realloc_r+0x23a>
  4071da:	68a1      	ldr	r1, [r4, #8]
  4071dc:	2a24      	cmp	r2, #36	; 0x24
  4071de:	f8ca 1010 	str.w	r1, [sl, #16]
  4071e2:	68e1      	ldr	r1, [r4, #12]
  4071e4:	f8ca 1014 	str.w	r1, [sl, #20]
  4071e8:	d006      	beq.n	4071f8 <_realloc_r+0x354>
  4071ea:	f104 0110 	add.w	r1, r4, #16
  4071ee:	f10a 0218 	add.w	r2, sl, #24
  4071f2:	e76e      	b.n	4070d2 <_realloc_r+0x22e>
  4071f4:	200007a8 	.word	0x200007a8
  4071f8:	6922      	ldr	r2, [r4, #16]
  4071fa:	f104 0118 	add.w	r1, r4, #24
  4071fe:	f8ca 2018 	str.w	r2, [sl, #24]
  407202:	6960      	ldr	r0, [r4, #20]
  407204:	f10a 0220 	add.w	r2, sl, #32
  407208:	f8ca 001c 	str.w	r0, [sl, #28]
  40720c:	e761      	b.n	4070d2 <_realloc_r+0x22e>
  40720e:	bf00      	nop

00407210 <_sbrk_r>:
  407210:	b538      	push	{r3, r4, r5, lr}
  407212:	2300      	movs	r3, #0
  407214:	4c06      	ldr	r4, [pc, #24]	; (407230 <_sbrk_r+0x20>)
  407216:	4605      	mov	r5, r0
  407218:	4608      	mov	r0, r1
  40721a:	6023      	str	r3, [r4, #0]
  40721c:	f7fc f99a 	bl	403554 <_sbrk>
  407220:	1c43      	adds	r3, r0, #1
  407222:	d000      	beq.n	407226 <_sbrk_r+0x16>
  407224:	bd38      	pop	{r3, r4, r5, pc}
  407226:	6823      	ldr	r3, [r4, #0]
  407228:	2b00      	cmp	r3, #0
  40722a:	d0fb      	beq.n	407224 <_sbrk_r+0x14>
  40722c:	602b      	str	r3, [r5, #0]
  40722e:	bd38      	pop	{r3, r4, r5, pc}
  407230:	20000ebc 	.word	0x20000ebc

00407234 <__ssprint_r>:
  407234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407238:	6893      	ldr	r3, [r2, #8]
  40723a:	b083      	sub	sp, #12
  40723c:	4690      	mov	r8, r2
  40723e:	2b00      	cmp	r3, #0
  407240:	d070      	beq.n	407324 <__ssprint_r+0xf0>
  407242:	4682      	mov	sl, r0
  407244:	460c      	mov	r4, r1
  407246:	6817      	ldr	r7, [r2, #0]
  407248:	688d      	ldr	r5, [r1, #8]
  40724a:	6808      	ldr	r0, [r1, #0]
  40724c:	e042      	b.n	4072d4 <__ssprint_r+0xa0>
  40724e:	89a3      	ldrh	r3, [r4, #12]
  407250:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407254:	d02e      	beq.n	4072b4 <__ssprint_r+0x80>
  407256:	6965      	ldr	r5, [r4, #20]
  407258:	6921      	ldr	r1, [r4, #16]
  40725a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40725e:	eba0 0b01 	sub.w	fp, r0, r1
  407262:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  407266:	f10b 0001 	add.w	r0, fp, #1
  40726a:	106d      	asrs	r5, r5, #1
  40726c:	4430      	add	r0, r6
  40726e:	42a8      	cmp	r0, r5
  407270:	462a      	mov	r2, r5
  407272:	bf84      	itt	hi
  407274:	4605      	movhi	r5, r0
  407276:	462a      	movhi	r2, r5
  407278:	055b      	lsls	r3, r3, #21
  40727a:	d538      	bpl.n	4072ee <__ssprint_r+0xba>
  40727c:	4611      	mov	r1, r2
  40727e:	4650      	mov	r0, sl
  407280:	f7fe ffa6 	bl	4061d0 <_malloc_r>
  407284:	2800      	cmp	r0, #0
  407286:	d03c      	beq.n	407302 <__ssprint_r+0xce>
  407288:	465a      	mov	r2, fp
  40728a:	6921      	ldr	r1, [r4, #16]
  40728c:	9001      	str	r0, [sp, #4]
  40728e:	f7fc fa2f 	bl	4036f0 <memcpy>
  407292:	89a2      	ldrh	r2, [r4, #12]
  407294:	9b01      	ldr	r3, [sp, #4]
  407296:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40729a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40729e:	81a2      	strh	r2, [r4, #12]
  4072a0:	eba5 020b 	sub.w	r2, r5, fp
  4072a4:	eb03 000b 	add.w	r0, r3, fp
  4072a8:	6165      	str	r5, [r4, #20]
  4072aa:	46b3      	mov	fp, r6
  4072ac:	4635      	mov	r5, r6
  4072ae:	6123      	str	r3, [r4, #16]
  4072b0:	6020      	str	r0, [r4, #0]
  4072b2:	60a2      	str	r2, [r4, #8]
  4072b4:	465a      	mov	r2, fp
  4072b6:	4649      	mov	r1, r9
  4072b8:	f7ff fa88 	bl	4067cc <memmove>
  4072bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4072c0:	68a2      	ldr	r2, [r4, #8]
  4072c2:	6820      	ldr	r0, [r4, #0]
  4072c4:	1b55      	subs	r5, r2, r5
  4072c6:	4458      	add	r0, fp
  4072c8:	1b9e      	subs	r6, r3, r6
  4072ca:	60a5      	str	r5, [r4, #8]
  4072cc:	6020      	str	r0, [r4, #0]
  4072ce:	f8c8 6008 	str.w	r6, [r8, #8]
  4072d2:	b33e      	cbz	r6, 407324 <__ssprint_r+0xf0>
  4072d4:	687e      	ldr	r6, [r7, #4]
  4072d6:	463b      	mov	r3, r7
  4072d8:	3708      	adds	r7, #8
  4072da:	2e00      	cmp	r6, #0
  4072dc:	d0fa      	beq.n	4072d4 <__ssprint_r+0xa0>
  4072de:	42ae      	cmp	r6, r5
  4072e0:	f8d3 9000 	ldr.w	r9, [r3]
  4072e4:	46ab      	mov	fp, r5
  4072e6:	d2b2      	bcs.n	40724e <__ssprint_r+0x1a>
  4072e8:	4635      	mov	r5, r6
  4072ea:	46b3      	mov	fp, r6
  4072ec:	e7e2      	b.n	4072b4 <__ssprint_r+0x80>
  4072ee:	4650      	mov	r0, sl
  4072f0:	f7ff fdd8 	bl	406ea4 <_realloc_r>
  4072f4:	4603      	mov	r3, r0
  4072f6:	2800      	cmp	r0, #0
  4072f8:	d1d2      	bne.n	4072a0 <__ssprint_r+0x6c>
  4072fa:	6921      	ldr	r1, [r4, #16]
  4072fc:	4650      	mov	r0, sl
  4072fe:	f7fe fe6b 	bl	405fd8 <_free_r>
  407302:	230c      	movs	r3, #12
  407304:	2200      	movs	r2, #0
  407306:	f04f 30ff 	mov.w	r0, #4294967295
  40730a:	f8ca 3000 	str.w	r3, [sl]
  40730e:	89a3      	ldrh	r3, [r4, #12]
  407310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407314:	81a3      	strh	r3, [r4, #12]
  407316:	f8c8 2008 	str.w	r2, [r8, #8]
  40731a:	f8c8 2004 	str.w	r2, [r8, #4]
  40731e:	b003      	add	sp, #12
  407320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407324:	2000      	movs	r0, #0
  407326:	f8c8 0004 	str.w	r0, [r8, #4]
  40732a:	b003      	add	sp, #12
  40732c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407330 <__ascii_wctomb>:
  407330:	b119      	cbz	r1, 40733a <__ascii_wctomb+0xa>
  407332:	2aff      	cmp	r2, #255	; 0xff
  407334:	d803      	bhi.n	40733e <__ascii_wctomb+0xe>
  407336:	700a      	strb	r2, [r1, #0]
  407338:	2101      	movs	r1, #1
  40733a:	4608      	mov	r0, r1
  40733c:	4770      	bx	lr
  40733e:	238a      	movs	r3, #138	; 0x8a
  407340:	f04f 31ff 	mov.w	r1, #4294967295
  407344:	6003      	str	r3, [r0, #0]
  407346:	e7f8      	b.n	40733a <__ascii_wctomb+0xa>

00407348 <__register_exitproc>:
  407348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40734c:	4d2c      	ldr	r5, [pc, #176]	; (407400 <__register_exitproc+0xb8>)
  40734e:	4606      	mov	r6, r0
  407350:	6828      	ldr	r0, [r5, #0]
  407352:	4698      	mov	r8, r3
  407354:	460f      	mov	r7, r1
  407356:	4691      	mov	r9, r2
  407358:	f7fe ff36 	bl	4061c8 <__retarget_lock_acquire_recursive>
  40735c:	4b29      	ldr	r3, [pc, #164]	; (407404 <__register_exitproc+0xbc>)
  40735e:	681c      	ldr	r4, [r3, #0]
  407360:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407364:	2b00      	cmp	r3, #0
  407366:	d03e      	beq.n	4073e6 <__register_exitproc+0x9e>
  407368:	685a      	ldr	r2, [r3, #4]
  40736a:	2a1f      	cmp	r2, #31
  40736c:	dc1c      	bgt.n	4073a8 <__register_exitproc+0x60>
  40736e:	f102 0e01 	add.w	lr, r2, #1
  407372:	b176      	cbz	r6, 407392 <__register_exitproc+0x4a>
  407374:	2101      	movs	r1, #1
  407376:	eb03 0482 	add.w	r4, r3, r2, lsl #2
  40737a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
  40737e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407382:	4091      	lsls	r1, r2
  407384:	4308      	orrs	r0, r1
  407386:	2e02      	cmp	r6, #2
  407388:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40738c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
  407390:	d023      	beq.n	4073da <__register_exitproc+0x92>
  407392:	3202      	adds	r2, #2
  407394:	f8c3 e004 	str.w	lr, [r3, #4]
  407398:	6828      	ldr	r0, [r5, #0]
  40739a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40739e:	f7fe ff15 	bl	4061cc <__retarget_lock_release_recursive>
  4073a2:	2000      	movs	r0, #0
  4073a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4073a8:	4b17      	ldr	r3, [pc, #92]	; (407408 <__register_exitproc+0xc0>)
  4073aa:	b30b      	cbz	r3, 4073f0 <__register_exitproc+0xa8>
  4073ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4073b0:	f3af 8000 	nop.w
  4073b4:	4603      	mov	r3, r0
  4073b6:	b1d8      	cbz	r0, 4073f0 <__register_exitproc+0xa8>
  4073b8:	2000      	movs	r0, #0
  4073ba:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  4073be:	f04f 0e01 	mov.w	lr, #1
  4073c2:	6058      	str	r0, [r3, #4]
  4073c4:	6019      	str	r1, [r3, #0]
  4073c6:	4602      	mov	r2, r0
  4073c8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4073cc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4073d0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
  4073d4:	2e00      	cmp	r6, #0
  4073d6:	d0dc      	beq.n	407392 <__register_exitproc+0x4a>
  4073d8:	e7cc      	b.n	407374 <__register_exitproc+0x2c>
  4073da:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
  4073de:	4301      	orrs	r1, r0
  4073e0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
  4073e4:	e7d5      	b.n	407392 <__register_exitproc+0x4a>
  4073e6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4073ea:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4073ee:	e7bb      	b.n	407368 <__register_exitproc+0x20>
  4073f0:	6828      	ldr	r0, [r5, #0]
  4073f2:	f7fe feeb 	bl	4061cc <__retarget_lock_release_recursive>
  4073f6:	f04f 30ff 	mov.w	r0, #4294967295
  4073fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4073fe:	bf00      	nop
  407400:	20000638 	.word	0x20000638
  407404:	00408218 	.word	0x00408218
  407408:	00000000 	.word	0x00000000

0040740c <_calloc_r>:
  40740c:	b510      	push	{r4, lr}
  40740e:	fb02 f101 	mul.w	r1, r2, r1
  407412:	f7fe fedd 	bl	4061d0 <_malloc_r>
  407416:	4604      	mov	r4, r0
  407418:	b1d8      	cbz	r0, 407452 <_calloc_r+0x46>
  40741a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40741e:	f022 0203 	bic.w	r2, r2, #3
  407422:	3a04      	subs	r2, #4
  407424:	2a24      	cmp	r2, #36	; 0x24
  407426:	d818      	bhi.n	40745a <_calloc_r+0x4e>
  407428:	2a13      	cmp	r2, #19
  40742a:	d914      	bls.n	407456 <_calloc_r+0x4a>
  40742c:	2300      	movs	r3, #0
  40742e:	2a1b      	cmp	r2, #27
  407430:	6003      	str	r3, [r0, #0]
  407432:	6043      	str	r3, [r0, #4]
  407434:	d916      	bls.n	407464 <_calloc_r+0x58>
  407436:	2a24      	cmp	r2, #36	; 0x24
  407438:	6083      	str	r3, [r0, #8]
  40743a:	60c3      	str	r3, [r0, #12]
  40743c:	bf11      	iteee	ne
  40743e:	f100 0210 	addne.w	r2, r0, #16
  407442:	6103      	streq	r3, [r0, #16]
  407444:	6143      	streq	r3, [r0, #20]
  407446:	f100 0218 	addeq.w	r2, r0, #24
  40744a:	2300      	movs	r3, #0
  40744c:	6013      	str	r3, [r2, #0]
  40744e:	6053      	str	r3, [r2, #4]
  407450:	6093      	str	r3, [r2, #8]
  407452:	4620      	mov	r0, r4
  407454:	bd10      	pop	{r4, pc}
  407456:	4602      	mov	r2, r0
  407458:	e7f7      	b.n	40744a <_calloc_r+0x3e>
  40745a:	2100      	movs	r1, #0
  40745c:	f7fc f9be 	bl	4037dc <memset>
  407460:	4620      	mov	r0, r4
  407462:	bd10      	pop	{r4, pc}
  407464:	f100 0208 	add.w	r2, r0, #8
  407468:	e7ef      	b.n	40744a <_calloc_r+0x3e>
  40746a:	bf00      	nop

0040746c <__aeabi_drsub>:
  40746c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407470:	e002      	b.n	407478 <__adddf3>
  407472:	bf00      	nop

00407474 <__aeabi_dsub>:
  407474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407478 <__adddf3>:
  407478:	b530      	push	{r4, r5, lr}
  40747a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40747e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407482:	ea94 0f05 	teq	r4, r5
  407486:	bf08      	it	eq
  407488:	ea90 0f02 	teqeq	r0, r2
  40748c:	bf1f      	itttt	ne
  40748e:	ea54 0c00 	orrsne.w	ip, r4, r0
  407492:	ea55 0c02 	orrsne.w	ip, r5, r2
  407496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40749a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40749e:	f000 80e2 	beq.w	407666 <__adddf3+0x1ee>
  4074a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4074a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4074aa:	bfb8      	it	lt
  4074ac:	426d      	neglt	r5, r5
  4074ae:	dd0c      	ble.n	4074ca <__adddf3+0x52>
  4074b0:	442c      	add	r4, r5
  4074b2:	ea80 0202 	eor.w	r2, r0, r2
  4074b6:	ea81 0303 	eor.w	r3, r1, r3
  4074ba:	ea82 0000 	eor.w	r0, r2, r0
  4074be:	ea83 0101 	eor.w	r1, r3, r1
  4074c2:	ea80 0202 	eor.w	r2, r0, r2
  4074c6:	ea81 0303 	eor.w	r3, r1, r3
  4074ca:	2d36      	cmp	r5, #54	; 0x36
  4074cc:	bf88      	it	hi
  4074ce:	bd30      	pophi	{r4, r5, pc}
  4074d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4074d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4074d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4074dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4074e0:	d002      	beq.n	4074e8 <__adddf3+0x70>
  4074e2:	4240      	negs	r0, r0
  4074e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4074e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4074ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4074f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4074f4:	d002      	beq.n	4074fc <__adddf3+0x84>
  4074f6:	4252      	negs	r2, r2
  4074f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4074fc:	ea94 0f05 	teq	r4, r5
  407500:	f000 80a7 	beq.w	407652 <__adddf3+0x1da>
  407504:	f1a4 0401 	sub.w	r4, r4, #1
  407508:	f1d5 0e20 	rsbs	lr, r5, #32
  40750c:	db0d      	blt.n	40752a <__adddf3+0xb2>
  40750e:	fa02 fc0e 	lsl.w	ip, r2, lr
  407512:	fa22 f205 	lsr.w	r2, r2, r5
  407516:	1880      	adds	r0, r0, r2
  407518:	f141 0100 	adc.w	r1, r1, #0
  40751c:	fa03 f20e 	lsl.w	r2, r3, lr
  407520:	1880      	adds	r0, r0, r2
  407522:	fa43 f305 	asr.w	r3, r3, r5
  407526:	4159      	adcs	r1, r3
  407528:	e00e      	b.n	407548 <__adddf3+0xd0>
  40752a:	f1a5 0520 	sub.w	r5, r5, #32
  40752e:	f10e 0e20 	add.w	lr, lr, #32
  407532:	2a01      	cmp	r2, #1
  407534:	fa03 fc0e 	lsl.w	ip, r3, lr
  407538:	bf28      	it	cs
  40753a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40753e:	fa43 f305 	asr.w	r3, r3, r5
  407542:	18c0      	adds	r0, r0, r3
  407544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40754c:	d507      	bpl.n	40755e <__adddf3+0xe6>
  40754e:	f04f 0e00 	mov.w	lr, #0
  407552:	f1dc 0c00 	rsbs	ip, ip, #0
  407556:	eb7e 0000 	sbcs.w	r0, lr, r0
  40755a:	eb6e 0101 	sbc.w	r1, lr, r1
  40755e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407562:	d31b      	bcc.n	40759c <__adddf3+0x124>
  407564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407568:	d30c      	bcc.n	407584 <__adddf3+0x10c>
  40756a:	0849      	lsrs	r1, r1, #1
  40756c:	ea5f 0030 	movs.w	r0, r0, rrx
  407570:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407574:	f104 0401 	add.w	r4, r4, #1
  407578:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40757c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407580:	f080 809a 	bcs.w	4076b8 <__adddf3+0x240>
  407584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407588:	bf08      	it	eq
  40758a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40758e:	f150 0000 	adcs.w	r0, r0, #0
  407592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407596:	ea41 0105 	orr.w	r1, r1, r5
  40759a:	bd30      	pop	{r4, r5, pc}
  40759c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4075a0:	4140      	adcs	r0, r0
  4075a2:	eb41 0101 	adc.w	r1, r1, r1
  4075a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4075aa:	f1a4 0401 	sub.w	r4, r4, #1
  4075ae:	d1e9      	bne.n	407584 <__adddf3+0x10c>
  4075b0:	f091 0f00 	teq	r1, #0
  4075b4:	bf04      	itt	eq
  4075b6:	4601      	moveq	r1, r0
  4075b8:	2000      	moveq	r0, #0
  4075ba:	fab1 f381 	clz	r3, r1
  4075be:	bf08      	it	eq
  4075c0:	3320      	addeq	r3, #32
  4075c2:	f1a3 030b 	sub.w	r3, r3, #11
  4075c6:	f1b3 0220 	subs.w	r2, r3, #32
  4075ca:	da0c      	bge.n	4075e6 <__adddf3+0x16e>
  4075cc:	320c      	adds	r2, #12
  4075ce:	dd08      	ble.n	4075e2 <__adddf3+0x16a>
  4075d0:	f102 0c14 	add.w	ip, r2, #20
  4075d4:	f1c2 020c 	rsb	r2, r2, #12
  4075d8:	fa01 f00c 	lsl.w	r0, r1, ip
  4075dc:	fa21 f102 	lsr.w	r1, r1, r2
  4075e0:	e00c      	b.n	4075fc <__adddf3+0x184>
  4075e2:	f102 0214 	add.w	r2, r2, #20
  4075e6:	bfd8      	it	le
  4075e8:	f1c2 0c20 	rsble	ip, r2, #32
  4075ec:	fa01 f102 	lsl.w	r1, r1, r2
  4075f0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4075f4:	bfdc      	itt	le
  4075f6:	ea41 010c 	orrle.w	r1, r1, ip
  4075fa:	4090      	lslle	r0, r2
  4075fc:	1ae4      	subs	r4, r4, r3
  4075fe:	bfa2      	ittt	ge
  407600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407604:	4329      	orrge	r1, r5
  407606:	bd30      	popge	{r4, r5, pc}
  407608:	ea6f 0404 	mvn.w	r4, r4
  40760c:	3c1f      	subs	r4, #31
  40760e:	da1c      	bge.n	40764a <__adddf3+0x1d2>
  407610:	340c      	adds	r4, #12
  407612:	dc0e      	bgt.n	407632 <__adddf3+0x1ba>
  407614:	f104 0414 	add.w	r4, r4, #20
  407618:	f1c4 0220 	rsb	r2, r4, #32
  40761c:	fa20 f004 	lsr.w	r0, r0, r4
  407620:	fa01 f302 	lsl.w	r3, r1, r2
  407624:	ea40 0003 	orr.w	r0, r0, r3
  407628:	fa21 f304 	lsr.w	r3, r1, r4
  40762c:	ea45 0103 	orr.w	r1, r5, r3
  407630:	bd30      	pop	{r4, r5, pc}
  407632:	f1c4 040c 	rsb	r4, r4, #12
  407636:	f1c4 0220 	rsb	r2, r4, #32
  40763a:	fa20 f002 	lsr.w	r0, r0, r2
  40763e:	fa01 f304 	lsl.w	r3, r1, r4
  407642:	ea40 0003 	orr.w	r0, r0, r3
  407646:	4629      	mov	r1, r5
  407648:	bd30      	pop	{r4, r5, pc}
  40764a:	fa21 f004 	lsr.w	r0, r1, r4
  40764e:	4629      	mov	r1, r5
  407650:	bd30      	pop	{r4, r5, pc}
  407652:	f094 0f00 	teq	r4, #0
  407656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40765a:	bf06      	itte	eq
  40765c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407660:	3401      	addeq	r4, #1
  407662:	3d01      	subne	r5, #1
  407664:	e74e      	b.n	407504 <__adddf3+0x8c>
  407666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40766a:	bf18      	it	ne
  40766c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407670:	d029      	beq.n	4076c6 <__adddf3+0x24e>
  407672:	ea94 0f05 	teq	r4, r5
  407676:	bf08      	it	eq
  407678:	ea90 0f02 	teqeq	r0, r2
  40767c:	d005      	beq.n	40768a <__adddf3+0x212>
  40767e:	ea54 0c00 	orrs.w	ip, r4, r0
  407682:	bf04      	itt	eq
  407684:	4619      	moveq	r1, r3
  407686:	4610      	moveq	r0, r2
  407688:	bd30      	pop	{r4, r5, pc}
  40768a:	ea91 0f03 	teq	r1, r3
  40768e:	bf1e      	ittt	ne
  407690:	2100      	movne	r1, #0
  407692:	2000      	movne	r0, #0
  407694:	bd30      	popne	{r4, r5, pc}
  407696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40769a:	d105      	bne.n	4076a8 <__adddf3+0x230>
  40769c:	0040      	lsls	r0, r0, #1
  40769e:	4149      	adcs	r1, r1
  4076a0:	bf28      	it	cs
  4076a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4076a6:	bd30      	pop	{r4, r5, pc}
  4076a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4076ac:	bf3c      	itt	cc
  4076ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4076b2:	bd30      	popcc	{r4, r5, pc}
  4076b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4076b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4076bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4076c0:	f04f 0000 	mov.w	r0, #0
  4076c4:	bd30      	pop	{r4, r5, pc}
  4076c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4076ca:	bf1a      	itte	ne
  4076cc:	4619      	movne	r1, r3
  4076ce:	4610      	movne	r0, r2
  4076d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4076d4:	bf1c      	itt	ne
  4076d6:	460b      	movne	r3, r1
  4076d8:	4602      	movne	r2, r0
  4076da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4076de:	bf06      	itte	eq
  4076e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4076e4:	ea91 0f03 	teqeq	r1, r3
  4076e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4076ec:	bd30      	pop	{r4, r5, pc}
  4076ee:	bf00      	nop

004076f0 <__aeabi_ui2d>:
  4076f0:	f090 0f00 	teq	r0, #0
  4076f4:	bf04      	itt	eq
  4076f6:	2100      	moveq	r1, #0
  4076f8:	4770      	bxeq	lr
  4076fa:	b530      	push	{r4, r5, lr}
  4076fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407700:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407704:	f04f 0500 	mov.w	r5, #0
  407708:	f04f 0100 	mov.w	r1, #0
  40770c:	e750      	b.n	4075b0 <__adddf3+0x138>
  40770e:	bf00      	nop

00407710 <__aeabi_i2d>:
  407710:	f090 0f00 	teq	r0, #0
  407714:	bf04      	itt	eq
  407716:	2100      	moveq	r1, #0
  407718:	4770      	bxeq	lr
  40771a:	b530      	push	{r4, r5, lr}
  40771c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407720:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407728:	bf48      	it	mi
  40772a:	4240      	negmi	r0, r0
  40772c:	f04f 0100 	mov.w	r1, #0
  407730:	e73e      	b.n	4075b0 <__adddf3+0x138>
  407732:	bf00      	nop

00407734 <__aeabi_f2d>:
  407734:	0042      	lsls	r2, r0, #1
  407736:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40773a:	ea4f 0131 	mov.w	r1, r1, rrx
  40773e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407742:	bf1f      	itttt	ne
  407744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40774c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407750:	4770      	bxne	lr
  407752:	f092 0f00 	teq	r2, #0
  407756:	bf14      	ite	ne
  407758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40775c:	4770      	bxeq	lr
  40775e:	b530      	push	{r4, r5, lr}
  407760:	f44f 7460 	mov.w	r4, #896	; 0x380
  407764:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40776c:	e720      	b.n	4075b0 <__adddf3+0x138>
  40776e:	bf00      	nop

00407770 <__aeabi_ul2d>:
  407770:	ea50 0201 	orrs.w	r2, r0, r1
  407774:	bf08      	it	eq
  407776:	4770      	bxeq	lr
  407778:	b530      	push	{r4, r5, lr}
  40777a:	f04f 0500 	mov.w	r5, #0
  40777e:	e00a      	b.n	407796 <__aeabi_l2d+0x16>

00407780 <__aeabi_l2d>:
  407780:	ea50 0201 	orrs.w	r2, r0, r1
  407784:	bf08      	it	eq
  407786:	4770      	bxeq	lr
  407788:	b530      	push	{r4, r5, lr}
  40778a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40778e:	d502      	bpl.n	407796 <__aeabi_l2d+0x16>
  407790:	4240      	negs	r0, r0
  407792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407796:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40779a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40779e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4077a2:	f43f aedc 	beq.w	40755e <__adddf3+0xe6>
  4077a6:	f04f 0203 	mov.w	r2, #3
  4077aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4077ae:	bf18      	it	ne
  4077b0:	3203      	addne	r2, #3
  4077b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4077b6:	bf18      	it	ne
  4077b8:	3203      	addne	r2, #3
  4077ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4077be:	f1c2 0320 	rsb	r3, r2, #32
  4077c2:	fa00 fc03 	lsl.w	ip, r0, r3
  4077c6:	fa20 f002 	lsr.w	r0, r0, r2
  4077ca:	fa01 fe03 	lsl.w	lr, r1, r3
  4077ce:	ea40 000e 	orr.w	r0, r0, lr
  4077d2:	fa21 f102 	lsr.w	r1, r1, r2
  4077d6:	4414      	add	r4, r2
  4077d8:	e6c1      	b.n	40755e <__adddf3+0xe6>
  4077da:	bf00      	nop

004077dc <__aeabi_dmul>:
  4077dc:	b570      	push	{r4, r5, r6, lr}
  4077de:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4077e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4077e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4077ea:	bf1d      	ittte	ne
  4077ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4077f0:	ea94 0f0c 	teqne	r4, ip
  4077f4:	ea95 0f0c 	teqne	r5, ip
  4077f8:	f000 f8de 	bleq	4079b8 <__aeabi_dmul+0x1dc>
  4077fc:	442c      	add	r4, r5
  4077fe:	ea81 0603 	eor.w	r6, r1, r3
  407802:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407806:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40780a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40780e:	bf18      	it	ne
  407810:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407814:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40781c:	d038      	beq.n	407890 <__aeabi_dmul+0xb4>
  40781e:	fba0 ce02 	umull	ip, lr, r0, r2
  407822:	f04f 0500 	mov.w	r5, #0
  407826:	fbe1 e502 	umlal	lr, r5, r1, r2
  40782a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40782e:	fbe0 e503 	umlal	lr, r5, r0, r3
  407832:	f04f 0600 	mov.w	r6, #0
  407836:	fbe1 5603 	umlal	r5, r6, r1, r3
  40783a:	f09c 0f00 	teq	ip, #0
  40783e:	bf18      	it	ne
  407840:	f04e 0e01 	orrne.w	lr, lr, #1
  407844:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407848:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40784c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407850:	d204      	bcs.n	40785c <__aeabi_dmul+0x80>
  407852:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407856:	416d      	adcs	r5, r5
  407858:	eb46 0606 	adc.w	r6, r6, r6
  40785c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407860:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407864:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407868:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40786c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407870:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407874:	bf88      	it	hi
  407876:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40787a:	d81e      	bhi.n	4078ba <__aeabi_dmul+0xde>
  40787c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407880:	bf08      	it	eq
  407882:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407886:	f150 0000 	adcs.w	r0, r0, #0
  40788a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40788e:	bd70      	pop	{r4, r5, r6, pc}
  407890:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407894:	ea46 0101 	orr.w	r1, r6, r1
  407898:	ea40 0002 	orr.w	r0, r0, r2
  40789c:	ea81 0103 	eor.w	r1, r1, r3
  4078a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4078a4:	bfc2      	ittt	gt
  4078a6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4078aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4078ae:	bd70      	popgt	{r4, r5, r6, pc}
  4078b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4078b4:	f04f 0e00 	mov.w	lr, #0
  4078b8:	3c01      	subs	r4, #1
  4078ba:	f300 80ab 	bgt.w	407a14 <__aeabi_dmul+0x238>
  4078be:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4078c2:	bfde      	ittt	le
  4078c4:	2000      	movle	r0, #0
  4078c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4078ca:	bd70      	pople	{r4, r5, r6, pc}
  4078cc:	f1c4 0400 	rsb	r4, r4, #0
  4078d0:	3c20      	subs	r4, #32
  4078d2:	da35      	bge.n	407940 <__aeabi_dmul+0x164>
  4078d4:	340c      	adds	r4, #12
  4078d6:	dc1b      	bgt.n	407910 <__aeabi_dmul+0x134>
  4078d8:	f104 0414 	add.w	r4, r4, #20
  4078dc:	f1c4 0520 	rsb	r5, r4, #32
  4078e0:	fa00 f305 	lsl.w	r3, r0, r5
  4078e4:	fa20 f004 	lsr.w	r0, r0, r4
  4078e8:	fa01 f205 	lsl.w	r2, r1, r5
  4078ec:	ea40 0002 	orr.w	r0, r0, r2
  4078f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4078f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4078f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4078fc:	fa21 f604 	lsr.w	r6, r1, r4
  407900:	eb42 0106 	adc.w	r1, r2, r6
  407904:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407908:	bf08      	it	eq
  40790a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40790e:	bd70      	pop	{r4, r5, r6, pc}
  407910:	f1c4 040c 	rsb	r4, r4, #12
  407914:	f1c4 0520 	rsb	r5, r4, #32
  407918:	fa00 f304 	lsl.w	r3, r0, r4
  40791c:	fa20 f005 	lsr.w	r0, r0, r5
  407920:	fa01 f204 	lsl.w	r2, r1, r4
  407924:	ea40 0002 	orr.w	r0, r0, r2
  407928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40792c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407930:	f141 0100 	adc.w	r1, r1, #0
  407934:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407938:	bf08      	it	eq
  40793a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40793e:	bd70      	pop	{r4, r5, r6, pc}
  407940:	f1c4 0520 	rsb	r5, r4, #32
  407944:	fa00 f205 	lsl.w	r2, r0, r5
  407948:	ea4e 0e02 	orr.w	lr, lr, r2
  40794c:	fa20 f304 	lsr.w	r3, r0, r4
  407950:	fa01 f205 	lsl.w	r2, r1, r5
  407954:	ea43 0302 	orr.w	r3, r3, r2
  407958:	fa21 f004 	lsr.w	r0, r1, r4
  40795c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407960:	fa21 f204 	lsr.w	r2, r1, r4
  407964:	ea20 0002 	bic.w	r0, r0, r2
  407968:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40796c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407970:	bf08      	it	eq
  407972:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407976:	bd70      	pop	{r4, r5, r6, pc}
  407978:	f094 0f00 	teq	r4, #0
  40797c:	d10f      	bne.n	40799e <__aeabi_dmul+0x1c2>
  40797e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407982:	0040      	lsls	r0, r0, #1
  407984:	eb41 0101 	adc.w	r1, r1, r1
  407988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40798c:	bf08      	it	eq
  40798e:	3c01      	subeq	r4, #1
  407990:	d0f7      	beq.n	407982 <__aeabi_dmul+0x1a6>
  407992:	ea41 0106 	orr.w	r1, r1, r6
  407996:	f095 0f00 	teq	r5, #0
  40799a:	bf18      	it	ne
  40799c:	4770      	bxne	lr
  40799e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4079a2:	0052      	lsls	r2, r2, #1
  4079a4:	eb43 0303 	adc.w	r3, r3, r3
  4079a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4079ac:	bf08      	it	eq
  4079ae:	3d01      	subeq	r5, #1
  4079b0:	d0f7      	beq.n	4079a2 <__aeabi_dmul+0x1c6>
  4079b2:	ea43 0306 	orr.w	r3, r3, r6
  4079b6:	4770      	bx	lr
  4079b8:	ea94 0f0c 	teq	r4, ip
  4079bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4079c0:	bf18      	it	ne
  4079c2:	ea95 0f0c 	teqne	r5, ip
  4079c6:	d00c      	beq.n	4079e2 <__aeabi_dmul+0x206>
  4079c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4079cc:	bf18      	it	ne
  4079ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4079d2:	d1d1      	bne.n	407978 <__aeabi_dmul+0x19c>
  4079d4:	ea81 0103 	eor.w	r1, r1, r3
  4079d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4079dc:	f04f 0000 	mov.w	r0, #0
  4079e0:	bd70      	pop	{r4, r5, r6, pc}
  4079e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4079e6:	bf06      	itte	eq
  4079e8:	4610      	moveq	r0, r2
  4079ea:	4619      	moveq	r1, r3
  4079ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4079f0:	d019      	beq.n	407a26 <__aeabi_dmul+0x24a>
  4079f2:	ea94 0f0c 	teq	r4, ip
  4079f6:	d102      	bne.n	4079fe <__aeabi_dmul+0x222>
  4079f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4079fc:	d113      	bne.n	407a26 <__aeabi_dmul+0x24a>
  4079fe:	ea95 0f0c 	teq	r5, ip
  407a02:	d105      	bne.n	407a10 <__aeabi_dmul+0x234>
  407a04:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407a08:	bf1c      	itt	ne
  407a0a:	4610      	movne	r0, r2
  407a0c:	4619      	movne	r1, r3
  407a0e:	d10a      	bne.n	407a26 <__aeabi_dmul+0x24a>
  407a10:	ea81 0103 	eor.w	r1, r1, r3
  407a14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407a18:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407a1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407a20:	f04f 0000 	mov.w	r0, #0
  407a24:	bd70      	pop	{r4, r5, r6, pc}
  407a26:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407a2a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407a2e:	bd70      	pop	{r4, r5, r6, pc}

00407a30 <__aeabi_ddiv>:
  407a30:	b570      	push	{r4, r5, r6, lr}
  407a32:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407a36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407a3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407a3e:	bf1d      	ittte	ne
  407a40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407a44:	ea94 0f0c 	teqne	r4, ip
  407a48:	ea95 0f0c 	teqne	r5, ip
  407a4c:	f000 f8a7 	bleq	407b9e <__aeabi_ddiv+0x16e>
  407a50:	eba4 0405 	sub.w	r4, r4, r5
  407a54:	ea81 0e03 	eor.w	lr, r1, r3
  407a58:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407a5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407a60:	f000 8088 	beq.w	407b74 <__aeabi_ddiv+0x144>
  407a64:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407a68:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407a6c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407a70:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407a74:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407a78:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407a7c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407a80:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407a84:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407a88:	429d      	cmp	r5, r3
  407a8a:	bf08      	it	eq
  407a8c:	4296      	cmpeq	r6, r2
  407a8e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407a92:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407a96:	d202      	bcs.n	407a9e <__aeabi_ddiv+0x6e>
  407a98:	085b      	lsrs	r3, r3, #1
  407a9a:	ea4f 0232 	mov.w	r2, r2, rrx
  407a9e:	1ab6      	subs	r6, r6, r2
  407aa0:	eb65 0503 	sbc.w	r5, r5, r3
  407aa4:	085b      	lsrs	r3, r3, #1
  407aa6:	ea4f 0232 	mov.w	r2, r2, rrx
  407aaa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407aae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407ab2:	ebb6 0e02 	subs.w	lr, r6, r2
  407ab6:	eb75 0e03 	sbcs.w	lr, r5, r3
  407aba:	bf22      	ittt	cs
  407abc:	1ab6      	subcs	r6, r6, r2
  407abe:	4675      	movcs	r5, lr
  407ac0:	ea40 000c 	orrcs.w	r0, r0, ip
  407ac4:	085b      	lsrs	r3, r3, #1
  407ac6:	ea4f 0232 	mov.w	r2, r2, rrx
  407aca:	ebb6 0e02 	subs.w	lr, r6, r2
  407ace:	eb75 0e03 	sbcs.w	lr, r5, r3
  407ad2:	bf22      	ittt	cs
  407ad4:	1ab6      	subcs	r6, r6, r2
  407ad6:	4675      	movcs	r5, lr
  407ad8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407adc:	085b      	lsrs	r3, r3, #1
  407ade:	ea4f 0232 	mov.w	r2, r2, rrx
  407ae2:	ebb6 0e02 	subs.w	lr, r6, r2
  407ae6:	eb75 0e03 	sbcs.w	lr, r5, r3
  407aea:	bf22      	ittt	cs
  407aec:	1ab6      	subcs	r6, r6, r2
  407aee:	4675      	movcs	r5, lr
  407af0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407af4:	085b      	lsrs	r3, r3, #1
  407af6:	ea4f 0232 	mov.w	r2, r2, rrx
  407afa:	ebb6 0e02 	subs.w	lr, r6, r2
  407afe:	eb75 0e03 	sbcs.w	lr, r5, r3
  407b02:	bf22      	ittt	cs
  407b04:	1ab6      	subcs	r6, r6, r2
  407b06:	4675      	movcs	r5, lr
  407b08:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407b0c:	ea55 0e06 	orrs.w	lr, r5, r6
  407b10:	d018      	beq.n	407b44 <__aeabi_ddiv+0x114>
  407b12:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407b16:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407b1a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407b1e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407b22:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407b26:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407b2a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407b2e:	d1c0      	bne.n	407ab2 <__aeabi_ddiv+0x82>
  407b30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407b34:	d10b      	bne.n	407b4e <__aeabi_ddiv+0x11e>
  407b36:	ea41 0100 	orr.w	r1, r1, r0
  407b3a:	f04f 0000 	mov.w	r0, #0
  407b3e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407b42:	e7b6      	b.n	407ab2 <__aeabi_ddiv+0x82>
  407b44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407b48:	bf04      	itt	eq
  407b4a:	4301      	orreq	r1, r0
  407b4c:	2000      	moveq	r0, #0
  407b4e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407b52:	bf88      	it	hi
  407b54:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407b58:	f63f aeaf 	bhi.w	4078ba <__aeabi_dmul+0xde>
  407b5c:	ebb5 0c03 	subs.w	ip, r5, r3
  407b60:	bf04      	itt	eq
  407b62:	ebb6 0c02 	subseq.w	ip, r6, r2
  407b66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407b6a:	f150 0000 	adcs.w	r0, r0, #0
  407b6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407b72:	bd70      	pop	{r4, r5, r6, pc}
  407b74:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407b78:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407b7c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407b80:	bfc2      	ittt	gt
  407b82:	ebd4 050c 	rsbsgt	r5, r4, ip
  407b86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407b8a:	bd70      	popgt	{r4, r5, r6, pc}
  407b8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407b90:	f04f 0e00 	mov.w	lr, #0
  407b94:	3c01      	subs	r4, #1
  407b96:	e690      	b.n	4078ba <__aeabi_dmul+0xde>
  407b98:	ea45 0e06 	orr.w	lr, r5, r6
  407b9c:	e68d      	b.n	4078ba <__aeabi_dmul+0xde>
  407b9e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407ba2:	ea94 0f0c 	teq	r4, ip
  407ba6:	bf08      	it	eq
  407ba8:	ea95 0f0c 	teqeq	r5, ip
  407bac:	f43f af3b 	beq.w	407a26 <__aeabi_dmul+0x24a>
  407bb0:	ea94 0f0c 	teq	r4, ip
  407bb4:	d10a      	bne.n	407bcc <__aeabi_ddiv+0x19c>
  407bb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407bba:	f47f af34 	bne.w	407a26 <__aeabi_dmul+0x24a>
  407bbe:	ea95 0f0c 	teq	r5, ip
  407bc2:	f47f af25 	bne.w	407a10 <__aeabi_dmul+0x234>
  407bc6:	4610      	mov	r0, r2
  407bc8:	4619      	mov	r1, r3
  407bca:	e72c      	b.n	407a26 <__aeabi_dmul+0x24a>
  407bcc:	ea95 0f0c 	teq	r5, ip
  407bd0:	d106      	bne.n	407be0 <__aeabi_ddiv+0x1b0>
  407bd2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407bd6:	f43f aefd 	beq.w	4079d4 <__aeabi_dmul+0x1f8>
  407bda:	4610      	mov	r0, r2
  407bdc:	4619      	mov	r1, r3
  407bde:	e722      	b.n	407a26 <__aeabi_dmul+0x24a>
  407be0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407be4:	bf18      	it	ne
  407be6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407bea:	f47f aec5 	bne.w	407978 <__aeabi_dmul+0x19c>
  407bee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  407bf2:	f47f af0d 	bne.w	407a10 <__aeabi_dmul+0x234>
  407bf6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407bfa:	f47f aeeb 	bne.w	4079d4 <__aeabi_dmul+0x1f8>
  407bfe:	e712      	b.n	407a26 <__aeabi_dmul+0x24a>

00407c00 <__gedf2>:
  407c00:	f04f 3cff 	mov.w	ip, #4294967295
  407c04:	e006      	b.n	407c14 <__cmpdf2+0x4>
  407c06:	bf00      	nop

00407c08 <__ledf2>:
  407c08:	f04f 0c01 	mov.w	ip, #1
  407c0c:	e002      	b.n	407c14 <__cmpdf2+0x4>
  407c0e:	bf00      	nop

00407c10 <__cmpdf2>:
  407c10:	f04f 0c01 	mov.w	ip, #1
  407c14:	f84d cd04 	str.w	ip, [sp, #-4]!
  407c18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407c1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407c20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407c24:	bf18      	it	ne
  407c26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407c2a:	d01b      	beq.n	407c64 <__cmpdf2+0x54>
  407c2c:	b001      	add	sp, #4
  407c2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407c32:	bf0c      	ite	eq
  407c34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407c38:	ea91 0f03 	teqne	r1, r3
  407c3c:	bf02      	ittt	eq
  407c3e:	ea90 0f02 	teqeq	r0, r2
  407c42:	2000      	moveq	r0, #0
  407c44:	4770      	bxeq	lr
  407c46:	f110 0f00 	cmn.w	r0, #0
  407c4a:	ea91 0f03 	teq	r1, r3
  407c4e:	bf58      	it	pl
  407c50:	4299      	cmppl	r1, r3
  407c52:	bf08      	it	eq
  407c54:	4290      	cmpeq	r0, r2
  407c56:	bf2c      	ite	cs
  407c58:	17d8      	asrcs	r0, r3, #31
  407c5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407c5e:	f040 0001 	orr.w	r0, r0, #1
  407c62:	4770      	bx	lr
  407c64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407c68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407c6c:	d102      	bne.n	407c74 <__cmpdf2+0x64>
  407c6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407c72:	d107      	bne.n	407c84 <__cmpdf2+0x74>
  407c74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407c78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407c7c:	d1d6      	bne.n	407c2c <__cmpdf2+0x1c>
  407c7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407c82:	d0d3      	beq.n	407c2c <__cmpdf2+0x1c>
  407c84:	f85d 0b04 	ldr.w	r0, [sp], #4
  407c88:	4770      	bx	lr
  407c8a:	bf00      	nop

00407c8c <__aeabi_cdrcmple>:
  407c8c:	4684      	mov	ip, r0
  407c8e:	4610      	mov	r0, r2
  407c90:	4662      	mov	r2, ip
  407c92:	468c      	mov	ip, r1
  407c94:	4619      	mov	r1, r3
  407c96:	4663      	mov	r3, ip
  407c98:	e000      	b.n	407c9c <__aeabi_cdcmpeq>
  407c9a:	bf00      	nop

00407c9c <__aeabi_cdcmpeq>:
  407c9c:	b501      	push	{r0, lr}
  407c9e:	f7ff ffb7 	bl	407c10 <__cmpdf2>
  407ca2:	2800      	cmp	r0, #0
  407ca4:	bf48      	it	mi
  407ca6:	f110 0f00 	cmnmi.w	r0, #0
  407caa:	bd01      	pop	{r0, pc}

00407cac <__aeabi_dcmpeq>:
  407cac:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cb0:	f7ff fff4 	bl	407c9c <__aeabi_cdcmpeq>
  407cb4:	bf0c      	ite	eq
  407cb6:	2001      	moveq	r0, #1
  407cb8:	2000      	movne	r0, #0
  407cba:	f85d fb08 	ldr.w	pc, [sp], #8
  407cbe:	bf00      	nop

00407cc0 <__aeabi_dcmplt>:
  407cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cc4:	f7ff ffea 	bl	407c9c <__aeabi_cdcmpeq>
  407cc8:	bf34      	ite	cc
  407cca:	2001      	movcc	r0, #1
  407ccc:	2000      	movcs	r0, #0
  407cce:	f85d fb08 	ldr.w	pc, [sp], #8
  407cd2:	bf00      	nop

00407cd4 <__aeabi_dcmple>:
  407cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cd8:	f7ff ffe0 	bl	407c9c <__aeabi_cdcmpeq>
  407cdc:	bf94      	ite	ls
  407cde:	2001      	movls	r0, #1
  407ce0:	2000      	movhi	r0, #0
  407ce2:	f85d fb08 	ldr.w	pc, [sp], #8
  407ce6:	bf00      	nop

00407ce8 <__aeabi_dcmpge>:
  407ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cec:	f7ff ffce 	bl	407c8c <__aeabi_cdrcmple>
  407cf0:	bf94      	ite	ls
  407cf2:	2001      	movls	r0, #1
  407cf4:	2000      	movhi	r0, #0
  407cf6:	f85d fb08 	ldr.w	pc, [sp], #8
  407cfa:	bf00      	nop

00407cfc <__aeabi_dcmpgt>:
  407cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
  407d00:	f7ff ffc4 	bl	407c8c <__aeabi_cdrcmple>
  407d04:	bf34      	ite	cc
  407d06:	2001      	movcc	r0, #1
  407d08:	2000      	movcs	r0, #0
  407d0a:	f85d fb08 	ldr.w	pc, [sp], #8
  407d0e:	bf00      	nop

00407d10 <__aeabi_dcmpun>:
  407d10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407d14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407d18:	d102      	bne.n	407d20 <__aeabi_dcmpun+0x10>
  407d1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407d1e:	d10a      	bne.n	407d36 <__aeabi_dcmpun+0x26>
  407d20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407d24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407d28:	d102      	bne.n	407d30 <__aeabi_dcmpun+0x20>
  407d2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407d2e:	d102      	bne.n	407d36 <__aeabi_dcmpun+0x26>
  407d30:	f04f 0000 	mov.w	r0, #0
  407d34:	4770      	bx	lr
  407d36:	f04f 0001 	mov.w	r0, #1
  407d3a:	4770      	bx	lr

00407d3c <__aeabi_d2iz>:
  407d3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407d40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407d44:	d215      	bcs.n	407d72 <__aeabi_d2iz+0x36>
  407d46:	d511      	bpl.n	407d6c <__aeabi_d2iz+0x30>
  407d48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407d4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407d50:	d912      	bls.n	407d78 <__aeabi_d2iz+0x3c>
  407d52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407d56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407d5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407d5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407d62:	fa23 f002 	lsr.w	r0, r3, r2
  407d66:	bf18      	it	ne
  407d68:	4240      	negne	r0, r0
  407d6a:	4770      	bx	lr
  407d6c:	f04f 0000 	mov.w	r0, #0
  407d70:	4770      	bx	lr
  407d72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407d76:	d105      	bne.n	407d84 <__aeabi_d2iz+0x48>
  407d78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407d7c:	bf08      	it	eq
  407d7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407d82:	4770      	bx	lr
  407d84:	f04f 0000 	mov.w	r0, #0
  407d88:	4770      	bx	lr
  407d8a:	bf00      	nop

00407d8c <__aeabi_uldivmod>:
  407d8c:	b953      	cbnz	r3, 407da4 <__aeabi_uldivmod+0x18>
  407d8e:	b94a      	cbnz	r2, 407da4 <__aeabi_uldivmod+0x18>
  407d90:	2900      	cmp	r1, #0
  407d92:	bf08      	it	eq
  407d94:	2800      	cmpeq	r0, #0
  407d96:	bf1c      	itt	ne
  407d98:	f04f 31ff 	movne.w	r1, #4294967295
  407d9c:	f04f 30ff 	movne.w	r0, #4294967295
  407da0:	f000 b97a 	b.w	408098 <__aeabi_idiv0>
  407da4:	f1ad 0c08 	sub.w	ip, sp, #8
  407da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407dac:	f000 f806 	bl	407dbc <__udivmoddi4>
  407db0:	f8dd e004 	ldr.w	lr, [sp, #4]
  407db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407db8:	b004      	add	sp, #16
  407dba:	4770      	bx	lr

00407dbc <__udivmoddi4>:
  407dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407dc0:	468c      	mov	ip, r1
  407dc2:	460e      	mov	r6, r1
  407dc4:	4604      	mov	r4, r0
  407dc6:	9d08      	ldr	r5, [sp, #32]
  407dc8:	2b00      	cmp	r3, #0
  407dca:	d150      	bne.n	407e6e <__udivmoddi4+0xb2>
  407dcc:	428a      	cmp	r2, r1
  407dce:	4617      	mov	r7, r2
  407dd0:	d96c      	bls.n	407eac <__udivmoddi4+0xf0>
  407dd2:	fab2 fe82 	clz	lr, r2
  407dd6:	f1be 0f00 	cmp.w	lr, #0
  407dda:	d00b      	beq.n	407df4 <__udivmoddi4+0x38>
  407ddc:	f1ce 0c20 	rsb	ip, lr, #32
  407de0:	fa01 f60e 	lsl.w	r6, r1, lr
  407de4:	fa20 fc0c 	lsr.w	ip, r0, ip
  407de8:	fa02 f70e 	lsl.w	r7, r2, lr
  407dec:	ea4c 0c06 	orr.w	ip, ip, r6
  407df0:	fa00 f40e 	lsl.w	r4, r0, lr
  407df4:	0c3a      	lsrs	r2, r7, #16
  407df6:	fbbc f9f2 	udiv	r9, ip, r2
  407dfa:	b2bb      	uxth	r3, r7
  407dfc:	fb02 cc19 	mls	ip, r2, r9, ip
  407e00:	fb09 fa03 	mul.w	sl, r9, r3
  407e04:	ea4f 4814 	mov.w	r8, r4, lsr #16
  407e08:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
  407e0c:	45b2      	cmp	sl, r6
  407e0e:	d90a      	bls.n	407e26 <__udivmoddi4+0x6a>
  407e10:	19f6      	adds	r6, r6, r7
  407e12:	f109 31ff 	add.w	r1, r9, #4294967295
  407e16:	f080 8125 	bcs.w	408064 <__udivmoddi4+0x2a8>
  407e1a:	45b2      	cmp	sl, r6
  407e1c:	f240 8122 	bls.w	408064 <__udivmoddi4+0x2a8>
  407e20:	f1a9 0902 	sub.w	r9, r9, #2
  407e24:	443e      	add	r6, r7
  407e26:	eba6 060a 	sub.w	r6, r6, sl
  407e2a:	fbb6 f0f2 	udiv	r0, r6, r2
  407e2e:	fb02 6610 	mls	r6, r2, r0, r6
  407e32:	fb00 f303 	mul.w	r3, r0, r3
  407e36:	b2a4      	uxth	r4, r4
  407e38:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  407e3c:	42a3      	cmp	r3, r4
  407e3e:	d909      	bls.n	407e54 <__udivmoddi4+0x98>
  407e40:	19e4      	adds	r4, r4, r7
  407e42:	f100 32ff 	add.w	r2, r0, #4294967295
  407e46:	f080 810b 	bcs.w	408060 <__udivmoddi4+0x2a4>
  407e4a:	42a3      	cmp	r3, r4
  407e4c:	f240 8108 	bls.w	408060 <__udivmoddi4+0x2a4>
  407e50:	3802      	subs	r0, #2
  407e52:	443c      	add	r4, r7
  407e54:	2100      	movs	r1, #0
  407e56:	1ae4      	subs	r4, r4, r3
  407e58:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  407e5c:	2d00      	cmp	r5, #0
  407e5e:	d062      	beq.n	407f26 <__udivmoddi4+0x16a>
  407e60:	2300      	movs	r3, #0
  407e62:	fa24 f40e 	lsr.w	r4, r4, lr
  407e66:	602c      	str	r4, [r5, #0]
  407e68:	606b      	str	r3, [r5, #4]
  407e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407e6e:	428b      	cmp	r3, r1
  407e70:	d907      	bls.n	407e82 <__udivmoddi4+0xc6>
  407e72:	2d00      	cmp	r5, #0
  407e74:	d055      	beq.n	407f22 <__udivmoddi4+0x166>
  407e76:	2100      	movs	r1, #0
  407e78:	e885 0041 	stmia.w	r5, {r0, r6}
  407e7c:	4608      	mov	r0, r1
  407e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407e82:	fab3 f183 	clz	r1, r3
  407e86:	2900      	cmp	r1, #0
  407e88:	f040 808f 	bne.w	407faa <__udivmoddi4+0x1ee>
  407e8c:	42b3      	cmp	r3, r6
  407e8e:	d302      	bcc.n	407e96 <__udivmoddi4+0xda>
  407e90:	4282      	cmp	r2, r0
  407e92:	f200 80fc 	bhi.w	40808e <__udivmoddi4+0x2d2>
  407e96:	1a84      	subs	r4, r0, r2
  407e98:	eb66 0603 	sbc.w	r6, r6, r3
  407e9c:	2001      	movs	r0, #1
  407e9e:	46b4      	mov	ip, r6
  407ea0:	2d00      	cmp	r5, #0
  407ea2:	d040      	beq.n	407f26 <__udivmoddi4+0x16a>
  407ea4:	e885 1010 	stmia.w	r5, {r4, ip}
  407ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407eac:	b912      	cbnz	r2, 407eb4 <__udivmoddi4+0xf8>
  407eae:	2701      	movs	r7, #1
  407eb0:	fbb7 f7f2 	udiv	r7, r7, r2
  407eb4:	fab7 fe87 	clz	lr, r7
  407eb8:	f1be 0f00 	cmp.w	lr, #0
  407ebc:	d135      	bne.n	407f2a <__udivmoddi4+0x16e>
  407ebe:	2101      	movs	r1, #1
  407ec0:	1bf6      	subs	r6, r6, r7
  407ec2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
  407ec6:	fa1f f887 	uxth.w	r8, r7
  407eca:	fbb6 f2fc 	udiv	r2, r6, ip
  407ece:	fb0c 6612 	mls	r6, ip, r2, r6
  407ed2:	fb08 f002 	mul.w	r0, r8, r2
  407ed6:	0c23      	lsrs	r3, r4, #16
  407ed8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
  407edc:	42b0      	cmp	r0, r6
  407ede:	d907      	bls.n	407ef0 <__udivmoddi4+0x134>
  407ee0:	19f6      	adds	r6, r6, r7
  407ee2:	f102 33ff 	add.w	r3, r2, #4294967295
  407ee6:	d202      	bcs.n	407eee <__udivmoddi4+0x132>
  407ee8:	42b0      	cmp	r0, r6
  407eea:	f200 80d2 	bhi.w	408092 <__udivmoddi4+0x2d6>
  407eee:	461a      	mov	r2, r3
  407ef0:	1a36      	subs	r6, r6, r0
  407ef2:	fbb6 f0fc 	udiv	r0, r6, ip
  407ef6:	fb0c 6610 	mls	r6, ip, r0, r6
  407efa:	fb08 f800 	mul.w	r8, r8, r0
  407efe:	b2a3      	uxth	r3, r4
  407f00:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
  407f04:	45a0      	cmp	r8, r4
  407f06:	d907      	bls.n	407f18 <__udivmoddi4+0x15c>
  407f08:	19e4      	adds	r4, r4, r7
  407f0a:	f100 33ff 	add.w	r3, r0, #4294967295
  407f0e:	d202      	bcs.n	407f16 <__udivmoddi4+0x15a>
  407f10:	45a0      	cmp	r8, r4
  407f12:	f200 80b9 	bhi.w	408088 <__udivmoddi4+0x2cc>
  407f16:	4618      	mov	r0, r3
  407f18:	eba4 0408 	sub.w	r4, r4, r8
  407f1c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  407f20:	e79c      	b.n	407e5c <__udivmoddi4+0xa0>
  407f22:	4629      	mov	r1, r5
  407f24:	4628      	mov	r0, r5
  407f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f2a:	fa07 f70e 	lsl.w	r7, r7, lr
  407f2e:	f1ce 0320 	rsb	r3, lr, #32
  407f32:	fa26 f203 	lsr.w	r2, r6, r3
  407f36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
  407f3a:	fbb2 f1fc 	udiv	r1, r2, ip
  407f3e:	fa1f f887 	uxth.w	r8, r7
  407f42:	fb0c 2211 	mls	r2, ip, r1, r2
  407f46:	fa06 f60e 	lsl.w	r6, r6, lr
  407f4a:	fa20 f303 	lsr.w	r3, r0, r3
  407f4e:	fb01 f908 	mul.w	r9, r1, r8
  407f52:	4333      	orrs	r3, r6
  407f54:	0c1e      	lsrs	r6, r3, #16
  407f56:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
  407f5a:	45b1      	cmp	r9, r6
  407f5c:	fa00 f40e 	lsl.w	r4, r0, lr
  407f60:	d909      	bls.n	407f76 <__udivmoddi4+0x1ba>
  407f62:	19f6      	adds	r6, r6, r7
  407f64:	f101 32ff 	add.w	r2, r1, #4294967295
  407f68:	f080 808c 	bcs.w	408084 <__udivmoddi4+0x2c8>
  407f6c:	45b1      	cmp	r9, r6
  407f6e:	f240 8089 	bls.w	408084 <__udivmoddi4+0x2c8>
  407f72:	3902      	subs	r1, #2
  407f74:	443e      	add	r6, r7
  407f76:	eba6 0609 	sub.w	r6, r6, r9
  407f7a:	fbb6 f0fc 	udiv	r0, r6, ip
  407f7e:	fb0c 6210 	mls	r2, ip, r0, r6
  407f82:	fb00 f908 	mul.w	r9, r0, r8
  407f86:	b29e      	uxth	r6, r3
  407f88:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
  407f8c:	45b1      	cmp	r9, r6
  407f8e:	d907      	bls.n	407fa0 <__udivmoddi4+0x1e4>
  407f90:	19f6      	adds	r6, r6, r7
  407f92:	f100 33ff 	add.w	r3, r0, #4294967295
  407f96:	d271      	bcs.n	40807c <__udivmoddi4+0x2c0>
  407f98:	45b1      	cmp	r9, r6
  407f9a:	d96f      	bls.n	40807c <__udivmoddi4+0x2c0>
  407f9c:	3802      	subs	r0, #2
  407f9e:	443e      	add	r6, r7
  407fa0:	eba6 0609 	sub.w	r6, r6, r9
  407fa4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  407fa8:	e78f      	b.n	407eca <__udivmoddi4+0x10e>
  407faa:	f1c1 0720 	rsb	r7, r1, #32
  407fae:	fa22 f807 	lsr.w	r8, r2, r7
  407fb2:	408b      	lsls	r3, r1
  407fb4:	ea48 0303 	orr.w	r3, r8, r3
  407fb8:	fa26 f407 	lsr.w	r4, r6, r7
  407fbc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  407fc0:	fbb4 f9fe 	udiv	r9, r4, lr
  407fc4:	fa1f fc83 	uxth.w	ip, r3
  407fc8:	fb0e 4419 	mls	r4, lr, r9, r4
  407fcc:	408e      	lsls	r6, r1
  407fce:	fa20 f807 	lsr.w	r8, r0, r7
  407fd2:	fb09 fa0c 	mul.w	sl, r9, ip
  407fd6:	ea48 0806 	orr.w	r8, r8, r6
  407fda:	ea4f 4618 	mov.w	r6, r8, lsr #16
  407fde:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
  407fe2:	45a2      	cmp	sl, r4
  407fe4:	fa02 f201 	lsl.w	r2, r2, r1
  407fe8:	fa00 f601 	lsl.w	r6, r0, r1
  407fec:	d908      	bls.n	408000 <__udivmoddi4+0x244>
  407fee:	18e4      	adds	r4, r4, r3
  407ff0:	f109 30ff 	add.w	r0, r9, #4294967295
  407ff4:	d244      	bcs.n	408080 <__udivmoddi4+0x2c4>
  407ff6:	45a2      	cmp	sl, r4
  407ff8:	d942      	bls.n	408080 <__udivmoddi4+0x2c4>
  407ffa:	f1a9 0902 	sub.w	r9, r9, #2
  407ffe:	441c      	add	r4, r3
  408000:	eba4 040a 	sub.w	r4, r4, sl
  408004:	fbb4 f0fe 	udiv	r0, r4, lr
  408008:	fb0e 4410 	mls	r4, lr, r0, r4
  40800c:	fb00 fc0c 	mul.w	ip, r0, ip
  408010:	fa1f f888 	uxth.w	r8, r8
  408014:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
  408018:	45a4      	cmp	ip, r4
  40801a:	d907      	bls.n	40802c <__udivmoddi4+0x270>
  40801c:	18e4      	adds	r4, r4, r3
  40801e:	f100 3eff 	add.w	lr, r0, #4294967295
  408022:	d229      	bcs.n	408078 <__udivmoddi4+0x2bc>
  408024:	45a4      	cmp	ip, r4
  408026:	d927      	bls.n	408078 <__udivmoddi4+0x2bc>
  408028:	3802      	subs	r0, #2
  40802a:	441c      	add	r4, r3
  40802c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408030:	fba0 8902 	umull	r8, r9, r0, r2
  408034:	eba4 0c0c 	sub.w	ip, r4, ip
  408038:	45cc      	cmp	ip, r9
  40803a:	46c2      	mov	sl, r8
  40803c:	46ce      	mov	lr, r9
  40803e:	d315      	bcc.n	40806c <__udivmoddi4+0x2b0>
  408040:	d012      	beq.n	408068 <__udivmoddi4+0x2ac>
  408042:	b155      	cbz	r5, 40805a <__udivmoddi4+0x29e>
  408044:	ebb6 030a 	subs.w	r3, r6, sl
  408048:	eb6c 060e 	sbc.w	r6, ip, lr
  40804c:	fa06 f707 	lsl.w	r7, r6, r7
  408050:	40cb      	lsrs	r3, r1
  408052:	431f      	orrs	r7, r3
  408054:	40ce      	lsrs	r6, r1
  408056:	602f      	str	r7, [r5, #0]
  408058:	606e      	str	r6, [r5, #4]
  40805a:	2100      	movs	r1, #0
  40805c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408060:	4610      	mov	r0, r2
  408062:	e6f7      	b.n	407e54 <__udivmoddi4+0x98>
  408064:	4689      	mov	r9, r1
  408066:	e6de      	b.n	407e26 <__udivmoddi4+0x6a>
  408068:	4546      	cmp	r6, r8
  40806a:	d2ea      	bcs.n	408042 <__udivmoddi4+0x286>
  40806c:	ebb8 0a02 	subs.w	sl, r8, r2
  408070:	eb69 0e03 	sbc.w	lr, r9, r3
  408074:	3801      	subs	r0, #1
  408076:	e7e4      	b.n	408042 <__udivmoddi4+0x286>
  408078:	4670      	mov	r0, lr
  40807a:	e7d7      	b.n	40802c <__udivmoddi4+0x270>
  40807c:	4618      	mov	r0, r3
  40807e:	e78f      	b.n	407fa0 <__udivmoddi4+0x1e4>
  408080:	4681      	mov	r9, r0
  408082:	e7bd      	b.n	408000 <__udivmoddi4+0x244>
  408084:	4611      	mov	r1, r2
  408086:	e776      	b.n	407f76 <__udivmoddi4+0x1ba>
  408088:	3802      	subs	r0, #2
  40808a:	443c      	add	r4, r7
  40808c:	e744      	b.n	407f18 <__udivmoddi4+0x15c>
  40808e:	4608      	mov	r0, r1
  408090:	e706      	b.n	407ea0 <__udivmoddi4+0xe4>
  408092:	3a02      	subs	r2, #2
  408094:	443e      	add	r6, r7
  408096:	e72b      	b.n	407ef0 <__udivmoddi4+0x134>

00408098 <__aeabi_idiv0>:
  408098:	4770      	bx	lr
  40809a:	bf00      	nop
  40809c:	5141445b 	.word	0x5141445b
  4080a0:	4144205d 	.word	0x4144205d
  4080a4:	69772051 	.word	0x69772051
  4080a8:	61206c6c 	.word	0x61206c6c
  4080ac:	6d657474 	.word	0x6d657474
  4080b0:	74207470 	.word	0x74207470
  4080b4:	6174206f 	.word	0x6174206f
  4080b8:	2520656b 	.word	0x2520656b
  4080bc:	61732075 	.word	0x61732075
  4080c0:	656c706d 	.word	0x656c706d
  4080c4:	65702073 	.word	0x65702073
  4080c8:	68632072 	.word	0x68632072
  4080cc:	656e6e61 	.word	0x656e6e61
  4080d0:	000d0a6c 	.word	0x000d0a6c
  4080d4:	5141445b 	.word	0x5141445b
  4080d8:	4144205d 	.word	0x4144205d
  4080dc:	68632043 	.word	0x68632043
  4080e0:	656e6e61 	.word	0x656e6e61
  4080e4:	7525206c 	.word	0x7525206c
  4080e8:	74657320 	.word	0x74657320
  4080ec:	206f7420 	.word	0x206f7420
  4080f0:	6d206425 	.word	0x6d206425
  4080f4:	000d0a56 	.word	0x000d0a56
  4080f8:	5141445b 	.word	0x5141445b
  4080fc:	4144205d 	.word	0x4144205d
  408100:	69772051 	.word	0x69772051
  408104:	73206c6c 	.word	0x73206c6c
  408108:	6c706d61 	.word	0x6c706d61
  40810c:	6c612065 	.word	0x6c612065
  408110:	6e65206c 	.word	0x6e65206c
  408114:	656c6261 	.word	0x656c6261
  408118:	68632064 	.word	0x68632064
  40811c:	656e6e61 	.word	0x656e6e61
  408120:	2520736c 	.word	0x2520736c
  408124:	69742075 	.word	0x69742075
  408128:	0a73656d 	.word	0x0a73656d
  40812c:	0000000d 	.word	0x0000000d
  408130:	5141445b 	.word	0x5141445b
  408134:	6153205d 	.word	0x6153205d
  408138:	656c706d 	.word	0x656c706d
  40813c:	72657020 	.word	0x72657020
  408140:	20646f69 	.word	0x20646f69
  408144:	20746573 	.word	0x20746573
  408148:	25206f74 	.word	0x25206f74
  40814c:	53752075 	.word	0x53752075
  408150:	00000d0a 	.word	0x00000d0a
  408154:	5141445b 	.word	0x5141445b
  408158:	6553205d 	.word	0x6553205d
  40815c:	6e657571 	.word	0x6e657571
  408160:	73206563 	.word	0x73206563
  408164:	74207465 	.word	0x74207465
  408168:	25203a6f 	.word	0x25203a6f
  40816c:	25202c75 	.word	0x25202c75
  408170:	25202c75 	.word	0x25202c75
  408174:	25202c75 	.word	0x25202c75
  408178:	000d0a75 	.word	0x000d0a75
  40817c:	5141445b 	.word	0x5141445b
  408180:	6341205d 	.word	0x6341205d
  408184:	73697571 	.word	0x73697571
  408188:	6f697469 	.word	0x6f697469
  40818c:	7473206e 	.word	0x7473206e
  408190:	65747261 	.word	0x65747261
  408194:	6e692064 	.word	0x6e692064
  408198:	43534120 	.word	0x43534120
  40819c:	0d0a4949 	.word	0x0d0a4949
  4081a0:	00000000 	.word	0x00000000
  4081a4:	5141445b 	.word	0x5141445b
  4081a8:	6341205d 	.word	0x6341205d
  4081ac:	73697571 	.word	0x73697571
  4081b0:	6f697469 	.word	0x6f697469
  4081b4:	7473206e 	.word	0x7473206e
  4081b8:	65747261 	.word	0x65747261
  4081bc:	6e692064 	.word	0x6e692064
  4081c0:	6e696220 	.word	0x6e696220
  4081c4:	0a797261 	.word	0x0a797261
  4081c8:	0000000d 	.word	0x0000000d
  4081cc:	5141445b 	.word	0x5141445b
  4081d0:	6341205d 	.word	0x6341205d
  4081d4:	73697571 	.word	0x73697571
  4081d8:	6f697469 	.word	0x6f697469
  4081dc:	7473206e 	.word	0x7473206e
  4081e0:	6570706f 	.word	0x6570706f
  4081e4:	000d0a64 	.word	0x000d0a64
  4081e8:	4f525245 	.word	0x4f525245
  4081ec:	65732052 	.word	0x65732052
  4081f0:	6e697474 	.word	0x6e697474
  4081f4:	6f632067 	.word	0x6f632067
  4081f8:	6e616d6d 	.word	0x6e616d6d
  4081fc:	000d0a64 	.word	0x000d0a64
  408200:	6d6d6f43 	.word	0x6d6d6f43
  408204:	20646e61 	.word	0x20646e61
  408208:	746e7973 	.word	0x746e7973
  40820c:	45207861 	.word	0x45207861
  408210:	524f5252 	.word	0x524f5252
  408214:	00000d0a 	.word	0x00000d0a

00408218 <_global_impure_ptr>:
  408218:	20000210 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  408228:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  408238:	46454443 00000000 33323130 37363534     CDEF....01234567
  408248:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  408258:	0000296c 00000030                       l)..0...

00408260 <blanks.7223>:
  408260:	20202020 20202020 20202020 20202020                     

00408270 <zeroes.7224>:
  408270:	30303030 30303030 30303030 30303030     0000000000000000
  408280:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  408290:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004082a0 <__mprec_bigtens>:
  4082a0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4082b0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4082c0:	7f73bf3c 75154fdd                       <.s..O.u

004082c8 <__mprec_tens>:
  4082c8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4082d8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4082e8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4082f8:	00000000 412e8480 00000000 416312d0     .......A......cA
  408308:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408318:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408328:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408338:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408348:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408358:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408368:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408378:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408388:	79d99db4 44ea7843                       ...yCx.D

00408390 <p05.6055>:
  408390:	00000005 00000019 0000007d              ........}...

0040839c <_ctype_>:
  40839c:	20202000 20202020 28282020 20282828     .         ((((( 
  4083ac:	20202020 20202020 20202020 20202020                     
  4083bc:	10108820 10101010 10101010 10101010      ...............
  4083cc:	04040410 04040404 10040404 10101010     ................
  4083dc:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4083ec:	01010101 01010101 01010101 10101010     ................
  4083fc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40840c:	02020202 02020202 02020202 10101010     ................
  40841c:	00000020 00000000 00000000 00000000      ...............
	...

004084a0 <_init>:
  4084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4084a2:	bf00      	nop
  4084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4084a6:	bc08      	pop	{r3}
  4084a8:	469e      	mov	lr, r3
  4084aa:	4770      	bx	lr

004084ac <__init_array_start>:
  4084ac:	00404f75 	.word	0x00404f75

004084b0 <__frame_dummy_init_array_entry>:
  4084b0:	004000f5                                ..@.

004084b4 <_fini>:
  4084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4084b6:	bf00      	nop
  4084b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4084ba:	bc08      	pop	{r3}
  4084bc:	469e      	mov	lr, r3
  4084be:	4770      	bx	lr

004084c0 <__fini_array_start>:
  4084c0:	004000d1 	.word	0x004000d1

Disassembly of section .relocate:

20000000 <SystemInit>:
	EFC->EEFC_FMR = EEFC_FMR_FWS(3);
20000000:	f44f 7240 	mov.w	r2, #768	; 0x300
20000004:	4b1f      	ldr	r3, [pc, #124]	; (20000084 <SystemInit+0x84>)
20000006:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000008:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
2000000c:	6a1b      	ldr	r3, [r3, #32]
2000000e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20000012:	d107      	bne.n	20000024 <SystemInit+0x24>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000014:	4a1c      	ldr	r2, [pc, #112]	; (20000088 <SystemInit+0x88>)
20000016:	4b1d      	ldr	r3, [pc, #116]	; (2000008c <SystemInit+0x8c>)
20000018:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2000001a:	461a      	mov	r2, r3
2000001c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000001e:	f013 0f01 	tst.w	r3, #1
20000022:	d0fb      	beq.n	2000001c <SystemInit+0x1c>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000024:	4a1a      	ldr	r2, [pc, #104]	; (20000090 <SystemInit+0x90>)
20000026:	4b19      	ldr	r3, [pc, #100]	; (2000008c <SystemInit+0x8c>)
20000028:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2000002a:	461a      	mov	r2, r3
2000002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000002e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20000032:	d0fb      	beq.n	2000002c <SystemInit+0x2c>
		PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000034:	4a15      	ldr	r2, [pc, #84]	; (2000008c <SystemInit+0x8c>)
20000036:	6b13      	ldr	r3, [r2, #48]	; 0x30
20000038:	f023 0303 	bic.w	r3, r3, #3
2000003c:	f043 0301 	orr.w	r3, r3, #1
20000040:	6313      	str	r3, [r2, #48]	; 0x30
		while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000042:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000044:	f013 0f08 	tst.w	r3, #8
20000048:	d0fb      	beq.n	20000042 <SystemInit+0x42>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2000004a:	4a12      	ldr	r2, [pc, #72]	; (20000094 <SystemInit+0x94>)
2000004c:	4b0f      	ldr	r3, [pc, #60]	; (2000008c <SystemInit+0x8c>)
2000004e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000050:	461a      	mov	r2, r3
20000052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000054:	f013 0f02 	tst.w	r3, #2
20000058:	d0fb      	beq.n	20000052 <SystemInit+0x52>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2000005a:	2211      	movs	r2, #17
2000005c:	4b0b      	ldr	r3, [pc, #44]	; (2000008c <SystemInit+0x8c>)
2000005e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000060:	461a      	mov	r2, r3
20000062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000064:	f013 0f08 	tst.w	r3, #8
20000068:	d0fb      	beq.n	20000062 <SystemInit+0x62>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000006a:	2212      	movs	r2, #18
2000006c:	4b07      	ldr	r3, [pc, #28]	; (2000008c <SystemInit+0x8c>)
2000006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000070:	461a      	mov	r2, r3
20000072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000074:	f013 0f08 	tst.w	r3, #8
20000078:	d0fb      	beq.n	20000072 <SystemInit+0x72>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000007a:	4a07      	ldr	r2, [pc, #28]	; (20000098 <SystemInit+0x98>)
2000007c:	4b07      	ldr	r3, [pc, #28]	; (2000009c <SystemInit+0x9c>)
2000007e:	601a      	str	r2, [r3, #0]
20000080:	4770      	bx	lr
20000082:	bf00      	nop
20000084:	400e0a00 	.word	0x400e0a00
20000088:	00370809 	.word	0x00370809
2000008c:	400e0400 	.word	0x400e0400
20000090:	01370809 	.word	0x01370809
20000094:	201f3f03 	.word	0x201f3f03
20000098:	03d09000 	.word	0x03d09000
2000009c:	20000204 	.word	0x20000204

200000a0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000a0:	4b0c      	ldr	r3, [pc, #48]	; (200000d4 <system_init_flash+0x34>)
200000a2:	4298      	cmp	r0, r3
200000a4:	d90c      	bls.n	200000c0 <system_init_flash+0x20>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000a6:	4b0c      	ldr	r3, [pc, #48]	; (200000d8 <system_init_flash+0x38>)
200000a8:	4298      	cmp	r0, r3
200000aa:	d90d      	bls.n	200000c8 <system_init_flash+0x28>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000ac:	4b0b      	ldr	r3, [pc, #44]	; (200000dc <system_init_flash+0x3c>)
200000ae:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
200000b0:	bf94      	ite	ls
200000b2:	f44f 7200 	movls.w	r2, #512	; 0x200
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
200000b6:	f44f 7240 	movhi.w	r2, #768	; 0x300
200000ba:	4b09      	ldr	r3, [pc, #36]	; (200000e0 <system_init_flash+0x40>)
200000bc:	601a      	str	r2, [r3, #0]
200000be:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
200000c0:	2200      	movs	r2, #0
200000c2:	4b07      	ldr	r3, [pc, #28]	; (200000e0 <system_init_flash+0x40>)
200000c4:	601a      	str	r2, [r3, #0]
200000c6:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
200000c8:	f44f 7280 	mov.w	r2, #256	; 0x100
200000cc:	4b04      	ldr	r3, [pc, #16]	; (200000e0 <system_init_flash+0x40>)
200000ce:	601a      	str	r2, [r3, #0]
200000d0:	4770      	bx	lr
200000d2:	bf00      	nop
200000d4:	0103663f 	.word	0x0103663f
200000d8:	01c9c37f 	.word	0x01c9c37f
200000dc:	0337f97f 	.word	0x0337f97f
200000e0:	400e0a00 	.word	0x400e0a00

200000e4 <udi_api_cdc_comm>:
200000e4:	0040013d 00400189 004001bd 004001b9     =.@...@...@...@.
200000f4:	00000000                                ....

200000f8 <udi_api_cdc_data>:
200000f8:	00400505 00400199 004001b5 004001b9     ..@...@...@...@.
20000108:	004003c5                                ..@.

2000010c <udc_string_desc_languageid>:
2000010c:	04090304                                ....

20000110 <comInterface>:
20000110:	00402649 00402659 00402669 00402679     I&@.Y&@.i&@.y&@.
20000120:	00402699 00000000 00000000 00000000     .&@.............
	...

2000018c <udc_config>:
2000018c:	200001e4 20000198 00000000              ... ... ....

20000198 <udc_config_fs>:
20000198:	200001a0 200001f8                       ... ... 

200001a0 <udc_desc_fs>:
200001a0:	00430209 c0000102 00040932 02020100     ..C.....2.......
200001b0:	24050001 04011000 05020224 01000624     ...$....$...$...
200001c0:	03012405 83050701 10004003 00010409     .$.......@......
200001d0:	00000a02 81050700 00004002 02020507     .........@......
200001e0:	00000040                                @...

200001e4 <udc_device_desc>:
200001e4:	02000112 40000002 240403eb 00000100     .......@...$....
200001f4:	00000100                                ....

200001f8 <udi_apis>:
200001f8:	200000e4 200000f8                       ... ... 

20000200 <g_interrupt_enabled>:
20000200:	00000001                                ....

20000204 <SystemCoreClock>:
20000204:	003d0900                                ..=.

20000208 <_impure_ptr>:
20000208:	20000210 00000000                       ... ....

20000210 <impure_data>:
20000210:	00000000 200004fc 20000564 200005cc     ....... d.. ... 
	...
200002b8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200002c8:	0005deec 0000000b 00000000 00000000     ................
	...

20000638 <__atexit_recursive_mutex>:
20000638:	20000e98                                ... 

2000063c <__global_locale>:
2000063c:	00000043 00000000 00000000 00000000     C...............
	...
2000065c:	00000043 00000000 00000000 00000000     C...............
	...
2000067c:	00000043 00000000 00000000 00000000     C...............
	...
2000069c:	00000043 00000000 00000000 00000000     C...............
	...
200006bc:	00000043 00000000 00000000 00000000     C...............
	...
200006dc:	00000043 00000000 00000000 00000000     C...............
	...
200006fc:	00000043 00000000 00000000 00000000     C...............
	...
2000071c:	00407331 00406715 00000000 0040839c     1s@..g@.......@.
2000072c:	0040829c 004081a0 004081a0 004081a0     ..@...@...@...@.
2000073c:	004081a0 004081a0 004081a0 004081a0     ..@...@...@...@.
2000074c:	004081a0 004081a0 ffffffff ffffffff     ..@...@.........
2000075c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000784:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200007a8 <__malloc_av_>:
	...
200007b0:	200007a8 200007a8 200007b0 200007b0     ... ... ... ... 
200007c0:	200007b8 200007b8 200007c0 200007c0     ... ... ... ... 
200007d0:	200007c8 200007c8 200007d0 200007d0     ... ... ... ... 
200007e0:	200007d8 200007d8 200007e0 200007e0     ... ... ... ... 
200007f0:	200007e8 200007e8 200007f0 200007f0     ... ... ... ... 
20000800:	200007f8 200007f8 20000800 20000800     ... ... ... ... 
20000810:	20000808 20000808 20000810 20000810     ... ... ... ... 
20000820:	20000818 20000818 20000820 20000820     ... ...  ..  .. 
20000830:	20000828 20000828 20000830 20000830     (.. (.. 0.. 0.. 
20000840:	20000838 20000838 20000840 20000840     8.. 8.. @.. @.. 
20000850:	20000848 20000848 20000850 20000850     H.. H.. P.. P.. 
20000860:	20000858 20000858 20000860 20000860     X.. X.. `.. `.. 
20000870:	20000868 20000868 20000870 20000870     h.. h.. p.. p.. 
20000880:	20000878 20000878 20000880 20000880     x.. x.. ... ... 
20000890:	20000888 20000888 20000890 20000890     ... ... ... ... 
200008a0:	20000898 20000898 200008a0 200008a0     ... ... ... ... 
200008b0:	200008a8 200008a8 200008b0 200008b0     ... ... ... ... 
200008c0:	200008b8 200008b8 200008c0 200008c0     ... ... ... ... 
200008d0:	200008c8 200008c8 200008d0 200008d0     ... ... ... ... 
200008e0:	200008d8 200008d8 200008e0 200008e0     ... ... ... ... 
200008f0:	200008e8 200008e8 200008f0 200008f0     ... ... ... ... 
20000900:	200008f8 200008f8 20000900 20000900     ... ... ... ... 
20000910:	20000908 20000908 20000910 20000910     ... ... ... ... 
20000920:	20000918 20000918 20000920 20000920     ... ...  ..  .. 
20000930:	20000928 20000928 20000930 20000930     (.. (.. 0.. 0.. 
20000940:	20000938 20000938 20000940 20000940     8.. 8.. @.. @.. 
20000950:	20000948 20000948 20000950 20000950     H.. H.. P.. P.. 
20000960:	20000958 20000958 20000960 20000960     X.. X.. `.. `.. 
20000970:	20000968 20000968 20000970 20000970     h.. h.. p.. p.. 
20000980:	20000978 20000978 20000980 20000980     x.. x.. ... ... 
20000990:	20000988 20000988 20000990 20000990     ... ... ... ... 
200009a0:	20000998 20000998 200009a0 200009a0     ... ... ... ... 
200009b0:	200009a8 200009a8 200009b0 200009b0     ... ... ... ... 
200009c0:	200009b8 200009b8 200009c0 200009c0     ... ... ... ... 
200009d0:	200009c8 200009c8 200009d0 200009d0     ... ... ... ... 
200009e0:	200009d8 200009d8 200009e0 200009e0     ... ... ... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 

20000bb0 <__malloc_sbrk_base>:
20000bb0:	ffffffff                                ....

20000bb4 <__malloc_trim_threshold>:
20000bb4:	00020000                                ....
