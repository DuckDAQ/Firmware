
Daq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008c8c  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408c8c  00408c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c60  20000000  00408c94  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001f10  20000c60  004098f4  00020c60  2**2
                  ALLOC
  4 .stack        00002000  20002b70  0040b804  00020c60  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020c60  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020c89  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002202b  00000000  00000000  00020ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004863  00000000  00000000  00042d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e48  00000000  00000000  00047570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00017bbc  00000000  00000000  000483b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001539b  00000000  00000000  0005ff74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000533a3  00000000  00000000  0007530f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008a6f  00000000  00000000  000c86b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e70  00000000  00000000  000d1121  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002dd0  00000000  00000000  000d1f94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 4b 00 20 c5 39 40 00 c3 39 40 00 c3 39 40 00     pK. .9@..9@..9@.
  400010:	c3 39 40 00 c3 39 40 00 c3 39 40 00 00 00 00 00     .9@..9@..9@.....
	...
  40002c:	c3 39 40 00 c3 39 40 00 00 00 00 00 c3 39 40 00     .9@..9@......9@.
  40003c:	c3 39 40 00 c3 39 40 00 c3 39 40 00 c3 39 40 00     .9@..9@..9@..9@.
  40004c:	c3 39 40 00 c3 39 40 00 c3 39 40 00 c3 39 40 00     .9@..9@..9@..9@.
  40005c:	c3 39 40 00 c3 39 40 00 c3 39 40 00 c3 39 40 00     .9@..9@..9@..9@.
  40006c:	ad 0f 40 00 c1 0f 40 00 c3 39 40 00 c3 39 40 00     ..@...@..9@..9@.
  40007c:	c3 39 40 00 c3 39 40 00 c3 39 40 00 c3 39 40 00     .9@..9@..9@..9@.
  40008c:	c3 39 40 00 c3 39 40 00 c3 39 40 00 c3 39 40 00     .9@..9@..9@..9@.
  40009c:	c3 39 40 00 c3 39 40 00 c3 39 40 00 c3 39 40 00     .9@..9@..9@..9@.
  4000ac:	c3 39 40 00 c3 39 40 00 3d 2d 40 00 c3 39 40 00     .9@..9@.=-@..9@.
  4000bc:	c3 39 40 00 c3 39 40 00 c3 39 40 00 91 15 40 00     .9@..9@..9@...@.
  4000cc:	c3 39 40 00                                         .9@.

004000d0 <__do_global_dtors_aux>:
  4000d0:	b510      	push	{r4, lr}
  4000d2:	4c05      	ldr	r4, [pc, #20]	; (4000e8 <__do_global_dtors_aux+0x18>)
  4000d4:	7823      	ldrb	r3, [r4, #0]
  4000d6:	b933      	cbnz	r3, 4000e6 <__do_global_dtors_aux+0x16>
  4000d8:	4b04      	ldr	r3, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x1c>)
  4000da:	b113      	cbz	r3, 4000e2 <__do_global_dtors_aux+0x12>
  4000dc:	4804      	ldr	r0, [pc, #16]	; (4000f0 <__do_global_dtors_aux+0x20>)
  4000de:	f3af 8000 	nop.w
  4000e2:	2301      	movs	r3, #1
  4000e4:	7023      	strb	r3, [r4, #0]
  4000e6:	bd10      	pop	{r4, pc}
  4000e8:	20000c60 	.word	0x20000c60
  4000ec:	00000000 	.word	0x00000000
  4000f0:	00408c94 	.word	0x00408c94

004000f4 <frame_dummy>:
  4000f4:	4b0c      	ldr	r3, [pc, #48]	; (400128 <frame_dummy+0x34>)
  4000f6:	b143      	cbz	r3, 40010a <frame_dummy+0x16>
  4000f8:	480c      	ldr	r0, [pc, #48]	; (40012c <frame_dummy+0x38>)
  4000fa:	b510      	push	{r4, lr}
  4000fc:	490c      	ldr	r1, [pc, #48]	; (400130 <frame_dummy+0x3c>)
  4000fe:	f3af 8000 	nop.w
  400102:	480c      	ldr	r0, [pc, #48]	; (400134 <frame_dummy+0x40>)
  400104:	6803      	ldr	r3, [r0, #0]
  400106:	b923      	cbnz	r3, 400112 <frame_dummy+0x1e>
  400108:	bd10      	pop	{r4, pc}
  40010a:	480a      	ldr	r0, [pc, #40]	; (400134 <frame_dummy+0x40>)
  40010c:	6803      	ldr	r3, [r0, #0]
  40010e:	b933      	cbnz	r3, 40011e <frame_dummy+0x2a>
  400110:	4770      	bx	lr
  400112:	4b09      	ldr	r3, [pc, #36]	; (400138 <frame_dummy+0x44>)
  400114:	2b00      	cmp	r3, #0
  400116:	d0f7      	beq.n	400108 <frame_dummy+0x14>
  400118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40011c:	4718      	bx	r3
  40011e:	4b06      	ldr	r3, [pc, #24]	; (400138 <frame_dummy+0x44>)
  400120:	2b00      	cmp	r3, #0
  400122:	d0f5      	beq.n	400110 <frame_dummy+0x1c>
  400124:	4718      	bx	r3
  400126:	bf00      	nop
  400128:	00000000 	.word	0x00000000
  40012c:	00408c94 	.word	0x00408c94
  400130:	20000c64 	.word	0x20000c64
  400134:	00408c94 	.word	0x00408c94
  400138:	00000000 	.word	0x00000000

0040013c <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  40013c:	490d      	ldr	r1, [pc, #52]	; (400174 <udi_cdc_comm_enable+0x38>)
  40013e:	2300      	movs	r3, #0
  400140:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  400142:	4a0d      	ldr	r2, [pc, #52]	; (400178 <udi_cdc_comm_enable+0x3c>)
  400144:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  400146:	4a0d      	ldr	r2, [pc, #52]	; (40017c <udi_cdc_comm_enable+0x40>)
  400148:	20a1      	movs	r0, #161	; 0xa1
  40014a:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  40014c:	2020      	movs	r0, #32
  40014e:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  400150:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  400152:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400154:	2002      	movs	r0, #2
  400156:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  400158:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  40015a:	4a09      	ldr	r2, [pc, #36]	; (400180 <udi_cdc_comm_enable+0x44>)
  40015c:	4809      	ldr	r0, [pc, #36]	; (400184 <udi_cdc_comm_enable+0x48>)
  40015e:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  400160:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  400162:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  400164:	2308      	movs	r3, #8
  400166:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  400168:	780b      	ldrb	r3, [r1, #0]
  40016a:	3301      	adds	r3, #1
  40016c:	b2db      	uxtb	r3, r3
  40016e:	700b      	strb	r3, [r1, #0]
	return true;
}
  400170:	2001      	movs	r0, #1
  400172:	4770      	bx	lr
  400174:	20000c87 	.word	0x20000c87
  400178:	20000f1c 	.word	0x20000f1c
  40017c:	200011b4 	.word	0x200011b4
  400180:	20000c80 	.word	0x20000c80
  400184:	000f4240 	.word	0x000f4240

00400188 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400188:	4a02      	ldr	r2, [pc, #8]	; (400194 <udi_cdc_comm_disable+0xc>)
  40018a:	7813      	ldrb	r3, [r2, #0]
  40018c:	3b01      	subs	r3, #1
  40018e:	b2db      	uxtb	r3, r3
  400190:	7013      	strb	r3, [r2, #0]
  400192:	4770      	bx	lr
  400194:	20000c87 	.word	0x20000c87

00400198 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400198:	4a04      	ldr	r2, [pc, #16]	; (4001ac <udi_cdc_data_disable+0x14>)
  40019a:	7813      	ldrb	r3, [r2, #0]
  40019c:	3b01      	subs	r3, #1
  40019e:	b2db      	uxtb	r3, r3
  4001a0:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  4001a2:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  4001a4:	2200      	movs	r2, #0
  4001a6:	4b02      	ldr	r3, [pc, #8]	; (4001b0 <udi_cdc_data_disable+0x18>)
  4001a8:	701a      	strb	r2, [r3, #0]
  4001aa:	4770      	bx	lr
  4001ac:	20000c88 	.word	0x20000c88
  4001b0:	20000c7e 	.word	0x20000c7e

004001b4 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  4001b4:	2000      	movs	r0, #0
  4001b6:	4770      	bx	lr

004001b8 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  4001b8:	2000      	movs	r0, #0
  4001ba:	4770      	bx	lr

004001bc <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
  4001bc:	4b1d      	ldr	r3, [pc, #116]	; (400234 <udi_cdc_comm_setup+0x78>)
  4001be:	781b      	ldrb	r3, [r3, #0]
  4001c0:	f013 0f80 	tst.w	r3, #128	; 0x80
  4001c4:	d105      	bne.n	4001d2 <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001ca:	2b20      	cmp	r3, #32
  4001cc:	d018      	beq.n	400200 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
  4001ce:	2000      	movs	r0, #0
  4001d0:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001d6:	2b20      	cmp	r3, #32
  4001d8:	d001      	beq.n	4001de <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
  4001da:	2000      	movs	r0, #0
  4001dc:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4001de:	4b15      	ldr	r3, [pc, #84]	; (400234 <udi_cdc_comm_setup+0x78>)
  4001e0:	785b      	ldrb	r3, [r3, #1]
  4001e2:	2b21      	cmp	r3, #33	; 0x21
  4001e4:	d124      	bne.n	400230 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
  4001e6:	4b13      	ldr	r3, [pc, #76]	; (400234 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  4001e8:	88db      	ldrh	r3, [r3, #6]
  4001ea:	2b07      	cmp	r3, #7
  4001ec:	d001      	beq.n	4001f2 <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
  4001ee:	2000      	movs	r0, #0
  4001f0:	4770      	bx	lr
				udd_g_ctrlreq.payload =
  4001f2:	4b10      	ldr	r3, [pc, #64]	; (400234 <udi_cdc_comm_setup+0x78>)
  4001f4:	4a10      	ldr	r2, [pc, #64]	; (400238 <udi_cdc_comm_setup+0x7c>)
  4001f6:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  4001f8:	2207      	movs	r2, #7
  4001fa:	819a      	strh	r2, [r3, #12]
				return true;
  4001fc:	2001      	movs	r0, #1
  4001fe:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  400200:	4b0c      	ldr	r3, [pc, #48]	; (400234 <udi_cdc_comm_setup+0x78>)
  400202:	7858      	ldrb	r0, [r3, #1]
  400204:	2820      	cmp	r0, #32
  400206:	d004      	beq.n	400212 <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
  400208:	2822      	cmp	r0, #34	; 0x22
  40020a:	bf14      	ite	ne
  40020c:	2000      	movne	r0, #0
  40020e:	2001      	moveq	r0, #1
  400210:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
  400212:	4b08      	ldr	r3, [pc, #32]	; (400234 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  400214:	88db      	ldrh	r3, [r3, #6]
  400216:	2b07      	cmp	r3, #7
  400218:	d001      	beq.n	40021e <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
  40021a:	2000      	movs	r0, #0
}
  40021c:	4770      	bx	lr
				udd_g_ctrlreq.callback =
  40021e:	4b05      	ldr	r3, [pc, #20]	; (400234 <udi_cdc_comm_setup+0x78>)
  400220:	4a06      	ldr	r2, [pc, #24]	; (40023c <udi_cdc_comm_setup+0x80>)
  400222:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
  400224:	4a04      	ldr	r2, [pc, #16]	; (400238 <udi_cdc_comm_setup+0x7c>)
  400226:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  400228:	2207      	movs	r2, #7
  40022a:	819a      	strh	r2, [r3, #12]
				return true;
  40022c:	2001      	movs	r0, #1
  40022e:	4770      	bx	lr
	return false;  // request Not supported
  400230:	2000      	movs	r0, #0
  400232:	4770      	bx	lr
  400234:	200012dc 	.word	0x200012dc
  400238:	20000c80 	.word	0x20000c80
  40023c:	00400241 	.word	0x00400241

00400240 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  400240:	4770      	bx	lr
	...

00400244 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400244:	4b45      	ldr	r3, [pc, #276]	; (40035c <udi_cdc_tx_send+0x118>)
  400246:	781b      	ldrb	r3, [r3, #0]
  400248:	b103      	cbz	r3, 40024c <udi_cdc_tx_send+0x8>
  40024a:	4770      	bx	lr
{
  40024c:	b570      	push	{r4, r5, r6, lr}
  40024e:	b084      	sub	sp, #16
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  400250:	4b43      	ldr	r3, [pc, #268]	; (400360 <udi_cdc_tx_send+0x11c>)
  400252:	4798      	blx	r3
  400254:	2800      	cmp	r0, #0
  400256:	d042      	beq.n	4002de <udi_cdc_tx_send+0x9a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400258:	4b42      	ldr	r3, [pc, #264]	; (400364 <udi_cdc_tx_send+0x120>)
  40025a:	881c      	ldrh	r4, [r3, #0]
  40025c:	4b42      	ldr	r3, [pc, #264]	; (400368 <udi_cdc_tx_send+0x124>)
  40025e:	4798      	blx	r3
  400260:	4284      	cmp	r4, r0
  400262:	d079      	beq.n	400358 <udi_cdc_tx_send+0x114>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400264:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400268:	fab3 f383 	clz	r3, r3
  40026c:	095b      	lsrs	r3, r3, #5
  40026e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400270:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400272:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400276:	2200      	movs	r2, #0
  400278:	4b3c      	ldr	r3, [pc, #240]	; (40036c <udi_cdc_tx_send+0x128>)
  40027a:	701a      	strb	r2, [r3, #0]
	return flags;
  40027c:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  40027e:	4b3c      	ldr	r3, [pc, #240]	; (400370 <udi_cdc_tx_send+0x12c>)
  400280:	781c      	ldrb	r4, [r3, #0]
  400282:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400284:	4b3b      	ldr	r3, [pc, #236]	; (400374 <udi_cdc_tx_send+0x130>)
  400286:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  40028a:	2b00      	cmp	r3, #0
  40028c:	d02e      	beq.n	4002ec <udi_cdc_tx_send+0xa8>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  40028e:	2200      	movs	r2, #0
  400290:	4b39      	ldr	r3, [pc, #228]	; (400378 <udi_cdc_tx_send+0x134>)
  400292:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400294:	4b39      	ldr	r3, [pc, #228]	; (40037c <udi_cdc_tx_send+0x138>)
  400296:	781b      	ldrb	r3, [r3, #0]
  400298:	2b00      	cmp	r3, #0
  40029a:	d143      	bne.n	400324 <udi_cdc_tx_send+0xe0>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  40029c:	fab4 f384 	clz	r3, r4
  4002a0:	095b      	lsrs	r3, r3, #5
  4002a2:	4a33      	ldr	r2, [pc, #204]	; (400370 <udi_cdc_tx_send+0x12c>)
  4002a4:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  4002a6:	2201      	movs	r2, #1
  4002a8:	4b2c      	ldr	r3, [pc, #176]	; (40035c <udi_cdc_tx_send+0x118>)
  4002aa:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4002ac:	b125      	cbz	r5, 4002b8 <udi_cdc_tx_send+0x74>
		cpu_irq_enable();
  4002ae:	4b2f      	ldr	r3, [pc, #188]	; (40036c <udi_cdc_tx_send+0x128>)
  4002b0:	701a      	strb	r2, [r3, #0]
  4002b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4002b6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  4002b8:	4626      	mov	r6, r4
  4002ba:	4b2e      	ldr	r3, [pc, #184]	; (400374 <udi_cdc_tx_send+0x130>)
  4002bc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  4002c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4002c4:	bf14      	ite	ne
  4002c6:	2501      	movne	r5, #1
  4002c8:	2500      	moveq	r5, #0
	if (b_short_packet) {
  4002ca:	d034      	beq.n	400336 <udi_cdc_tx_send+0xf2>
		if (udd_is_high_speed()) {
  4002cc:	4b24      	ldr	r3, [pc, #144]	; (400360 <udi_cdc_tx_send+0x11c>)
  4002ce:	4798      	blx	r3
  4002d0:	2800      	cmp	r0, #0
  4002d2:	d02b      	beq.n	40032c <udi_cdc_tx_send+0xe8>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4002d4:	4b24      	ldr	r3, [pc, #144]	; (400368 <udi_cdc_tx_send+0x124>)
  4002d6:	4798      	blx	r3
  4002d8:	4b22      	ldr	r3, [pc, #136]	; (400364 <udi_cdc_tx_send+0x120>)
  4002da:	8018      	strh	r0, [r3, #0]
  4002dc:	e02e      	b.n	40033c <udi_cdc_tx_send+0xf8>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  4002de:	4b21      	ldr	r3, [pc, #132]	; (400364 <udi_cdc_tx_send+0x120>)
  4002e0:	881c      	ldrh	r4, [r3, #0]
  4002e2:	4b27      	ldr	r3, [pc, #156]	; (400380 <udi_cdc_tx_send+0x13c>)
  4002e4:	4798      	blx	r3
  4002e6:	4284      	cmp	r4, r0
  4002e8:	d1bc      	bne.n	400264 <udi_cdc_tx_send+0x20>
  4002ea:	e035      	b.n	400358 <udi_cdc_tx_send+0x114>
		sof_zlp_counter++;
  4002ec:	4a22      	ldr	r2, [pc, #136]	; (400378 <udi_cdc_tx_send+0x134>)
  4002ee:	8813      	ldrh	r3, [r2, #0]
  4002f0:	3301      	adds	r3, #1
  4002f2:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4002f4:	4b1a      	ldr	r3, [pc, #104]	; (400360 <udi_cdc_tx_send+0x11c>)
  4002f6:	4798      	blx	r3
  4002f8:	b918      	cbnz	r0, 400302 <udi_cdc_tx_send+0xbe>
  4002fa:	4b1f      	ldr	r3, [pc, #124]	; (400378 <udi_cdc_tx_send+0x134>)
  4002fc:	881b      	ldrh	r3, [r3, #0]
  4002fe:	2b63      	cmp	r3, #99	; 0x63
  400300:	d908      	bls.n	400314 <udi_cdc_tx_send+0xd0>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  400302:	4b17      	ldr	r3, [pc, #92]	; (400360 <udi_cdc_tx_send+0x11c>)
  400304:	4798      	blx	r3
  400306:	2800      	cmp	r0, #0
  400308:	d0c1      	beq.n	40028e <udi_cdc_tx_send+0x4a>
  40030a:	4b1b      	ldr	r3, [pc, #108]	; (400378 <udi_cdc_tx_send+0x134>)
  40030c:	881b      	ldrh	r3, [r3, #0]
  40030e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  400312:	d2bc      	bcs.n	40028e <udi_cdc_tx_send+0x4a>
	if (cpu_irq_is_enabled_flags(flags))
  400314:	b305      	cbz	r5, 400358 <udi_cdc_tx_send+0x114>
		cpu_irq_enable();
  400316:	2201      	movs	r2, #1
  400318:	4b14      	ldr	r3, [pc, #80]	; (40036c <udi_cdc_tx_send+0x128>)
  40031a:	701a      	strb	r2, [r3, #0]
  40031c:	f3bf 8f5f 	dmb	sy
  400320:	b662      	cpsie	i
  400322:	e019      	b.n	400358 <udi_cdc_tx_send+0x114>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  400324:	fab4 f484 	clz	r4, r4
  400328:	0964      	lsrs	r4, r4, #5
  40032a:	e7bc      	b.n	4002a6 <udi_cdc_tx_send+0x62>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  40032c:	4b14      	ldr	r3, [pc, #80]	; (400380 <udi_cdc_tx_send+0x13c>)
  40032e:	4798      	blx	r3
  400330:	4b0c      	ldr	r3, [pc, #48]	; (400364 <udi_cdc_tx_send+0x120>)
  400332:	8018      	strh	r0, [r3, #0]
  400334:	e002      	b.n	40033c <udi_cdc_tx_send+0xf8>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400336:	2200      	movs	r2, #0
  400338:	4b0a      	ldr	r3, [pc, #40]	; (400364 <udi_cdc_tx_send+0x120>)
  40033a:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  40033c:	4b0d      	ldr	r3, [pc, #52]	; (400374 <udi_cdc_tx_send+0x130>)
	udd_ep_run( ep,
  40033e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
			udi_cdc_tx_buf[port][buf_sel_trans],
  400342:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	udd_ep_run( ep,
  400346:	4a0f      	ldr	r2, [pc, #60]	; (400384 <udi_cdc_tx_send+0x140>)
  400348:	9200      	str	r2, [sp, #0]
  40034a:	4a0f      	ldr	r2, [pc, #60]	; (400388 <udi_cdc_tx_send+0x144>)
  40034c:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400350:	4629      	mov	r1, r5
  400352:	2081      	movs	r0, #129	; 0x81
  400354:	4c0d      	ldr	r4, [pc, #52]	; (40038c <udi_cdc_tx_send+0x148>)
  400356:	47a0      	blx	r4
			udi_cdc_data_sent);
}
  400358:	b004      	add	sp, #16
  40035a:	bd70      	pop	{r4, r5, r6, pc}
  40035c:	200011b0 	.word	0x200011b0
  400360:	00401ff1 	.word	0x00401ff1
  400364:	200011ac 	.word	0x200011ac
  400368:	0040205d 	.word	0x0040205d
  40036c:	200002a8 	.word	0x200002a8
  400370:	200011a8 	.word	0x200011a8
  400374:	200011a4 	.word	0x200011a4
  400378:	20000c7c 	.word	0x20000c7c
  40037c:	20000f20 	.word	0x20000f20
  400380:	0040204d 	.word	0x0040204d
  400384:	004003a1 	.word	0x004003a1
  400388:	20000f24 	.word	0x20000f24
  40038c:	004023b5 	.word	0x004023b5

00400390 <udi_cdc_data_sof_notify>:
{
  400390:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
  400392:	2000      	movs	r0, #0
  400394:	4b01      	ldr	r3, [pc, #4]	; (40039c <udi_cdc_data_sof_notify+0xc>)
  400396:	4798      	blx	r3
  400398:	bd08      	pop	{r3, pc}
  40039a:	bf00      	nop
  40039c:	00400245 	.word	0x00400245

004003a0 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  4003a0:	b9b0      	cbnz	r0, 4003d0 <udi_cdc_data_sent+0x30>
{
  4003a2:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  4003a4:	4b0b      	ldr	r3, [pc, #44]	; (4003d4 <udi_cdc_data_sent+0x34>)
  4003a6:	781b      	ldrb	r3, [r3, #0]
  4003a8:	fab3 f383 	clz	r3, r3
  4003ac:	095b      	lsrs	r3, r3, #5
  4003ae:	2200      	movs	r2, #0
  4003b0:	4809      	ldr	r0, [pc, #36]	; (4003d8 <udi_cdc_data_sent+0x38>)
  4003b2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4003b6:	4b09      	ldr	r3, [pc, #36]	; (4003dc <udi_cdc_data_sent+0x3c>)
  4003b8:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4003ba:	4b09      	ldr	r3, [pc, #36]	; (4003e0 <udi_cdc_data_sent+0x40>)
  4003bc:	701a      	strb	r2, [r3, #0]
	if (n != 0) {
  4003be:	b919      	cbnz	r1, 4003c8 <udi_cdc_data_sent+0x28>
	udi_cdc_tx_send(port);
  4003c0:	2000      	movs	r0, #0
  4003c2:	4b08      	ldr	r3, [pc, #32]	; (4003e4 <udi_cdc_data_sent+0x44>)
  4003c4:	4798      	blx	r3
  4003c6:	bd08      	pop	{r3, pc}
		UDI_CDC_TX_EMPTY_NOTIFY(port);
  4003c8:	4610      	mov	r0, r2
  4003ca:	4b07      	ldr	r3, [pc, #28]	; (4003e8 <udi_cdc_data_sent+0x48>)
  4003cc:	4798      	blx	r3
  4003ce:	e7f7      	b.n	4003c0 <udi_cdc_data_sent+0x20>
  4003d0:	4770      	bx	lr
  4003d2:	bf00      	nop
  4003d4:	200011a8 	.word	0x200011a8
  4003d8:	200011a4 	.word	0x200011a4
  4003dc:	20000f20 	.word	0x20000f20
  4003e0:	200011b0 	.word	0x200011b0
  4003e4:	00400245 	.word	0x00400245
  4003e8:	00402719 	.word	0x00402719

004003ec <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  4003ec:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4003ee:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4003f2:	fab3 f383 	clz	r3, r3
  4003f6:	095b      	lsrs	r3, r3, #5
  4003f8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4003fa:	b672      	cpsid	i
  4003fc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400400:	2200      	movs	r2, #0
  400402:	4b0b      	ldr	r3, [pc, #44]	; (400430 <udi_cdc_multi_get_nb_received_data+0x44>)
  400404:	701a      	strb	r2, [r3, #0]
	return flags;
  400406:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400408:	4b0a      	ldr	r3, [pc, #40]	; (400434 <udi_cdc_multi_get_nb_received_data+0x48>)
  40040a:	8818      	ldrh	r0, [r3, #0]
  40040c:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  40040e:	4a0a      	ldr	r2, [pc, #40]	; (400438 <udi_cdc_multi_get_nb_received_data+0x4c>)
  400410:	7812      	ldrb	r2, [r2, #0]
  400412:	b2d2      	uxtb	r2, r2
  400414:	4809      	ldr	r0, [pc, #36]	; (40043c <udi_cdc_multi_get_nb_received_data+0x50>)
  400416:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
  40041a:	b280      	uxth	r0, r0
  40041c:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
  40041e:	b129      	cbz	r1, 40042c <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
  400420:	2201      	movs	r2, #1
  400422:	4b03      	ldr	r3, [pc, #12]	; (400430 <udi_cdc_multi_get_nb_received_data+0x44>)
  400424:	701a      	strb	r2, [r3, #0]
  400426:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40042a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  40042c:	b002      	add	sp, #8
  40042e:	4770      	bx	lr
  400430:	200002a8 	.word	0x200002a8
  400434:	20000f14 	.word	0x20000f14
  400438:	20000f10 	.word	0x20000f10
  40043c:	20000f0c 	.word	0x20000f0c

00400440 <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
  400440:	b508      	push	{r3, lr}
	return udi_cdc_multi_get_nb_received_data(0);
  400442:	2000      	movs	r0, #0
  400444:	4b01      	ldr	r3, [pc, #4]	; (40044c <udi_cdc_get_nb_received_data+0xc>)
  400446:	4798      	blx	r3
}
  400448:	bd08      	pop	{r3, pc}
  40044a:	bf00      	nop
  40044c:	004003ed 	.word	0x004003ed

00400450 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400450:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400452:	4b03      	ldr	r3, [pc, #12]	; (400460 <udi_cdc_multi_is_rx_ready+0x10>)
  400454:	4798      	blx	r3
}
  400456:	3000      	adds	r0, #0
  400458:	bf18      	it	ne
  40045a:	2001      	movne	r0, #1
  40045c:	bd08      	pop	{r3, pc}
  40045e:	bf00      	nop
  400460:	004003ed 	.word	0x004003ed

00400464 <udi_cdc_rx_start>:
{
  400464:	b510      	push	{r4, lr}
  400466:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400468:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40046c:	fab3 f383 	clz	r3, r3
  400470:	095b      	lsrs	r3, r3, #5
  400472:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400474:	b672      	cpsid	i
  400476:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40047a:	2200      	movs	r2, #0
  40047c:	4b22      	ldr	r3, [pc, #136]	; (400508 <udi_cdc_rx_start+0xa4>)
  40047e:	701a      	strb	r2, [r3, #0]
	return flags;
  400480:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400482:	4a22      	ldr	r2, [pc, #136]	; (40050c <udi_cdc_rx_start+0xa8>)
  400484:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  400486:	4a22      	ldr	r2, [pc, #136]	; (400510 <udi_cdc_rx_start+0xac>)
  400488:	7812      	ldrb	r2, [r2, #0]
  40048a:	b94a      	cbnz	r2, 4004a0 <udi_cdc_rx_start+0x3c>
  40048c:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  40048e:	4a21      	ldr	r2, [pc, #132]	; (400514 <udi_cdc_rx_start+0xb0>)
  400490:	8811      	ldrh	r1, [r2, #0]
  400492:	b289      	uxth	r1, r1
  400494:	4a20      	ldr	r2, [pc, #128]	; (400518 <udi_cdc_rx_start+0xb4>)
  400496:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  40049a:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  40049c:	4291      	cmp	r1, r2
  40049e:	d20a      	bcs.n	4004b6 <udi_cdc_rx_start+0x52>
	if (cpu_irq_is_enabled_flags(flags))
  4004a0:	2b00      	cmp	r3, #0
  4004a2:	d02f      	beq.n	400504 <udi_cdc_rx_start+0xa0>
		cpu_irq_enable();
  4004a4:	2201      	movs	r2, #1
  4004a6:	4b18      	ldr	r3, [pc, #96]	; (400508 <udi_cdc_rx_start+0xa4>)
  4004a8:	701a      	strb	r2, [r3, #0]
  4004aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004ae:	b662      	cpsie	i
		return false;
  4004b0:	2000      	movs	r0, #0
}
  4004b2:	b004      	add	sp, #16
  4004b4:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
  4004b6:	2100      	movs	r1, #0
  4004b8:	4a16      	ldr	r2, [pc, #88]	; (400514 <udi_cdc_rx_start+0xb0>)
  4004ba:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4004bc:	fab4 f284 	clz	r2, r4
  4004c0:	0952      	lsrs	r2, r2, #5
  4004c2:	4912      	ldr	r1, [pc, #72]	; (40050c <udi_cdc_rx_start+0xa8>)
  4004c4:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  4004c6:	2101      	movs	r1, #1
  4004c8:	4a11      	ldr	r2, [pc, #68]	; (400510 <udi_cdc_rx_start+0xac>)
  4004ca:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  4004cc:	b123      	cbz	r3, 4004d8 <udi_cdc_rx_start+0x74>
		cpu_irq_enable();
  4004ce:	4b0e      	ldr	r3, [pc, #56]	; (400508 <udi_cdc_rx_start+0xa4>)
  4004d0:	7019      	strb	r1, [r3, #0]
  4004d2:	f3bf 8f5f 	dmb	sy
  4004d6:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  4004d8:	2000      	movs	r0, #0
  4004da:	4b10      	ldr	r3, [pc, #64]	; (40051c <udi_cdc_rx_start+0xb8>)
  4004dc:	4798      	blx	r3
  4004de:	b968      	cbnz	r0, 4004fc <udi_cdc_rx_start+0x98>
			udi_cdc_rx_buf[port][buf_sel_trans],
  4004e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	return udd_ep_run(ep,
  4004e4:	4b0e      	ldr	r3, [pc, #56]	; (400520 <udi_cdc_rx_start+0xbc>)
  4004e6:	9300      	str	r3, [sp, #0]
  4004e8:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4004ec:	4a0d      	ldr	r2, [pc, #52]	; (400524 <udi_cdc_rx_start+0xc0>)
  4004ee:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4004f2:	2101      	movs	r1, #1
  4004f4:	2002      	movs	r0, #2
  4004f6:	4c0c      	ldr	r4, [pc, #48]	; (400528 <udi_cdc_rx_start+0xc4>)
  4004f8:	47a0      	blx	r4
  4004fa:	e7da      	b.n	4004b2 <udi_cdc_rx_start+0x4e>
		UDI_CDC_RX_NOTIFY(port);
  4004fc:	2000      	movs	r0, #0
  4004fe:	4b0b      	ldr	r3, [pc, #44]	; (40052c <udi_cdc_rx_start+0xc8>)
  400500:	4798      	blx	r3
  400502:	e7ed      	b.n	4004e0 <udi_cdc_rx_start+0x7c>
		return false;
  400504:	2000      	movs	r0, #0
  400506:	e7d4      	b.n	4004b2 <udi_cdc_rx_start+0x4e>
  400508:	200002a8 	.word	0x200002a8
  40050c:	20000f10 	.word	0x20000f10
  400510:	20000f18 	.word	0x20000f18
  400514:	20000f14 	.word	0x20000f14
  400518:	20000f0c 	.word	0x20000f0c
  40051c:	00400451 	.word	0x00400451
  400520:	004005c5 	.word	0x004005c5
  400524:	20000c8c 	.word	0x20000c8c
  400528:	004023b5 	.word	0x004023b5
  40052c:	00402709 	.word	0x00402709

00400530 <udi_cdc_data_enable>:
{
  400530:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
  400532:	2400      	movs	r4, #0
  400534:	4b16      	ldr	r3, [pc, #88]	; (400590 <udi_cdc_data_enable+0x60>)
  400536:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  400538:	4b16      	ldr	r3, [pc, #88]	; (400594 <udi_cdc_data_enable+0x64>)
  40053a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40053c:	4b16      	ldr	r3, [pc, #88]	; (400598 <udi_cdc_data_enable+0x68>)
  40053e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  400540:	4b16      	ldr	r3, [pc, #88]	; (40059c <udi_cdc_data_enable+0x6c>)
  400542:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400544:	4b16      	ldr	r3, [pc, #88]	; (4005a0 <udi_cdc_data_enable+0x70>)
  400546:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400548:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  40054a:	4b16      	ldr	r3, [pc, #88]	; (4005a4 <udi_cdc_data_enable+0x74>)
  40054c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  40054e:	4620      	mov	r0, r4
  400550:	4b15      	ldr	r3, [pc, #84]	; (4005a8 <udi_cdc_data_enable+0x78>)
  400552:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
  400554:	4b15      	ldr	r3, [pc, #84]	; (4005ac <udi_cdc_data_enable+0x7c>)
  400556:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400558:	4b15      	ldr	r3, [pc, #84]	; (4005b0 <udi_cdc_data_enable+0x80>)
  40055a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  40055c:	4b15      	ldr	r3, [pc, #84]	; (4005b4 <udi_cdc_data_enable+0x84>)
  40055e:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  400560:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  400562:	4b15      	ldr	r3, [pc, #84]	; (4005b8 <udi_cdc_data_enable+0x88>)
  400564:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  400566:	4620      	mov	r0, r4
  400568:	4b14      	ldr	r3, [pc, #80]	; (4005bc <udi_cdc_data_enable+0x8c>)
  40056a:	4798      	blx	r3
  40056c:	4601      	mov	r1, r0
  40056e:	b140      	cbz	r0, 400582 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
  400570:	4a07      	ldr	r2, [pc, #28]	; (400590 <udi_cdc_data_enable+0x60>)
  400572:	7813      	ldrb	r3, [r2, #0]
  400574:	3301      	adds	r3, #1
  400576:	b2db      	uxtb	r3, r3
  400578:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  40057a:	7813      	ldrb	r3, [r2, #0]
  40057c:	b2db      	uxtb	r3, r3
  40057e:	2b01      	cmp	r3, #1
  400580:	d001      	beq.n	400586 <udi_cdc_data_enable+0x56>
}
  400582:	4608      	mov	r0, r1
  400584:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
  400586:	2201      	movs	r2, #1
  400588:	4b0d      	ldr	r3, [pc, #52]	; (4005c0 <udi_cdc_data_enable+0x90>)
  40058a:	701a      	strb	r2, [r3, #0]
  40058c:	e7f9      	b.n	400582 <udi_cdc_data_enable+0x52>
  40058e:	bf00      	nop
  400590:	20000c88 	.word	0x20000c88
  400594:	200011b0 	.word	0x200011b0
  400598:	20000f20 	.word	0x20000f20
  40059c:	200011a8 	.word	0x200011a8
  4005a0:	200011a4 	.word	0x200011a4
  4005a4:	200011ac 	.word	0x200011ac
  4005a8:	00400245 	.word	0x00400245
  4005ac:	20000f18 	.word	0x20000f18
  4005b0:	20000f10 	.word	0x20000f10
  4005b4:	20000f0c 	.word	0x20000f0c
  4005b8:	20000f14 	.word	0x20000f14
  4005bc:	00400465 	.word	0x00400465
  4005c0:	20000c7e 	.word	0x20000c7e

004005c4 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  4005c4:	bb00      	cbnz	r0, 400608 <udi_cdc_data_received+0x44>
{
  4005c6:	b510      	push	{r4, lr}
  4005c8:	b082      	sub	sp, #8
  4005ca:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  4005cc:	4b0f      	ldr	r3, [pc, #60]	; (40060c <udi_cdc_data_received+0x48>)
  4005ce:	781b      	ldrb	r3, [r3, #0]
  4005d0:	fab3 f383 	clz	r3, r3
  4005d4:	095b      	lsrs	r3, r3, #5
	if (!n) {
  4005d6:	b151      	cbz	r1, 4005ee <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  4005d8:	b289      	uxth	r1, r1
  4005da:	4a0d      	ldr	r2, [pc, #52]	; (400610 <udi_cdc_data_received+0x4c>)
  4005dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4005e0:	2000      	movs	r0, #0
  4005e2:	4b0c      	ldr	r3, [pc, #48]	; (400614 <udi_cdc_data_received+0x50>)
  4005e4:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  4005e6:	4b0c      	ldr	r3, [pc, #48]	; (400618 <udi_cdc_data_received+0x54>)
  4005e8:	4798      	blx	r3
}
  4005ea:	b002      	add	sp, #8
  4005ec:	bd10      	pop	{r4, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
  4005ee:	009a      	lsls	r2, r3, #2
  4005f0:	441a      	add	r2, r3
		udd_ep_run( ep,
  4005f2:	4b0a      	ldr	r3, [pc, #40]	; (40061c <udi_cdc_data_received+0x58>)
  4005f4:	9300      	str	r3, [sp, #0]
  4005f6:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4005fa:	4909      	ldr	r1, [pc, #36]	; (400620 <udi_cdc_data_received+0x5c>)
  4005fc:	eb01 1282 	add.w	r2, r1, r2, lsl #6
  400600:	2101      	movs	r1, #1
  400602:	4c08      	ldr	r4, [pc, #32]	; (400624 <udi_cdc_data_received+0x60>)
  400604:	47a0      	blx	r4
		return;
  400606:	e7f0      	b.n	4005ea <udi_cdc_data_received+0x26>
  400608:	4770      	bx	lr
  40060a:	bf00      	nop
  40060c:	20000f10 	.word	0x20000f10
  400610:	20000f0c 	.word	0x20000f0c
  400614:	20000f18 	.word	0x20000f18
  400618:	00400465 	.word	0x00400465
  40061c:	004005c5 	.word	0x004005c5
  400620:	20000c8c 	.word	0x20000c8c
  400624:	004023b5 	.word	0x004023b5

00400628 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
  400628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40062c:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  40062e:	4b28      	ldr	r3, [pc, #160]	; (4006d0 <udi_cdc_multi_getc+0xa8>)
  400630:	f893 8006 	ldrb.w	r8, [r3, #6]
  400634:	f1b8 0f09 	cmp.w	r8, #9
  400638:	bf14      	ite	ne
  40063a:	f04f 0800 	movne.w	r8, #0
  40063e:	f04f 0801 	moveq.w	r8, #1
	int rx_data = 0;
  400642:	2000      	movs	r0, #0
	cpu_irq_disable();
  400644:	4c23      	ldr	r4, [pc, #140]	; (4006d4 <udi_cdc_multi_getc+0xac>)
  400646:	4681      	mov	r9, r0
  400648:	4607      	mov	r7, r0

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  40064a:	4d23      	ldr	r5, [pc, #140]	; (4006d8 <udi_cdc_multi_getc+0xb0>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  40064c:	4e23      	ldr	r6, [pc, #140]	; (4006dc <udi_cdc_multi_getc+0xb4>)
  40064e:	e004      	b.n	40065a <udi_cdc_multi_getc+0x32>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
  400650:	428b      	cmp	r3, r1
  400652:	d327      	bcc.n	4006a4 <udi_cdc_multi_getc+0x7c>
		if (!udi_cdc_data_running) {
  400654:	4b22      	ldr	r3, [pc, #136]	; (4006e0 <udi_cdc_multi_getc+0xb8>)
  400656:	781b      	ldrb	r3, [r3, #0]
  400658:	b1f3      	cbz	r3, 400698 <udi_cdc_multi_getc+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40065a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40065e:	fab3 f383 	clz	r3, r3
  400662:	095b      	lsrs	r3, r3, #5
  400664:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400666:	b672      	cpsid	i
  400668:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40066c:	7027      	strb	r7, [r4, #0]
	return flags;
  40066e:	f8dd e004 	ldr.w	lr, [sp, #4]
	pos = udi_cdc_rx_pos[port];
  400672:	882b      	ldrh	r3, [r5, #0]
  400674:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  400676:	7832      	ldrb	r2, [r6, #0]
  400678:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
  40067a:	491a      	ldr	r1, [pc, #104]	; (4006e4 <udi_cdc_multi_getc+0xbc>)
  40067c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  400680:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
  400682:	f1be 0f00 	cmp.w	lr, #0
  400686:	d0e3      	beq.n	400650 <udi_cdc_multi_getc+0x28>
		cpu_irq_enable();
  400688:	f04f 0e01 	mov.w	lr, #1
  40068c:	f884 e000 	strb.w	lr, [r4]
  400690:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400694:	b662      	cpsie	i
  400696:	e7db      	b.n	400650 <udi_cdc_multi_getc+0x28>
			return 0;
  400698:	f04f 0a00 	mov.w	sl, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
  40069c:	4650      	mov	r0, sl
  40069e:	b002      	add	sp, #8
  4006a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  4006a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4006a8:	490f      	ldr	r1, [pc, #60]	; (4006e8 <udi_cdc_multi_getc+0xc0>)
  4006aa:	eb01 1282 	add.w	r2, r1, r2, lsl #6
  4006ae:	f812 a003 	ldrb.w	sl, [r2, r3]
  4006b2:	ea4a 0a00 	orr.w	sl, sl, r0
	udi_cdc_rx_pos[port] = pos+1;
  4006b6:	3301      	adds	r3, #1
  4006b8:	b29b      	uxth	r3, r3
  4006ba:	802b      	strh	r3, [r5, #0]
	udi_cdc_rx_start(port);
  4006bc:	4648      	mov	r0, r9
  4006be:	4b0b      	ldr	r3, [pc, #44]	; (4006ec <udi_cdc_multi_getc+0xc4>)
  4006c0:	4798      	blx	r3
	if (b_databit_9) {
  4006c2:	f1b8 0f00 	cmp.w	r8, #0
  4006c6:	d0e9      	beq.n	40069c <udi_cdc_multi_getc+0x74>
		rx_data = rx_data << 8;
  4006c8:	ea4f 200a 	mov.w	r0, sl, lsl #8
		b_databit_9 = false;
  4006cc:	46c8      	mov	r8, r9
		goto udi_cdc_getc_process_one_byte;
  4006ce:	e7c4      	b.n	40065a <udi_cdc_multi_getc+0x32>
  4006d0:	20000c80 	.word	0x20000c80
  4006d4:	200002a8 	.word	0x200002a8
  4006d8:	20000f14 	.word	0x20000f14
  4006dc:	20000f10 	.word	0x20000f10
  4006e0:	20000c7e 	.word	0x20000c7e
  4006e4:	20000f0c 	.word	0x20000f0c
  4006e8:	20000c8c 	.word	0x20000c8c
  4006ec:	00400465 	.word	0x00400465

004006f0 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  4006f0:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
  4006f2:	2000      	movs	r0, #0
  4006f4:	4b01      	ldr	r3, [pc, #4]	; (4006fc <udi_cdc_getc+0xc>)
  4006f6:	4798      	blx	r3
}
  4006f8:	bd08      	pop	{r3, pc}
  4006fa:	bf00      	nop
  4006fc:	00400629 	.word	0x00400629

00400700 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  400700:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400702:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400706:	fab3 f383 	clz	r3, r3
  40070a:	095b      	lsrs	r3, r3, #5
  40070c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40070e:	b672      	cpsid	i
  400710:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400714:	2200      	movs	r2, #0
  400716:	4b14      	ldr	r3, [pc, #80]	; (400768 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  400718:	701a      	strb	r2, [r3, #0]
	return flags;
  40071a:	9a01      	ldr	r2, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  40071c:	4b13      	ldr	r3, [pc, #76]	; (40076c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  40071e:	781b      	ldrb	r3, [r3, #0]
  400720:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400722:	4913      	ldr	r1, [pc, #76]	; (400770 <udi_cdc_multi_get_free_tx_buffer+0x70>)
  400724:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  400728:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  40072c:	d00a      	beq.n	400744 <udi_cdc_multi_get_free_tx_buffer+0x44>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  40072e:	f5c0 70a0 	rsb	r0, r0, #320	; 0x140
	if (cpu_irq_is_enabled_flags(flags))
  400732:	b12a      	cbz	r2, 400740 <udi_cdc_multi_get_free_tx_buffer+0x40>
		cpu_irq_enable();
  400734:	2201      	movs	r2, #1
  400736:	4b0c      	ldr	r3, [pc, #48]	; (400768 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  400738:	701a      	strb	r2, [r3, #0]
  40073a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40073e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
  400740:	b002      	add	sp, #8
  400742:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
  400744:	490b      	ldr	r1, [pc, #44]	; (400774 <udi_cdc_multi_get_free_tx_buffer+0x74>)
  400746:	7809      	ldrb	r1, [r1, #0]
  400748:	2900      	cmp	r1, #0
  40074a:	d1f0      	bne.n	40072e <udi_cdc_multi_get_free_tx_buffer+0x2e>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  40074c:	490a      	ldr	r1, [pc, #40]	; (400778 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  40074e:	7809      	ldrb	r1, [r1, #0]
  400750:	2900      	cmp	r1, #0
  400752:	d1ec      	bne.n	40072e <udi_cdc_multi_get_free_tx_buffer+0x2e>
			udi_cdc_tx_both_buf_to_send[port] = true;
  400754:	2001      	movs	r0, #1
  400756:	4908      	ldr	r1, [pc, #32]	; (400778 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  400758:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  40075a:	fab3 f383 	clz	r3, r3
  40075e:	095b      	lsrs	r3, r3, #5
  400760:	4902      	ldr	r1, [pc, #8]	; (40076c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400762:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
  400764:	2000      	movs	r0, #0
  400766:	e7e2      	b.n	40072e <udi_cdc_multi_get_free_tx_buffer+0x2e>
  400768:	200002a8 	.word	0x200002a8
  40076c:	200011a8 	.word	0x200011a8
  400770:	200011a4 	.word	0x200011a4
  400774:	200011b0 	.word	0x200011b0
  400778:	20000f20 	.word	0x20000f20

0040077c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  40077c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  40077e:	4b03      	ldr	r3, [pc, #12]	; (40078c <udi_cdc_multi_is_tx_ready+0x10>)
  400780:	4798      	blx	r3
}
  400782:	3000      	adds	r0, #0
  400784:	bf18      	it	ne
  400786:	2001      	movne	r0, #1
  400788:	bd08      	pop	{r3, pc}
  40078a:	bf00      	nop
  40078c:	00400701 	.word	0x00400701

00400790 <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
  400790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400794:	b083      	sub	sp, #12
  400796:	4617      	mov	r7, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
  400798:	4b23      	ldr	r3, [pc, #140]	; (400828 <udi_cdc_multi_write_buf+0x98>)
  40079a:	799b      	ldrb	r3, [r3, #6]
  40079c:	2b09      	cmp	r3, #9
		size *=2;
  40079e:	bf08      	it	eq
  4007a0:	0057      	lsleq	r7, r2, #1
{
  4007a2:	4688      	mov	r8, r1
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  4007a4:	f8df a098 	ldr.w	sl, [pc, #152]	; 400840 <udi_cdc_multi_write_buf+0xb0>
  4007a8:	e032      	b.n	400810 <udi_cdc_multi_write_buf+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4007aa:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4007ae:	fab3 f383 	clz	r3, r3
  4007b2:	095b      	lsrs	r3, r3, #5
  4007b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4007b6:	b672      	cpsid	i
  4007b8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4007bc:	2300      	movs	r3, #0
  4007be:	4a1b      	ldr	r2, [pc, #108]	; (40082c <udi_cdc_multi_write_buf+0x9c>)
  4007c0:	7013      	strb	r3, [r2, #0]
	return flags;
  4007c2:	f8dd b004 	ldr.w	fp, [sp, #4]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  4007c6:	4b1a      	ldr	r3, [pc, #104]	; (400830 <udi_cdc_multi_write_buf+0xa0>)
  4007c8:	781d      	ldrb	r5, [r3, #0]
  4007ca:	b2ed      	uxtb	r5, r5
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  4007cc:	f8df 9074 	ldr.w	r9, [pc, #116]	; 400844 <udi_cdc_multi_write_buf+0xb4>
  4007d0:	f839 6015 	ldrh.w	r6, [r9, r5, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
  4007d4:	f5c6 74a0 	rsb	r4, r6, #320	; 0x140
  4007d8:	42bc      	cmp	r4, r7
  4007da:	bf28      	it	cs
  4007dc:	463c      	movcs	r4, r7
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
  4007de:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  4007e2:	eb06 1383 	add.w	r3, r6, r3, lsl #6
  4007e6:	4622      	mov	r2, r4
  4007e8:	4641      	mov	r1, r8
  4007ea:	4812      	ldr	r0, [pc, #72]	; (400834 <udi_cdc_multi_write_buf+0xa4>)
  4007ec:	4418      	add	r0, r3
  4007ee:	4b12      	ldr	r3, [pc, #72]	; (400838 <udi_cdc_multi_write_buf+0xa8>)
  4007f0:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
  4007f2:	4426      	add	r6, r4
  4007f4:	f829 6015 	strh.w	r6, [r9, r5, lsl #1]
	if (cpu_irq_is_enabled_flags(flags))
  4007f8:	f1bb 0f00 	cmp.w	fp, #0
  4007fc:	d005      	beq.n	40080a <udi_cdc_multi_write_buf+0x7a>
		cpu_irq_enable();
  4007fe:	2301      	movs	r3, #1
  400800:	4a0a      	ldr	r2, [pc, #40]	; (40082c <udi_cdc_multi_write_buf+0x9c>)
  400802:	7013      	strb	r3, [r2, #0]
  400804:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400808:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
  40080a:	44a0      	add	r8, r4
	size -= copy_nb;

	if (size) {
  40080c:	1b3f      	subs	r7, r7, r4
  40080e:	d007      	beq.n	400820 <udi_cdc_multi_write_buf+0x90>
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400810:	2000      	movs	r0, #0
  400812:	47d0      	blx	sl
  400814:	2800      	cmp	r0, #0
  400816:	d1c8      	bne.n	4007aa <udi_cdc_multi_write_buf+0x1a>
		if (!udi_cdc_data_running) {
  400818:	4b08      	ldr	r3, [pc, #32]	; (40083c <udi_cdc_multi_write_buf+0xac>)
  40081a:	781b      	ldrb	r3, [r3, #0]
  40081c:	2b00      	cmp	r3, #0
  40081e:	d1f7      	bne.n	400810 <udi_cdc_multi_write_buf+0x80>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
  400820:	4638      	mov	r0, r7
  400822:	b003      	add	sp, #12
  400824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400828:	20000c80 	.word	0x20000c80
  40082c:	200002a8 	.word	0x200002a8
  400830:	200011a8 	.word	0x200011a8
  400834:	20000f24 	.word	0x20000f24
  400838:	004040a9 	.word	0x004040a9
  40083c:	20000c7e 	.word	0x20000c7e
  400840:	0040077d 	.word	0x0040077d
  400844:	200011a4 	.word	0x200011a4

00400848 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
  400848:	b508      	push	{r3, lr}
	return udi_cdc_multi_write_buf(0, buf, size);
  40084a:	460a      	mov	r2, r1
  40084c:	4601      	mov	r1, r0
  40084e:	2000      	movs	r0, #0
  400850:	4b01      	ldr	r3, [pc, #4]	; (400858 <udi_cdc_write_buf+0x10>)
  400852:	4798      	blx	r3
}
  400854:	bd08      	pop	{r3, pc}
  400856:	bf00      	nop
  400858:	00400791 	.word	0x00400791

0040085c <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  40085c:	4b10      	ldr	r3, [pc, #64]	; (4008a0 <udc_next_desc_in_iface+0x44>)
  40085e:	681b      	ldr	r3, [r3, #0]
  400860:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400862:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400864:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  400866:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400868:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  40086a:	4290      	cmp	r0, r2
  40086c:	d211      	bcs.n	400892 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40086e:	7843      	ldrb	r3, [r0, #1]
  400870:	2b04      	cmp	r3, #4
  400872:	d010      	beq.n	400896 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400874:	428b      	cmp	r3, r1
  400876:	d009      	beq.n	40088c <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  400878:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  40087a:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  40087c:	4290      	cmp	r0, r2
  40087e:	d206      	bcs.n	40088e <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400880:	7843      	ldrb	r3, [r0, #1]
  400882:	2b04      	cmp	r3, #4
  400884:	d009      	beq.n	40089a <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  400886:	428b      	cmp	r3, r1
  400888:	d1f6      	bne.n	400878 <udc_next_desc_in_iface+0x1c>
  40088a:	e007      	b.n	40089c <udc_next_desc_in_iface+0x40>
  40088c:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  40088e:	2000      	movs	r0, #0
  400890:	4770      	bx	lr
  400892:	2000      	movs	r0, #0
  400894:	4770      	bx	lr
  400896:	2000      	movs	r0, #0
  400898:	4770      	bx	lr
  40089a:	2000      	movs	r0, #0
}
  40089c:	4770      	bx	lr
  40089e:	bf00      	nop
  4008a0:	200011cc 	.word	0x200011cc

004008a4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  4008a4:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  4008a6:	4b03      	ldr	r3, [pc, #12]	; (4008b4 <udc_valid_address+0x10>)
  4008a8:	7898      	ldrb	r0, [r3, #2]
  4008aa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4008ae:	4b02      	ldr	r3, [pc, #8]	; (4008b8 <udc_valid_address+0x14>)
  4008b0:	4798      	blx	r3
  4008b2:	bd08      	pop	{r3, pc}
  4008b4:	200012dc 	.word	0x200012dc
  4008b8:	00401ff5 	.word	0x00401ff5

004008bc <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  4008bc:	4b19      	ldr	r3, [pc, #100]	; (400924 <udc_update_iface_desc+0x68>)
  4008be:	781b      	ldrb	r3, [r3, #0]
  4008c0:	b34b      	cbz	r3, 400916 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4008c2:	4b19      	ldr	r3, [pc, #100]	; (400928 <udc_update_iface_desc+0x6c>)
  4008c4:	681b      	ldr	r3, [r3, #0]
  4008c6:	681b      	ldr	r3, [r3, #0]
  4008c8:	791a      	ldrb	r2, [r3, #4]
  4008ca:	4282      	cmp	r2, r0
  4008cc:	d925      	bls.n	40091a <udc_update_iface_desc+0x5e>
{
  4008ce:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  4008d0:	4a16      	ldr	r2, [pc, #88]	; (40092c <udc_update_iface_desc+0x70>)
  4008d2:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  4008d4:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  4008d6:	441c      	add	r4, r3
	while (ptr_end_desc >
  4008d8:	42a3      	cmp	r3, r4
  4008da:	d220      	bcs.n	40091e <udc_update_iface_desc+0x62>
  4008dc:	2500      	movs	r5, #0
  4008de:	2601      	movs	r6, #1
  4008e0:	e007      	b.n	4008f2 <udc_update_iface_desc+0x36>
  4008e2:	4a12      	ldr	r2, [pc, #72]	; (40092c <udc_update_iface_desc+0x70>)
  4008e4:	6013      	str	r3, [r2, #0]
  4008e6:	e00f      	b.n	400908 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  4008e8:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  4008ea:	4413      	add	r3, r2
  4008ec:	4635      	mov	r5, r6
	while (ptr_end_desc >
  4008ee:	42a3      	cmp	r3, r4
  4008f0:	d20c      	bcs.n	40090c <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  4008f2:	785a      	ldrb	r2, [r3, #1]
  4008f4:	2a04      	cmp	r2, #4
  4008f6:	d1f7      	bne.n	4008e8 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4008f8:	789a      	ldrb	r2, [r3, #2]
  4008fa:	4282      	cmp	r2, r0
  4008fc:	d1f4      	bne.n	4008e8 <udc_update_iface_desc+0x2c>
  4008fe:	78da      	ldrb	r2, [r3, #3]
  400900:	428a      	cmp	r2, r1
  400902:	d1f1      	bne.n	4008e8 <udc_update_iface_desc+0x2c>
  400904:	2d00      	cmp	r5, #0
  400906:	d1ec      	bne.n	4008e2 <udc_update_iface_desc+0x26>
				return true; // Interface found
  400908:	2001      	movs	r0, #1
  40090a:	e002      	b.n	400912 <udc_update_iface_desc+0x56>
  40090c:	4a07      	ldr	r2, [pc, #28]	; (40092c <udc_update_iface_desc+0x70>)
  40090e:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  400910:	2000      	movs	r0, #0
}
  400912:	bc70      	pop	{r4, r5, r6}
  400914:	4770      	bx	lr
		return false;
  400916:	2000      	movs	r0, #0
  400918:	4770      	bx	lr
		return false;
  40091a:	2000      	movs	r0, #0
  40091c:	4770      	bx	lr
	return false; // Interface not found
  40091e:	2000      	movs	r0, #0
  400920:	e7f7      	b.n	400912 <udc_update_iface_desc+0x56>
  400922:	bf00      	nop
  400924:	200011c8 	.word	0x200011c8
  400928:	200011cc 	.word	0x200011cc
  40092c:	200011d0 	.word	0x200011d0

00400930 <udc_iface_disable>:
{
  400930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400934:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  400936:	2100      	movs	r1, #0
  400938:	4b13      	ldr	r3, [pc, #76]	; (400988 <udc_iface_disable+0x58>)
  40093a:	4798      	blx	r3
  40093c:	4680      	mov	r8, r0
  40093e:	b910      	cbnz	r0, 400946 <udc_iface_disable+0x16>
}
  400940:	4640      	mov	r0, r8
  400942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400946:	4b11      	ldr	r3, [pc, #68]	; (40098c <udc_iface_disable+0x5c>)
  400948:	681b      	ldr	r3, [r3, #0]
  40094a:	685b      	ldr	r3, [r3, #4]
  40094c:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400950:	f8d9 300c 	ldr.w	r3, [r9, #12]
  400954:	4798      	blx	r3
  400956:	4601      	mov	r1, r0
  400958:	4620      	mov	r0, r4
  40095a:	4b0b      	ldr	r3, [pc, #44]	; (400988 <udc_iface_disable+0x58>)
  40095c:	4798      	blx	r3
  40095e:	4680      	mov	r8, r0
  400960:	2800      	cmp	r0, #0
  400962:	d0ed      	beq.n	400940 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400964:	4b0a      	ldr	r3, [pc, #40]	; (400990 <udc_iface_disable+0x60>)
  400966:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400968:	2605      	movs	r6, #5
  40096a:	4d0a      	ldr	r5, [pc, #40]	; (400994 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  40096c:	4f0a      	ldr	r7, [pc, #40]	; (400998 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40096e:	4631      	mov	r1, r6
  400970:	4620      	mov	r0, r4
  400972:	47a8      	blx	r5
			if (NULL == ep_desc) {
  400974:	4604      	mov	r4, r0
  400976:	b110      	cbz	r0, 40097e <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  400978:	7880      	ldrb	r0, [r0, #2]
  40097a:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40097c:	e7f7      	b.n	40096e <udc_iface_disable+0x3e>
	udi_api->disable();
  40097e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  400982:	4798      	blx	r3
	return true;
  400984:	e7dc      	b.n	400940 <udc_iface_disable+0x10>
  400986:	bf00      	nop
  400988:	004008bd 	.word	0x004008bd
  40098c:	200011cc 	.word	0x200011cc
  400990:	200011d0 	.word	0x200011d0
  400994:	0040085d 	.word	0x0040085d
  400998:	00402165 	.word	0x00402165

0040099c <udc_iface_enable>:
{
  40099c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009a0:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  4009a2:	4b10      	ldr	r3, [pc, #64]	; (4009e4 <udc_iface_enable+0x48>)
  4009a4:	4798      	blx	r3
  4009a6:	4603      	mov	r3, r0
  4009a8:	b1c8      	cbz	r0, 4009de <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4009aa:	4b0f      	ldr	r3, [pc, #60]	; (4009e8 <udc_iface_enable+0x4c>)
  4009ac:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4009ae:	2605      	movs	r6, #5
  4009b0:	4d0e      	ldr	r5, [pc, #56]	; (4009ec <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  4009b2:	4f0f      	ldr	r7, [pc, #60]	; (4009f0 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4009b4:	4631      	mov	r1, r6
  4009b6:	4620      	mov	r0, r4
  4009b8:	47a8      	blx	r5
		if (NULL == ep_desc)
  4009ba:	4604      	mov	r4, r0
  4009bc:	b138      	cbz	r0, 4009ce <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  4009be:	8882      	ldrh	r2, [r0, #4]
  4009c0:	78c1      	ldrb	r1, [r0, #3]
  4009c2:	7880      	ldrb	r0, [r0, #2]
  4009c4:	47b8      	blx	r7
  4009c6:	4603      	mov	r3, r0
  4009c8:	2800      	cmp	r0, #0
  4009ca:	d1f3      	bne.n	4009b4 <udc_iface_enable+0x18>
  4009cc:	e007      	b.n	4009de <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  4009ce:	4b09      	ldr	r3, [pc, #36]	; (4009f4 <udc_iface_enable+0x58>)
  4009d0:	681b      	ldr	r3, [r3, #0]
  4009d2:	685b      	ldr	r3, [r3, #4]
  4009d4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  4009d8:	681b      	ldr	r3, [r3, #0]
  4009da:	4798      	blx	r3
  4009dc:	4603      	mov	r3, r0
}
  4009de:	4618      	mov	r0, r3
  4009e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4009e4:	004008bd 	.word	0x004008bd
  4009e8:	200011d0 	.word	0x200011d0
  4009ec:	0040085d 	.word	0x0040085d
  4009f0:	0040206d 	.word	0x0040206d
  4009f4:	200011cc 	.word	0x200011cc

004009f8 <udc_start>:
{
  4009f8:	b508      	push	{r3, lr}
	udd_enable();
  4009fa:	4b01      	ldr	r3, [pc, #4]	; (400a00 <udc_start+0x8>)
  4009fc:	4798      	blx	r3
  4009fe:	bd08      	pop	{r3, pc}
  400a00:	00401f15 	.word	0x00401f15

00400a04 <udc_reset>:
{
  400a04:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  400a06:	4b0d      	ldr	r3, [pc, #52]	; (400a3c <udc_reset+0x38>)
  400a08:	781b      	ldrb	r3, [r3, #0]
  400a0a:	b183      	cbz	r3, 400a2e <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a0c:	4b0c      	ldr	r3, [pc, #48]	; (400a40 <udc_reset+0x3c>)
  400a0e:	681b      	ldr	r3, [r3, #0]
  400a10:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  400a12:	791b      	ldrb	r3, [r3, #4]
  400a14:	b15b      	cbz	r3, 400a2e <udc_reset+0x2a>
  400a16:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  400a18:	4e0a      	ldr	r6, [pc, #40]	; (400a44 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a1a:	4d09      	ldr	r5, [pc, #36]	; (400a40 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  400a1c:	4620      	mov	r0, r4
  400a1e:	47b0      	blx	r6
				iface_num++) {
  400a20:	3401      	adds	r4, #1
  400a22:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a24:	682b      	ldr	r3, [r5, #0]
  400a26:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  400a28:	791b      	ldrb	r3, [r3, #4]
  400a2a:	42a3      	cmp	r3, r4
  400a2c:	d8f6      	bhi.n	400a1c <udc_reset+0x18>
	udc_num_configuration = 0;
  400a2e:	2200      	movs	r2, #0
  400a30:	4b02      	ldr	r3, [pc, #8]	; (400a3c <udc_reset+0x38>)
  400a32:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  400a34:	2201      	movs	r2, #1
  400a36:	4b04      	ldr	r3, [pc, #16]	; (400a48 <udc_reset+0x44>)
  400a38:	801a      	strh	r2, [r3, #0]
  400a3a:	bd70      	pop	{r4, r5, r6, pc}
  400a3c:	200011c8 	.word	0x200011c8
  400a40:	200011cc 	.word	0x200011cc
  400a44:	00400931 	.word	0x00400931
  400a48:	200011be 	.word	0x200011be

00400a4c <udc_sof_notify>:
{
  400a4c:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  400a4e:	4b0d      	ldr	r3, [pc, #52]	; (400a84 <udc_sof_notify+0x38>)
  400a50:	781b      	ldrb	r3, [r3, #0]
  400a52:	b1b3      	cbz	r3, 400a82 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a54:	4b0c      	ldr	r3, [pc, #48]	; (400a88 <udc_sof_notify+0x3c>)
  400a56:	681b      	ldr	r3, [r3, #0]
  400a58:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  400a5a:	7912      	ldrb	r2, [r2, #4]
  400a5c:	b18a      	cbz	r2, 400a82 <udc_sof_notify+0x36>
  400a5e:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a60:	4d09      	ldr	r5, [pc, #36]	; (400a88 <udc_sof_notify+0x3c>)
  400a62:	e006      	b.n	400a72 <udc_sof_notify+0x26>
				iface_num++) {
  400a64:	3401      	adds	r4, #1
  400a66:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a68:	682b      	ldr	r3, [r5, #0]
  400a6a:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  400a6c:	7912      	ldrb	r2, [r2, #4]
  400a6e:	42a2      	cmp	r2, r4
  400a70:	d907      	bls.n	400a82 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  400a72:	685b      	ldr	r3, [r3, #4]
  400a74:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400a78:	691b      	ldr	r3, [r3, #16]
  400a7a:	2b00      	cmp	r3, #0
  400a7c:	d0f2      	beq.n	400a64 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400a7e:	4798      	blx	r3
  400a80:	e7f0      	b.n	400a64 <udc_sof_notify+0x18>
  400a82:	bd38      	pop	{r3, r4, r5, pc}
  400a84:	200011c8 	.word	0x200011c8
  400a88:	200011cc 	.word	0x200011cc

00400a8c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400a8e:	4b96      	ldr	r3, [pc, #600]	; (400ce8 <udc_process_setup+0x25c>)
  400a90:	2200      	movs	r2, #0
  400a92:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400a94:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400a96:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  400a98:	781b      	ldrb	r3, [r3, #0]
  400a9a:	f013 0f80 	tst.w	r3, #128	; 0x80
  400a9e:	d114      	bne.n	400aca <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400aa0:	f013 0f60 	tst.w	r3, #96	; 0x60
  400aa4:	f000 80b8 	beq.w	400c18 <udc_process_setup+0x18c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  400aa8:	4b8f      	ldr	r3, [pc, #572]	; (400ce8 <udc_process_setup+0x25c>)
  400aaa:	781b      	ldrb	r3, [r3, #0]
  400aac:	f003 031f 	and.w	r3, r3, #31
  400ab0:	2b01      	cmp	r3, #1
  400ab2:	f000 818b 	beq.w	400dcc <udc_process_setup+0x340>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400ab6:	4b8c      	ldr	r3, [pc, #560]	; (400ce8 <udc_process_setup+0x25c>)
  400ab8:	781b      	ldrb	r3, [r3, #0]
  400aba:	f003 031f 	and.w	r3, r3, #31
  400abe:	2b02      	cmp	r3, #2
  400ac0:	f000 81ac 	beq.w	400e1c <udc_process_setup+0x390>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400ac4:	2300      	movs	r3, #0
#endif
}
  400ac6:	4618      	mov	r0, r3
  400ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  400aca:	4a87      	ldr	r2, [pc, #540]	; (400ce8 <udc_process_setup+0x25c>)
  400acc:	88d2      	ldrh	r2, [r2, #6]
  400ace:	2a00      	cmp	r2, #0
  400ad0:	f000 81cd 	beq.w	400e6e <udc_process_setup+0x3e2>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400ad4:	f013 0f60 	tst.w	r3, #96	; 0x60
  400ad8:	d1e6      	bne.n	400aa8 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400ada:	f013 031f 	ands.w	r3, r3, #31
  400ade:	d106      	bne.n	400aee <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  400ae0:	4981      	ldr	r1, [pc, #516]	; (400ce8 <udc_process_setup+0x25c>)
  400ae2:	7849      	ldrb	r1, [r1, #1]
  400ae4:	2906      	cmp	r1, #6
  400ae6:	d013      	beq.n	400b10 <udc_process_setup+0x84>
  400ae8:	2908      	cmp	r1, #8
  400aea:	d058      	beq.n	400b9e <udc_process_setup+0x112>
  400aec:	b149      	cbz	r1, 400b02 <udc_process_setup+0x76>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400aee:	2b01      	cmp	r3, #1
  400af0:	d05c      	beq.n	400bac <udc_process_setup+0x120>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400af2:	2b02      	cmp	r3, #2
  400af4:	d1d8      	bne.n	400aa8 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400af6:	4b7c      	ldr	r3, [pc, #496]	; (400ce8 <udc_process_setup+0x25c>)
  400af8:	785b      	ldrb	r3, [r3, #1]
  400afa:	2b00      	cmp	r3, #0
  400afc:	d07e      	beq.n	400bfc <udc_process_setup+0x170>
	return false;
  400afe:	2300      	movs	r3, #0
  400b00:	e160      	b.n	400dc4 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400b02:	2a02      	cmp	r2, #2
  400b04:	d1d0      	bne.n	400aa8 <udc_process_setup+0x1c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400b06:	2102      	movs	r1, #2
  400b08:	4878      	ldr	r0, [pc, #480]	; (400cec <udc_process_setup+0x260>)
  400b0a:	4b79      	ldr	r3, [pc, #484]	; (400cf0 <udc_process_setup+0x264>)
  400b0c:	4798      	blx	r3
  400b0e:	e09f      	b.n	400c50 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400b10:	4b75      	ldr	r3, [pc, #468]	; (400ce8 <udc_process_setup+0x25c>)
  400b12:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400b14:	0a13      	lsrs	r3, r2, #8
  400b16:	3b01      	subs	r3, #1
  400b18:	2b0e      	cmp	r3, #14
  400b1a:	f200 8150 	bhi.w	400dbe <udc_process_setup+0x332>
  400b1e:	e8df f013 	tbh	[pc, r3, lsl #1]
  400b22:	000f      	.short	0x000f
  400b24:	0036001c 	.word	0x0036001c
  400b28:	014e014e 	.word	0x014e014e
  400b2c:	014e014e 	.word	0x014e014e
  400b30:	014e014e 	.word	0x014e014e
  400b34:	014e014e 	.word	0x014e014e
  400b38:	014e014e 	.word	0x014e014e
  400b3c:	002e014e 	.word	0x002e014e
				(uint8_t *) udc_config.confdev_lsfs,
  400b40:	4b6c      	ldr	r3, [pc, #432]	; (400cf4 <udc_process_setup+0x268>)
  400b42:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  400b44:	7801      	ldrb	r1, [r0, #0]
  400b46:	4b6a      	ldr	r3, [pc, #424]	; (400cf0 <udc_process_setup+0x264>)
  400b48:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  400b4a:	4b67      	ldr	r3, [pc, #412]	; (400ce8 <udc_process_setup+0x25c>)
  400b4c:	88da      	ldrh	r2, [r3, #6]
  400b4e:	899b      	ldrh	r3, [r3, #12]
  400b50:	4293      	cmp	r3, r2
  400b52:	d97d      	bls.n	400c50 <udc_process_setup+0x1c4>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  400b54:	4b64      	ldr	r3, [pc, #400]	; (400ce8 <udc_process_setup+0x25c>)
  400b56:	819a      	strh	r2, [r3, #12]
  400b58:	e07a      	b.n	400c50 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400b5a:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  400b5c:	4b65      	ldr	r3, [pc, #404]	; (400cf4 <udc_process_setup+0x268>)
  400b5e:	681b      	ldr	r3, [r3, #0]
  400b60:	7c5b      	ldrb	r3, [r3, #17]
  400b62:	4293      	cmp	r3, r2
  400b64:	d9a0      	bls.n	400aa8 <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  400b66:	4b63      	ldr	r3, [pc, #396]	; (400cf4 <udc_process_setup+0x268>)
  400b68:	685b      	ldr	r3, [r3, #4]
  400b6a:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  400b6e:	8841      	ldrh	r1, [r0, #2]
  400b70:	4b5f      	ldr	r3, [pc, #380]	; (400cf0 <udc_process_setup+0x264>)
  400b72:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  400b74:	4b5c      	ldr	r3, [pc, #368]	; (400ce8 <udc_process_setup+0x25c>)
  400b76:	689b      	ldr	r3, [r3, #8]
  400b78:	2202      	movs	r2, #2
  400b7a:	705a      	strb	r2, [r3, #1]
  400b7c:	e7e5      	b.n	400b4a <udc_process_setup+0xbe>
		if (udc_config.conf_bos == NULL) {
  400b7e:	4b5d      	ldr	r3, [pc, #372]	; (400cf4 <udc_process_setup+0x268>)
  400b80:	6898      	ldr	r0, [r3, #8]
  400b82:	2800      	cmp	r0, #0
  400b84:	d090      	beq.n	400aa8 <udc_process_setup+0x1c>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  400b86:	8841      	ldrh	r1, [r0, #2]
  400b88:	4b59      	ldr	r3, [pc, #356]	; (400cf0 <udc_process_setup+0x264>)
  400b8a:	4798      	blx	r3
  400b8c:	e7dd      	b.n	400b4a <udc_process_setup+0xbe>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400b8e:	f012 0fff 	tst.w	r2, #255	; 0xff
  400b92:	d189      	bne.n	400aa8 <udc_process_setup+0x1c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400b94:	2104      	movs	r1, #4
  400b96:	4858      	ldr	r0, [pc, #352]	; (400cf8 <udc_process_setup+0x26c>)
  400b98:	4b55      	ldr	r3, [pc, #340]	; (400cf0 <udc_process_setup+0x264>)
  400b9a:	4798      	blx	r3
  400b9c:	e7d5      	b.n	400b4a <udc_process_setup+0xbe>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400b9e:	2a01      	cmp	r2, #1
  400ba0:	d182      	bne.n	400aa8 <udc_process_setup+0x1c>
	udd_set_setup_payload(&udc_num_configuration,1);
  400ba2:	2101      	movs	r1, #1
  400ba4:	4855      	ldr	r0, [pc, #340]	; (400cfc <udc_process_setup+0x270>)
  400ba6:	4b52      	ldr	r3, [pc, #328]	; (400cf0 <udc_process_setup+0x264>)
  400ba8:	4798      	blx	r3
  400baa:	e051      	b.n	400c50 <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
  400bac:	494e      	ldr	r1, [pc, #312]	; (400ce8 <udc_process_setup+0x25c>)
  400bae:	7849      	ldrb	r1, [r1, #1]
  400bb0:	290a      	cmp	r1, #10
  400bb2:	d19e      	bne.n	400af2 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400bb4:	2a01      	cmp	r2, #1
  400bb6:	f47f af77 	bne.w	400aa8 <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  400bba:	4b50      	ldr	r3, [pc, #320]	; (400cfc <udc_process_setup+0x270>)
  400bbc:	781b      	ldrb	r3, [r3, #0]
  400bbe:	2b00      	cmp	r3, #0
  400bc0:	f43f af72 	beq.w	400aa8 <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400bc4:	4b48      	ldr	r3, [pc, #288]	; (400ce8 <udc_process_setup+0x25c>)
  400bc6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400bc8:	4b4d      	ldr	r3, [pc, #308]	; (400d00 <udc_process_setup+0x274>)
  400bca:	681d      	ldr	r5, [r3, #0]
  400bcc:	682b      	ldr	r3, [r5, #0]
  400bce:	791b      	ldrb	r3, [r3, #4]
  400bd0:	42a3      	cmp	r3, r4
  400bd2:	f67f af69 	bls.w	400aa8 <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400bd6:	2100      	movs	r1, #0
  400bd8:	4620      	mov	r0, r4
  400bda:	4b4a      	ldr	r3, [pc, #296]	; (400d04 <udc_process_setup+0x278>)
  400bdc:	4798      	blx	r3
  400bde:	2800      	cmp	r0, #0
  400be0:	f43f af62 	beq.w	400aa8 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400be4:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  400be6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400bea:	68db      	ldr	r3, [r3, #12]
  400bec:	4798      	blx	r3
  400bee:	4b46      	ldr	r3, [pc, #280]	; (400d08 <udc_process_setup+0x27c>)
  400bf0:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  400bf2:	2101      	movs	r1, #1
  400bf4:	4618      	mov	r0, r3
  400bf6:	4b3e      	ldr	r3, [pc, #248]	; (400cf0 <udc_process_setup+0x264>)
  400bf8:	4798      	blx	r3
  400bfa:	e029      	b.n	400c50 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400bfc:	2a02      	cmp	r2, #2
  400bfe:	f47f af53 	bne.w	400aa8 <udc_process_setup+0x1c>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400c02:	4b39      	ldr	r3, [pc, #228]	; (400ce8 <udc_process_setup+0x25c>)
  400c04:	7918      	ldrb	r0, [r3, #4]
  400c06:	4b41      	ldr	r3, [pc, #260]	; (400d0c <udc_process_setup+0x280>)
  400c08:	4798      	blx	r3
  400c0a:	4b41      	ldr	r3, [pc, #260]	; (400d10 <udc_process_setup+0x284>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  400c0c:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400c0e:	2102      	movs	r1, #2
  400c10:	4618      	mov	r0, r3
  400c12:	4b37      	ldr	r3, [pc, #220]	; (400cf0 <udc_process_setup+0x264>)
  400c14:	4798      	blx	r3
  400c16:	e01b      	b.n	400c50 <udc_process_setup+0x1c4>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400c18:	f013 031f 	ands.w	r3, r3, #31
  400c1c:	f040 8082 	bne.w	400d24 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
  400c20:	4a31      	ldr	r2, [pc, #196]	; (400ce8 <udc_process_setup+0x25c>)
  400c22:	7852      	ldrb	r2, [r2, #1]
  400c24:	3a01      	subs	r2, #1
  400c26:	2a08      	cmp	r2, #8
  400c28:	d87c      	bhi.n	400d24 <udc_process_setup+0x298>
  400c2a:	e8df f012 	tbh	[pc, r2, lsl #1]
  400c2e:	0013      	.short	0x0013
  400c30:	00ca007b 	.word	0x00ca007b
  400c34:	0009007b 	.word	0x0009007b
  400c38:	007b007b 	.word	0x007b007b
  400c3c:	0023007b 	.word	0x0023007b
	if (udd_g_ctrlreq.req.wLength) {
  400c40:	4b29      	ldr	r3, [pc, #164]	; (400ce8 <udc_process_setup+0x25c>)
  400c42:	88db      	ldrh	r3, [r3, #6]
  400c44:	2b00      	cmp	r3, #0
  400c46:	f47f af2f 	bne.w	400aa8 <udc_process_setup+0x1c>
	udd_g_ctrlreq.callback = udc_valid_address;
  400c4a:	4a32      	ldr	r2, [pc, #200]	; (400d14 <udc_process_setup+0x288>)
  400c4c:	4b26      	ldr	r3, [pc, #152]	; (400ce8 <udc_process_setup+0x25c>)
  400c4e:	611a      	str	r2, [r3, #16]
			return true;
  400c50:	2301      	movs	r3, #1
  400c52:	e738      	b.n	400ac6 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  400c54:	4b24      	ldr	r3, [pc, #144]	; (400ce8 <udc_process_setup+0x25c>)
  400c56:	88db      	ldrh	r3, [r3, #6]
  400c58:	2b00      	cmp	r3, #0
  400c5a:	f47f af25 	bne.w	400aa8 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  400c5e:	4b22      	ldr	r3, [pc, #136]	; (400ce8 <udc_process_setup+0x25c>)
  400c60:	885b      	ldrh	r3, [r3, #2]
  400c62:	2b01      	cmp	r3, #1
  400c64:	f47f af20 	bne.w	400aa8 <udc_process_setup+0x1c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  400c68:	4a20      	ldr	r2, [pc, #128]	; (400cec <udc_process_setup+0x260>)
  400c6a:	8813      	ldrh	r3, [r2, #0]
  400c6c:	f023 0302 	bic.w	r3, r3, #2
  400c70:	8013      	strh	r3, [r2, #0]
  400c72:	e7ed      	b.n	400c50 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength) {
  400c74:	4b1c      	ldr	r3, [pc, #112]	; (400ce8 <udc_process_setup+0x25c>)
  400c76:	88db      	ldrh	r3, [r3, #6]
  400c78:	2b00      	cmp	r3, #0
  400c7a:	f47f af15 	bne.w	400aa8 <udc_process_setup+0x1c>
	if (!udd_getaddress()) {
  400c7e:	4b26      	ldr	r3, [pc, #152]	; (400d18 <udc_process_setup+0x28c>)
  400c80:	4798      	blx	r3
  400c82:	2800      	cmp	r0, #0
  400c84:	f43f af10 	beq.w	400aa8 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400c88:	4b17      	ldr	r3, [pc, #92]	; (400ce8 <udc_process_setup+0x25c>)
  400c8a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400c8c:	4b19      	ldr	r3, [pc, #100]	; (400cf4 <udc_process_setup+0x268>)
  400c8e:	681b      	ldr	r3, [r3, #0]
  400c90:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400c92:	429a      	cmp	r2, r3
  400c94:	f73f af08 	bgt.w	400aa8 <udc_process_setup+0x1c>
	udc_reset();
  400c98:	4b20      	ldr	r3, [pc, #128]	; (400d1c <udc_process_setup+0x290>)
  400c9a:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400c9c:	4b12      	ldr	r3, [pc, #72]	; (400ce8 <udc_process_setup+0x25c>)
  400c9e:	789b      	ldrb	r3, [r3, #2]
  400ca0:	4a16      	ldr	r2, [pc, #88]	; (400cfc <udc_process_setup+0x270>)
  400ca2:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400ca4:	2b00      	cmp	r3, #0
  400ca6:	d0d3      	beq.n	400c50 <udc_process_setup+0x1c4>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400ca8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400cac:	3b01      	subs	r3, #1
  400cae:	4a11      	ldr	r2, [pc, #68]	; (400cf4 <udc_process_setup+0x268>)
  400cb0:	6852      	ldr	r2, [r2, #4]
  400cb2:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400cb6:	4912      	ldr	r1, [pc, #72]	; (400d00 <udc_process_setup+0x274>)
  400cb8:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400cbe:	791b      	ldrb	r3, [r3, #4]
  400cc0:	2b00      	cmp	r3, #0
  400cc2:	d0c5      	beq.n	400c50 <udc_process_setup+0x1c4>
  400cc4:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  400cc6:	4626      	mov	r6, r4
  400cc8:	4d15      	ldr	r5, [pc, #84]	; (400d20 <udc_process_setup+0x294>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cca:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  400ccc:	4631      	mov	r1, r6
  400cce:	4620      	mov	r0, r4
  400cd0:	47a8      	blx	r5
  400cd2:	2800      	cmp	r0, #0
  400cd4:	f43f aee8 	beq.w	400aa8 <udc_process_setup+0x1c>
			iface_num++) {
  400cd8:	3401      	adds	r4, #1
  400cda:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cdc:	683b      	ldr	r3, [r7, #0]
  400cde:	681b      	ldr	r3, [r3, #0]
  400ce0:	791b      	ldrb	r3, [r3, #4]
  400ce2:	42a3      	cmp	r3, r4
  400ce4:	d8f2      	bhi.n	400ccc <udc_process_setup+0x240>
  400ce6:	e7b3      	b.n	400c50 <udc_process_setup+0x1c4>
  400ce8:	200012dc 	.word	0x200012dc
  400cec:	200011be 	.word	0x200011be
  400cf0:	00402061 	.word	0x00402061
  400cf4:	20000234 	.word	0x20000234
  400cf8:	2000010c 	.word	0x2000010c
  400cfc:	200011c8 	.word	0x200011c8
  400d00:	200011cc 	.word	0x200011cc
  400d04:	004008bd 	.word	0x004008bd
  400d08:	200011c4 	.word	0x200011c4
  400d0c:	004021bd 	.word	0x004021bd
  400d10:	200011c0 	.word	0x200011c0
  400d14:	004008a5 	.word	0x004008a5
  400d18:	00402031 	.word	0x00402031
  400d1c:	00400a05 	.word	0x00400a05
  400d20:	0040099d 	.word	0x0040099d
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400d24:	2b01      	cmp	r3, #1
  400d26:	d00a      	beq.n	400d3e <udc_process_setup+0x2b2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400d28:	2b02      	cmp	r3, #2
  400d2a:	f47f aebd 	bne.w	400aa8 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400d2e:	4b52      	ldr	r3, [pc, #328]	; (400e78 <udc_process_setup+0x3ec>)
  400d30:	785b      	ldrb	r3, [r3, #1]
  400d32:	2b01      	cmp	r3, #1
  400d34:	d020      	beq.n	400d78 <udc_process_setup+0x2ec>
  400d36:	2b03      	cmp	r3, #3
  400d38:	d02e      	beq.n	400d98 <udc_process_setup+0x30c>
	return false;
  400d3a:	2300      	movs	r3, #0
  400d3c:	e042      	b.n	400dc4 <udc_process_setup+0x338>
			switch (udd_g_ctrlreq.req.bRequest) {
  400d3e:	4a4e      	ldr	r2, [pc, #312]	; (400e78 <udc_process_setup+0x3ec>)
  400d40:	7852      	ldrb	r2, [r2, #1]
  400d42:	2a0b      	cmp	r2, #11
  400d44:	d1f0      	bne.n	400d28 <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
  400d46:	4b4c      	ldr	r3, [pc, #304]	; (400e78 <udc_process_setup+0x3ec>)
  400d48:	88db      	ldrh	r3, [r3, #6]
  400d4a:	2b00      	cmp	r3, #0
  400d4c:	f47f aeac 	bne.w	400aa8 <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  400d50:	4b4a      	ldr	r3, [pc, #296]	; (400e7c <udc_process_setup+0x3f0>)
  400d52:	781b      	ldrb	r3, [r3, #0]
  400d54:	2b00      	cmp	r3, #0
  400d56:	f43f aea7 	beq.w	400aa8 <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400d5a:	4b47      	ldr	r3, [pc, #284]	; (400e78 <udc_process_setup+0x3ec>)
  400d5c:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400d5e:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  400d60:	4620      	mov	r0, r4
  400d62:	4b47      	ldr	r3, [pc, #284]	; (400e80 <udc_process_setup+0x3f4>)
  400d64:	4798      	blx	r3
  400d66:	2800      	cmp	r0, #0
  400d68:	f43f ae9e 	beq.w	400aa8 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  400d6c:	b2e9      	uxtb	r1, r5
  400d6e:	4620      	mov	r0, r4
  400d70:	4b44      	ldr	r3, [pc, #272]	; (400e84 <udc_process_setup+0x3f8>)
  400d72:	4798      	blx	r3
  400d74:	4603      	mov	r3, r0
  400d76:	e025      	b.n	400dc4 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400d78:	4b3f      	ldr	r3, [pc, #252]	; (400e78 <udc_process_setup+0x3ec>)
  400d7a:	88db      	ldrh	r3, [r3, #6]
  400d7c:	2b00      	cmp	r3, #0
  400d7e:	f47f ae93 	bne.w	400aa8 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400d82:	4b3d      	ldr	r3, [pc, #244]	; (400e78 <udc_process_setup+0x3ec>)
  400d84:	885b      	ldrh	r3, [r3, #2]
  400d86:	2b00      	cmp	r3, #0
  400d88:	f47f ae8e 	bne.w	400aa8 <udc_process_setup+0x1c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400d8c:	4b3a      	ldr	r3, [pc, #232]	; (400e78 <udc_process_setup+0x3ec>)
  400d8e:	7918      	ldrb	r0, [r3, #4]
  400d90:	4b3d      	ldr	r3, [pc, #244]	; (400e88 <udc_process_setup+0x3fc>)
  400d92:	4798      	blx	r3
  400d94:	4603      	mov	r3, r0
  400d96:	e015      	b.n	400dc4 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400d98:	4b37      	ldr	r3, [pc, #220]	; (400e78 <udc_process_setup+0x3ec>)
  400d9a:	88db      	ldrh	r3, [r3, #6]
  400d9c:	2b00      	cmp	r3, #0
  400d9e:	f47f ae83 	bne.w	400aa8 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400da2:	4b35      	ldr	r3, [pc, #212]	; (400e78 <udc_process_setup+0x3ec>)
  400da4:	885b      	ldrh	r3, [r3, #2]
  400da6:	2b00      	cmp	r3, #0
  400da8:	f47f ae7e 	bne.w	400aa8 <udc_process_setup+0x1c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400dac:	4c32      	ldr	r4, [pc, #200]	; (400e78 <udc_process_setup+0x3ec>)
  400dae:	7920      	ldrb	r0, [r4, #4]
  400db0:	4b36      	ldr	r3, [pc, #216]	; (400e8c <udc_process_setup+0x400>)
  400db2:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400db4:	7920      	ldrb	r0, [r4, #4]
  400db6:	4b36      	ldr	r3, [pc, #216]	; (400e90 <udc_process_setup+0x404>)
  400db8:	4798      	blx	r3
  400dba:	4603      	mov	r3, r0
  400dbc:	e002      	b.n	400dc4 <udc_process_setup+0x338>
		return false;
  400dbe:	2300      	movs	r3, #0
  400dc0:	e000      	b.n	400dc4 <udc_process_setup+0x338>
				return udc_req_std_dev_set_feature();
  400dc2:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  400dc4:	2b00      	cmp	r3, #0
  400dc6:	f47f ae7e 	bne.w	400ac6 <udc_process_setup+0x3a>
  400dca:	e66d      	b.n	400aa8 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
  400dcc:	4b2b      	ldr	r3, [pc, #172]	; (400e7c <udc_process_setup+0x3f0>)
  400dce:	781b      	ldrb	r3, [r3, #0]
  400dd0:	2b00      	cmp	r3, #0
  400dd2:	d04e      	beq.n	400e72 <udc_process_setup+0x3e6>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400dd4:	4b28      	ldr	r3, [pc, #160]	; (400e78 <udc_process_setup+0x3ec>)
  400dd6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400dd8:	4b2e      	ldr	r3, [pc, #184]	; (400e94 <udc_process_setup+0x408>)
  400dda:	681d      	ldr	r5, [r3, #0]
  400ddc:	682b      	ldr	r3, [r5, #0]
  400dde:	791b      	ldrb	r3, [r3, #4]
  400de0:	42a3      	cmp	r3, r4
  400de2:	d801      	bhi.n	400de8 <udc_process_setup+0x35c>
	return false;
  400de4:	2300      	movs	r3, #0
  400de6:	e66e      	b.n	400ac6 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400de8:	2100      	movs	r1, #0
  400dea:	4620      	mov	r0, r4
  400dec:	4b2a      	ldr	r3, [pc, #168]	; (400e98 <udc_process_setup+0x40c>)
  400dee:	4798      	blx	r3
  400df0:	2800      	cmp	r0, #0
  400df2:	f43f ae60 	beq.w	400ab6 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400df6:	686b      	ldr	r3, [r5, #4]
  400df8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400dfc:	68eb      	ldr	r3, [r5, #12]
  400dfe:	4798      	blx	r3
  400e00:	4601      	mov	r1, r0
  400e02:	4620      	mov	r0, r4
  400e04:	4b24      	ldr	r3, [pc, #144]	; (400e98 <udc_process_setup+0x40c>)
  400e06:	4798      	blx	r3
  400e08:	2800      	cmp	r0, #0
  400e0a:	f43f ae54 	beq.w	400ab6 <udc_process_setup+0x2a>
	return udi_api->setup();
  400e0e:	68ab      	ldr	r3, [r5, #8]
  400e10:	4798      	blx	r3
		if (udc_req_iface()) {
  400e12:	4603      	mov	r3, r0
  400e14:	2800      	cmp	r0, #0
  400e16:	f47f ae56 	bne.w	400ac6 <udc_process_setup+0x3a>
  400e1a:	e64c      	b.n	400ab6 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  400e1c:	4b17      	ldr	r3, [pc, #92]	; (400e7c <udc_process_setup+0x3f0>)
  400e1e:	781b      	ldrb	r3, [r3, #0]
  400e20:	b30b      	cbz	r3, 400e66 <udc_process_setup+0x3da>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400e22:	4b1c      	ldr	r3, [pc, #112]	; (400e94 <udc_process_setup+0x408>)
  400e24:	681a      	ldr	r2, [r3, #0]
  400e26:	6813      	ldr	r3, [r2, #0]
  400e28:	791b      	ldrb	r3, [r3, #4]
  400e2a:	b1f3      	cbz	r3, 400e6a <udc_process_setup+0x3de>
  400e2c:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400e2e:	4e1a      	ldr	r6, [pc, #104]	; (400e98 <udc_process_setup+0x40c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400e30:	4f18      	ldr	r7, [pc, #96]	; (400e94 <udc_process_setup+0x408>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400e32:	6853      	ldr	r3, [r2, #4]
  400e34:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400e38:	68eb      	ldr	r3, [r5, #12]
  400e3a:	4798      	blx	r3
  400e3c:	4601      	mov	r1, r0
  400e3e:	4620      	mov	r0, r4
  400e40:	47b0      	blx	r6
  400e42:	4603      	mov	r3, r0
  400e44:	2800      	cmp	r0, #0
  400e46:	f43f ae3e 	beq.w	400ac6 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  400e4a:	68ab      	ldr	r3, [r5, #8]
  400e4c:	4798      	blx	r3
  400e4e:	4603      	mov	r3, r0
  400e50:	2800      	cmp	r0, #0
  400e52:	f47f ae38 	bne.w	400ac6 <udc_process_setup+0x3a>
			iface_num++) {
  400e56:	3401      	adds	r4, #1
  400e58:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400e5a:	683a      	ldr	r2, [r7, #0]
  400e5c:	6811      	ldr	r1, [r2, #0]
  400e5e:	7909      	ldrb	r1, [r1, #4]
  400e60:	42a1      	cmp	r1, r4
  400e62:	d8e6      	bhi.n	400e32 <udc_process_setup+0x3a6>
  400e64:	e62f      	b.n	400ac6 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  400e66:	2300      	movs	r3, #0
  400e68:	e62d      	b.n	400ac6 <udc_process_setup+0x3a>
	return false;
  400e6a:	2300      	movs	r3, #0
  400e6c:	e62b      	b.n	400ac6 <udc_process_setup+0x3a>
			return false; // Error from USB host
  400e6e:	2300      	movs	r3, #0
  400e70:	e629      	b.n	400ac6 <udc_process_setup+0x3a>
	return false;
  400e72:	2300      	movs	r3, #0
  400e74:	e627      	b.n	400ac6 <udc_process_setup+0x3a>
  400e76:	bf00      	nop
  400e78:	200012dc 	.word	0x200012dc
  400e7c:	200011c8 	.word	0x200011c8
  400e80:	00400931 	.word	0x00400931
  400e84:	0040099d 	.word	0x0040099d
  400e88:	004022dd 	.word	0x004022dd
  400e8c:	00402531 	.word	0x00402531
  400e90:	004021fd 	.word	0x004021fd
  400e94:	200011cc 	.word	0x200011cc
  400e98:	004008bd 	.word	0x004008bd

00400e9c <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  400e9c:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  400e9e:	2401      	movs	r4, #1
  400ea0:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  400ea2:	2400      	movs	r4, #0
  400ea4:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  400ea6:	f240 2502 	movw	r5, #514	; 0x202
  400eaa:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  400eae:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  400eb2:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400eb6:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  400eb8:	0052      	lsls	r2, r2, #1
  400eba:	fbb1 f2f2 	udiv	r2, r1, r2
  400ebe:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400ec0:	0212      	lsls	r2, r2, #8
  400ec2:	b292      	uxth	r2, r2
  400ec4:	432b      	orrs	r3, r5
  400ec6:	431a      	orrs	r2, r3
  400ec8:	6042      	str	r2, [r0, #4]
	return 0;
}
  400eca:	4620      	mov	r0, r4
  400ecc:	bc30      	pop	{r4, r5}
  400ece:	4770      	bx	lr

00400ed0 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
  400ed0:	6843      	ldr	r3, [r0, #4]
  400ed2:	f023 0310 	bic.w	r3, r3, #16
  400ed6:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
  400ed8:	6843      	ldr	r3, [r0, #4]
  400eda:	4319      	orrs	r1, r3
  400edc:	6041      	str	r1, [r0, #4]
  400ede:	4770      	bx	lr

00400ee0 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  400ee0:	6843      	ldr	r3, [r0, #4]
  400ee2:	01d2      	lsls	r2, r2, #7
  400ee4:	b2d2      	uxtb	r2, r2
  400ee6:	4319      	orrs	r1, r3
  400ee8:	430a      	orrs	r2, r1
  400eea:	6042      	str	r2, [r0, #4]
  400eec:	4770      	bx	lr

00400eee <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  400eee:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400ef0:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
  400ef2:	0609      	lsls	r1, r1, #24
  400ef4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400ef8:	4321      	orrs	r1, r4
  400efa:	430a      	orrs	r2, r1
  400efc:	0719      	lsls	r1, r3, #28
  400efe:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
  400f02:	4311      	orrs	r1, r2
  400f04:	6041      	str	r1, [r0, #4]
}
  400f06:	bc10      	pop	{r4}
  400f08:	4770      	bx	lr

00400f0a <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  400f0a:	2301      	movs	r3, #1
  400f0c:	fa03 f101 	lsl.w	r1, r3, r1
  400f10:	6101      	str	r1, [r0, #16]
  400f12:	4770      	bx	lr

00400f14 <adc_disable_all_channel>:
 * \param p_adc Pointer to an ADC instance.
 */
void adc_disable_all_channel(Adc *p_adc)
{
#if SAM3S || SAM4S || SAM3N || SAM3XA
	p_adc->ADC_CHDR = 0xFFFF;
  400f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400f18:	6143      	str	r3, [r0, #20]
  400f1a:	4770      	bx	lr

00400f1c <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
  400f1c:	6241      	str	r1, [r0, #36]	; 0x24
  400f1e:	4770      	bx	lr

00400f20 <adc_disable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be disabled.
 */
void adc_disable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IDR = ul_source;
  400f20:	6281      	str	r1, [r0, #40]	; 0x28
  400f22:	4770      	bx	lr

00400f24 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
  400f24:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400f26:	4770      	bx	lr

00400f28 <adc_set_bias_current>:
 * \param p_adc Pointer to an ADC instance.
 * \param ibctl ADC Bias current control.
 */
void adc_set_bias_current(Adc *p_adc, const uint8_t uc_ibctl)
{
	p_adc->ADC_ACR |= ADC_ACR_IBCTL(uc_ibctl);
  400f28:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
  400f2c:	0209      	lsls	r1, r1, #8
  400f2e:	f401 7140 	and.w	r1, r1, #768	; 0x300
  400f32:	4319      	orrs	r1, r3
  400f34:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  400f38:	4770      	bx	lr
	...

00400f3c <adc_get_pdc_base>:
 */
Pdc *adc_get_pdc_base(const Adc *p_adc)
{
	UNUSED(p_adc);
	return PDC_ADC;
}
  400f3c:	4800      	ldr	r0, [pc, #0]	; (400f40 <adc_get_pdc_base+0x4>)
  400f3e:	4770      	bx	lr
  400f40:	40038100 	.word	0x40038100

00400f44 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400f48:	4681      	mov	r9, r0
  400f4a:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400f4c:	4b12      	ldr	r3, [pc, #72]	; (400f98 <pio_handler_process+0x54>)
  400f4e:	4798      	blx	r3
  400f50:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400f52:	4648      	mov	r0, r9
  400f54:	4b11      	ldr	r3, [pc, #68]	; (400f9c <pio_handler_process+0x58>)
  400f56:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400f58:	4005      	ands	r5, r0
  400f5a:	d013      	beq.n	400f84 <pio_handler_process+0x40>
  400f5c:	4c10      	ldr	r4, [pc, #64]	; (400fa0 <pio_handler_process+0x5c>)
  400f5e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400f62:	e003      	b.n	400f6c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400f64:	42b4      	cmp	r4, r6
  400f66:	d00d      	beq.n	400f84 <pio_handler_process+0x40>
  400f68:	3410      	adds	r4, #16
		while (status != 0) {
  400f6a:	b15d      	cbz	r5, 400f84 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400f6c:	6820      	ldr	r0, [r4, #0]
  400f6e:	42b8      	cmp	r0, r7
  400f70:	d1f8      	bne.n	400f64 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f72:	6861      	ldr	r1, [r4, #4]
  400f74:	4229      	tst	r1, r5
  400f76:	d0f5      	beq.n	400f64 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400f78:	68e3      	ldr	r3, [r4, #12]
  400f7a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400f7c:	6863      	ldr	r3, [r4, #4]
  400f7e:	ea25 0503 	bic.w	r5, r5, r3
  400f82:	e7ef      	b.n	400f64 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400f84:	4b07      	ldr	r3, [pc, #28]	; (400fa4 <pio_handler_process+0x60>)
  400f86:	681b      	ldr	r3, [r3, #0]
  400f88:	b123      	cbz	r3, 400f94 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400f8a:	4b07      	ldr	r3, [pc, #28]	; (400fa8 <pio_handler_process+0x64>)
  400f8c:	681b      	ldr	r3, [r3, #0]
  400f8e:	b10b      	cbz	r3, 400f94 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400f90:	4648      	mov	r0, r9
  400f92:	4798      	blx	r3
  400f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400f98:	0040372f 	.word	0x0040372f
  400f9c:	00403733 	.word	0x00403733
  400fa0:	200011d4 	.word	0x200011d4
  400fa4:	20001b0c 	.word	0x20001b0c
  400fa8:	20001244 	.word	0x20001244

00400fac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400fac:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400fae:	210b      	movs	r1, #11
  400fb0:	4801      	ldr	r0, [pc, #4]	; (400fb8 <PIOA_Handler+0xc>)
  400fb2:	4b02      	ldr	r3, [pc, #8]	; (400fbc <PIOA_Handler+0x10>)
  400fb4:	4798      	blx	r3
  400fb6:	bd08      	pop	{r3, pc}
  400fb8:	400e0e00 	.word	0x400e0e00
  400fbc:	00400f45 	.word	0x00400f45

00400fc0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400fc0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400fc2:	210c      	movs	r1, #12
  400fc4:	4801      	ldr	r0, [pc, #4]	; (400fcc <PIOB_Handler+0xc>)
  400fc6:	4b02      	ldr	r3, [pc, #8]	; (400fd0 <PIOB_Handler+0x10>)
  400fc8:	4798      	blx	r3
  400fca:	bd08      	pop	{r3, pc}
  400fcc:	400e1000 	.word	0x400e1000
  400fd0:	00400f45 	.word	0x00400f45

00400fd4 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  400fd4:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  400fd6:	4601      	mov	r1, r0
  400fd8:	bb28      	cbnz	r0, 401026 <udd_sleep_mode+0x52>
  400fda:	4b24      	ldr	r3, [pc, #144]	; (40106c <udd_sleep_mode+0x98>)
  400fdc:	781b      	ldrb	r3, [r3, #0]
  400fde:	b91b      	cbnz	r3, 400fe8 <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  400fe0:	4b22      	ldr	r3, [pc, #136]	; (40106c <udd_sleep_mode+0x98>)
  400fe2:	7019      	strb	r1, [r3, #0]
}
  400fe4:	b002      	add	sp, #8
  400fe6:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  400fe8:	4b21      	ldr	r3, [pc, #132]	; (401070 <udd_sleep_mode+0x9c>)
  400fea:	789b      	ldrb	r3, [r3, #2]
  400fec:	b903      	cbnz	r3, 400ff0 <udd_sleep_mode+0x1c>
  400fee:	e7fe      	b.n	400fee <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400ff0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400ff4:	fab3 f383 	clz	r3, r3
  400ff8:	095b      	lsrs	r3, r3, #5
  400ffa:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400ffc:	b672      	cpsid	i
  400ffe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401002:	2200      	movs	r2, #0
  401004:	4b1b      	ldr	r3, [pc, #108]	; (401074 <udd_sleep_mode+0xa0>)
  401006:	701a      	strb	r2, [r3, #0]
	return flags;
  401008:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  40100a:	4a19      	ldr	r2, [pc, #100]	; (401070 <udd_sleep_mode+0x9c>)
  40100c:	7893      	ldrb	r3, [r2, #2]
  40100e:	3b01      	subs	r3, #1
  401010:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  401012:	2800      	cmp	r0, #0
  401014:	d0e4      	beq.n	400fe0 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  401016:	2201      	movs	r2, #1
  401018:	4b16      	ldr	r3, [pc, #88]	; (401074 <udd_sleep_mode+0xa0>)
  40101a:	701a      	strb	r2, [r3, #0]
  40101c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401020:	b662      	cpsie	i
  401022:	e7dd      	b.n	400fe0 <udd_sleep_mode+0xc>
  401024:	e7fe      	b.n	401024 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  401026:	4b11      	ldr	r3, [pc, #68]	; (40106c <udd_sleep_mode+0x98>)
  401028:	781b      	ldrb	r3, [r3, #0]
  40102a:	2b00      	cmp	r3, #0
  40102c:	d1d8      	bne.n	400fe0 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  40102e:	4b10      	ldr	r3, [pc, #64]	; (401070 <udd_sleep_mode+0x9c>)
  401030:	789b      	ldrb	r3, [r3, #2]
  401032:	2bff      	cmp	r3, #255	; 0xff
  401034:	d0f6      	beq.n	401024 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401036:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40103a:	fab3 f383 	clz	r3, r3
  40103e:	095b      	lsrs	r3, r3, #5
  401040:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401042:	b672      	cpsid	i
  401044:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401048:	2200      	movs	r2, #0
  40104a:	4b0a      	ldr	r3, [pc, #40]	; (401074 <udd_sleep_mode+0xa0>)
  40104c:	701a      	strb	r2, [r3, #0]
	return flags;
  40104e:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  401050:	4a07      	ldr	r2, [pc, #28]	; (401070 <udd_sleep_mode+0x9c>)
  401052:	7893      	ldrb	r3, [r2, #2]
  401054:	3301      	adds	r3, #1
  401056:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  401058:	2800      	cmp	r0, #0
  40105a:	d0c1      	beq.n	400fe0 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  40105c:	2201      	movs	r2, #1
  40105e:	4b05      	ldr	r3, [pc, #20]	; (401074 <udd_sleep_mode+0xa0>)
  401060:	701a      	strb	r2, [r3, #0]
  401062:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401066:	b662      	cpsie	i
  401068:	e7ba      	b.n	400fe0 <udd_sleep_mode+0xc>
  40106a:	bf00      	nop
  40106c:	20001249 	.word	0x20001249
  401070:	200012d4 	.word	0x200012d4
  401074:	200002a8 	.word	0x200002a8

00401078 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  401078:	4a03      	ldr	r2, [pc, #12]	; (401088 <udd_ctrl_init+0x10>)
  40107a:	2300      	movs	r3, #0
  40107c:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  40107e:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  401080:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  401082:	4a02      	ldr	r2, [pc, #8]	; (40108c <udd_ctrl_init+0x14>)
  401084:	7013      	strb	r3, [r2, #0]
  401086:	4770      	bx	lr
  401088:	200012dc 	.word	0x200012dc
  40108c:	2000124e 	.word	0x2000124e

00401090 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  401090:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  401092:	2205      	movs	r2, #5
  401094:	4b0a      	ldr	r3, [pc, #40]	; (4010c0 <udd_ctrl_stall_data+0x30>)
  401096:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  401098:	4a0a      	ldr	r2, [pc, #40]	; (4010c4 <udd_ctrl_stall_data+0x34>)
  40109a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40109c:	9301      	str	r3, [sp, #4]
  40109e:	9b01      	ldr	r3, [sp, #4]
  4010a0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4010a4:	9301      	str	r3, [sp, #4]
  4010a6:	9b01      	ldr	r3, [sp, #4]
  4010a8:	f043 0320 	orr.w	r3, r3, #32
  4010ac:	9301      	str	r3, [sp, #4]
  4010ae:	9b01      	ldr	r3, [sp, #4]
  4010b0:	6313      	str	r3, [r2, #48]	; 0x30
  4010b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010b4:	f013 0f20 	tst.w	r3, #32
  4010b8:	d0fb      	beq.n	4010b2 <udd_ctrl_stall_data+0x22>
}
  4010ba:	b002      	add	sp, #8
  4010bc:	4770      	bx	lr
  4010be:	bf00      	nop
  4010c0:	2000124e 	.word	0x2000124e
  4010c4:	40034000 	.word	0x40034000

004010c8 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  4010c8:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  4010ca:	2203      	movs	r2, #3
  4010cc:	4b0a      	ldr	r3, [pc, #40]	; (4010f8 <udd_ctrl_send_zlp_in+0x30>)
  4010ce:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  4010d0:	4a0a      	ldr	r2, [pc, #40]	; (4010fc <udd_ctrl_send_zlp_in+0x34>)
  4010d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010d4:	9301      	str	r3, [sp, #4]
  4010d6:	9b01      	ldr	r3, [sp, #4]
  4010d8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4010dc:	9301      	str	r3, [sp, #4]
  4010de:	9b01      	ldr	r3, [sp, #4]
  4010e0:	f043 0310 	orr.w	r3, r3, #16
  4010e4:	9301      	str	r3, [sp, #4]
  4010e6:	9b01      	ldr	r3, [sp, #4]
  4010e8:	6313      	str	r3, [r2, #48]	; 0x30
  4010ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010ec:	f013 0f10 	tst.w	r3, #16
  4010f0:	d0fb      	beq.n	4010ea <udd_ctrl_send_zlp_in+0x22>
}
  4010f2:	b002      	add	sp, #8
  4010f4:	4770      	bx	lr
  4010f6:	bf00      	nop
  4010f8:	2000124e 	.word	0x2000124e
  4010fc:	40034000 	.word	0x40034000

00401100 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  401100:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  401102:	4b02      	ldr	r3, [pc, #8]	; (40110c <udd_ctrl_endofrequest+0xc>)
  401104:	691b      	ldr	r3, [r3, #16]
  401106:	b103      	cbz	r3, 40110a <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  401108:	4798      	blx	r3
  40110a:	bd08      	pop	{r3, pc}
  40110c:	200012dc 	.word	0x200012dc

00401110 <udd_ctrl_in_sent>:
{
  401110:	b530      	push	{r4, r5, lr}
  401112:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401114:	4b63      	ldr	r3, [pc, #396]	; (4012a4 <udd_ctrl_in_sent+0x194>)
  401116:	781b      	ldrb	r3, [r3, #0]
  401118:	2b03      	cmp	r3, #3
  40111a:	d029      	beq.n	401170 <udd_ctrl_in_sent+0x60>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  40111c:	4b62      	ldr	r3, [pc, #392]	; (4012a8 <udd_ctrl_in_sent+0x198>)
  40111e:	881b      	ldrh	r3, [r3, #0]
  401120:	4a62      	ldr	r2, [pc, #392]	; (4012ac <udd_ctrl_in_sent+0x19c>)
  401122:	8994      	ldrh	r4, [r2, #12]
  401124:	1ae4      	subs	r4, r4, r3
  401126:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  401128:	2c00      	cmp	r4, #0
  40112a:	d144      	bne.n	4011b6 <udd_ctrl_in_sent+0xa6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  40112c:	4a60      	ldr	r2, [pc, #384]	; (4012b0 <udd_ctrl_in_sent+0x1a0>)
  40112e:	8811      	ldrh	r1, [r2, #0]
  401130:	440b      	add	r3, r1
  401132:	b29b      	uxth	r3, r3
  401134:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  401136:	4a5d      	ldr	r2, [pc, #372]	; (4012ac <udd_ctrl_in_sent+0x19c>)
  401138:	88d2      	ldrh	r2, [r2, #6]
  40113a:	429a      	cmp	r2, r3
  40113c:	d003      	beq.n	401146 <udd_ctrl_in_sent+0x36>
				|| b_shortpacket) {
  40113e:	4b5d      	ldr	r3, [pc, #372]	; (4012b4 <udd_ctrl_in_sent+0x1a4>)
  401140:	781b      	ldrb	r3, [r3, #0]
  401142:	2b00      	cmp	r3, #0
  401144:	d02b      	beq.n	40119e <udd_ctrl_in_sent+0x8e>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401146:	2204      	movs	r2, #4
  401148:	4b56      	ldr	r3, [pc, #344]	; (4012a4 <udd_ctrl_in_sent+0x194>)
  40114a:	701a      	strb	r2, [r3, #0]
			udd_ack_in_sent(0);
  40114c:	4a5a      	ldr	r2, [pc, #360]	; (4012b8 <udd_ctrl_in_sent+0x1a8>)
  40114e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401150:	9301      	str	r3, [sp, #4]
  401152:	9b01      	ldr	r3, [sp, #4]
  401154:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401158:	9301      	str	r3, [sp, #4]
  40115a:	9b01      	ldr	r3, [sp, #4]
  40115c:	f023 0301 	bic.w	r3, r3, #1
  401160:	9301      	str	r3, [sp, #4]
  401162:	9b01      	ldr	r3, [sp, #4]
  401164:	6313      	str	r3, [r2, #48]	; 0x30
  401166:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401168:	f013 0f01 	tst.w	r3, #1
  40116c:	d1fb      	bne.n	401166 <udd_ctrl_in_sent+0x56>
  40116e:	e014      	b.n	40119a <udd_ctrl_in_sent+0x8a>
		udd_ack_in_sent(0);
  401170:	4a51      	ldr	r2, [pc, #324]	; (4012b8 <udd_ctrl_in_sent+0x1a8>)
  401172:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401174:	9300      	str	r3, [sp, #0]
  401176:	9b00      	ldr	r3, [sp, #0]
  401178:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40117c:	9300      	str	r3, [sp, #0]
  40117e:	9b00      	ldr	r3, [sp, #0]
  401180:	f023 0301 	bic.w	r3, r3, #1
  401184:	9300      	str	r3, [sp, #0]
  401186:	9b00      	ldr	r3, [sp, #0]
  401188:	6313      	str	r3, [r2, #48]	; 0x30
  40118a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40118c:	f013 0f01 	tst.w	r3, #1
  401190:	d1fb      	bne.n	40118a <udd_ctrl_in_sent+0x7a>
		udd_ctrl_endofrequest();
  401192:	4b4a      	ldr	r3, [pc, #296]	; (4012bc <udd_ctrl_in_sent+0x1ac>)
  401194:	4798      	blx	r3
		udd_ctrl_init();
  401196:	4b4a      	ldr	r3, [pc, #296]	; (4012c0 <udd_ctrl_in_sent+0x1b0>)
  401198:	4798      	blx	r3
}
  40119a:	b007      	add	sp, #28
  40119c:	bd30      	pop	{r4, r5, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  40119e:	4b43      	ldr	r3, [pc, #268]	; (4012ac <udd_ctrl_in_sent+0x19c>)
  4011a0:	695b      	ldr	r3, [r3, #20]
  4011a2:	2b00      	cmp	r3, #0
  4011a4:	d05d      	beq.n	401262 <udd_ctrl_in_sent+0x152>
				|| (!udd_g_ctrlreq.over_under_run())) {
  4011a6:	4798      	blx	r3
  4011a8:	2800      	cmp	r0, #0
  4011aa:	d05a      	beq.n	401262 <udd_ctrl_in_sent+0x152>
			udd_ctrl_payload_nb_trans = 0;
  4011ac:	2200      	movs	r2, #0
  4011ae:	4b3e      	ldr	r3, [pc, #248]	; (4012a8 <udd_ctrl_in_sent+0x198>)
  4011b0:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  4011b2:	4b3e      	ldr	r3, [pc, #248]	; (4012ac <udd_ctrl_in_sent+0x19c>)
  4011b4:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  4011b6:	2c3f      	cmp	r4, #63	; 0x3f
  4011b8:	d953      	bls.n	401262 <udd_ctrl_in_sent+0x152>
		b_shortpacket = false;
  4011ba:	2200      	movs	r2, #0
  4011bc:	4b3d      	ldr	r3, [pc, #244]	; (4012b4 <udd_ctrl_in_sent+0x1a4>)
  4011be:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  4011c0:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4011c2:	4b3a      	ldr	r3, [pc, #232]	; (4012ac <udd_ctrl_in_sent+0x19c>)
  4011c4:	6899      	ldr	r1, [r3, #8]
  4011c6:	4b38      	ldr	r3, [pc, #224]	; (4012a8 <udd_ctrl_in_sent+0x198>)
  4011c8:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4011ca:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4011ce:	fab3 f383 	clz	r3, r3
  4011d2:	095b      	lsrs	r3, r3, #5
  4011d4:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  4011d6:	b672      	cpsid	i
  4011d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4011dc:	2200      	movs	r2, #0
  4011de:	4b39      	ldr	r3, [pc, #228]	; (4012c4 <udd_ctrl_in_sent+0x1b4>)
  4011e0:	701a      	strb	r2, [r3, #0]
	return flags;
  4011e2:	9d05      	ldr	r5, [sp, #20]
	if (Is_udd_bank0_received(0)) {
  4011e4:	4b34      	ldr	r3, [pc, #208]	; (4012b8 <udd_ctrl_in_sent+0x1a8>)
  4011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011e8:	f013 0f02 	tst.w	r3, #2
  4011ec:	d13d      	bne.n	40126a <udd_ctrl_in_sent+0x15a>
	for (i = 0; i < nb_remain; i++) {
  4011ee:	b14c      	cbz	r4, 401204 <udd_ctrl_in_sent+0xf4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4011f0:	4401      	add	r1, r0
  4011f2:	460a      	mov	r2, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  4011f4:	4830      	ldr	r0, [pc, #192]	; (4012b8 <udd_ctrl_in_sent+0x1a8>)
  4011f6:	f812 3b01 	ldrb.w	r3, [r2], #1
  4011fa:	6503      	str	r3, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  4011fc:	1a53      	subs	r3, r2, r1
  4011fe:	b2db      	uxtb	r3, r3
  401200:	42a3      	cmp	r3, r4
  401202:	d3f8      	bcc.n	4011f6 <udd_ctrl_in_sent+0xe6>
	udd_ctrl_payload_nb_trans += nb_remain;
  401204:	4b28      	ldr	r3, [pc, #160]	; (4012a8 <udd_ctrl_in_sent+0x198>)
  401206:	881a      	ldrh	r2, [r3, #0]
  401208:	4414      	add	r4, r2
  40120a:	801c      	strh	r4, [r3, #0]
	udd_set_transmit_ready(0);
  40120c:	4a2a      	ldr	r2, [pc, #168]	; (4012b8 <udd_ctrl_in_sent+0x1a8>)
  40120e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401210:	9303      	str	r3, [sp, #12]
  401212:	9b03      	ldr	r3, [sp, #12]
  401214:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401218:	9303      	str	r3, [sp, #12]
  40121a:	9b03      	ldr	r3, [sp, #12]
  40121c:	f043 0310 	orr.w	r3, r3, #16
  401220:	9303      	str	r3, [sp, #12]
  401222:	9b03      	ldr	r3, [sp, #12]
  401224:	6313      	str	r3, [r2, #48]	; 0x30
  401226:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401228:	f013 0f10 	tst.w	r3, #16
  40122c:	d0fb      	beq.n	401226 <udd_ctrl_in_sent+0x116>
	udd_ack_in_sent(0);
  40122e:	4a22      	ldr	r2, [pc, #136]	; (4012b8 <udd_ctrl_in_sent+0x1a8>)
  401230:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401232:	9304      	str	r3, [sp, #16]
  401234:	9b04      	ldr	r3, [sp, #16]
  401236:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40123a:	9304      	str	r3, [sp, #16]
  40123c:	9b04      	ldr	r3, [sp, #16]
  40123e:	f023 0301 	bic.w	r3, r3, #1
  401242:	9304      	str	r3, [sp, #16]
  401244:	9b04      	ldr	r3, [sp, #16]
  401246:	6313      	str	r3, [r2, #48]	; 0x30
  401248:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40124a:	f013 0f01 	tst.w	r3, #1
  40124e:	d1fb      	bne.n	401248 <udd_ctrl_in_sent+0x138>
	if (cpu_irq_is_enabled_flags(flags))
  401250:	2d00      	cmp	r5, #0
  401252:	d0a2      	beq.n	40119a <udd_ctrl_in_sent+0x8a>
		cpu_irq_enable();
  401254:	2201      	movs	r2, #1
  401256:	4b1b      	ldr	r3, [pc, #108]	; (4012c4 <udd_ctrl_in_sent+0x1b4>)
  401258:	701a      	strb	r2, [r3, #0]
  40125a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40125e:	b662      	cpsie	i
  401260:	e79b      	b.n	40119a <udd_ctrl_in_sent+0x8a>
		b_shortpacket = true;
  401262:	2201      	movs	r2, #1
  401264:	4b13      	ldr	r3, [pc, #76]	; (4012b4 <udd_ctrl_in_sent+0x1a4>)
  401266:	701a      	strb	r2, [r3, #0]
  401268:	e7ab      	b.n	4011c2 <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  40126a:	b12d      	cbz	r5, 401278 <udd_ctrl_in_sent+0x168>
		cpu_irq_enable();
  40126c:	2201      	movs	r2, #1
  40126e:	4b15      	ldr	r3, [pc, #84]	; (4012c4 <udd_ctrl_in_sent+0x1b4>)
  401270:	701a      	strb	r2, [r3, #0]
  401272:	f3bf 8f5f 	dmb	sy
  401276:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401278:	2204      	movs	r2, #4
  40127a:	4b0a      	ldr	r3, [pc, #40]	; (4012a4 <udd_ctrl_in_sent+0x194>)
  40127c:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  40127e:	4a0e      	ldr	r2, [pc, #56]	; (4012b8 <udd_ctrl_in_sent+0x1a8>)
  401280:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401282:	9302      	str	r3, [sp, #8]
  401284:	9b02      	ldr	r3, [sp, #8]
  401286:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40128a:	9302      	str	r3, [sp, #8]
  40128c:	9b02      	ldr	r3, [sp, #8]
  40128e:	f023 0301 	bic.w	r3, r3, #1
  401292:	9302      	str	r3, [sp, #8]
  401294:	9b02      	ldr	r3, [sp, #8]
  401296:	6313      	str	r3, [r2, #48]	; 0x30
  401298:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40129a:	f013 0f01 	tst.w	r3, #1
  40129e:	d1fb      	bne.n	401298 <udd_ctrl_in_sent+0x188>
  4012a0:	e77b      	b.n	40119a <udd_ctrl_in_sent+0x8a>
  4012a2:	bf00      	nop
  4012a4:	2000124e 	.word	0x2000124e
  4012a8:	2000124a 	.word	0x2000124a
  4012ac:	200012dc 	.word	0x200012dc
  4012b0:	2000124c 	.word	0x2000124c
  4012b4:	20001248 	.word	0x20001248
  4012b8:	40034000 	.word	0x40034000
  4012bc:	00401101 	.word	0x00401101
  4012c0:	00401079 	.word	0x00401079
  4012c4:	200002a8 	.word	0x200002a8

004012c8 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  4012c8:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
  4012ca:	7c43      	ldrb	r3, [r0, #17]
  4012cc:	f013 0f10 	tst.w	r3, #16
  4012d0:	d016      	beq.n	401300 <udd_ep_finish_job+0x38>
  4012d2:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
  4012d4:	7c43      	ldrb	r3, [r0, #17]
  4012d6:	f36f 1304 	bfc	r3, #4, #1
  4012da:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  4012dc:	6804      	ldr	r4, [r0, #0]
  4012de:	b17c      	cbz	r4, 401300 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  4012e0:	f102 030c 	add.w	r3, r2, #12
  4012e4:	4907      	ldr	r1, [pc, #28]	; (401304 <udd_ep_finish_job+0x3c>)
  4012e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4012ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  4012ee:	bf18      	it	ne
  4012f0:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  4012f4:	6881      	ldr	r1, [r0, #8]
  4012f6:	2d01      	cmp	r5, #1
  4012f8:	bf14      	ite	ne
  4012fa:	2000      	movne	r0, #0
  4012fc:	2001      	moveq	r0, #1
  4012fe:	47a0      	blx	r4
  401300:	bd38      	pop	{r3, r4, r5, pc}
  401302:	bf00      	nop
  401304:	40034000 	.word	0x40034000

00401308 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  401308:	b430      	push	{r4, r5}
  40130a:	b082      	sub	sp, #8
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40130c:	1e41      	subs	r1, r0, #1
  40130e:	0083      	lsls	r3, r0, #2
  401310:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401314:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

	bank0_received = Is_udd_bank0_received(ep);
  401318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  40131a:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  40131c:	f012 0f02 	tst.w	r2, #2
  401320:	d032      	beq.n	401388 <udd_ep_ack_out_received+0x80>
  401322:	f014 0f40 	tst.w	r4, #64	; 0x40
  401326:	d108      	bne.n	40133a <udd_ep_ack_out_received+0x32>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  401328:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40132c:	4c2a      	ldr	r4, [pc, #168]	; (4013d8 <udd_ep_ack_out_received+0xd0>)
  40132e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401332:	7c54      	ldrb	r4, [r2, #17]
  401334:	f36f 0483 	bfc	r4, #2, #2
  401338:	7454      	strb	r4, [r2, #17]
	} else {
		// Must be bank1
		ptr_job->bank = 1;
	}
	if (ptr_job->bank == 0) {
  40133a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40133e:	4c26      	ldr	r4, [pc, #152]	; (4013d8 <udd_ep_ack_out_received+0xd0>)
  401340:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401344:	7c52      	ldrb	r2, [r2, #17]
  401346:	f012 0f0c 	tst.w	r2, #12
  40134a:	d128      	bne.n	40139e <udd_ep_ack_out_received+0x96>
		udd_ack_bank0_received(ep);
  40134c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40134e:	9200      	str	r2, [sp, #0]
  401350:	9a00      	ldr	r2, [sp, #0]
  401352:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401356:	9200      	str	r2, [sp, #0]
  401358:	9a00      	ldr	r2, [sp, #0]
  40135a:	f022 0202 	bic.w	r2, r2, #2
  40135e:	9200      	str	r2, [sp, #0]
  401360:	9a00      	ldr	r2, [sp, #0]
  401362:	631a      	str	r2, [r3, #48]	; 0x30
  401364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401366:	f012 0f02 	tst.w	r2, #2
  40136a:	d1fb      	bne.n	401364 <udd_ep_ack_out_received+0x5c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  40136c:	b380      	cbz	r0, 4013d0 <udd_ep_ack_out_received+0xc8>
  40136e:	2803      	cmp	r0, #3
  401370:	d02e      	beq.n	4013d0 <udd_ep_ack_out_received+0xc8>
			ptr_job->bank = 1;
  401372:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401376:	4b18      	ldr	r3, [pc, #96]	; (4013d8 <udd_ep_ack_out_received+0xd0>)
  401378:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  40137c:	7c5a      	ldrb	r2, [r3, #17]
  40137e:	2101      	movs	r1, #1
  401380:	f361 0283 	bfi	r2, r1, #2, #2
  401384:	745a      	strb	r2, [r3, #17]
  401386:	e023      	b.n	4013d0 <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 1;
  401388:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40138c:	4c12      	ldr	r4, [pc, #72]	; (4013d8 <udd_ep_ack_out_received+0xd0>)
  40138e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401392:	7c54      	ldrb	r4, [r2, #17]
  401394:	2501      	movs	r5, #1
  401396:	f365 0483 	bfi	r4, r5, #2, #2
  40139a:	7454      	strb	r4, [r2, #17]
  40139c:	e7cd      	b.n	40133a <udd_ep_ack_out_received+0x32>
		}
	} else {
		udd_ack_bank1_received(ep);
  40139e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4013a0:	9201      	str	r2, [sp, #4]
  4013a2:	9a01      	ldr	r2, [sp, #4]
  4013a4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4013a8:	9201      	str	r2, [sp, #4]
  4013aa:	9a01      	ldr	r2, [sp, #4]
  4013ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  4013b0:	9201      	str	r2, [sp, #4]
  4013b2:	9a01      	ldr	r2, [sp, #4]
  4013b4:	631a      	str	r2, [r3, #48]	; 0x30
  4013b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4013b8:	f012 0f40 	tst.w	r2, #64	; 0x40
  4013bc:	d1fb      	bne.n	4013b6 <udd_ep_ack_out_received+0xae>
		ptr_job->bank = 0;
  4013be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4013c2:	4b05      	ldr	r3, [pc, #20]	; (4013d8 <udd_ep_ack_out_received+0xd0>)
  4013c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4013c8:	7c4b      	ldrb	r3, [r1, #17]
  4013ca:	f36f 0383 	bfc	r3, #2, #2
  4013ce:	744b      	strb	r3, [r1, #17]
	}
}
  4013d0:	b002      	add	sp, #8
  4013d2:	bc30      	pop	{r4, r5}
  4013d4:	4770      	bx	lr
  4013d6:	bf00      	nop
  4013d8:	20001250 	.word	0x20001250

004013dc <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  4013dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4013e0:	b083      	sub	sp, #12
  4013e2:	4688      	mov	r8, r1
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4013e4:	4681      	mov	r9, r0
  4013e6:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4013e8:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  4013ec:	4b66      	ldr	r3, [pc, #408]	; (401588 <udd_ep_in_sent+0x1ac>)
  4013ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4013f2:	f893 c011 	ldrb.w	ip, [r3, #17]
  4013f6:	f3cc 0c81 	ubfx	ip, ip, #2, #2
  4013fa:	2800      	cmp	r0, #0
  4013fc:	f000 80b7 	beq.w	40156e <udd_ep_in_sent+0x192>
  401400:	2803      	cmp	r0, #3
  401402:	bf0c      	ite	eq
  401404:	2301      	moveq	r3, #1
  401406:	2302      	movne	r3, #2
  401408:	4563      	cmp	r3, ip
  40140a:	f340 80b2 	ble.w	401572 <udd_ep_in_sent+0x196>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  40140e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401412:	4a5d      	ldr	r2, [pc, #372]	; (401588 <udd_ep_in_sent+0x1ac>)
  401414:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401418:	68da      	ldr	r2, [r3, #12]
  40141a:	689b      	ldr	r3, [r3, #8]
  40141c:	429a      	cmp	r2, r3
  40141e:	d309      	bcc.n	401434 <udd_ep_in_sent+0x58>
  401420:	eb06 0186 	add.w	r1, r6, r6, lsl #2
  401424:	4c58      	ldr	r4, [pc, #352]	; (401588 <udd_ep_in_sent+0x1ac>)
  401426:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  40142a:	7c49      	ldrb	r1, [r1, #17]
  40142c:	f011 0f40 	tst.w	r1, #64	; 0x40
  401430:	f000 80a3 	beq.w	40157a <udd_ep_in_sent+0x19e>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  401434:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  401438:	4953      	ldr	r1, [pc, #332]	; (401588 <udd_ep_in_sent+0x1ac>)
  40143a:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  40143e:	686c      	ldr	r4, [r5, #4]
  401440:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401442:	1a99      	subs	r1, r3, r2
	uint32_t pkt_size = ptr_job->size;
  401444:	8a2b      	ldrh	r3, [r5, #16]
  401446:	f3c3 0709 	ubfx	r7, r3, #0, #10
	if (nb_remain < pkt_size) {
  40144a:	42b9      	cmp	r1, r7
		pkt_size = nb_remain;
  40144c:	bf3a      	itte	cc
  40144e:	460f      	movcc	r7, r1
		is_short_pkt = true;
  401450:	f04f 0e01 	movcc.w	lr, #1
	bool is_short_pkt = false;
  401454:	f04f 0e00 	movcs.w	lr, #0
	ptr_job->buf_cnt += pkt_size;
  401458:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40145c:	494a      	ldr	r1, [pc, #296]	; (401588 <udd_ep_in_sent+0x1ac>)
  40145e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  401462:	443a      	add	r2, r7
  401464:	60da      	str	r2, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  401466:	2f07      	cmp	r7, #7
  401468:	d92b      	bls.n	4014c2 <udd_ep_in_sent+0xe6>
  40146a:	f104 0308 	add.w	r3, r4, #8
  40146e:	463d      	mov	r5, r7
  401470:	0082      	lsls	r2, r0, #2
  401472:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401476:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40147a:	f813 1c08 	ldrb.w	r1, [r3, #-8]
  40147e:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401480:	f813 1c07 	ldrb.w	r1, [r3, #-7]
  401484:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401486:	f813 1c06 	ldrb.w	r1, [r3, #-6]
  40148a:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40148c:	f813 1c05 	ldrb.w	r1, [r3, #-5]
  401490:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401492:	f813 1c04 	ldrb.w	r1, [r3, #-4]
  401496:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401498:	f813 1c03 	ldrb.w	r1, [r3, #-3]
  40149c:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40149e:	f813 1c02 	ldrb.w	r1, [r3, #-2]
  4014a2:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4014a4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  4014a8:	6511      	str	r1, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  4014aa:	3d08      	subs	r5, #8
  4014ac:	3308      	adds	r3, #8
  4014ae:	2d07      	cmp	r5, #7
  4014b0:	d8e3      	bhi.n	40147a <udd_ep_in_sent+0x9e>
  4014b2:	f1a7 0308 	sub.w	r3, r7, #8
  4014b6:	f023 0307 	bic.w	r3, r3, #7
  4014ba:	3308      	adds	r3, #8
  4014bc:	441c      	add	r4, r3
  4014be:	f007 0707 	and.w	r7, r7, #7
	for (; pkt_size; pkt_size--) {
  4014c2:	b14f      	cbz	r7, 4014d8 <udd_ep_in_sent+0xfc>
  4014c4:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4014c6:	4931      	ldr	r1, [pc, #196]	; (40158c <udd_ep_in_sent+0x1b0>)
  4014c8:	f109 0914 	add.w	r9, r9, #20
  4014cc:	f814 2b01 	ldrb.w	r2, [r4], #1
  4014d0:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
	for (; pkt_size; pkt_size--) {
  4014d4:	429c      	cmp	r4, r3
  4014d6:	d1f9      	bne.n	4014cc <udd_ep_in_sent+0xf0>
	ptr_job->bank++;
  4014d8:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4014dc:	4a2a      	ldr	r2, [pc, #168]	; (401588 <udd_ep_in_sent+0x1ac>)
  4014de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4014e2:	f10c 0c01 	add.w	ip, ip, #1
  4014e6:	7c5a      	ldrb	r2, [r3, #17]
  4014e8:	f36c 0283 	bfi	r2, ip, #2, #2
  4014ec:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  4014ee:	f1b8 0f00 	cmp.w	r8, #0
  4014f2:	d014      	beq.n	40151e <udd_ep_in_sent+0x142>
  4014f4:	0080      	lsls	r0, r0, #2
  4014f6:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  4014fa:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  4014fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401500:	9301      	str	r3, [sp, #4]
  401502:	9b01      	ldr	r3, [sp, #4]
  401504:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401508:	9301      	str	r3, [sp, #4]
  40150a:	9b01      	ldr	r3, [sp, #4]
  40150c:	f043 0310 	orr.w	r3, r3, #16
  401510:	9301      	str	r3, [sp, #4]
  401512:	9b01      	ldr	r3, [sp, #4]
  401514:	6303      	str	r3, [r0, #48]	; 0x30
  401516:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401518:	f013 0f10 	tst.w	r3, #16
  40151c:	d0fb      	beq.n	401516 <udd_ep_in_sent+0x13a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  40151e:	f1be 0f00 	cmp.w	lr, #0
  401522:	d008      	beq.n	401536 <udd_ep_in_sent+0x15a>
		ptr_job->b_shortpacket = false;
  401524:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401528:	4a17      	ldr	r2, [pc, #92]	; (401588 <udd_ep_in_sent+0x1ac>)
  40152a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40152e:	7c5a      	ldrb	r2, [r3, #17]
  401530:	f36f 1286 	bfc	r2, #6, #1
  401534:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  401536:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40153a:	4a13      	ldr	r2, [pc, #76]	; (401588 <udd_ep_in_sent+0x1ac>)
  40153c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401540:	68da      	ldr	r2, [r3, #12]
  401542:	689b      	ldr	r3, [r3, #8]
  401544:	429a      	cmp	r2, r3
  401546:	d31a      	bcc.n	40157e <udd_ep_in_sent+0x1a2>
			&& (!ptr_job->b_shortpacket)) {
  401548:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40154c:	4a0e      	ldr	r2, [pc, #56]	; (401588 <udd_ep_in_sent+0x1ac>)
  40154e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401552:	7c5b      	ldrb	r3, [r3, #17]
  401554:	f013 0f40 	tst.w	r3, #64	; 0x40
  401558:	d113      	bne.n	401582 <udd_ep_in_sent+0x1a6>
		ptr_job->b_buf_end = true;
  40155a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40155e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  401562:	7c73      	ldrb	r3, [r6, #17]
  401564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401568:	7473      	strb	r3, [r6, #17]
		return false;
  40156a:	2000      	movs	r0, #0
  40156c:	e002      	b.n	401574 <udd_ep_in_sent+0x198>
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  40156e:	2301      	movs	r3, #1
  401570:	e74a      	b.n	401408 <udd_ep_in_sent+0x2c>
		return true; // Data pending
  401572:	2001      	movs	r0, #1
	}
	return true; // Pending
}
  401574:	b003      	add	sp, #12
  401576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
  40157a:	2000      	movs	r0, #0
  40157c:	e7fa      	b.n	401574 <udd_ep_in_sent+0x198>
	return true; // Pending
  40157e:	2001      	movs	r0, #1
  401580:	e7f8      	b.n	401574 <udd_ep_in_sent+0x198>
  401582:	2001      	movs	r0, #1
  401584:	e7f6      	b.n	401574 <udd_ep_in_sent+0x198>
  401586:	bf00      	nop
  401588:	20001250 	.word	0x20001250
  40158c:	40034000 	.word	0x40034000

00401590 <UDP_Handler>:
{
  401590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401594:	b09b      	sub	sp, #108	; 0x6c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401596:	4b86      	ldr	r3, [pc, #536]	; (4017b0 <UDP_Handler+0x220>)
  401598:	4798      	blx	r3
  40159a:	b920      	cbnz	r0, 4015a6 <UDP_Handler+0x16>
  40159c:	4b85      	ldr	r3, [pc, #532]	; (4017b4 <UDP_Handler+0x224>)
  40159e:	69db      	ldr	r3, [r3, #28]
  4015a0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4015a4:	d03b      	beq.n	40161e <UDP_Handler+0x8e>
	udd_enable_periph_ck();
  4015a6:	2022      	movs	r0, #34	; 0x22
  4015a8:	4b83      	ldr	r3, [pc, #524]	; (4017b8 <UDP_Handler+0x228>)
  4015aa:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  4015ac:	4b81      	ldr	r3, [pc, #516]	; (4017b4 <UDP_Handler+0x224>)
  4015ae:	699b      	ldr	r3, [r3, #24]
  4015b0:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4015b4:	d004      	beq.n	4015c0 <UDP_Handler+0x30>
  4015b6:	4b7f      	ldr	r3, [pc, #508]	; (4017b4 <UDP_Handler+0x224>)
  4015b8:	69db      	ldr	r3, [r3, #28]
  4015ba:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4015be:	d137      	bne.n	401630 <UDP_Handler+0xa0>
	if (!Is_udd_endpoint_interrupt(0))
  4015c0:	4b7c      	ldr	r3, [pc, #496]	; (4017b4 <UDP_Handler+0x224>)
  4015c2:	69db      	ldr	r3, [r3, #28]
  4015c4:	f013 0f01 	tst.w	r3, #1
  4015c8:	f000 81b6 	beq.w	401938 <UDP_Handler+0x3a8>
	if (Is_udd_setup_received(0)) {
  4015cc:	4b79      	ldr	r3, [pc, #484]	; (4017b4 <UDP_Handler+0x224>)
  4015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015d0:	f013 0f04 	tst.w	r3, #4
  4015d4:	d133      	bne.n	40163e <UDP_Handler+0xae>
	if (Is_udd_in_sent(0)) {
  4015d6:	4b77      	ldr	r3, [pc, #476]	; (4017b4 <UDP_Handler+0x224>)
  4015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015da:	f013 0f01 	tst.w	r3, #1
  4015de:	f040 80c3 	bne.w	401768 <UDP_Handler+0x1d8>
	if (Is_udd_bank0_received(0)) {
  4015e2:	4b74      	ldr	r3, [pc, #464]	; (4017b4 <UDP_Handler+0x224>)
  4015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015e6:	f013 0f02 	tst.w	r3, #2
  4015ea:	f040 80c0 	bne.w	40176e <UDP_Handler+0x1de>
	if (Is_udd_stall(0)) {
  4015ee:	4b71      	ldr	r3, [pc, #452]	; (4017b4 <UDP_Handler+0x224>)
  4015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015f2:	f013 0f08 	tst.w	r3, #8
  4015f6:	f000 819f 	beq.w	401938 <UDP_Handler+0x3a8>
		udd_ack_stall(0);
  4015fa:	4a6e      	ldr	r2, [pc, #440]	; (4017b4 <UDP_Handler+0x224>)
  4015fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015fe:	9300      	str	r3, [sp, #0]
  401600:	9b00      	ldr	r3, [sp, #0]
  401602:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401606:	9300      	str	r3, [sp, #0]
  401608:	9b00      	ldr	r3, [sp, #0]
  40160a:	f023 0308 	bic.w	r3, r3, #8
  40160e:	9300      	str	r3, [sp, #0]
  401610:	9b00      	ldr	r3, [sp, #0]
  401612:	6313      	str	r3, [r2, #48]	; 0x30
  401614:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401616:	f013 0f08 	tst.w	r3, #8
  40161a:	d1fb      	bne.n	401614 <UDP_Handler+0x84>
  40161c:	e005      	b.n	40162a <UDP_Handler+0x9a>
  __ASM volatile ("cpsid i" : : : "memory");
  40161e:	b672      	cpsid	i
  401620:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401624:	2200      	movs	r2, #0
  401626:	4b65      	ldr	r3, [pc, #404]	; (4017bc <UDP_Handler+0x22c>)
  401628:	701a      	strb	r2, [r3, #0]
}
  40162a:	b01b      	add	sp, #108	; 0x6c
  40162c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udd_ack_sof();
  401630:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401634:	4b5f      	ldr	r3, [pc, #380]	; (4017b4 <UDP_Handler+0x224>)
  401636:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401638:	4b61      	ldr	r3, [pc, #388]	; (4017c0 <UDP_Handler+0x230>)
  40163a:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  40163c:	e7f5      	b.n	40162a <UDP_Handler+0x9a>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  40163e:	4b61      	ldr	r3, [pc, #388]	; (4017c4 <UDP_Handler+0x234>)
  401640:	781b      	ldrb	r3, [r3, #0]
  401642:	b9cb      	cbnz	r3, 401678 <UDP_Handler+0xe8>
	if (8 != udd_byte_count(0)) {
  401644:	4b5b      	ldr	r3, [pc, #364]	; (4017b4 <UDP_Handler+0x224>)
  401646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401648:	f3c3 430a 	ubfx	r3, r3, #16, #11
  40164c:	2b08      	cmp	r3, #8
  40164e:	d018      	beq.n	401682 <UDP_Handler+0xf2>
		udd_ack_setup_received(0);
  401650:	4a58      	ldr	r2, [pc, #352]	; (4017b4 <UDP_Handler+0x224>)
  401652:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401654:	9301      	str	r3, [sp, #4]
  401656:	9b01      	ldr	r3, [sp, #4]
  401658:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40165c:	9301      	str	r3, [sp, #4]
  40165e:	9b01      	ldr	r3, [sp, #4]
  401660:	f023 0304 	bic.w	r3, r3, #4
  401664:	9301      	str	r3, [sp, #4]
  401666:	9b01      	ldr	r3, [sp, #4]
  401668:	6313      	str	r3, [r2, #48]	; 0x30
  40166a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40166c:	f013 0f04 	tst.w	r3, #4
  401670:	d1fb      	bne.n	40166a <UDP_Handler+0xda>
		udd_ctrl_stall_data();
  401672:	4b55      	ldr	r3, [pc, #340]	; (4017c8 <UDP_Handler+0x238>)
  401674:	4798      	blx	r3
  401676:	e7d8      	b.n	40162a <UDP_Handler+0x9a>
		udd_ctrl_endofrequest();
  401678:	4b54      	ldr	r3, [pc, #336]	; (4017cc <UDP_Handler+0x23c>)
  40167a:	4798      	blx	r3
		udd_ctrl_init();
  40167c:	4b54      	ldr	r3, [pc, #336]	; (4017d0 <UDP_Handler+0x240>)
  40167e:	4798      	blx	r3
  401680:	e7e0      	b.n	401644 <UDP_Handler+0xb4>
  401682:	4b54      	ldr	r3, [pc, #336]	; (4017d4 <UDP_Handler+0x244>)
  401684:	f103 0008 	add.w	r0, r3, #8
			udd_endpoint_fifo_read(0);
  401688:	494a      	ldr	r1, [pc, #296]	; (4017b4 <UDP_Handler+0x224>)
  40168a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  40168c:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  401690:	4283      	cmp	r3, r0
  401692:	d1fa      	bne.n	40168a <UDP_Handler+0xfa>
	if (udc_process_setup() == false) {
  401694:	4b50      	ldr	r3, [pc, #320]	; (4017d8 <UDP_Handler+0x248>)
  401696:	4798      	blx	r3
  401698:	b998      	cbnz	r0, 4016c2 <UDP_Handler+0x132>
		udd_ack_setup_received(0);
  40169a:	4a46      	ldr	r2, [pc, #280]	; (4017b4 <UDP_Handler+0x224>)
  40169c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40169e:	9302      	str	r3, [sp, #8]
  4016a0:	9b02      	ldr	r3, [sp, #8]
  4016a2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016a6:	9302      	str	r3, [sp, #8]
  4016a8:	9b02      	ldr	r3, [sp, #8]
  4016aa:	f023 0304 	bic.w	r3, r3, #4
  4016ae:	9302      	str	r3, [sp, #8]
  4016b0:	9b02      	ldr	r3, [sp, #8]
  4016b2:	6313      	str	r3, [r2, #48]	; 0x30
  4016b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016b6:	f013 0f04 	tst.w	r3, #4
  4016ba:	d1fb      	bne.n	4016b4 <UDP_Handler+0x124>
		udd_ctrl_stall_data();
  4016bc:	4b42      	ldr	r3, [pc, #264]	; (4017c8 <UDP_Handler+0x238>)
  4016be:	4798      	blx	r3
  4016c0:	e7b3      	b.n	40162a <UDP_Handler+0x9a>
	if (Udd_setup_is_in()) {
  4016c2:	4b46      	ldr	r3, [pc, #280]	; (4017dc <UDP_Handler+0x24c>)
  4016c4:	f993 3000 	ldrsb.w	r3, [r3]
  4016c8:	2b00      	cmp	r3, #0
  4016ca:	db1d      	blt.n	401708 <UDP_Handler+0x178>
		udd_ack_setup_received(0);
  4016cc:	4a39      	ldr	r2, [pc, #228]	; (4017b4 <UDP_Handler+0x224>)
  4016ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016d0:	9305      	str	r3, [sp, #20]
  4016d2:	9b05      	ldr	r3, [sp, #20]
  4016d4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016d8:	9305      	str	r3, [sp, #20]
  4016da:	9b05      	ldr	r3, [sp, #20]
  4016dc:	f023 0304 	bic.w	r3, r3, #4
  4016e0:	9305      	str	r3, [sp, #20]
  4016e2:	9b05      	ldr	r3, [sp, #20]
  4016e4:	6313      	str	r3, [r2, #48]	; 0x30
  4016e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016e8:	f013 0f04 	tst.w	r3, #4
  4016ec:	d1fb      	bne.n	4016e6 <UDP_Handler+0x156>
		if (0 == udd_g_ctrlreq.req.wLength) {
  4016ee:	4b3b      	ldr	r3, [pc, #236]	; (4017dc <UDP_Handler+0x24c>)
  4016f0:	88db      	ldrh	r3, [r3, #6]
  4016f2:	2b00      	cmp	r3, #0
  4016f4:	d035      	beq.n	401762 <UDP_Handler+0x1d2>
		udd_ctrl_prev_payload_nb_trans = 0;
  4016f6:	2300      	movs	r3, #0
  4016f8:	4a39      	ldr	r2, [pc, #228]	; (4017e0 <UDP_Handler+0x250>)
  4016fa:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4016fc:	4a39      	ldr	r2, [pc, #228]	; (4017e4 <UDP_Handler+0x254>)
  4016fe:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401700:	2201      	movs	r2, #1
  401702:	4b30      	ldr	r3, [pc, #192]	; (4017c4 <UDP_Handler+0x234>)
  401704:	701a      	strb	r2, [r3, #0]
  401706:	e790      	b.n	40162a <UDP_Handler+0x9a>
		udd_set_endpoint_direction_in(0);
  401708:	4a2a      	ldr	r2, [pc, #168]	; (4017b4 <UDP_Handler+0x224>)
  40170a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40170c:	9303      	str	r3, [sp, #12]
  40170e:	9b03      	ldr	r3, [sp, #12]
  401710:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401714:	9303      	str	r3, [sp, #12]
  401716:	9b03      	ldr	r3, [sp, #12]
  401718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40171c:	9303      	str	r3, [sp, #12]
  40171e:	9b03      	ldr	r3, [sp, #12]
  401720:	6313      	str	r3, [r2, #48]	; 0x30
  401722:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401724:	f013 0f80 	tst.w	r3, #128	; 0x80
  401728:	d0fb      	beq.n	401722 <UDP_Handler+0x192>
		udd_ack_setup_received(0);
  40172a:	4a22      	ldr	r2, [pc, #136]	; (4017b4 <UDP_Handler+0x224>)
  40172c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40172e:	9304      	str	r3, [sp, #16]
  401730:	9b04      	ldr	r3, [sp, #16]
  401732:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401736:	9304      	str	r3, [sp, #16]
  401738:	9b04      	ldr	r3, [sp, #16]
  40173a:	f023 0304 	bic.w	r3, r3, #4
  40173e:	9304      	str	r3, [sp, #16]
  401740:	9b04      	ldr	r3, [sp, #16]
  401742:	6313      	str	r3, [r2, #48]	; 0x30
  401744:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401746:	f013 0f04 	tst.w	r3, #4
  40174a:	d1fb      	bne.n	401744 <UDP_Handler+0x1b4>
		udd_ctrl_prev_payload_nb_trans = 0;
  40174c:	2300      	movs	r3, #0
  40174e:	4a24      	ldr	r2, [pc, #144]	; (4017e0 <UDP_Handler+0x250>)
  401750:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  401752:	4a24      	ldr	r2, [pc, #144]	; (4017e4 <UDP_Handler+0x254>)
  401754:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  401756:	2202      	movs	r2, #2
  401758:	4b1a      	ldr	r3, [pc, #104]	; (4017c4 <UDP_Handler+0x234>)
  40175a:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  40175c:	4b22      	ldr	r3, [pc, #136]	; (4017e8 <UDP_Handler+0x258>)
  40175e:	4798      	blx	r3
  401760:	e763      	b.n	40162a <UDP_Handler+0x9a>
			udd_ctrl_send_zlp_in();
  401762:	4b22      	ldr	r3, [pc, #136]	; (4017ec <UDP_Handler+0x25c>)
  401764:	4798      	blx	r3
  401766:	e760      	b.n	40162a <UDP_Handler+0x9a>
		udd_ctrl_in_sent();
  401768:	4b1f      	ldr	r3, [pc, #124]	; (4017e8 <UDP_Handler+0x258>)
  40176a:	4798      	blx	r3
  40176c:	e75d      	b.n	40162a <UDP_Handler+0x9a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  40176e:	4b15      	ldr	r3, [pc, #84]	; (4017c4 <UDP_Handler+0x234>)
  401770:	781b      	ldrb	r3, [r3, #0]
  401772:	2b01      	cmp	r3, #1
  401774:	d03c      	beq.n	4017f0 <UDP_Handler+0x260>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401776:	2b02      	cmp	r3, #2
  401778:	d004      	beq.n	401784 <UDP_Handler+0x1f4>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  40177a:	2b04      	cmp	r3, #4
  40177c:	d002      	beq.n	401784 <UDP_Handler+0x1f4>
			udd_ctrl_stall_data();
  40177e:	4b12      	ldr	r3, [pc, #72]	; (4017c8 <UDP_Handler+0x238>)
  401780:	4798      	blx	r3
  401782:	e001      	b.n	401788 <UDP_Handler+0x1f8>
			udd_ctrl_endofrequest();
  401784:	4b11      	ldr	r3, [pc, #68]	; (4017cc <UDP_Handler+0x23c>)
  401786:	4798      	blx	r3
		udd_ack_bank0_received(0);
  401788:	4a0a      	ldr	r2, [pc, #40]	; (4017b4 <UDP_Handler+0x224>)
  40178a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40178c:	9306      	str	r3, [sp, #24]
  40178e:	9b06      	ldr	r3, [sp, #24]
  401790:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401794:	9306      	str	r3, [sp, #24]
  401796:	9b06      	ldr	r3, [sp, #24]
  401798:	f023 0302 	bic.w	r3, r3, #2
  40179c:	9306      	str	r3, [sp, #24]
  40179e:	9b06      	ldr	r3, [sp, #24]
  4017a0:	6313      	str	r3, [r2, #48]	; 0x30
  4017a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017a4:	f013 0f02 	tst.w	r3, #2
  4017a8:	d1fb      	bne.n	4017a2 <UDP_Handler+0x212>
		udd_ctrl_init();
  4017aa:	4b09      	ldr	r3, [pc, #36]	; (4017d0 <UDP_Handler+0x240>)
  4017ac:	4798      	blx	r3
  4017ae:	e73c      	b.n	40162a <UDP_Handler+0x9a>
  4017b0:	004039b1 	.word	0x004039b1
  4017b4:	40034000 	.word	0x40034000
  4017b8:	0040383d 	.word	0x0040383d
  4017bc:	200002a8 	.word	0x200002a8
  4017c0:	00400a4d 	.word	0x00400a4d
  4017c4:	2000124e 	.word	0x2000124e
  4017c8:	00401091 	.word	0x00401091
  4017cc:	00401101 	.word	0x00401101
  4017d0:	00401079 	.word	0x00401079
  4017d4:	200012db 	.word	0x200012db
  4017d8:	00400a8d 	.word	0x00400a8d
  4017dc:	200012dc 	.word	0x200012dc
  4017e0:	2000124c 	.word	0x2000124c
  4017e4:	2000124a 	.word	0x2000124a
  4017e8:	00401111 	.word	0x00401111
  4017ec:	004010c9 	.word	0x004010c9
	nb_data = udd_byte_count(0);
  4017f0:	4b93      	ldr	r3, [pc, #588]	; (401a40 <UDP_Handler+0x4b0>)
  4017f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4017f4:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  4017f8:	4b92      	ldr	r3, [pc, #584]	; (401a44 <UDP_Handler+0x4b4>)
  4017fa:	899b      	ldrh	r3, [r3, #12]
  4017fc:	4a92      	ldr	r2, [pc, #584]	; (401a48 <UDP_Handler+0x4b8>)
  4017fe:	8815      	ldrh	r5, [r2, #0]
  401800:	186a      	adds	r2, r5, r1
  401802:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
  401804:	bfbc      	itt	lt
  401806:	1b5b      	sublt	r3, r3, r5
  401808:	b299      	uxthlt	r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40180a:	4b8e      	ldr	r3, [pc, #568]	; (401a44 <UDP_Handler+0x4b4>)
  40180c:	6898      	ldr	r0, [r3, #8]
  40180e:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  401810:	b171      	cbz	r1, 401830 <UDP_Handler+0x2a0>
  401812:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  401814:	4c8a      	ldr	r4, [pc, #552]	; (401a40 <UDP_Handler+0x4b0>)
  401816:	6d23      	ldr	r3, [r4, #80]	; 0x50
  401818:	f802 3b01 	strb.w	r3, [r2], #1
	for (i = 0; i < nb_data; i++) {
  40181c:	1a13      	subs	r3, r2, r0
  40181e:	b2db      	uxtb	r3, r3
  401820:	428b      	cmp	r3, r1
  401822:	d3f8      	bcc.n	401816 <UDP_Handler+0x286>
	udd_ctrl_payload_nb_trans += nb_data;
  401824:	440d      	add	r5, r1
  401826:	b2ad      	uxth	r5, r5
  401828:	4b87      	ldr	r3, [pc, #540]	; (401a48 <UDP_Handler+0x4b8>)
  40182a:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  40182c:	2940      	cmp	r1, #64	; 0x40
  40182e:	d01a      	beq.n	401866 <UDP_Handler+0x2d6>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401830:	4b84      	ldr	r3, [pc, #528]	; (401a44 <UDP_Handler+0x4b4>)
  401832:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401834:	695b      	ldr	r3, [r3, #20]
  401836:	b113      	cbz	r3, 40183e <UDP_Handler+0x2ae>
			if (!udd_g_ctrlreq.over_under_run()) {
  401838:	4798      	blx	r3
  40183a:	2800      	cmp	r0, #0
  40183c:	d030      	beq.n	4018a0 <UDP_Handler+0x310>
		udd_ack_bank0_received(0);
  40183e:	4a80      	ldr	r2, [pc, #512]	; (401a40 <UDP_Handler+0x4b0>)
  401840:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401842:	9308      	str	r3, [sp, #32]
  401844:	9b08      	ldr	r3, [sp, #32]
  401846:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40184a:	9308      	str	r3, [sp, #32]
  40184c:	9b08      	ldr	r3, [sp, #32]
  40184e:	f023 0302 	bic.w	r3, r3, #2
  401852:	9308      	str	r3, [sp, #32]
  401854:	9b08      	ldr	r3, [sp, #32]
  401856:	6313      	str	r3, [r2, #48]	; 0x30
  401858:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40185a:	f013 0f02 	tst.w	r3, #2
  40185e:	d1fb      	bne.n	401858 <UDP_Handler+0x2c8>
		udd_ctrl_send_zlp_in();
  401860:	4b7a      	ldr	r3, [pc, #488]	; (401a4c <UDP_Handler+0x4bc>)
  401862:	4798      	blx	r3
  401864:	e6e1      	b.n	40162a <UDP_Handler+0x9a>
			|| (udd_g_ctrlreq.req.wLength <=
  401866:	4b77      	ldr	r3, [pc, #476]	; (401a44 <UDP_Handler+0x4b4>)
  401868:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  40186a:	4b79      	ldr	r3, [pc, #484]	; (401a50 <UDP_Handler+0x4c0>)
  40186c:	881b      	ldrh	r3, [r3, #0]
  40186e:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
  401870:	429a      	cmp	r2, r3
  401872:	dddd      	ble.n	401830 <UDP_Handler+0x2a0>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  401874:	4b73      	ldr	r3, [pc, #460]	; (401a44 <UDP_Handler+0x4b4>)
  401876:	899b      	ldrh	r3, [r3, #12]
  401878:	42ab      	cmp	r3, r5
  40187a:	d025      	beq.n	4018c8 <UDP_Handler+0x338>
	udd_ack_bank0_received(0);
  40187c:	4a70      	ldr	r2, [pc, #448]	; (401a40 <UDP_Handler+0x4b0>)
  40187e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401880:	930b      	str	r3, [sp, #44]	; 0x2c
  401882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401884:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401888:	930b      	str	r3, [sp, #44]	; 0x2c
  40188a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40188c:	f023 0302 	bic.w	r3, r3, #2
  401890:	930b      	str	r3, [sp, #44]	; 0x2c
  401892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401894:	6313      	str	r3, [r2, #48]	; 0x30
  401896:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401898:	f013 0f02 	tst.w	r3, #2
  40189c:	d1fb      	bne.n	401896 <UDP_Handler+0x306>
  40189e:	e6c4      	b.n	40162a <UDP_Handler+0x9a>
				udd_ctrl_stall_data();
  4018a0:	4b6c      	ldr	r3, [pc, #432]	; (401a54 <UDP_Handler+0x4c4>)
  4018a2:	4798      	blx	r3
				udd_ack_bank0_received(0);
  4018a4:	4a66      	ldr	r2, [pc, #408]	; (401a40 <UDP_Handler+0x4b0>)
  4018a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018a8:	9307      	str	r3, [sp, #28]
  4018aa:	9b07      	ldr	r3, [sp, #28]
  4018ac:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018b0:	9307      	str	r3, [sp, #28]
  4018b2:	9b07      	ldr	r3, [sp, #28]
  4018b4:	f023 0302 	bic.w	r3, r3, #2
  4018b8:	9307      	str	r3, [sp, #28]
  4018ba:	9b07      	ldr	r3, [sp, #28]
  4018bc:	6313      	str	r3, [r2, #48]	; 0x30
  4018be:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018c0:	f013 0f02 	tst.w	r3, #2
  4018c4:	d1fb      	bne.n	4018be <UDP_Handler+0x32e>
  4018c6:	e6b0      	b.n	40162a <UDP_Handler+0x9a>
		if (!udd_g_ctrlreq.over_under_run) {
  4018c8:	4b5e      	ldr	r3, [pc, #376]	; (401a44 <UDP_Handler+0x4b4>)
  4018ca:	695b      	ldr	r3, [r3, #20]
  4018cc:	b153      	cbz	r3, 4018e4 <UDP_Handler+0x354>
		if (!udd_g_ctrlreq.over_under_run()) {
  4018ce:	4798      	blx	r3
  4018d0:	b1e8      	cbz	r0, 40190e <UDP_Handler+0x37e>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4018d2:	495f      	ldr	r1, [pc, #380]	; (401a50 <UDP_Handler+0x4c0>)
  4018d4:	4a5c      	ldr	r2, [pc, #368]	; (401a48 <UDP_Handler+0x4b8>)
  4018d6:	880b      	ldrh	r3, [r1, #0]
  4018d8:	8810      	ldrh	r0, [r2, #0]
  4018da:	4403      	add	r3, r0
  4018dc:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  4018de:	2300      	movs	r3, #0
  4018e0:	8013      	strh	r3, [r2, #0]
  4018e2:	e7cb      	b.n	40187c <UDP_Handler+0x2ec>
			udd_ctrl_stall_data();
  4018e4:	4b5b      	ldr	r3, [pc, #364]	; (401a54 <UDP_Handler+0x4c4>)
  4018e6:	4798      	blx	r3
			udd_ack_bank0_received(0);
  4018e8:	4a55      	ldr	r2, [pc, #340]	; (401a40 <UDP_Handler+0x4b0>)
  4018ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018ec:	9309      	str	r3, [sp, #36]	; 0x24
  4018ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4018f0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018f4:	9309      	str	r3, [sp, #36]	; 0x24
  4018f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4018f8:	f023 0302 	bic.w	r3, r3, #2
  4018fc:	9309      	str	r3, [sp, #36]	; 0x24
  4018fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401900:	6313      	str	r3, [r2, #48]	; 0x30
  401902:	4613      	mov	r3, r2
  401904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401906:	f012 0f02 	tst.w	r2, #2
  40190a:	d1fb      	bne.n	401904 <UDP_Handler+0x374>
  40190c:	e68d      	b.n	40162a <UDP_Handler+0x9a>
			udd_ctrl_stall_data();
  40190e:	4b51      	ldr	r3, [pc, #324]	; (401a54 <UDP_Handler+0x4c4>)
  401910:	4798      	blx	r3
			udd_ack_bank0_received(0);
  401912:	4a4b      	ldr	r2, [pc, #300]	; (401a40 <UDP_Handler+0x4b0>)
  401914:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401916:	930a      	str	r3, [sp, #40]	; 0x28
  401918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40191a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40191e:	930a      	str	r3, [sp, #40]	; 0x28
  401920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401922:	f023 0302 	bic.w	r3, r3, #2
  401926:	930a      	str	r3, [sp, #40]	; 0x28
  401928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40192a:	6313      	str	r3, [r2, #48]	; 0x30
  40192c:	4613      	mov	r3, r2
  40192e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401930:	f012 0f02 	tst.w	r2, #2
  401934:	d1fb      	bne.n	40192e <UDP_Handler+0x39e>
  401936:	e678      	b.n	40162a <UDP_Handler+0x9a>
  401938:	4a47      	ldr	r2, [pc, #284]	; (401a58 <UDP_Handler+0x4c8>)
	for (i = 0; i < nb_data; i++) {
  40193a:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  40193c:	f8df e100 	ldr.w	lr, [pc, #256]	; 401a40 <UDP_Handler+0x4b0>
  401940:	4618      	mov	r0, r3
  401942:	e17f      	b.n	401c44 <UDP_Handler+0x6b4>
	uint32_t pkt_size = ptr_job->size;
  401944:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401948:	4b43      	ldr	r3, [pc, #268]	; (401a58 <UDP_Handler+0x4c8>)
  40194a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40194e:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  401952:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	nb_data = udd_byte_count(ep);
  401956:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401958:	f3c3 490a 	ubfx	r9, r3, #16, #11
	if (nb_data > 0) {
  40195c:	f1b9 0f00 	cmp.w	r9, #0
  401960:	f000 81df 	beq.w	401d22 <UDP_Handler+0x792>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401964:	4b3c      	ldr	r3, [pc, #240]	; (401a58 <UDP_Handler+0x4c8>)
  401966:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40196a:	f8d3 e008 	ldr.w	lr, [r3, #8]
  40196e:	68da      	ldr	r2, [r3, #12]
  401970:	ebae 0002 	sub.w	r0, lr, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401974:	6859      	ldr	r1, [r3, #4]
		if (nb_data >= nb_remain) {
  401976:	4548      	cmp	r0, r9
  401978:	f240 81c7 	bls.w	401d0a <UDP_Handler+0x77a>
		ptr_job->buf_cnt += nb_data;
  40197c:	eb07 0087 	add.w	r0, r7, r7, lsl #2
  401980:	4b35      	ldr	r3, [pc, #212]	; (401a58 <UDP_Handler+0x4c8>)
  401982:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  401986:	eb02 0009 	add.w	r0, r2, r9
  40198a:	60d8      	str	r0, [r3, #12]
	nb_data = udd_byte_count(ep);
  40198c:	4648      	mov	r0, r9
	bool b_full = false, b_short;
  40198e:	f04f 0b00 	mov.w	fp, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401992:	4411      	add	r1, r2
  401994:	460b      	mov	r3, r1
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  401996:	6d22      	ldr	r2, [r4, #80]	; 0x50
  401998:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < nb_data; i++) {
  40199c:	1a5a      	subs	r2, r3, r1
  40199e:	4282      	cmp	r2, r0
  4019a0:	d3f9      	bcc.n	401996 <UDP_Handler+0x406>
	udd_ep_ack_out_received(ep);
  4019a2:	4630      	mov	r0, r6
  4019a4:	4b2d      	ldr	r3, [pc, #180]	; (401a5c <UDP_Handler+0x4cc>)
  4019a6:	4798      	blx	r3
	if ((b_full || b_short) &&
  4019a8:	f1bb 0f00 	cmp.w	fp, #0
  4019ac:	f000 81bc 	beq.w	401d28 <UDP_Handler+0x798>
			!Is_udd_endpoint_stall_requested(ep)) {
  4019b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  4019b2:	f013 0f20 	tst.w	r3, #32
  4019b6:	f47f ae38 	bne.w	40162a <UDP_Handler+0x9a>
		udd_disable_endpoint_interrupt(ep);
  4019ba:	4b21      	ldr	r3, [pc, #132]	; (401a40 <UDP_Handler+0x4b0>)
  4019bc:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4019be:	4b26      	ldr	r3, [pc, #152]	; (401a58 <UDP_Handler+0x4c8>)
  4019c0:	00ba      	lsls	r2, r7, #2
  4019c2:	19d1      	adds	r1, r2, r7
  4019c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4019c8:	68cb      	ldr	r3, [r1, #12]
  4019ca:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4019cc:	4632      	mov	r2, r6
  4019ce:	2100      	movs	r1, #0
  4019d0:	4640      	mov	r0, r8
  4019d2:	4b23      	ldr	r3, [pc, #140]	; (401a60 <UDP_Handler+0x4d0>)
  4019d4:	4798      	blx	r3
  4019d6:	e628      	b.n	40162a <UDP_Handler+0x9a>
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {

			ptr_job->bank--;
  4019d8:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  4019dc:	4b1e      	ldr	r3, [pc, #120]	; (401a58 <UDP_Handler+0x4c8>)
  4019de:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  4019e2:	7c53      	ldrb	r3, [r2, #17]
  4019e4:	f3c3 0181 	ubfx	r1, r3, #2, #2
  4019e8:	3103      	adds	r1, #3
  4019ea:	f361 0383 	bfi	r3, r1, #2, #2
  4019ee:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  4019f0:	7c53      	ldrb	r3, [r2, #17]
  4019f2:	f013 0f20 	tst.w	r3, #32
  4019f6:	d05f      	beq.n	401ab8 <UDP_Handler+0x528>
				if (ptr_job->bank) {
  4019f8:	f013 0f0c 	tst.w	r3, #12
  4019fc:	d032      	beq.n	401a64 <UDP_Handler+0x4d4>
					// Send remaining
					udd_set_transmit_ready(ep);
  4019fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a00:	930c      	str	r3, [sp, #48]	; 0x30
  401a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401a04:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a08:	930c      	str	r3, [sp, #48]	; 0x30
  401a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401a0c:	f043 0310 	orr.w	r3, r3, #16
  401a10:	930c      	str	r3, [sp, #48]	; 0x30
  401a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401a14:	6323      	str	r3, [r4, #48]	; 0x30
  401a16:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a18:	f013 0f10 	tst.w	r3, #16
  401a1c:	d0fb      	beq.n	401a16 <UDP_Handler+0x486>
					udd_ack_in_sent(ep);
  401a1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a20:	930d      	str	r3, [sp, #52]	; 0x34
  401a22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401a24:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a28:	930d      	str	r3, [sp, #52]	; 0x34
  401a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401a2c:	f023 0301 	bic.w	r3, r3, #1
  401a30:	930d      	str	r3, [sp, #52]	; 0x34
  401a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401a34:	6323      	str	r3, [r4, #48]	; 0x30
  401a36:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a38:	f013 0f01 	tst.w	r3, #1
  401a3c:	d1fb      	bne.n	401a36 <UDP_Handler+0x4a6>
  401a3e:	e5f4      	b.n	40162a <UDP_Handler+0x9a>
  401a40:	40034000 	.word	0x40034000
  401a44:	200012dc 	.word	0x200012dc
  401a48:	2000124a 	.word	0x2000124a
  401a4c:	004010c9 	.word	0x004010c9
  401a50:	2000124c 	.word	0x2000124c
  401a54:	00401091 	.word	0x00401091
  401a58:	20001250 	.word	0x20001250
  401a5c:	00401309 	.word	0x00401309
  401a60:	004012c9 	.word	0x004012c9
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401a64:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a66:	930e      	str	r3, [sp, #56]	; 0x38
  401a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401a6a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a6e:	930e      	str	r3, [sp, #56]	; 0x38
  401a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401a72:	f023 0301 	bic.w	r3, r3, #1
  401a76:	930e      	str	r3, [sp, #56]	; 0x38
  401a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401a7a:	6323      	str	r3, [r4, #48]	; 0x30
  401a7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a7e:	f013 0f01 	tst.w	r3, #1
  401a82:	d1fb      	bne.n	401a7c <UDP_Handler+0x4ec>
					// Enable stall
					udd_enable_stall_handshake(ep);
  401a84:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a86:	930f      	str	r3, [sp, #60]	; 0x3c
  401a88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401a8a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a8e:	930f      	str	r3, [sp, #60]	; 0x3c
  401a90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401a92:	f043 0320 	orr.w	r3, r3, #32
  401a96:	930f      	str	r3, [sp, #60]	; 0x3c
  401a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401a9a:	6323      	str	r3, [r4, #48]	; 0x30
  401a9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a9e:	f013 0f20 	tst.w	r3, #32
  401aa2:	d0fb      	beq.n	401a9c <UDP_Handler+0x50c>
					// Halt executed
					ptr_job->b_stall_requested = false;
  401aa4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  401aa8:	4ba1      	ldr	r3, [pc, #644]	; (401d30 <UDP_Handler+0x7a0>)
  401aaa:	eb03 0387 	add.w	r3, r3, r7, lsl #2
  401aae:	7c5a      	ldrb	r2, [r3, #17]
  401ab0:	f36f 1245 	bfc	r2, #5, #1
  401ab4:	745a      	strb	r2, [r3, #17]
  401ab6:	e5b8      	b.n	40162a <UDP_Handler+0x9a>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  401ab8:	f013 0f80 	tst.w	r3, #128	; 0x80
  401abc:	d138      	bne.n	401b30 <UDP_Handler+0x5a0>
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                udd_disable_endpoint_interrupt(ep);
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  401abe:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401ac2:	4b9b      	ldr	r3, [pc, #620]	; (401d30 <UDP_Handler+0x7a0>)
  401ac4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401ac8:	68da      	ldr	r2, [r3, #12]
  401aca:	689b      	ldr	r3, [r3, #8]
  401acc:	429a      	cmp	r2, r3
  401ace:	d341      	bcc.n	401b54 <UDP_Handler+0x5c4>
					!ptr_job->b_shortpacket &&
  401ad0:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401ad4:	4b96      	ldr	r3, [pc, #600]	; (401d30 <UDP_Handler+0x7a0>)
  401ad6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401ada:	7c5b      	ldrb	r3, [r3, #17]
  401adc:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  401ae0:	d138      	bne.n	401b54 <UDP_Handler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401ae2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ae6:	fab3 f383 	clz	r3, r3
  401aea:	095b      	lsrs	r3, r3, #5
  401aec:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
  401aee:	b672      	cpsid	i
  401af0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401af4:	2200      	movs	r2, #0
  401af6:	4b8f      	ldr	r3, [pc, #572]	; (401d34 <UDP_Handler+0x7a4>)
  401af8:	701a      	strb	r2, [r3, #0]
	return flags;
  401afa:	9b10      	ldr	r3, [sp, #64]	; 0x40
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  401afc:	4a8e      	ldr	r2, [pc, #568]	; (401d38 <UDP_Handler+0x7a8>)
  401afe:	6155      	str	r5, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  401b00:	b12b      	cbz	r3, 401b0e <UDP_Handler+0x57e>
		cpu_irq_enable();
  401b02:	2201      	movs	r2, #1
  401b04:	4b8b      	ldr	r3, [pc, #556]	; (401d34 <UDP_Handler+0x7a4>)
  401b06:	701a      	strb	r2, [r3, #0]
  401b08:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401b0c:	b662      	cpsie	i
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  401b0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b10:	9311      	str	r3, [sp, #68]	; 0x44
  401b12:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401b14:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b18:	9311      	str	r3, [sp, #68]	; 0x44
  401b1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401b1c:	f023 0301 	bic.w	r3, r3, #1
  401b20:	9311      	str	r3, [sp, #68]	; 0x44
  401b22:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401b24:	6323      	str	r3, [r4, #48]	; 0x30
  401b26:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b28:	f013 0f01 	tst.w	r3, #1
  401b2c:	d1fb      	bne.n	401b26 <UDP_Handler+0x596>
  401b2e:	e57c      	b.n	40162a <UDP_Handler+0x9a>
				ptr_job->b_buf_end = false;
  401b30:	2314      	movs	r3, #20
  401b32:	4a7f      	ldr	r2, [pc, #508]	; (401d30 <UDP_Handler+0x7a0>)
  401b34:	fb03 2307 	mla	r3, r3, r7, r2
  401b38:	7c59      	ldrb	r1, [r3, #17]
  401b3a:	f36f 11c7 	bfc	r1, #7, #1
  401b3e:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401b40:	68da      	ldr	r2, [r3, #12]
  401b42:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  401b44:	4b7c      	ldr	r3, [pc, #496]	; (401d38 <UDP_Handler+0x7a8>)
  401b46:	615d      	str	r5, [r3, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401b48:	4632      	mov	r2, r6
  401b4a:	2100      	movs	r1, #0
  401b4c:	4640      	mov	r0, r8
  401b4e:	4b7b      	ldr	r3, [pc, #492]	; (401d3c <UDP_Handler+0x7ac>)
  401b50:	4798      	blx	r3
  401b52:	e7b4      	b.n	401abe <UDP_Handler+0x52e>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  401b54:	2e00      	cmp	r6, #0
  401b56:	d05b      	beq.n	401c10 <UDP_Handler+0x680>
  401b58:	2e03      	cmp	r6, #3
  401b5a:	d059      	beq.n	401c10 <UDP_Handler+0x680>
					&& ptr_job->bank > 0) {
  401b5c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401b60:	4b73      	ldr	r3, [pc, #460]	; (401d30 <UDP_Handler+0x7a0>)
  401b62:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401b66:	7c5b      	ldrb	r3, [r3, #17]
  401b68:	f013 0f0c 	tst.w	r3, #12
  401b6c:	d024      	beq.n	401bb8 <UDP_Handler+0x628>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  401b6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b70:	9312      	str	r3, [sp, #72]	; 0x48
  401b72:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401b74:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b78:	9312      	str	r3, [sp, #72]	; 0x48
  401b7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401b7c:	f043 0310 	orr.w	r3, r3, #16
  401b80:	9312      	str	r3, [sp, #72]	; 0x48
  401b82:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401b84:	6323      	str	r3, [r4, #48]	; 0x30
  401b86:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b88:	f013 0f10 	tst.w	r3, #16
  401b8c:	d0fb      	beq.n	401b86 <UDP_Handler+0x5f6>
				udd_ack_in_sent(ep);
  401b8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b90:	9313      	str	r3, [sp, #76]	; 0x4c
  401b92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401b94:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b98:	9313      	str	r3, [sp, #76]	; 0x4c
  401b9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401b9c:	f023 0301 	bic.w	r3, r3, #1
  401ba0:	9313      	str	r3, [sp, #76]	; 0x4c
  401ba2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401ba4:	6323      	str	r3, [r4, #48]	; 0x30
  401ba6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401ba8:	f013 0f01 	tst.w	r3, #1
  401bac:	d1fb      	bne.n	401ba6 <UDP_Handler+0x616>
				udd_ep_in_sent(ep, false);
  401bae:	2100      	movs	r1, #0
  401bb0:	4630      	mov	r0, r6
  401bb2:	4b63      	ldr	r3, [pc, #396]	; (401d40 <UDP_Handler+0x7b0>)
  401bb4:	4798      	blx	r3
  401bb6:	e538      	b.n	40162a <UDP_Handler+0x9a>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  401bb8:	2101      	movs	r1, #1
  401bba:	4630      	mov	r0, r6
  401bbc:	4b60      	ldr	r3, [pc, #384]	; (401d40 <UDP_Handler+0x7b0>)
  401bbe:	4798      	blx	r3
  401bc0:	b1a0      	cbz	r0, 401bec <UDP_Handler+0x65c>
					ptr_job->b_buf_end = false;
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                    udd_disable_endpoint_interrupt(ep);
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
				}
				udd_ack_in_sent(ep);
  401bc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401bc4:	9314      	str	r3, [sp, #80]	; 0x50
  401bc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401bc8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401bcc:	9314      	str	r3, [sp, #80]	; 0x50
  401bce:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401bd0:	f023 0301 	bic.w	r3, r3, #1
  401bd4:	9314      	str	r3, [sp, #80]	; 0x50
  401bd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401bd8:	6323      	str	r3, [r4, #48]	; 0x30
  401bda:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401bdc:	f013 0f01 	tst.w	r3, #1
  401be0:	d1fb      	bne.n	401bda <UDP_Handler+0x64a>
				udd_ep_in_sent(ep, false);
  401be2:	2100      	movs	r1, #0
  401be4:	4630      	mov	r0, r6
  401be6:	4b56      	ldr	r3, [pc, #344]	; (401d40 <UDP_Handler+0x7b0>)
  401be8:	4798      	blx	r3
  401bea:	e51e      	b.n	40162a <UDP_Handler+0x9a>
					ptr_job->b_buf_end = false;
  401bec:	2314      	movs	r3, #20
  401bee:	4a50      	ldr	r2, [pc, #320]	; (401d30 <UDP_Handler+0x7a0>)
  401bf0:	fb03 2707 	mla	r7, r3, r7, r2
  401bf4:	7c7a      	ldrb	r2, [r7, #17]
  401bf6:	f36f 12c7 	bfc	r2, #7, #1
  401bfa:	747a      	strb	r2, [r7, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401bfc:	68fb      	ldr	r3, [r7, #12]
  401bfe:	60bb      	str	r3, [r7, #8]
                    udd_disable_endpoint_interrupt(ep);
  401c00:	4b4d      	ldr	r3, [pc, #308]	; (401d38 <UDP_Handler+0x7a8>)
  401c02:	615d      	str	r5, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401c04:	4632      	mov	r2, r6
  401c06:	2100      	movs	r1, #0
  401c08:	4640      	mov	r0, r8
  401c0a:	4b4c      	ldr	r3, [pc, #304]	; (401d3c <UDP_Handler+0x7ac>)
  401c0c:	4798      	blx	r3
  401c0e:	e7d8      	b.n	401bc2 <UDP_Handler+0x632>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  401c10:	2101      	movs	r1, #1
  401c12:	4630      	mov	r0, r6
  401c14:	4b4a      	ldr	r3, [pc, #296]	; (401d40 <UDP_Handler+0x7b0>)
  401c16:	4798      	blx	r3
				udd_ack_in_sent(ep);
  401c18:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c1a:	9315      	str	r3, [sp, #84]	; 0x54
  401c1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401c1e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c22:	9315      	str	r3, [sp, #84]	; 0x54
  401c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401c26:	f023 0301 	bic.w	r3, r3, #1
  401c2a:	9315      	str	r3, [sp, #84]	; 0x54
  401c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401c2e:	6323      	str	r3, [r4, #48]	; 0x30
  401c30:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c32:	f013 0f01 	tst.w	r3, #1
  401c36:	d1fb      	bne.n	401c30 <UDP_Handler+0x6a0>
  401c38:	e4f7      	b.n	40162a <UDP_Handler+0x9a>
  401c3a:	3301      	adds	r3, #1
  401c3c:	3214      	adds	r2, #20
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  401c3e:	2b04      	cmp	r3, #4
  401c40:	f000 8086 	beq.w	401d50 <UDP_Handler+0x7c0>
  401c44:	b2de      	uxtb	r6, r3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401c46:	f8de 1018 	ldr.w	r1, [lr, #24]
  401c4a:	fa00 f503 	lsl.w	r5, r0, r3
  401c4e:	4229      	tst	r1, r5
  401c50:	d0f3      	beq.n	401c3a <UDP_Handler+0x6aa>
  401c52:	1e5f      	subs	r7, r3, #1
		ptr_job = &udd_ep_job[ep - 1];
  401c54:	4690      	mov	r8, r2
  401c56:	009c      	lsls	r4, r3, #2
  401c58:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  401c5c:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		if (Is_udd_any_bank_received(ep)) {
  401c60:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401c62:	f011 0f42 	tst.w	r1, #66	; 0x42
  401c66:	f47f ae6d 	bne.w	401944 <UDP_Handler+0x3b4>
		if (Is_udd_in_sent(ep)) {
  401c6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401c6c:	f011 0f01 	tst.w	r1, #1
  401c70:	f47f aeb2 	bne.w	4019d8 <UDP_Handler+0x448>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  401c74:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401c76:	f011 0f08 	tst.w	r1, #8
  401c7a:	d0de      	beq.n	401c3a <UDP_Handler+0x6aa>
			udd_ack_stall(ep);
  401c7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c7e:	9316      	str	r3, [sp, #88]	; 0x58
  401c80:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401c82:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c86:	9316      	str	r3, [sp, #88]	; 0x58
  401c88:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401c8a:	f023 0308 	bic.w	r3, r3, #8
  401c8e:	9316      	str	r3, [sp, #88]	; 0x58
  401c90:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401c92:	6323      	str	r3, [r4, #48]	; 0x30
  401c94:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c96:	f013 0f08 	tst.w	r3, #8
  401c9a:	d1fb      	bne.n	401c94 <UDP_Handler+0x704>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  401c9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401ca6:	f43f acc0 	beq.w	40162a <UDP_Handler+0x9a>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  401caa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401cac:	e4bd      	b.n	40162a <UDP_Handler+0x9a>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401cae:	4b22      	ldr	r3, [pc, #136]	; (401d38 <UDP_Handler+0x7a8>)
  401cb0:	69db      	ldr	r3, [r3, #28]
  401cb2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401cb6:	d050      	beq.n	401d5a <UDP_Handler+0x7ca>
		udd_ack_wakeups();
  401cb8:	4c1f      	ldr	r4, [pc, #124]	; (401d38 <UDP_Handler+0x7a8>)
  401cba:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  401cbe:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  401cc0:	6163      	str	r3, [r4, #20]
		udd_sleep_mode(true); // Enter in IDLE mode
  401cc2:	2001      	movs	r0, #1
  401cc4:	4b1f      	ldr	r3, [pc, #124]	; (401d44 <UDP_Handler+0x7b4>)
  401cc6:	4798      	blx	r3
		udd_ack_suspend();
  401cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
  401ccc:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  401cce:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  401cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401cd4:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  401cd6:	e4a8      	b.n	40162a <UDP_Handler+0x9a>
		udd_ack_suspend();
  401cd8:	4b17      	ldr	r3, [pc, #92]	; (401d38 <UDP_Handler+0x7a8>)
  401cda:	f44f 7280 	mov.w	r2, #256	; 0x100
  401cde:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  401ce0:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  401ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401ce6:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  401ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
  401cec:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  401cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401cf2:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  401cf4:	2022      	movs	r0, #34	; 0x22
  401cf6:	4b14      	ldr	r3, [pc, #80]	; (401d48 <UDP_Handler+0x7b8>)
  401cf8:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
  401cfa:	2000      	movs	r0, #0
  401cfc:	4b11      	ldr	r3, [pc, #68]	; (401d44 <UDP_Handler+0x7b4>)
  401cfe:	4798      	blx	r3
		goto udd_interrupt_end;
  401d00:	e493      	b.n	40162a <UDP_Handler+0x9a>
	udd_ep_ack_out_received(ep);
  401d02:	4630      	mov	r0, r6
  401d04:	4b11      	ldr	r3, [pc, #68]	; (401d4c <UDP_Handler+0x7bc>)
  401d06:	4798      	blx	r3
  401d08:	e652      	b.n	4019b0 <UDP_Handler+0x420>
		ptr_job->buf_cnt += nb_data;
  401d0a:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
  401d0e:	4b08      	ldr	r3, [pc, #32]	; (401d30 <UDP_Handler+0x7a0>)
  401d10:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  401d14:	f8c3 e00c 	str.w	lr, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  401d18:	2800      	cmp	r0, #0
  401d1a:	d0f2      	beq.n	401d02 <UDP_Handler+0x772>
			b_full = true;
  401d1c:	f04f 0b01 	mov.w	fp, #1
  401d20:	e637      	b.n	401992 <UDP_Handler+0x402>
	udd_ep_ack_out_received(ep);
  401d22:	4630      	mov	r0, r6
  401d24:	4b09      	ldr	r3, [pc, #36]	; (401d4c <UDP_Handler+0x7bc>)
  401d26:	4798      	blx	r3
	if ((b_full || b_short) &&
  401d28:	45ca      	cmp	sl, r9
  401d2a:	f63f ae41 	bhi.w	4019b0 <UDP_Handler+0x420>
  401d2e:	e47c      	b.n	40162a <UDP_Handler+0x9a>
  401d30:	20001250 	.word	0x20001250
  401d34:	200002a8 	.word	0x200002a8
  401d38:	40034000 	.word	0x40034000
  401d3c:	004012c9 	.word	0x004012c9
  401d40:	004013dd 	.word	0x004013dd
  401d44:	00400fd5 	.word	0x00400fd5
  401d48:	00403891 	.word	0x00403891
  401d4c:	00401309 	.word	0x00401309
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401d50:	4b4b      	ldr	r3, [pc, #300]	; (401e80 <UDP_Handler+0x8f0>)
  401d52:	699b      	ldr	r3, [r3, #24]
  401d54:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401d58:	d1a9      	bne.n	401cae <UDP_Handler+0x71e>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401d5a:	4b49      	ldr	r3, [pc, #292]	; (401e80 <UDP_Handler+0x8f0>)
  401d5c:	699b      	ldr	r3, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401d5e:	f413 7f00 	tst.w	r3, #512	; 0x200
  401d62:	d004      	beq.n	401d6e <UDP_Handler+0x7de>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401d64:	4b46      	ldr	r3, [pc, #280]	; (401e80 <UDP_Handler+0x8f0>)
  401d66:	69db      	ldr	r3, [r3, #28]
  401d68:	f413 7f00 	tst.w	r3, #512	; 0x200
  401d6c:	d1a4      	bne.n	401cb8 <UDP_Handler+0x728>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401d6e:	4b44      	ldr	r3, [pc, #272]	; (401e80 <UDP_Handler+0x8f0>)
  401d70:	699b      	ldr	r3, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401d72:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401d76:	d004      	beq.n	401d82 <UDP_Handler+0x7f2>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401d78:	4b41      	ldr	r3, [pc, #260]	; (401e80 <UDP_Handler+0x8f0>)
  401d7a:	69db      	ldr	r3, [r3, #28]
  401d7c:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401d80:	d19a      	bne.n	401cb8 <UDP_Handler+0x728>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401d82:	4b3f      	ldr	r3, [pc, #252]	; (401e80 <UDP_Handler+0x8f0>)
  401d84:	699b      	ldr	r3, [r3, #24]
  401d86:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d8a:	d004      	beq.n	401d96 <UDP_Handler+0x806>
  401d8c:	4b3c      	ldr	r3, [pc, #240]	; (401e80 <UDP_Handler+0x8f0>)
  401d8e:	69db      	ldr	r3, [r3, #28]
  401d90:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d94:	d1a0      	bne.n	401cd8 <UDP_Handler+0x748>
	if (Is_udd_reset()) {
  401d96:	4b3a      	ldr	r3, [pc, #232]	; (401e80 <UDP_Handler+0x8f0>)
  401d98:	69db      	ldr	r3, [r3, #28]
  401d9a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  401d9e:	f43f ac44 	beq.w	40162a <UDP_Handler+0x9a>
		udd_ack_reset();
  401da2:	4c37      	ldr	r4, [pc, #220]	; (401e80 <UDP_Handler+0x8f0>)
  401da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401da8:	6223      	str	r3, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  401daa:	4e36      	ldr	r6, [pc, #216]	; (401e84 <UDP_Handler+0x8f4>)
  401dac:	2201      	movs	r2, #1
  401dae:	4611      	mov	r1, r2
  401db0:	4630      	mov	r0, r6
  401db2:	4d35      	ldr	r5, [pc, #212]	; (401e88 <UDP_Handler+0x8f8>)
  401db4:	47a8      	blx	r5
  401db6:	2202      	movs	r2, #2
  401db8:	2101      	movs	r1, #1
  401dba:	f106 0014 	add.w	r0, r6, #20
  401dbe:	47a8      	blx	r5
  401dc0:	2203      	movs	r2, #3
  401dc2:	2101      	movs	r1, #1
  401dc4:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401dc8:	47a8      	blx	r5
		udc_reset();
  401dca:	4b30      	ldr	r3, [pc, #192]	; (401e8c <UDP_Handler+0x8fc>)
  401dcc:	4798      	blx	r3
		udd_disable_address_state();
  401dce:	6863      	ldr	r3, [r4, #4]
  401dd0:	f023 0301 	bic.w	r3, r3, #1
  401dd4:	6063      	str	r3, [r4, #4]
		udd_disable_configured_state();
  401dd6:	6863      	ldr	r3, [r4, #4]
  401dd8:	f023 0302 	bic.w	r3, r3, #2
  401ddc:	6063      	str	r3, [r4, #4]
	udd_enable_address();
  401dde:	68a3      	ldr	r3, [r4, #8]
  401de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401de4:	60a3      	str	r3, [r4, #8]
	udd_configure_address(0);
  401de6:	68a3      	ldr	r3, [r4, #8]
  401de8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401dec:	60a3      	str	r3, [r4, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  401dee:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401df0:	9318      	str	r3, [sp, #96]	; 0x60
  401df2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401df4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401df8:	9318      	str	r3, [sp, #96]	; 0x60
  401dfa:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401dfc:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  401e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401e04:	9318      	str	r3, [sp, #96]	; 0x60
  401e06:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401e0c:	9318      	str	r3, [sp, #96]	; 0x60
  401e0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401e10:	6323      	str	r3, [r4, #48]	; 0x30
  401e12:	4622      	mov	r2, r4
  401e14:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e16:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401e1a:	d0fb      	beq.n	401e14 <UDP_Handler+0x884>
	udd_enable_endpoint(0);
  401e1c:	4a18      	ldr	r2, [pc, #96]	; (401e80 <UDP_Handler+0x8f0>)
  401e1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e20:	9319      	str	r3, [sp, #100]	; 0x64
  401e22:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401e24:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e28:	9319      	str	r3, [sp, #100]	; 0x64
  401e2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401e30:	9319      	str	r3, [sp, #100]	; 0x64
  401e32:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401e34:	6313      	str	r3, [r2, #48]	; 0x30
  401e36:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e38:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401e3c:	d0fb      	beq.n	401e36 <UDP_Handler+0x8a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401e3e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401e42:	fab3 f383 	clz	r3, r3
  401e46:	095b      	lsrs	r3, r3, #5
  401e48:	9317      	str	r3, [sp, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
  401e4a:	b672      	cpsid	i
  401e4c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401e50:	2200      	movs	r2, #0
  401e52:	4b0f      	ldr	r3, [pc, #60]	; (401e90 <UDP_Handler+0x900>)
  401e54:	701a      	strb	r2, [r3, #0]
	return flags;
  401e56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	udd_enable_endpoint_interrupt(0);
  401e58:	2101      	movs	r1, #1
  401e5a:	4a09      	ldr	r2, [pc, #36]	; (401e80 <UDP_Handler+0x8f0>)
  401e5c:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401e5e:	b123      	cbz	r3, 401e6a <UDP_Handler+0x8da>
		cpu_irq_enable();
  401e60:	4b0b      	ldr	r3, [pc, #44]	; (401e90 <UDP_Handler+0x900>)
  401e62:	7019      	strb	r1, [r3, #0]
  401e64:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401e68:	b662      	cpsie	i
		udd_ctrl_init();
  401e6a:	4b0a      	ldr	r3, [pc, #40]	; (401e94 <UDP_Handler+0x904>)
  401e6c:	4798      	blx	r3
		udd_enable_suspend_interrupt();
  401e6e:	4b04      	ldr	r3, [pc, #16]	; (401e80 <UDP_Handler+0x8f0>)
  401e70:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e74:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401e76:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401e7a:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  401e7c:	f7ff bbd5 	b.w	40162a <UDP_Handler+0x9a>
  401e80:	40034000 	.word	0x40034000
  401e84:	20001250 	.word	0x20001250
  401e88:	004012c9 	.word	0x004012c9
  401e8c:	00400a05 	.word	0x00400a05
  401e90:	200002a8 	.word	0x200002a8
  401e94:	00401079 	.word	0x00401079

00401e98 <udd_attach>:
{
  401e98:	b510      	push	{r4, lr}
  401e9a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401e9c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ea0:	fab3 f383 	clz	r3, r3
  401ea4:	095b      	lsrs	r3, r3, #5
  401ea6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401ea8:	b672      	cpsid	i
  401eaa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401eae:	2200      	movs	r2, #0
  401eb0:	4b14      	ldr	r3, [pc, #80]	; (401f04 <udd_attach+0x6c>)
  401eb2:	701a      	strb	r2, [r3, #0]
	return flags;
  401eb4:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  401eb6:	2001      	movs	r0, #1
  401eb8:	4b13      	ldr	r3, [pc, #76]	; (401f08 <udd_attach+0x70>)
  401eba:	4798      	blx	r3
	udd_enable_periph_ck();
  401ebc:	2022      	movs	r0, #34	; 0x22
  401ebe:	4b13      	ldr	r3, [pc, #76]	; (401f0c <udd_attach+0x74>)
  401ec0:	4798      	blx	r3
	udd_enable_transceiver();
  401ec2:	4b13      	ldr	r3, [pc, #76]	; (401f10 <udd_attach+0x78>)
  401ec4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401ec6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401eca:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  401ecc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  401ed2:	675a      	str	r2, [r3, #116]	; 0x74
	udd_enable_suspend_interrupt();
  401ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
  401ed8:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  401eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401ede:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  401ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
  401ee4:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  401ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401eea:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  401eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401ef0:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401ef2:	b12c      	cbz	r4, 401f00 <udd_attach+0x68>
		cpu_irq_enable();
  401ef4:	2201      	movs	r2, #1
  401ef6:	4b03      	ldr	r3, [pc, #12]	; (401f04 <udd_attach+0x6c>)
  401ef8:	701a      	strb	r2, [r3, #0]
  401efa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401efe:	b662      	cpsie	i
}
  401f00:	b002      	add	sp, #8
  401f02:	bd10      	pop	{r4, pc}
  401f04:	200002a8 	.word	0x200002a8
  401f08:	00400fd5 	.word	0x00400fd5
  401f0c:	0040383d 	.word	0x0040383d
  401f10:	40034000 	.word	0x40034000

00401f14 <udd_enable>:
{
  401f14:	b530      	push	{r4, r5, lr}
  401f16:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401f18:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401f1c:	fab3 f383 	clz	r3, r3
  401f20:	095b      	lsrs	r3, r3, #5
  401f22:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401f24:	b672      	cpsid	i
  401f26:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401f2a:	2400      	movs	r4, #0
  401f2c:	4b27      	ldr	r3, [pc, #156]	; (401fcc <udd_enable+0xb8>)
  401f2e:	701c      	strb	r4, [r3, #0]
	return flags;
  401f30:	9d00      	ldr	r5, [sp, #0]
	udd_enable_periph_ck();
  401f32:	2022      	movs	r0, #34	; 0x22
  401f34:	4b26      	ldr	r3, [pc, #152]	; (401fd0 <udd_enable+0xbc>)
  401f36:	4798      	blx	r3
	sysclk_enable_usb();
  401f38:	4b26      	ldr	r3, [pc, #152]	; (401fd4 <udd_enable+0xc0>)
  401f3a:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401f3c:	4b26      	ldr	r3, [pc, #152]	; (401fd8 <udd_enable+0xc4>)
  401f3e:	2250      	movs	r2, #80	; 0x50
  401f40:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  401f44:	2204      	movs	r2, #4
  401f46:	605a      	str	r2, [r3, #4]
  401f48:	4623      	mov	r3, r4
		udd_ep_job[i].bank = 0;
  401f4a:	4824      	ldr	r0, [pc, #144]	; (401fdc <udd_enable+0xc8>)
  401f4c:	009a      	lsls	r2, r3, #2
  401f4e:	18d1      	adds	r1, r2, r3
  401f50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  401f54:	7c49      	ldrb	r1, [r1, #17]
		udd_ep_job[i].b_buf_end = false;
  401f56:	441a      	add	r2, r3
  401f58:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  401f5c:	f001 0183 	and.w	r1, r1, #131	; 0x83
  401f60:	f36f 11c7 	bfc	r1, #7, #1
  401f64:	7451      	strb	r1, [r2, #17]
  401f66:	3301      	adds	r3, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  401f68:	2b03      	cmp	r3, #3
  401f6a:	d1ef      	bne.n	401f4c <udd_enable+0x38>
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  401f6c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  401f70:	4b1b      	ldr	r3, [pc, #108]	; (401fe0 <udd_enable+0xcc>)
  401f72:	4798      	blx	r3
	udd_b_idle = false;
  401f74:	2200      	movs	r2, #0
  401f76:	4b1b      	ldr	r3, [pc, #108]	; (401fe4 <udd_enable+0xd0>)
  401f78:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  401f7a:	4b1b      	ldr	r3, [pc, #108]	; (401fe8 <udd_enable+0xd4>)
  401f7c:	781b      	ldrb	r3, [r3, #0]
  401f7e:	2bff      	cmp	r3, #255	; 0xff
  401f80:	d022      	beq.n	401fc8 <udd_enable+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401f82:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401f86:	fab3 f383 	clz	r3, r3
  401f8a:	095b      	lsrs	r3, r3, #5
  401f8c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401f8e:	b672      	cpsid	i
  401f90:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401f94:	2200      	movs	r2, #0
  401f96:	4b0d      	ldr	r3, [pc, #52]	; (401fcc <udd_enable+0xb8>)
  401f98:	701a      	strb	r2, [r3, #0]
	return flags;
  401f9a:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  401f9c:	4a12      	ldr	r2, [pc, #72]	; (401fe8 <udd_enable+0xd4>)
  401f9e:	7813      	ldrb	r3, [r2, #0]
  401fa0:	3301      	adds	r3, #1
  401fa2:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  401fa4:	b129      	cbz	r1, 401fb2 <udd_enable+0x9e>
		cpu_irq_enable();
  401fa6:	2201      	movs	r2, #1
  401fa8:	4b08      	ldr	r3, [pc, #32]	; (401fcc <udd_enable+0xb8>)
  401faa:	701a      	strb	r2, [r3, #0]
  401fac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401fb0:	b662      	cpsie	i
	udd_attach();
  401fb2:	4b0e      	ldr	r3, [pc, #56]	; (401fec <udd_enable+0xd8>)
  401fb4:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  401fb6:	b12d      	cbz	r5, 401fc4 <udd_enable+0xb0>
		cpu_irq_enable();
  401fb8:	2201      	movs	r2, #1
  401fba:	4b04      	ldr	r3, [pc, #16]	; (401fcc <udd_enable+0xb8>)
  401fbc:	701a      	strb	r2, [r3, #0]
  401fbe:	f3bf 8f5f 	dmb	sy
  401fc2:	b662      	cpsie	i
}
  401fc4:	b003      	add	sp, #12
  401fc6:	bd30      	pop	{r4, r5, pc}
  401fc8:	e7fe      	b.n	401fc8 <udd_enable+0xb4>
  401fca:	bf00      	nop
  401fcc:	200002a8 	.word	0x200002a8
  401fd0:	0040383d 	.word	0x0040383d
  401fd4:	004035d1 	.word	0x004035d1
  401fd8:	e000e100 	.word	0xe000e100
  401fdc:	20001250 	.word	0x20001250
  401fe0:	00403905 	.word	0x00403905
  401fe4:	20001249 	.word	0x20001249
  401fe8:	200012d4 	.word	0x200012d4
  401fec:	00401e99 	.word	0x00401e99

00401ff0 <udd_is_high_speed>:
}
  401ff0:	2000      	movs	r0, #0
  401ff2:	4770      	bx	lr

00401ff4 <udd_set_address>:
	udd_disable_address_state();
  401ff4:	4b0d      	ldr	r3, [pc, #52]	; (40202c <udd_set_address+0x38>)
  401ff6:	685a      	ldr	r2, [r3, #4]
  401ff8:	f022 0201 	bic.w	r2, r2, #1
  401ffc:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  401ffe:	689a      	ldr	r2, [r3, #8]
  402000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402004:	609a      	str	r2, [r3, #8]
	if (address) {
  402006:	4602      	mov	r2, r0
  402008:	b170      	cbz	r0, 402028 <udd_set_address+0x34>
		udd_configure_address(address);
  40200a:	6898      	ldr	r0, [r3, #8]
  40200c:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  402010:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402014:	4310      	orrs	r0, r2
  402016:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  402018:	689a      	ldr	r2, [r3, #8]
  40201a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40201e:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  402020:	685a      	ldr	r2, [r3, #4]
  402022:	f042 0201 	orr.w	r2, r2, #1
  402026:	605a      	str	r2, [r3, #4]
  402028:	4770      	bx	lr
  40202a:	bf00      	nop
  40202c:	40034000 	.word	0x40034000

00402030 <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  402030:	4b05      	ldr	r3, [pc, #20]	; (402048 <udd_getaddress+0x18>)
  402032:	685b      	ldr	r3, [r3, #4]
  402034:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  402038:	bf1d      	ittte	ne
  40203a:	4b03      	ldrne	r3, [pc, #12]	; (402048 <udd_getaddress+0x18>)
  40203c:	6898      	ldrne	r0, [r3, #8]
  40203e:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  402042:	2000      	moveq	r0, #0
}
  402044:	4770      	bx	lr
  402046:	bf00      	nop
  402048:	40034000 	.word	0x40034000

0040204c <udd_get_frame_number>:
	return udd_frame_number();
  40204c:	4b02      	ldr	r3, [pc, #8]	; (402058 <udd_get_frame_number+0xc>)
  40204e:	6818      	ldr	r0, [r3, #0]
}
  402050:	f3c0 000a 	ubfx	r0, r0, #0, #11
  402054:	4770      	bx	lr
  402056:	bf00      	nop
  402058:	40034000 	.word	0x40034000

0040205c <udd_get_micro_frame_number>:
}
  40205c:	2000      	movs	r0, #0
  40205e:	4770      	bx	lr

00402060 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  402060:	4b01      	ldr	r3, [pc, #4]	; (402068 <udd_set_setup_payload+0x8>)
  402062:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  402064:	8199      	strh	r1, [r3, #12]
  402066:	4770      	bx	lr
  402068:	200012dc 	.word	0x200012dc

0040206c <udd_ep_alloc>:
{
  40206c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40206e:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  402070:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  402074:	2c03      	cmp	r4, #3
  402076:	d867      	bhi.n	402148 <udd_ep_alloc+0xdc>
  402078:	00a3      	lsls	r3, r4, #2
  40207a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40207e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_enabled(ep)) {
  402082:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  402084:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  402088:	d161      	bne.n	40214e <udd_ep_alloc+0xe2>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  40208a:	f001 0503 	and.w	r5, r1, #3
  40208e:	2d01      	cmp	r5, #1
  402090:	d050      	beq.n	402134 <udd_ep_alloc+0xc8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  402092:	1f25      	subs	r5, r4, #4
  402094:	b2ed      	uxtb	r5, r5
  402096:	2d02      	cmp	r5, #2
  402098:	bf34      	ite	cc
  40209a:	f44f 7500 	movcc.w	r5, #512	; 0x200
  40209e:	2540      	movcs	r5, #64	; 0x40
  4020a0:	4295      	cmp	r5, r2
  4020a2:	db58      	blt.n	402156 <udd_ep_alloc+0xea>
  4020a4:	b240      	sxtb	r0, r0
	ptr_job = &udd_ep_job[ep - 1];
  4020a6:	1e66      	subs	r6, r4, #1
	ptr_job->size = MaxEndpointSize;
  4020a8:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  4020ac:	4d2b      	ldr	r5, [pc, #172]	; (40215c <udd_ep_alloc+0xf0>)
  4020ae:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  4020b2:	f105 0710 	add.w	r7, r5, #16
  4020b6:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  4020ba:	f362 0e09 	bfi	lr, r2, #0, #10
  4020be:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  4020c2:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  4020c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  4020c8:	f36f 1245 	bfc	r2, #5, #1
  4020cc:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  4020ce:	2800      	cmp	r0, #0
  4020d0:	db35      	blt.n	40213e <udd_ep_alloc+0xd2>
	udd_reset_endpoint(ep);
  4020d2:	4e23      	ldr	r6, [pc, #140]	; (402160 <udd_ep_alloc+0xf4>)
  4020d4:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  4020d6:	2201      	movs	r2, #1
  4020d8:	fa02 f404 	lsl.w	r4, r2, r4
  4020dc:	4325      	orrs	r5, r4
  4020de:	62b5      	str	r5, [r6, #40]	; 0x28
  4020e0:	4635      	mov	r5, r6
  4020e2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  4020e4:	4214      	tst	r4, r2
  4020e6:	d0fc      	beq.n	4020e2 <udd_ep_alloc+0x76>
  4020e8:	4d1d      	ldr	r5, [pc, #116]	; (402160 <udd_ep_alloc+0xf4>)
  4020ea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  4020ec:	ea22 0404 	bic.w	r4, r2, r4
  4020f0:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  4020f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4020f4:	9201      	str	r2, [sp, #4]
  4020f6:	9a01      	ldr	r2, [sp, #4]
  4020f8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4020fc:	9201      	str	r2, [sp, #4]
  4020fe:	9a01      	ldr	r2, [sp, #4]
  402100:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  402104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402108:	9201      	str	r2, [sp, #4]
  40210a:	2800      	cmp	r0, #0
  40210c:	ea4f 2201 	mov.w	r2, r1, lsl #8
  402110:	f402 7240 	and.w	r2, r2, #768	; 0x300
  402114:	bfb4      	ite	lt
  402116:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  40211a:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  40211e:	9901      	ldr	r1, [sp, #4]
  402120:	4311      	orrs	r1, r2
  402122:	9101      	str	r1, [sp, #4]
  402124:	9901      	ldr	r1, [sp, #4]
  402126:	6319      	str	r1, [r3, #48]	; 0x30
  402128:	6b19      	ldr	r1, [r3, #48]	; 0x30
  40212a:	ea32 0101 	bics.w	r1, r2, r1
  40212e:	d1fb      	bne.n	402128 <udd_ep_alloc+0xbc>
	return true;
  402130:	2001      	movs	r0, #1
  402132:	e00a      	b.n	40214a <udd_ep_alloc+0xde>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  402134:	b16c      	cbz	r4, 402152 <udd_ep_alloc+0xe6>
  402136:	2c03      	cmp	r4, #3
  402138:	d1ab      	bne.n	402092 <udd_ep_alloc+0x26>
		return false;
  40213a:	2000      	movs	r0, #0
  40213c:	e005      	b.n	40214a <udd_ep_alloc+0xde>
		ptr_job->bank = 0;
  40213e:	787a      	ldrb	r2, [r7, #1]
  402140:	f36f 0283 	bfc	r2, #2, #2
  402144:	707a      	strb	r2, [r7, #1]
  402146:	e7c4      	b.n	4020d2 <udd_ep_alloc+0x66>
		return false;
  402148:	2000      	movs	r0, #0
}
  40214a:	b003      	add	sp, #12
  40214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  40214e:	2000      	movs	r0, #0
  402150:	e7fb      	b.n	40214a <udd_ep_alloc+0xde>
		return false;
  402152:	2000      	movs	r0, #0
  402154:	e7f9      	b.n	40214a <udd_ep_alloc+0xde>
		return false;
  402156:	2000      	movs	r0, #0
  402158:	e7f7      	b.n	40214a <udd_ep_alloc+0xde>
  40215a:	bf00      	nop
  40215c:	20001250 	.word	0x20001250
  402160:	40034000 	.word	0x40034000

00402164 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402164:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402168:	2a03      	cmp	r2, #3
  40216a:	d822      	bhi.n	4021b2 <udd_ep_free+0x4e>
{
  40216c:	b500      	push	{lr}
  40216e:	b083      	sub	sp, #12
  402170:	0091      	lsls	r1, r2, #2
  402172:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  402176:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
	udd_disable_endpoint(ep_index);
  40217a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40217c:	9301      	str	r3, [sp, #4]
  40217e:	9b01      	ldr	r3, [sp, #4]
  402180:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402184:	9301      	str	r3, [sp, #4]
  402186:	9b01      	ldr	r3, [sp, #4]
  402188:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  40218c:	9301      	str	r3, [sp, #4]
  40218e:	9b01      	ldr	r3, [sp, #4]
  402190:	630b      	str	r3, [r1, #48]	; 0x30
  402192:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402194:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  402198:	d1fb      	bne.n	402192 <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  40219a:	1e50      	subs	r0, r2, #1
  40219c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4021a0:	2101      	movs	r1, #1
  4021a2:	4b04      	ldr	r3, [pc, #16]	; (4021b4 <udd_ep_free+0x50>)
  4021a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4021a8:	4b03      	ldr	r3, [pc, #12]	; (4021b8 <udd_ep_free+0x54>)
  4021aa:	4798      	blx	r3
}
  4021ac:	b003      	add	sp, #12
  4021ae:	f85d fb04 	ldr.w	pc, [sp], #4
  4021b2:	4770      	bx	lr
  4021b4:	20001250 	.word	0x20001250
  4021b8:	004012c9 	.word	0x004012c9

004021bc <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4021bc:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4021c0:	2803      	cmp	r0, #3
  4021c2:	d815      	bhi.n	4021f0 <udd_ep_is_halted+0x34>
	return ptr_job->b_stall_requested ||
  4021c4:	1e43      	subs	r3, r0, #1
  4021c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4021ca:	4a0a      	ldr	r2, [pc, #40]	; (4021f4 <udd_ep_is_halted+0x38>)
  4021cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4021d0:	7c5b      	ldrb	r3, [r3, #17]
  4021d2:	f013 0f20 	tst.w	r3, #32
  4021d6:	d109      	bne.n	4021ec <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  4021d8:	300c      	adds	r0, #12
  4021da:	4b07      	ldr	r3, [pc, #28]	; (4021f8 <udd_ep_is_halted+0x3c>)
  4021dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  4021e0:	f013 0f28 	tst.w	r3, #40	; 0x28
  4021e4:	bf14      	ite	ne
  4021e6:	2001      	movne	r0, #1
  4021e8:	2000      	moveq	r0, #0
  4021ea:	4770      	bx	lr
  4021ec:	2001      	movs	r0, #1
  4021ee:	4770      	bx	lr
		return false;
  4021f0:	2000      	movs	r0, #0
}
  4021f2:	4770      	bx	lr
  4021f4:	20001250 	.word	0x20001250
  4021f8:	40034000 	.word	0x40034000

004021fc <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4021fc:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402200:	2903      	cmp	r1, #3
  402202:	d85f      	bhi.n	4022c4 <udd_ep_set_halt+0xc8>
{
  402204:	b410      	push	{r4}
  402206:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402208:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40220c:	fab3 f383 	clz	r3, r3
  402210:	095b      	lsrs	r3, r3, #5
  402212:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402214:	b672      	cpsid	i
  402216:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40221a:	2200      	movs	r2, #0
  40221c:	4b2c      	ldr	r3, [pc, #176]	; (4022d0 <udd_ep_set_halt+0xd4>)
  40221e:	701a      	strb	r2, [r3, #0]
	return flags;
  402220:	9c01      	ldr	r4, [sp, #4]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402222:	f010 0f80 	tst.w	r0, #128	; 0x80
  402226:	d124      	bne.n	402272 <udd_ep_set_halt+0x76>
  402228:	008a      	lsls	r2, r1, #2
  40222a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40222e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_enable_stall_handshake(ep_index);
  402232:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402234:	9300      	str	r3, [sp, #0]
  402236:	9b00      	ldr	r3, [sp, #0]
  402238:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40223c:	9300      	str	r3, [sp, #0]
  40223e:	9b00      	ldr	r3, [sp, #0]
  402240:	f043 0320 	orr.w	r3, r3, #32
  402244:	9300      	str	r3, [sp, #0]
  402246:	9b00      	ldr	r3, [sp, #0]
  402248:	6313      	str	r3, [r2, #48]	; 0x30
  40224a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40224c:	f013 0f20 	tst.w	r3, #32
  402250:	d0fb      	beq.n	40224a <udd_ep_set_halt+0x4e>
		udd_enable_endpoint_interrupt(ep_index);
  402252:	2301      	movs	r3, #1
  402254:	fa03 f101 	lsl.w	r1, r3, r1
  402258:	4b1e      	ldr	r3, [pc, #120]	; (4022d4 <udd_ep_set_halt+0xd8>)
  40225a:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  40225c:	2c00      	cmp	r4, #0
  40225e:	d035      	beq.n	4022cc <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  402260:	2001      	movs	r0, #1
  402262:	4b1b      	ldr	r3, [pc, #108]	; (4022d0 <udd_ep_set_halt+0xd4>)
  402264:	7018      	strb	r0, [r3, #0]
  402266:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40226a:	b662      	cpsie	i
}
  40226c:	b003      	add	sp, #12
  40226e:	bc10      	pop	{r4}
  402270:	4770      	bx	lr
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402272:	1e4b      	subs	r3, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402274:	f101 020c 	add.w	r2, r1, #12
  402278:	4816      	ldr	r0, [pc, #88]	; (4022d4 <udd_ep_set_halt+0xd8>)
  40227a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  40227e:	f012 0f10 	tst.w	r2, #16
  402282:	d109      	bne.n	402298 <udd_ep_set_halt+0x9c>
				|| ptr_job->bank > 1)) {
  402284:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402288:	4813      	ldr	r0, [pc, #76]	; (4022d8 <udd_ep_set_halt+0xdc>)
  40228a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  40228e:	7c52      	ldrb	r2, [r2, #17]
  402290:	f3c2 0281 	ubfx	r2, r2, #2, #2
  402294:	2a01      	cmp	r2, #1
  402296:	ddc7      	ble.n	402228 <udd_ep_set_halt+0x2c>
		ptr_job->b_stall_requested = true;
  402298:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  40229c:	4b0e      	ldr	r3, [pc, #56]	; (4022d8 <udd_ep_set_halt+0xdc>)
  40229e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4022a2:	7c5a      	ldrb	r2, [r3, #17]
  4022a4:	f042 0220 	orr.w	r2, r2, #32
  4022a8:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4022aa:	2301      	movs	r3, #1
  4022ac:	fa03 f101 	lsl.w	r1, r3, r1
  4022b0:	4b08      	ldr	r3, [pc, #32]	; (4022d4 <udd_ep_set_halt+0xd8>)
  4022b2:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  4022b4:	b144      	cbz	r4, 4022c8 <udd_ep_set_halt+0xcc>
		cpu_irq_enable();
  4022b6:	2001      	movs	r0, #1
  4022b8:	4b05      	ldr	r3, [pc, #20]	; (4022d0 <udd_ep_set_halt+0xd4>)
  4022ba:	7018      	strb	r0, [r3, #0]
  4022bc:	f3bf 8f5f 	dmb	sy
  4022c0:	b662      	cpsie	i
  4022c2:	e7d3      	b.n	40226c <udd_ep_set_halt+0x70>
		return false;
  4022c4:	2000      	movs	r0, #0
  4022c6:	4770      	bx	lr
		return true;
  4022c8:	2001      	movs	r0, #1
  4022ca:	e7cf      	b.n	40226c <udd_ep_set_halt+0x70>
	return true;
  4022cc:	2001      	movs	r0, #1
  4022ce:	e7cd      	b.n	40226c <udd_ep_set_halt+0x70>
  4022d0:	200002a8 	.word	0x200002a8
  4022d4:	40034000 	.word	0x40034000
  4022d8:	20001250 	.word	0x20001250

004022dc <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  4022dc:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  4022e0:	2803      	cmp	r0, #3
  4022e2:	d85e      	bhi.n	4023a2 <udd_ep_clear_halt+0xc6>
{
  4022e4:	b530      	push	{r4, r5, lr}
  4022e6:	b083      	sub	sp, #12
	ptr_job = &udd_ep_job[ep - 1];
  4022e8:	1e44      	subs	r4, r0, #1
	ptr_job->b_stall_requested = false;
  4022ea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4022ee:	4b2f      	ldr	r3, [pc, #188]	; (4023ac <udd_ep_clear_halt+0xd0>)
  4022f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4022f4:	7c5a      	ldrb	r2, [r3, #17]
  4022f6:	f36f 1245 	bfc	r2, #5, #1
  4022fa:	745a      	strb	r2, [r3, #17]
  4022fc:	0083      	lsls	r3, r0, #2
  4022fe:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402302:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  402306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402308:	f012 0f20 	tst.w	r2, #32
  40230c:	d04b      	beq.n	4023a6 <udd_ep_clear_halt+0xca>
		udd_disable_stall_handshake(ep);
  40230e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402310:	9200      	str	r2, [sp, #0]
  402312:	9a00      	ldr	r2, [sp, #0]
  402314:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402318:	9200      	str	r2, [sp, #0]
  40231a:	9a00      	ldr	r2, [sp, #0]
  40231c:	f022 0220 	bic.w	r2, r2, #32
  402320:	9200      	str	r2, [sp, #0]
  402322:	9a00      	ldr	r2, [sp, #0]
  402324:	631a      	str	r2, [r3, #48]	; 0x30
  402326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402328:	f012 0f20 	tst.w	r2, #32
  40232c:	d1fb      	bne.n	402326 <udd_ep_clear_halt+0x4a>
		udd_reset_endpoint(ep);
  40232e:	4d20      	ldr	r5, [pc, #128]	; (4023b0 <udd_ep_clear_halt+0xd4>)
  402330:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  402332:	2201      	movs	r2, #1
  402334:	fa02 f000 	lsl.w	r0, r2, r0
  402338:	4301      	orrs	r1, r0
  40233a:	62a9      	str	r1, [r5, #40]	; 0x28
  40233c:	4629      	mov	r1, r5
  40233e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402340:	4210      	tst	r0, r2
  402342:	d0fc      	beq.n	40233e <udd_ep_clear_halt+0x62>
  402344:	491a      	ldr	r1, [pc, #104]	; (4023b0 <udd_ep_clear_halt+0xd4>)
  402346:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402348:	ea22 0000 	bic.w	r0, r2, r0
  40234c:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  40234e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402350:	9201      	str	r2, [sp, #4]
  402352:	9a01      	ldr	r2, [sp, #4]
  402354:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402358:	9201      	str	r2, [sp, #4]
  40235a:	9a01      	ldr	r2, [sp, #4]
  40235c:	f022 0208 	bic.w	r2, r2, #8
  402360:	9201      	str	r2, [sp, #4]
  402362:	9a01      	ldr	r2, [sp, #4]
  402364:	631a      	str	r2, [r3, #48]	; 0x30
  402366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402368:	f012 0f08 	tst.w	r2, #8
  40236c:	d1fb      	bne.n	402366 <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  40236e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  402372:	4a0e      	ldr	r2, [pc, #56]	; (4023ac <udd_ep_clear_halt+0xd0>)
  402374:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402378:	7c5b      	ldrb	r3, [r3, #17]
  40237a:	f013 0f10 	tst.w	r3, #16
  40237e:	d101      	bne.n	402384 <udd_ep_clear_halt+0xa8>
	return true;
  402380:	2001      	movs	r0, #1
  402382:	e011      	b.n	4023a8 <udd_ep_clear_halt+0xcc>
			ptr_job->busy = false;
  402384:	4611      	mov	r1, r2
  402386:	00a2      	lsls	r2, r4, #2
  402388:	1913      	adds	r3, r2, r4
  40238a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40238e:	7c58      	ldrb	r0, [r3, #17]
  402390:	f36f 1004 	bfc	r0, #4, #1
  402394:	7458      	strb	r0, [r3, #17]
			ptr_job->call_nohalt();
  402396:	4414      	add	r4, r2
  402398:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
  40239c:	4798      	blx	r3
	return true;
  40239e:	2001      	movs	r0, #1
  4023a0:	e002      	b.n	4023a8 <udd_ep_clear_halt+0xcc>
		return false;
  4023a2:	2000      	movs	r0, #0
  4023a4:	4770      	bx	lr
	return true;
  4023a6:	2001      	movs	r0, #1
}
  4023a8:	b003      	add	sp, #12
  4023aa:	bd30      	pop	{r4, r5, pc}
  4023ac:	20001250 	.word	0x20001250
  4023b0:	40034000 	.word	0x40034000

004023b4 <udd_ep_run>:
{
  4023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4023b6:	b083      	sub	sp, #12
	ep &= USB_EP_ADDR_MASK;
  4023b8:	f000 070f 	and.w	r7, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  4023bc:	2f03      	cmp	r7, #3
  4023be:	f200 80a2 	bhi.w	402506 <udd_ep_run+0x152>
  4023c2:	00bc      	lsls	r4, r7, #2
  4023c4:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  4023c8:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
	if ((!Is_udd_endpoint_enabled(ep))
  4023cc:	6b25      	ldr	r5, [r4, #48]	; 0x30
  4023ce:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4023d2:	f000 809b 	beq.w	40250c <udd_ep_run+0x158>
	ptr_job = &udd_ep_job[ep - 1];
  4023d6:	1e7d      	subs	r5, r7, #1
			|| ptr_job->b_stall_requested
  4023d8:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  4023dc:	4e50      	ldr	r6, [pc, #320]	; (402520 <udd_ep_run+0x16c>)
  4023de:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  4023e2:	7c76      	ldrb	r6, [r6, #17]
  4023e4:	f016 0f20 	tst.w	r6, #32
  4023e8:	f040 8092 	bne.w	402510 <udd_ep_run+0x15c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  4023ec:	6b26      	ldr	r6, [r4, #48]	; 0x30
  4023ee:	f016 0f20 	tst.w	r6, #32
  4023f2:	f040 808f 	bne.w	402514 <udd_ep_run+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4023f6:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4023fa:	fab6 f686 	clz	r6, r6
  4023fe:	0976      	lsrs	r6, r6, #5
  402400:	9600      	str	r6, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402402:	b672      	cpsid	i
  402404:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402408:	f04f 0e00 	mov.w	lr, #0
  40240c:	4e45      	ldr	r6, [pc, #276]	; (402524 <udd_ep_run+0x170>)
  40240e:	f886 e000 	strb.w	lr, [r6]
	return flags;
  402412:	f8dd c000 	ldr.w	ip, [sp]
	if (ptr_job->busy == true) {
  402416:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  40241a:	4e41      	ldr	r6, [pc, #260]	; (402520 <udd_ep_run+0x16c>)
  40241c:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402420:	7c76      	ldrb	r6, [r6, #17]
  402422:	f016 0f10 	tst.w	r6, #16
  402426:	d00a      	beq.n	40243e <udd_ep_run+0x8a>
	if (cpu_irq_is_enabled_flags(flags))
  402428:	f1bc 0f00 	cmp.w	ip, #0
  40242c:	d074      	beq.n	402518 <udd_ep_run+0x164>
		cpu_irq_enable();
  40242e:	2201      	movs	r2, #1
  402430:	4b3c      	ldr	r3, [pc, #240]	; (402524 <udd_ep_run+0x170>)
  402432:	701a      	strb	r2, [r3, #0]
  402434:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402438:	b662      	cpsie	i
		return false; // Job already on going
  40243a:	2000      	movs	r0, #0
  40243c:	e064      	b.n	402508 <udd_ep_run+0x154>
	ptr_job->busy = true;
  40243e:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  402442:	4e37      	ldr	r6, [pc, #220]	; (402520 <udd_ep_run+0x16c>)
  402444:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402448:	f896 e011 	ldrb.w	lr, [r6, #17]
  40244c:	f04e 0e10 	orr.w	lr, lr, #16
  402450:	f886 e011 	strb.w	lr, [r6, #17]
	if (cpu_irq_is_enabled_flags(flags))
  402454:	f1bc 0f00 	cmp.w	ip, #0
  402458:	d007      	beq.n	40246a <udd_ep_run+0xb6>
		cpu_irq_enable();
  40245a:	f04f 0e01 	mov.w	lr, #1
  40245e:	4e31      	ldr	r6, [pc, #196]	; (402524 <udd_ep_run+0x170>)
  402460:	f886 e000 	strb.w	lr, [r6]
  402464:	f3bf 8f5f 	dmb	sy
  402468:	b662      	cpsie	i
	ptr_job->buf = buf;
  40246a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 402520 <udd_ep_run+0x16c>
  40246e:	eb05 0685 	add.w	r6, r5, r5, lsl #2
  402472:	00b6      	lsls	r6, r6, #2
  402474:	eb0c 0e06 	add.w	lr, ip, r6
  402478:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  40247c:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  402480:	2200      	movs	r2, #0
  402482:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->call_trans = callback;
  402486:	9a08      	ldr	r2, [sp, #32]
  402488:	f84c 2006 	str.w	r2, [ip, r6]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  40248c:	b911      	cbnz	r1, 402494 <udd_ep_run+0xe0>
  40248e:	fab3 f183 	clz	r1, r3
  402492:	0949      	lsrs	r1, r1, #5
  402494:	4a22      	ldr	r2, [pc, #136]	; (402520 <udd_ep_run+0x16c>)
  402496:	00ae      	lsls	r6, r5, #2
  402498:	1973      	adds	r3, r6, r5
  40249a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40249e:	7c5b      	ldrb	r3, [r3, #17]
  4024a0:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  4024a4:	4435      	add	r5, r6
  4024a6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  4024aa:	f36f 13c7 	bfc	r3, #7, #1
  4024ae:	7453      	strb	r3, [r2, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4024b0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4024b4:	fab3 f383 	clz	r3, r3
  4024b8:	095b      	lsrs	r3, r3, #5
  4024ba:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4024bc:	b672      	cpsid	i
  4024be:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4024c2:	2200      	movs	r2, #0
  4024c4:	4b17      	ldr	r3, [pc, #92]	; (402524 <udd_ep_run+0x170>)
  4024c6:	701a      	strb	r2, [r3, #0]
	return flags;
  4024c8:	9d01      	ldr	r5, [sp, #4]
	udd_enable_endpoint_interrupt(ep);
  4024ca:	2301      	movs	r3, #1
  4024cc:	40bb      	lsls	r3, r7
  4024ce:	4a16      	ldr	r2, [pc, #88]	; (402528 <udd_ep_run+0x174>)
  4024d0:	6113      	str	r3, [r2, #16]
	if (b_dir_in) {
  4024d2:	f010 0f80 	tst.w	r0, #128	; 0x80
  4024d6:	d107      	bne.n	4024e8 <udd_ep_run+0x134>
	if (cpu_irq_is_enabled_flags(flags))
  4024d8:	b305      	cbz	r5, 40251c <udd_ep_run+0x168>
		cpu_irq_enable();
  4024da:	2001      	movs	r0, #1
  4024dc:	4b11      	ldr	r3, [pc, #68]	; (402524 <udd_ep_run+0x170>)
  4024de:	7018      	strb	r0, [r3, #0]
  4024e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4024e4:	b662      	cpsie	i
  4024e6:	e00f      	b.n	402508 <udd_ep_run+0x154>
		if (Is_udd_in_pending(ep)) {
  4024e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4024ea:	f013 0f11 	tst.w	r3, #17
  4024ee:	d1f3      	bne.n	4024d8 <udd_ep_run+0x124>
			if (udd_ep_in_sent(ep, true)) {
  4024f0:	2101      	movs	r1, #1
  4024f2:	4638      	mov	r0, r7
  4024f4:	4b0d      	ldr	r3, [pc, #52]	; (40252c <udd_ep_run+0x178>)
  4024f6:	4798      	blx	r3
  4024f8:	2800      	cmp	r0, #0
  4024fa:	d0ed      	beq.n	4024d8 <udd_ep_run+0x124>
				udd_ep_in_sent(ep, false);
  4024fc:	2100      	movs	r1, #0
  4024fe:	4638      	mov	r0, r7
  402500:	4b0a      	ldr	r3, [pc, #40]	; (40252c <udd_ep_run+0x178>)
  402502:	4798      	blx	r3
  402504:	e7e8      	b.n	4024d8 <udd_ep_run+0x124>
		return false;
  402506:	2000      	movs	r0, #0
}
  402508:	b003      	add	sp, #12
  40250a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  40250c:	2000      	movs	r0, #0
  40250e:	e7fb      	b.n	402508 <udd_ep_run+0x154>
  402510:	2000      	movs	r0, #0
  402512:	e7f9      	b.n	402508 <udd_ep_run+0x154>
  402514:	2000      	movs	r0, #0
  402516:	e7f7      	b.n	402508 <udd_ep_run+0x154>
		return false; // Job already on going
  402518:	2000      	movs	r0, #0
  40251a:	e7f5      	b.n	402508 <udd_ep_run+0x154>
	return true;
  40251c:	2001      	movs	r0, #1
  40251e:	e7f3      	b.n	402508 <udd_ep_run+0x154>
  402520:	20001250 	.word	0x20001250
  402524:	200002a8 	.word	0x200002a8
  402528:	40034000 	.word	0x40034000
  40252c:	004013dd 	.word	0x004013dd

00402530 <udd_ep_abort>:
{
  402530:	b5f0      	push	{r4, r5, r6, r7, lr}
  402532:	b087      	sub	sp, #28
	ep &= USB_EP_ADDR_MASK;
  402534:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402538:	2d03      	cmp	r5, #3
  40253a:	d840      	bhi.n	4025be <udd_ep_abort+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40253c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402540:	fab3 f383 	clz	r3, r3
  402544:	095b      	lsrs	r3, r3, #5
  402546:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  402548:	b672      	cpsid	i
  40254a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40254e:	2200      	movs	r2, #0
  402550:	4b4b      	ldr	r3, [pc, #300]	; (402680 <udd_ep_abort+0x150>)
  402552:	701a      	strb	r2, [r3, #0]
	return flags;
  402554:	9b05      	ldr	r3, [sp, #20]
	udd_disable_endpoint_interrupt(ep);
  402556:	2401      	movs	r4, #1
  402558:	40ac      	lsls	r4, r5
  40255a:	4a4a      	ldr	r2, [pc, #296]	; (402684 <udd_ep_abort+0x154>)
  40255c:	6154      	str	r4, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  40255e:	b12b      	cbz	r3, 40256c <udd_ep_abort+0x3c>
		cpu_irq_enable();
  402560:	2201      	movs	r2, #1
  402562:	4b47      	ldr	r3, [pc, #284]	; (402680 <udd_ep_abort+0x150>)
  402564:	701a      	strb	r2, [r3, #0]
  402566:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40256a:	b662      	cpsie	i
	if (b_dir_in) {
  40256c:	f010 0f80 	tst.w	r0, #128	; 0x80
  402570:	d127      	bne.n	4025c2 <udd_ep_abort+0x92>
  402572:	00ae      	lsls	r6, r5, #2
  402574:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  402578:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
		while(Is_udd_any_bank_received(ep)) {
  40257c:	6b33      	ldr	r3, [r6, #48]	; 0x30
  40257e:	f013 0f42 	tst.w	r3, #66	; 0x42
  402582:	d006      	beq.n	402592 <udd_ep_abort+0x62>
			udd_ep_ack_out_received(ep);
  402584:	4f40      	ldr	r7, [pc, #256]	; (402688 <udd_ep_abort+0x158>)
  402586:	4628      	mov	r0, r5
  402588:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  40258a:	6b33      	ldr	r3, [r6, #48]	; 0x30
  40258c:	f013 0f42 	tst.w	r3, #66	; 0x42
  402590:	d1f9      	bne.n	402586 <udd_ep_abort+0x56>
	udd_reset_endpoint(ep);
  402592:	4a3c      	ldr	r2, [pc, #240]	; (402684 <udd_ep_abort+0x154>)
  402594:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402596:	4323      	orrs	r3, r4
  402598:	6293      	str	r3, [r2, #40]	; 0x28
  40259a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40259c:	421c      	tst	r4, r3
  40259e:	d0fc      	beq.n	40259a <udd_ep_abort+0x6a>
  4025a0:	4a38      	ldr	r2, [pc, #224]	; (402684 <udd_ep_abort+0x154>)
  4025a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4025a4:	ea23 0404 	bic.w	r4, r3, r4
  4025a8:	6294      	str	r4, [r2, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4025aa:	1e68      	subs	r0, r5, #1
  4025ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4025b0:	462a      	mov	r2, r5
  4025b2:	2101      	movs	r1, #1
  4025b4:	4b35      	ldr	r3, [pc, #212]	; (40268c <udd_ep_abort+0x15c>)
  4025b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4025ba:	4b35      	ldr	r3, [pc, #212]	; (402690 <udd_ep_abort+0x160>)
  4025bc:	4798      	blx	r3
}
  4025be:	b007      	add	sp, #28
  4025c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025c2:	00ab      	lsls	r3, r5, #2
  4025c4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4025c8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		if (Is_udd_transmit_ready(ep)) {
  4025cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4025ce:	f012 0f10 	tst.w	r2, #16
  4025d2:	d03a      	beq.n	40264a <udd_ep_abort+0x11a>
			udd_kill_data_in_fifo(ep,
  4025d4:	b34d      	cbz	r5, 40262a <udd_ep_abort+0xfa>
  4025d6:	2d03      	cmp	r5, #3
  4025d8:	d027      	beq.n	40262a <udd_ep_abort+0xfa>
  4025da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4025dc:	9201      	str	r2, [sp, #4]
  4025de:	9a01      	ldr	r2, [sp, #4]
  4025e0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4025e4:	9201      	str	r2, [sp, #4]
  4025e6:	9a01      	ldr	r2, [sp, #4]
  4025e8:	f022 0210 	bic.w	r2, r2, #16
  4025ec:	9201      	str	r2, [sp, #4]
  4025ee:	9a01      	ldr	r2, [sp, #4]
  4025f0:	631a      	str	r2, [r3, #48]	; 0x30
  4025f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4025f4:	f012 0f10 	tst.w	r2, #16
  4025f8:	d1fb      	bne.n	4025f2 <udd_ep_abort+0xc2>
  4025fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4025fc:	f012 0f10 	tst.w	r2, #16
  402600:	d1fb      	bne.n	4025fa <udd_ep_abort+0xca>
  402602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402604:	9202      	str	r2, [sp, #8]
  402606:	9a02      	ldr	r2, [sp, #8]
  402608:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40260c:	9202      	str	r2, [sp, #8]
  40260e:	9a02      	ldr	r2, [sp, #8]
  402610:	f042 0210 	orr.w	r2, r2, #16
  402614:	9202      	str	r2, [sp, #8]
  402616:	9a02      	ldr	r2, [sp, #8]
  402618:	631a      	str	r2, [r3, #48]	; 0x30
  40261a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40261c:	f012 0f10 	tst.w	r2, #16
  402620:	d0fb      	beq.n	40261a <udd_ep_abort+0xea>
  402622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402624:	f012 0f10 	tst.w	r2, #16
  402628:	d0fb      	beq.n	402622 <udd_ep_abort+0xf2>
  40262a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40262c:	9203      	str	r2, [sp, #12]
  40262e:	9a03      	ldr	r2, [sp, #12]
  402630:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402634:	9203      	str	r2, [sp, #12]
  402636:	9a03      	ldr	r2, [sp, #12]
  402638:	f022 0210 	bic.w	r2, r2, #16
  40263c:	9203      	str	r2, [sp, #12]
  40263e:	9a03      	ldr	r2, [sp, #12]
  402640:	631a      	str	r2, [r3, #48]	; 0x30
  402642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402644:	f012 0f10 	tst.w	r2, #16
  402648:	d1fb      	bne.n	402642 <udd_ep_abort+0x112>
		udd_ack_in_sent(ep);
  40264a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40264c:	9204      	str	r2, [sp, #16]
  40264e:	9a04      	ldr	r2, [sp, #16]
  402650:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402654:	9204      	str	r2, [sp, #16]
  402656:	9a04      	ldr	r2, [sp, #16]
  402658:	f022 0201 	bic.w	r2, r2, #1
  40265c:	9204      	str	r2, [sp, #16]
  40265e:	9a04      	ldr	r2, [sp, #16]
  402660:	631a      	str	r2, [r3, #48]	; 0x30
  402662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402664:	f012 0f01 	tst.w	r2, #1
  402668:	d1fb      	bne.n	402662 <udd_ep_abort+0x132>
		udd_ep_job[ep - 1].bank = 0;
  40266a:	1e6b      	subs	r3, r5, #1
  40266c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402670:	4b06      	ldr	r3, [pc, #24]	; (40268c <udd_ep_abort+0x15c>)
  402672:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402676:	7c5a      	ldrb	r2, [r3, #17]
  402678:	f36f 0283 	bfc	r2, #2, #2
  40267c:	745a      	strb	r2, [r3, #17]
  40267e:	e788      	b.n	402592 <udd_ep_abort+0x62>
  402680:	200002a8 	.word	0x200002a8
  402684:	40034000 	.word	0x40034000
  402688:	00401309 	.word	0x00401309
  40268c:	20001250 	.word	0x20001250
  402690:	004012c9 	.word	0x004012c9

00402694 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  402694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402698:	6043      	str	r3, [r0, #4]
  40269a:	4770      	bx	lr

0040269c <init>:
** \brief     Initializes the USB interface.
** \param     settings Pointer to the USB interface settings.
**
****************************************************************************************/
uint8_t init(void *ptr) //initialize communication
{
  40269c:	b508      	push	{r3, lr}
  /* Set result to false. */
  bool result = 0;
  /* USB stack, ASF */
  udc_start();
  40269e:	4b02      	ldr	r3, [pc, #8]	; (4026a8 <init+0xc>)
  4026a0:	4798      	blx	r3
  result = 1;
  /* return result */
  return result;
} /*** end of init ***/
  4026a2:	2001      	movs	r0, #1
  4026a4:	bd08      	pop	{r3, pc}
  4026a6:	bf00      	nop
  4026a8:	004009f9 	.word	0x004009f9

004026ac <available>:
** \brief     Return length of data in receive buffer.
** \return    Length of data in receive buffer.
**
****************************************************************************************/
uint8_t available()
{
  4026ac:	b508      	push	{r3, lr}
  return udi_cdc_get_nb_received_data();
  4026ae:	4b02      	ldr	r3, [pc, #8]	; (4026b8 <available+0xc>)
  4026b0:	4798      	blx	r3
} /*** end of available ***/
  4026b2:	b2c0      	uxtb	r0, r0
  4026b4:	bd08      	pop	{r3, pc}
  4026b6:	bf00      	nop
  4026b8:	00400441 	.word	0x00400441

004026bc <read>:
** \brief     Return char from receive buffer.
** \return    Return next uint8_t from buffer.
**
****************************************************************************************/
uint8_t read()
{
  4026bc:	b508      	push	{r3, lr}
  return udi_cdc_getc();
  4026be:	4b02      	ldr	r3, [pc, #8]	; (4026c8 <read+0xc>)
  4026c0:	4798      	blx	r3
} /*** end of read ***/
  4026c2:	b2c0      	uxtb	r0, r0
  4026c4:	bd08      	pop	{r3, pc}
  4026c6:	bf00      	nop
  4026c8:	004006f1 	.word	0x004006f1

004026cc <write>:
** \brief     Write single char to interface.
** \return    Return result.
**
****************************************************************************************/
uint8_t write(const uint8_t *payload)
{
  4026cc:	b500      	push	{lr}
  4026ce:	b083      	sub	sp, #12
  4026d0:	ab02      	add	r3, sp, #8
  4026d2:	f843 0d04 	str.w	r0, [r3, #-4]!
  return udi_cdc_write_buf(&payload, 1);
  4026d6:	2101      	movs	r1, #1
  4026d8:	4618      	mov	r0, r3
  4026da:	4b03      	ldr	r3, [pc, #12]	; (4026e8 <write+0x1c>)
  4026dc:	4798      	blx	r3
} /*** end of write ***/
  4026de:	b2c0      	uxtb	r0, r0
  4026e0:	b003      	add	sp, #12
  4026e2:	f85d fb04 	ldr.w	pc, [sp], #4
  4026e6:	bf00      	nop
  4026e8:	00400849 	.word	0x00400849

004026ec <printbuf>:
** \brief     Print buffer to interface
** \return    Return result.
**
****************************************************************************************/
uint8_t printbuf(uint8_t *bufPtr, uint16_t len)
{
  4026ec:	b508      	push	{r3, lr}
  return udi_cdc_multi_write_buf(0, bufPtr, len);
  4026ee:	460a      	mov	r2, r1
  4026f0:	4601      	mov	r1, r0
  4026f2:	2000      	movs	r0, #0
  4026f4:	4b01      	ldr	r3, [pc, #4]	; (4026fc <printbuf+0x10>)
  4026f6:	4798      	blx	r3
} /*** end of printbuf ***/
  4026f8:	b2c0      	uxtb	r0, r0
  4026fa:	bd08      	pop	{r3, pc}
  4026fc:	00400791 	.word	0x00400791

00402700 <getComInterface>:
} /*** end of getComInterface ***/
  402700:	4800      	ldr	r0, [pc, #0]	; (402704 <getComInterface+0x4>)
  402702:	4770      	bx	lr
  402704:	20000110 	.word	0x20000110

00402708 <udi_cdc_callback_rx_notify>:
/************************************************************************************//**
** \brief     This is a callback function and it is called when we get new data.
**
****************************************************************************************/
void udi_cdc_callback_rx_notify(uint8_t port)
{
  402708:	b508      	push	{r3, lr}
  if(comInterface.rxCallback != NULL)
  40270a:	4b02      	ldr	r3, [pc, #8]	; (402714 <udi_cdc_callback_rx_notify+0xc>)
  40270c:	695b      	ldr	r3, [r3, #20]
  40270e:	b103      	cbz	r3, 402712 <udi_cdc_callback_rx_notify+0xa>
  {
    comInterface.rxCallback(port);
  402710:	4798      	blx	r3
  402712:	bd08      	pop	{r3, pc}
  402714:	20000110 	.word	0x20000110

00402718 <udi_cdc_callback_tx_empty_notify>:
/************************************************************************************//**
** \brief     This is a callback function and it is called when transmit buffer is empty.
**
****************************************************************************************/
void udi_cdc_callback_tx_empty_notify(uint8_t port)
{
  402718:	b508      	push	{r3, lr}
  if(comInterface.txEmptyCallback != NULL)
  40271a:	4b02      	ldr	r3, [pc, #8]	; (402724 <udi_cdc_callback_tx_empty_notify+0xc>)
  40271c:	699b      	ldr	r3, [r3, #24]
  40271e:	b103      	cbz	r3, 402722 <udi_cdc_callback_tx_empty_notify+0xa>
  {
    comInterface.txEmptyCallback(port);
  402720:	4798      	blx	r3
  402722:	bd08      	pop	{r3, pc}
  402724:	20000110 	.word	0x20000110

00402728 <comTxEmptyCallback>:
** \brief     This is a callback function and it is called when tx buffer is empty.
**
****************************************************************************************/
void comTxEmptyCallback(uint8_t port)
{
  if(pdcAdcTransfetComplete)
  402728:	4b7b      	ldr	r3, [pc, #492]	; (402918 <comTxEmptyCallback+0x1f0>)
  40272a:	781b      	ldrb	r3, [r3, #0]
  40272c:	2b00      	cmp	r3, #0
  40272e:	f000 80eb 	beq.w	402908 <comTxEmptyCallback+0x1e0>
{
  402732:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402736:	b089      	sub	sp, #36	; 0x24
  {
    if(settings->mode == BIN_MODE)
  402738:	4b78      	ldr	r3, [pc, #480]	; (40291c <comTxEmptyCallback+0x1f4>)
  40273a:	f8d3 8000 	ldr.w	r8, [r3]
  40273e:	f898 3012 	ldrb.w	r3, [r8, #18]
  402742:	2b01      	cmp	r3, #1
  402744:	d00c      	beq.n	402760 <comTxEmptyCallback+0x38>
      }
    }
    else
    {
      uint32_t measurment;
      for(uint8_t ch = 0; ((ch < 4) && settings->sequence[ch]); ch++)
  402746:	f898 500e 	ldrb.w	r5, [r8, #14]
  40274a:	2d00      	cmp	r5, #0
  40274c:	f000 80c5 	beq.w	4028da <comTxEmptyCallback+0x1b2>
  402750:	4e73      	ldr	r6, [pc, #460]	; (402920 <comTxEmptyCallback+0x1f8>)
  402752:	2400      	movs	r4, #0
  402754:	f106 0a02 	add.w	sl, r6, #2
            measurment += (adcPdcBuff[i][ch] & 0x0FFF);
          }
          measurment /= settings->averaging;
        }
        measurment *= 20000;
        measurment /= 4095;
  402758:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 402938 <comTxEmptyCallback+0x210>
        measurment = 10000 - measurment;
        settings->com->len = sprintf((char*)settings->com->buf, "CH%u: %+ 6.0fmV, ",
  40275c:	4647      	mov	r7, r8
  40275e:	e0a2      	b.n	4028a6 <comTxEmptyCallback+0x17e>
      if(settings->averaging > 1)
  402760:	f8b8 3006 	ldrh.w	r3, [r8, #6]
  402764:	2b01      	cmp	r3, #1
  402766:	d960      	bls.n	40282a <comTxEmptyCallback+0x102>
        for(uint16_t j = 0; j < *settings->blockSize; j += settings->averaging)
  402768:	f8d8 3014 	ldr.w	r3, [r8, #20]
  40276c:	681b      	ldr	r3, [r3, #0]
  40276e:	2b00      	cmp	r3, #0
  402770:	f000 80c4 	beq.w	4028fc <comTxEmptyCallback+0x1d4>
  402774:	2600      	movs	r6, #0
              measurment[ch] += (adcPdcBuff[i][ch] & 0x0FFF);
  402776:	4d6b      	ldr	r5, [pc, #428]	; (402924 <comTxEmptyCallback+0x1fc>)
  402778:	9503      	str	r5, [sp, #12]
  40277a:	e012      	b.n	4027a2 <comTxEmptyCallback+0x7a>
          settings->com->printBuf((uint8_t *)adcPdcBuff, 4*2);
  40277c:	f8d8 3018 	ldr.w	r3, [r8, #24]
  402780:	691b      	ldr	r3, [r3, #16]
  402782:	2108      	movs	r1, #8
  402784:	9803      	ldr	r0, [sp, #12]
  402786:	4798      	blx	r3
        for(uint16_t j = 0; j < *settings->blockSize; j += settings->averaging)
  402788:	4b64      	ldr	r3, [pc, #400]	; (40291c <comTxEmptyCallback+0x1f4>)
  40278a:	f8d3 8000 	ldr.w	r8, [r3]
  40278e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
  402792:	441e      	add	r6, r3
  402794:	b2b6      	uxth	r6, r6
  402796:	f8d8 3014 	ldr.w	r3, [r8, #20]
  40279a:	681b      	ldr	r3, [r3, #0]
  40279c:	429e      	cmp	r6, r3
  40279e:	f080 80ad 	bcs.w	4028fc <comTxEmptyCallback+0x1d4>
          for(uint8_t ch = 0; ((ch < 4) && settings->sequence[ch]); ch++)
  4027a2:	f898 300e 	ldrb.w	r3, [r8, #14]
  4027a6:	2b00      	cmp	r3, #0
  4027a8:	d0e8      	beq.n	40277c <comTxEmptyCallback+0x54>
  4027aa:	f108 0a0f 	add.w	sl, r8, #15
  4027ae:	f10d 0c10 	add.w	ip, sp, #16
  4027b2:	f8df 9170 	ldr.w	r9, [pc, #368]	; 402924 <comTxEmptyCallback+0x1fc>
  4027b6:	f04f 0e00 	mov.w	lr, #0
  4027ba:	4674      	mov	r4, lr
  4027bc:	eb06 030e 	add.w	r3, r6, lr
  4027c0:	b29b      	uxth	r3, r3
            for(uint16_t i = ch + j; i < (ch + j + settings->averaging); i += 4)
  4027c2:	461a      	mov	r2, r3
  4027c4:	f8b8 7006 	ldrh.w	r7, [r8, #6]
  4027c8:	eb06 000e 	add.w	r0, r6, lr
  4027cc:	4438      	add	r0, r7
  4027ce:	4283      	cmp	r3, r0
  4027d0:	da10      	bge.n	4027f4 <comTxEmptyCallback+0xcc>
  4027d2:	46e3      	mov	fp, ip
  4027d4:	f8dc 1000 	ldr.w	r1, [ip]
              measurment[ch] += (adcPdcBuff[i][ch] & 0x0FFF);
  4027d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4027dc:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
  4027e0:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4027e4:	4411      	add	r1, r2
            for(uint16_t i = ch + j; i < (ch + j + settings->averaging); i += 4)
  4027e6:	3304      	adds	r3, #4
  4027e8:	b29b      	uxth	r3, r3
  4027ea:	461a      	mov	r2, r3
  4027ec:	4283      	cmp	r3, r0
  4027ee:	dbf3      	blt.n	4027d8 <comTxEmptyCallback+0xb0>
  4027f0:	f8cb 1000 	str.w	r1, [fp]
            measurment[ch] /= settings->averaging;
  4027f4:	f8dc 3000 	ldr.w	r3, [ip]
  4027f8:	fbb3 f3f7 	udiv	r3, r3, r7
  4027fc:	f8cc 3000 	str.w	r3, [ip]
            adcPdcBuff[0][ch] = measurment[ch] | (adcPdcBuff[0][ch] & 0xF000);
  402800:	f8b9 2000 	ldrh.w	r2, [r9]
  402804:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402808:	f022 020f 	bic.w	r2, r2, #15
  40280c:	431a      	orrs	r2, r3
  40280e:	f829 2b02 	strh.w	r2, [r9], #2
          for(uint8_t ch = 0; ((ch < 4) && settings->sequence[ch]); ch++)
  402812:	f1be 0f03 	cmp.w	lr, #3
  402816:	d0b1      	beq.n	40277c <comTxEmptyCallback+0x54>
  402818:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40281c:	f10e 0e01 	add.w	lr, lr, #1
  402820:	f10c 0c04 	add.w	ip, ip, #4
  402824:	2b00      	cmp	r3, #0
  402826:	d1c8      	bne.n	4027ba <comTxEmptyCallback+0x92>
  402828:	e7a8      	b.n	40277c <comTxEmptyCallback+0x54>
        settings->com->printBuf((uint8_t *)adcPdcBuff, *(settings->blockSize)*2);
  40282a:	f8d8 3014 	ldr.w	r3, [r8, #20]
  40282e:	6819      	ldr	r1, [r3, #0]
  402830:	0049      	lsls	r1, r1, #1
  402832:	b289      	uxth	r1, r1
  402834:	f8d8 3018 	ldr.w	r3, [r8, #24]
  402838:	691b      	ldr	r3, [r3, #16]
  40283a:	483a      	ldr	r0, [pc, #232]	; (402924 <comTxEmptyCallback+0x1fc>)
  40283c:	4798      	blx	r3
  40283e:	e05d      	b.n	4028fc <comTxEmptyCallback+0x1d4>
          measurment /= settings->averaging;
  402840:	fbb1 f1fe 	udiv	r1, r1, lr
        measurment *= 20000;
  402844:	f644 6320 	movw	r3, #20000	; 0x4e20
  402848:	fb03 f101 	mul.w	r1, r3, r1
        measurment /= 4095;
  40284c:	fba9 2301 	umull	r2, r3, r9, r1
  402850:	1ac9      	subs	r1, r1, r3
  402852:	eb03 0151 	add.w	r1, r3, r1, lsr #1
        settings->com->len = sprintf((char*)settings->com->buf, "CH%u: %+ 6.0fmV, ",
  402856:	69bf      	ldr	r7, [r7, #24]
  402858:	f107 081c 	add.w	r8, r7, #28
  40285c:	f242 7010 	movw	r0, #10000	; 0x2710
  402860:	eba0 20d1 	sub.w	r0, r0, r1, lsr #11
  402864:	4b30      	ldr	r3, [pc, #192]	; (402928 <comTxEmptyCallback+0x200>)
  402866:	4798      	blx	r3
  402868:	a329      	add	r3, pc, #164	; (adr r3, 402910 <comTxEmptyCallback+0x1e8>)
  40286a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40286e:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 40293c <comTxEmptyCallback+0x214>
  402872:	47d8      	blx	fp
  402874:	e9cd 0100 	strd	r0, r1, [sp]
  402878:	462a      	mov	r2, r5
  40287a:	492c      	ldr	r1, [pc, #176]	; (40292c <comTxEmptyCallback+0x204>)
  40287c:	4640      	mov	r0, r8
  40287e:	4b2c      	ldr	r3, [pc, #176]	; (402930 <comTxEmptyCallback+0x208>)
  402880:	4798      	blx	r3
  402882:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
                                     settings->sequence[ch], (measurment - 10000.0));
        settings->com->printBuf(settings->com->buf, settings->com->len);
  402886:	4b25      	ldr	r3, [pc, #148]	; (40291c <comTxEmptyCallback+0x1f4>)
  402888:	681b      	ldr	r3, [r3, #0]
  40288a:	6998      	ldr	r0, [r3, #24]
  40288c:	6903      	ldr	r3, [r0, #16]
  40288e:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
  402892:	301c      	adds	r0, #28
  402894:	4798      	blx	r3
      for(uint8_t ch = 0; ((ch < 4) && settings->sequence[ch]); ch++)
  402896:	2c03      	cmp	r4, #3
  402898:	d01f      	beq.n	4028da <comTxEmptyCallback+0x1b2>
  40289a:	4b20      	ldr	r3, [pc, #128]	; (40291c <comTxEmptyCallback+0x1f4>)
  40289c:	681f      	ldr	r7, [r3, #0]
  40289e:	3401      	adds	r4, #1
  4028a0:	193b      	adds	r3, r7, r4
  4028a2:	7b9d      	ldrb	r5, [r3, #14]
  4028a4:	b1cd      	cbz	r5, 4028da <comTxEmptyCallback+0x1b2>
        measurment = (adcPdcBuff[0][ch] & 0x0FFF);
  4028a6:	f836 1f02 	ldrh.w	r1, [r6, #2]!
  4028aa:	f3c1 010b 	ubfx	r1, r1, #0, #12
        if(settings->averaging > 1)
  4028ae:	f8b7 e006 	ldrh.w	lr, [r7, #6]
  4028b2:	f1be 0f01 	cmp.w	lr, #1
  4028b6:	d9c5      	bls.n	402844 <comTxEmptyCallback+0x11c>
  4028b8:	f1ae 0302 	sub.w	r3, lr, #2
  4028bc:	b29b      	uxth	r3, r3
  4028be:	1d20      	adds	r0, r4, #4
  4028c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  4028c4:	eb0a 0040 	add.w	r0, sl, r0, lsl #1
  4028c8:	4632      	mov	r2, r6
            measurment += (adcPdcBuff[i][ch] & 0x0FFF);
  4028ca:	f832 3f08 	ldrh.w	r3, [r2, #8]!
  4028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4028d2:	4419      	add	r1, r3
          for(uint16_t i = 1; i < settings->averaging; i++)
  4028d4:	4282      	cmp	r2, r0
  4028d6:	d1f8      	bne.n	4028ca <comTxEmptyCallback+0x1a2>
  4028d8:	e7b2      	b.n	402840 <comTxEmptyCallback+0x118>
      }
      settings->com->len = sprintf((char*)settings->com->buf, "\n\r");
  4028da:	4b10      	ldr	r3, [pc, #64]	; (40291c <comTxEmptyCallback+0x1f4>)
  4028dc:	681a      	ldr	r2, [r3, #0]
  4028de:	6993      	ldr	r3, [r2, #24]
  4028e0:	4914      	ldr	r1, [pc, #80]	; (402934 <comTxEmptyCallback+0x20c>)
  4028e2:	8808      	ldrh	r0, [r1, #0]
  4028e4:	7889      	ldrb	r1, [r1, #2]
  4028e6:	8398      	strh	r0, [r3, #28]
  4028e8:	7799      	strb	r1, [r3, #30]
  4028ea:	2102      	movs	r1, #2
  4028ec:	f883 111c 	strb.w	r1, [r3, #284]	; 0x11c
      settings->com->printBuf(settings->com->buf, settings->com->len);      
  4028f0:	6990      	ldr	r0, [r2, #24]
  4028f2:	6903      	ldr	r3, [r0, #16]
  4028f4:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
  4028f8:	301c      	adds	r0, #28
  4028fa:	4798      	blx	r3
    }
    pdcAdcTransfetComplete = false;
  4028fc:	2200      	movs	r2, #0
  4028fe:	4b06      	ldr	r3, [pc, #24]	; (402918 <comTxEmptyCallback+0x1f0>)
  402900:	701a      	strb	r2, [r3, #0]
  }
}
  402902:	b009      	add	sp, #36	; 0x24
  402904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402908:	4770      	bx	lr
  40290a:	bf00      	nop
  40290c:	f3af 8000 	nop.w
  402910:	00000000 	.word	0x00000000
  402914:	40c38800 	.word	0x40c38800
  402918:	20001291 	.word	0x20001291
  40291c:	20001294 	.word	0x20001294
  402920:	200012fa 	.word	0x200012fa
  402924:	200012fc 	.word	0x200012fc
  402928:	00403f65 	.word	0x00403f65
  40292c:	0040876c 	.word	0x0040876c
  402930:	00404231 	.word	0x00404231
  402934:	00408768 	.word	0x00408768
  402938:	00100101 	.word	0x00100101
  40293c:	00403ce9 	.word	0x00403ce9

00402940 <coreConfigure>:
  if(master_settings != NULL)
  402940:	b138      	cbz	r0, 402952 <coreConfigure+0x12>
    settings = master_settings;
  402942:	4a05      	ldr	r2, [pc, #20]	; (402958 <coreConfigure+0x18>)
  402944:	6010      	str	r0, [r2, #0]
    uint32_t tmp = (uint32_t)master_settings->blockSize;
  402946:	6941      	ldr	r1, [r0, #20]
    master_settings->blockSize = &adcPdcPacket.ul_size;
  402948:	4a04      	ldr	r2, [pc, #16]	; (40295c <coreConfigure+0x1c>)
  40294a:	6142      	str	r2, [r0, #20]
    *master_settings->blockSize = tmp;
  40294c:	6011      	str	r1, [r2, #0]
    return TRUE;
  40294e:	2001      	movs	r0, #1
  402950:	4770      	bx	lr
  return FALSE;
  402952:	2000      	movs	r0, #0
} /*** end of core_configure ***/
  402954:	4770      	bx	lr
  402956:	bf00      	nop
  402958:	20001294 	.word	0x20001294
  40295c:	20001b08 	.word	0x20001b08

00402960 <adcSetChannels>:
{
  402960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ch2ch[0] = 0;
  402962:	4b14      	ldr	r3, [pc, #80]	; (4029b4 <adcSetChannels+0x54>)
  402964:	2200      	movs	r2, #0
  402966:	701a      	strb	r2, [r3, #0]
  ch2ch[1] = DAQ_CH_1_ADC_CH;
  402968:	2104      	movs	r1, #4
  40296a:	7059      	strb	r1, [r3, #1]
  ch2ch[2] = DAQ_CH_2_ADC_CH;
  40296c:	2106      	movs	r1, #6
  40296e:	7099      	strb	r1, [r3, #2]
  ch2ch[3] = DAQ_CH_3_ADC_CH;
  402970:	70da      	strb	r2, [r3, #3]
  ch2ch[4] = DAQ_CH_4_ADC_CH;
  402972:	2202      	movs	r2, #2
  402974:	711a      	strb	r2, [r3, #4]
  adc_disable_all_channel(ADC);
  402976:	4810      	ldr	r0, [pc, #64]	; (4029b8 <adcSetChannels+0x58>)
  402978:	4b10      	ldr	r3, [pc, #64]	; (4029bc <adcSetChannels+0x5c>)
  40297a:	4798      	blx	r3
  for(idx = 0; ((idx < 4) && settings->sequence[idx]); idx++)
  40297c:	4b10      	ldr	r3, [pc, #64]	; (4029c0 <adcSetChannels+0x60>)
  40297e:	681b      	ldr	r3, [r3, #0]
  402980:	7b9b      	ldrb	r3, [r3, #14]
  402982:	b1a3      	cbz	r3, 4029ae <adcSetChannels+0x4e>
    adc_enable_channel(ADC, ch2ch[settings->sequence[idx]]);
  402984:	4a0b      	ldr	r2, [pc, #44]	; (4029b4 <adcSetChannels+0x54>)
  402986:	5cd1      	ldrb	r1, [r2, r3]
  402988:	480b      	ldr	r0, [pc, #44]	; (4029b8 <adcSetChannels+0x58>)
  40298a:	4b0e      	ldr	r3, [pc, #56]	; (4029c4 <adcSetChannels+0x64>)
  40298c:	4798      	blx	r3
  40298e:	2401      	movs	r4, #1
  for(idx = 0; ((idx < 4) && settings->sequence[idx]); idx++)
  402990:	4d0b      	ldr	r5, [pc, #44]	; (4029c0 <adcSetChannels+0x60>)
    adc_enable_channel(ADC, ch2ch[settings->sequence[idx]]);
  402992:	4f08      	ldr	r7, [pc, #32]	; (4029b4 <adcSetChannels+0x54>)
  402994:	4e08      	ldr	r6, [pc, #32]	; (4029b8 <adcSetChannels+0x58>)
  for(idx = 0; ((idx < 4) && settings->sequence[idx]); idx++)
  402996:	682b      	ldr	r3, [r5, #0]
  402998:	4423      	add	r3, r4
  40299a:	7b9b      	ldrb	r3, [r3, #14]
  40299c:	b143      	cbz	r3, 4029b0 <adcSetChannels+0x50>
    adc_enable_channel(ADC, ch2ch[settings->sequence[idx]]);
  40299e:	5cf9      	ldrb	r1, [r7, r3]
  4029a0:	4630      	mov	r0, r6
  4029a2:	4b08      	ldr	r3, [pc, #32]	; (4029c4 <adcSetChannels+0x64>)
  4029a4:	4798      	blx	r3
  4029a6:	3401      	adds	r4, #1
  for(idx = 0; ((idx < 4) && settings->sequence[idx]); idx++)
  4029a8:	2c04      	cmp	r4, #4
  4029aa:	d1f4      	bne.n	402996 <adcSetChannels+0x36>
  4029ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4029ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4029b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4029b2:	bf00      	nop
  4029b4:	2000128c 	.word	0x2000128c
  4029b8:	40038000 	.word	0x40038000
  4029bc:	00400f15 	.word	0x00400f15
  4029c0:	20001294 	.word	0x20001294
  4029c4:	00400f0b 	.word	0x00400f0b

004029c8 <adcSetGain>:
  ADC->ADC_CGR = ( (((settings->ADCgain[1] << 2) | settings->ADCgain[1]) << 12) |
  4029c8:	4b0b      	ldr	r3, [pc, #44]	; (4029f8 <adcSetGain+0x30>)
  4029ca:	681b      	ldr	r3, [r3, #0]
  4029cc:	7a58      	ldrb	r0, [r3, #9]
                   (((settings->ADCgain[0] << 2) | settings->ADCgain[0]) <<  8) |
  4029ce:	7a19      	ldrb	r1, [r3, #8]
                   (((settings->ADCgain[3] << 2) | settings->ADCgain[3]) <<  4) |
  4029d0:	7ada      	ldrb	r2, [r3, #11]
                   (((settings->ADCgain[2] << 2) | settings->ADCgain[2]) <<  0) );
  4029d2:	7a9b      	ldrb	r3, [r3, #10]
  ADC->ADC_CGR = ( (((settings->ADCgain[1] << 2) | settings->ADCgain[1]) << 12) |
  4029d4:	ea40 0080 	orr.w	r0, r0, r0, lsl #2
                   (((settings->ADCgain[3] << 2) | settings->ADCgain[3]) <<  4) |
  4029d8:	ea43 0383 	orr.w	r3, r3, r3, lsl #2
  4029dc:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
                   (((settings->ADCgain[0] << 2) | settings->ADCgain[0]) <<  8) |
  4029e0:	ea41 0181 	orr.w	r1, r1, r1, lsl #2
                   (((settings->ADCgain[3] << 2) | settings->ADCgain[3]) <<  4) |
  4029e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  4029e8:	ea42 0282 	orr.w	r2, r2, r2, lsl #2
  4029ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  ADC->ADC_CGR = ( (((settings->ADCgain[1] << 2) | settings->ADCgain[1]) << 12) |
  4029f0:	4a02      	ldr	r2, [pc, #8]	; (4029fc <adcSetGain+0x34>)
  4029f2:	6493      	str	r3, [r2, #72]	; 0x48
  4029f4:	4770      	bx	lr
  4029f6:	bf00      	nop
  4029f8:	20001294 	.word	0x20001294
  4029fc:	40038000 	.word	0x40038000

00402a00 <adcSetRes>:
  if(settings->ADClowRes) ADC->ADC_MR |= ADC_MR_LOWRES;
  402a00:	4b07      	ldr	r3, [pc, #28]	; (402a20 <adcSetRes+0x20>)
  402a02:	681b      	ldr	r3, [r3, #0]
  402a04:	7b1b      	ldrb	r3, [r3, #12]
  402a06:	b92b      	cbnz	r3, 402a14 <adcSetRes+0x14>
  else                    ADC->ADC_MR &= ADC_MR_LOWRES;
  402a08:	4a06      	ldr	r2, [pc, #24]	; (402a24 <adcSetRes+0x24>)
  402a0a:	6853      	ldr	r3, [r2, #4]
  402a0c:	f003 0310 	and.w	r3, r3, #16
  402a10:	6053      	str	r3, [r2, #4]
  402a12:	4770      	bx	lr
  if(settings->ADClowRes) ADC->ADC_MR |= ADC_MR_LOWRES;
  402a14:	4a03      	ldr	r2, [pc, #12]	; (402a24 <adcSetRes+0x24>)
  402a16:	6853      	ldr	r3, [r2, #4]
  402a18:	f043 0310 	orr.w	r3, r3, #16
  402a1c:	6053      	str	r3, [r2, #4]
  402a1e:	4770      	bx	lr
  402a20:	20001294 	.word	0x20001294
  402a24:	40038000 	.word	0x40038000

00402a28 <adcHandler>:
{
  402a28:	b538      	push	{r3, r4, r5, lr}
  if(state)
  402a2a:	b950      	cbnz	r0, 402a42 <adcHandler+0x1a>
    adc_disable_interrupt(ADC, ADC_IER_RXBUFF);
  402a2c:	4d0e      	ldr	r5, [pc, #56]	; (402a68 <adcHandler+0x40>)
  402a2e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402a32:	4628      	mov	r0, r5
  402a34:	4c0d      	ldr	r4, [pc, #52]	; (402a6c <adcHandler+0x44>)
  402a36:	47a0      	blx	r4
    adc_disable_interrupt(ADC, ADC_IER_ENDRX);
  402a38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402a3c:	4628      	mov	r0, r5
  402a3e:	47a0      	blx	r4
  402a40:	bd38      	pop	{r3, r4, r5, pc}
    adc_enable_interrupt(ADC, ADC_IER_RXBUFF);
  402a42:	4d09      	ldr	r5, [pc, #36]	; (402a68 <adcHandler+0x40>)
  402a44:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402a48:	4628      	mov	r0, r5
  402a4a:	4c09      	ldr	r4, [pc, #36]	; (402a70 <adcHandler+0x48>)
  402a4c:	47a0      	blx	r4
    adc_enable_interrupt(ADC, ADC_IER_ENDRX);
  402a4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402a52:	4628      	mov	r0, r5
  402a54:	47a0      	blx	r4
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402a56:	4b07      	ldr	r3, [pc, #28]	; (402a74 <adcHandler+0x4c>)
  402a58:	2240      	movs	r2, #64	; 0x40
  402a5a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  402a5e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402a62:	601a      	str	r2, [r3, #0]
  402a64:	bd38      	pop	{r3, r4, r5, pc}
  402a66:	bf00      	nop
  402a68:	40038000 	.word	0x40038000
  402a6c:	00400f21 	.word	0x00400f21
  402a70:	00400f1d 	.word	0x00400f1d
  402a74:	e000e100 	.word	0xe000e100

00402a78 <adcInit>:
{
  402a78:	b538      	push	{r3, r4, r5, lr}
    if(pmc_enable_periph_clk(ID_ADC))
  402a7a:	201d      	movs	r0, #29
  402a7c:	4b1d      	ldr	r3, [pc, #116]	; (402af4 <adcInit+0x7c>)
  402a7e:	4798      	blx	r3
  402a80:	b108      	cbz	r0, 402a86 <adcInit+0xe>
      return false;
  402a82:	2000      	movs	r0, #0
  402a84:	bd38      	pop	{r3, r4, r5, pc}
    if(adc_init(ADC, sysclk_get_cpu_hz(), ADC_CLK, 0))
  402a86:	2300      	movs	r3, #0
  402a88:	4a1b      	ldr	r2, [pc, #108]	; (402af8 <adcInit+0x80>)
  402a8a:	491c      	ldr	r1, [pc, #112]	; (402afc <adcInit+0x84>)
  402a8c:	481c      	ldr	r0, [pc, #112]	; (402b00 <adcInit+0x88>)
  402a8e:	4c1d      	ldr	r4, [pc, #116]	; (402b04 <adcInit+0x8c>)
  402a90:	47a0      	blx	r4
  402a92:	b108      	cbz	r0, 402a98 <adcInit+0x20>
      return false;
  402a94:	2000      	movs	r0, #0
}
  402a96:	bd38      	pop	{r3, r4, r5, pc}
    adc_configure_timing(ADC, 15, ADC_SETTLING_TIME_0, 0);
  402a98:	4c19      	ldr	r4, [pc, #100]	; (402b00 <adcInit+0x88>)
  402a9a:	2300      	movs	r3, #0
  402a9c:	461a      	mov	r2, r3
  402a9e:	210f      	movs	r1, #15
  402aa0:	4620      	mov	r0, r4
  402aa2:	4d19      	ldr	r5, [pc, #100]	; (402b08 <adcInit+0x90>)
  402aa4:	47a8      	blx	r5
    adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
  402aa6:	2100      	movs	r1, #0
  402aa8:	4620      	mov	r0, r4
  402aaa:	4b18      	ldr	r3, [pc, #96]	; (402b0c <adcInit+0x94>)
  402aac:	4798      	blx	r3
    adc_disable_all_channel(ADC);
  402aae:	4620      	mov	r0, r4
  402ab0:	4b17      	ldr	r3, [pc, #92]	; (402b10 <adcInit+0x98>)
  402ab2:	4798      	blx	r3
    adc_set_bias_current(ADC, 1);
  402ab4:	2101      	movs	r1, #1
  402ab6:	4620      	mov	r0, r4
  402ab8:	4b16      	ldr	r3, [pc, #88]	; (402b14 <adcInit+0x9c>)
  402aba:	4798      	blx	r3
    adc_configure_trigger(ADC, ADC_TRIG_TIO_CH_0, 0);
  402abc:	2200      	movs	r2, #0
  402abe:	2103      	movs	r1, #3
  402ac0:	4620      	mov	r0, r4
  402ac2:	4b15      	ldr	r3, [pc, #84]	; (402b18 <adcInit+0xa0>)
  402ac4:	4798      	blx	r3
    ADC->ADC_COR |= ( ADC_COR_DIFF0 | ADC_COR_DIFF1 | ADC_COR_DIFF2 | ADC_COR_DIFF3 |
  402ac6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
  402acc:	64e3      	str	r3, [r4, #76]	; 0x4c
    ADC->ADC_CGR = ( (((ADC_GAIN_1 << 2) | ADC_GAIN_1) <<  4) |
  402ace:	f245 5355 	movw	r3, #21845	; 0x5555
  402ad2:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC->ADC_EMR |= ADC_EMR_TAG;
  402ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  402ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  402ada:	6423      	str	r3, [r4, #64]	; 0x40
    ADC->ADC_MR |= ADC_MR_ANACH;
  402adc:	6863      	ldr	r3, [r4, #4]
  402ade:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  402ae2:	6063      	str	r3, [r4, #4]
    adcSetChannels();
  402ae4:	4b0d      	ldr	r3, [pc, #52]	; (402b1c <adcInit+0xa4>)
  402ae6:	4798      	blx	r3
    adcHandler(true);
  402ae8:	2001      	movs	r0, #1
  402aea:	4b0d      	ldr	r3, [pc, #52]	; (402b20 <adcInit+0xa8>)
  402aec:	4798      	blx	r3
  return true;
  402aee:	2001      	movs	r0, #1
  402af0:	bd38      	pop	{r3, r4, r5, pc}
  402af2:	bf00      	nop
  402af4:	0040383d 	.word	0x0040383d
  402af8:	00f42400 	.word	0x00f42400
  402afc:	03d09000 	.word	0x03d09000
  402b00:	40038000 	.word	0x40038000
  402b04:	00400e9d 	.word	0x00400e9d
  402b08:	00400eef 	.word	0x00400eef
  402b0c:	00400ed1 	.word	0x00400ed1
  402b10:	00400f15 	.word	0x00400f15
  402b14:	00400f29 	.word	0x00400f29
  402b18:	00400ee1 	.word	0x00400ee1
  402b1c:	00402961 	.word	0x00402961
  402b20:	00402a29 	.word	0x00402a29

00402b24 <dacInit>:
{
  402b24:	b538      	push	{r3, r4, r5, lr}
  pmc_enable_periph_clk(ID_DACC); // enable clock for DACC
  402b26:	201e      	movs	r0, #30
  402b28:	4b11      	ldr	r3, [pc, #68]	; (402b70 <dacInit+0x4c>)
  402b2a:	4798      	blx	r3
  dacc_reset(DACC);
  402b2c:	4c11      	ldr	r4, [pc, #68]	; (402b74 <dacInit+0x50>)
  402b2e:	4620      	mov	r0, r4
  402b30:	4b11      	ldr	r3, [pc, #68]	; (402b78 <dacInit+0x54>)
  402b32:	4798      	blx	r3
  dacc_set_transfer_mode(DACC, 0);
  402b34:	2100      	movs	r1, #0
  402b36:	4620      	mov	r0, r4
  402b38:	4b10      	ldr	r3, [pc, #64]	; (402b7c <dacInit+0x58>)
  402b3a:	4798      	blx	r3
  dacc_set_power_save(DACC, 0, 0);
  402b3c:	2200      	movs	r2, #0
  402b3e:	4611      	mov	r1, r2
  402b40:	4620      	mov	r0, r4
  402b42:	4b0f      	ldr	r3, [pc, #60]	; (402b80 <dacInit+0x5c>)
  402b44:	4798      	blx	r3
  dacc_set_channel_selection(DACC, DACC_CHANNEL0);
  402b46:	2100      	movs	r1, #0
  402b48:	4620      	mov	r0, r4
  402b4a:	4d0e      	ldr	r5, [pc, #56]	; (402b84 <dacInit+0x60>)
  402b4c:	47a8      	blx	r5
  dacc_set_channel_selection(DACC, DACC_CHANNEL1);
  402b4e:	2101      	movs	r1, #1
  402b50:	4620      	mov	r0, r4
  402b52:	47a8      	blx	r5
  dacc_enable_channel(DACC, DACC_CHANNEL0);
  402b54:	2100      	movs	r1, #0
  402b56:	4620      	mov	r0, r4
  402b58:	4d0b      	ldr	r5, [pc, #44]	; (402b88 <dacInit+0x64>)
  402b5a:	47a8      	blx	r5
  dacc_enable_channel(DACC, DACC_CHANNEL1); 
  402b5c:	2101      	movs	r1, #1
  402b5e:	4620      	mov	r0, r4
  402b60:	47a8      	blx	r5
  dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
  402b62:	f44f 7185 	mov.w	r1, #266	; 0x10a
  402b66:	4620      	mov	r0, r4
  402b68:	4b08      	ldr	r3, [pc, #32]	; (402b8c <dacInit+0x68>)
  402b6a:	4798      	blx	r3
}
  402b6c:	2001      	movs	r0, #1
  402b6e:	bd38      	pop	{r3, r4, r5, pc}
  402b70:	0040383d 	.word	0x0040383d
  402b74:	4003c000 	.word	0x4003c000
  402b78:	00403685 	.word	0x00403685
  402b7c:	0040368b 	.word	0x0040368b
  402b80:	004036c3 	.word	0x004036c3
  402b84:	004036ab 	.word	0x004036ab
  402b88:	004036ef 	.word	0x004036ef
  402b8c:	00403703 	.word	0x00403703

00402b90 <coreSetDacVal>:
{
  402b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t status = dacc_get_interrupt_status(DACC);
  402b92:	480c      	ldr	r0, [pc, #48]	; (402bc4 <coreSetDacVal+0x34>)
  402b94:	4b0c      	ldr	r3, [pc, #48]	; (402bc8 <coreSetDacVal+0x38>)
  402b96:	4798      	blx	r3
  if ((status & DACC_ISR_TXRDY) == DACC_ISR_TXRDY)
  402b98:	f010 0f01 	tst.w	r0, #1
  402b9c:	d011      	beq.n	402bc2 <coreSetDacVal+0x32>
      dacc_set_channel_selection(DACC, i); //first channel 0, then channel 1      
  402b9e:	4c09      	ldr	r4, [pc, #36]	; (402bc4 <coreSetDacVal+0x34>)
  402ba0:	2100      	movs	r1, #0
  402ba2:	4620      	mov	r0, r4
  402ba4:	4f09      	ldr	r7, [pc, #36]	; (402bcc <coreSetDacVal+0x3c>)
  402ba6:	47b8      	blx	r7
      dacc_write_conversion_data(DACC, settings->DACval[i]);
  402ba8:	4e09      	ldr	r6, [pc, #36]	; (402bd0 <coreSetDacVal+0x40>)
  402baa:	6833      	ldr	r3, [r6, #0]
  402bac:	8b99      	ldrh	r1, [r3, #28]
  402bae:	4620      	mov	r0, r4
  402bb0:	4d08      	ldr	r5, [pc, #32]	; (402bd4 <coreSetDacVal+0x44>)
  402bb2:	47a8      	blx	r5
      dacc_set_channel_selection(DACC, i); //first channel 0, then channel 1      
  402bb4:	2101      	movs	r1, #1
  402bb6:	4620      	mov	r0, r4
  402bb8:	47b8      	blx	r7
      dacc_write_conversion_data(DACC, settings->DACval[i]);
  402bba:	6833      	ldr	r3, [r6, #0]
  402bbc:	8bd9      	ldrh	r1, [r3, #30]
  402bbe:	4620      	mov	r0, r4
  402bc0:	47a8      	blx	r5
  402bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402bc4:	4003c000 	.word	0x4003c000
  402bc8:	004036a3 	.word	0x004036a3
  402bcc:	004036ab 	.word	0x004036ab
  402bd0:	20001294 	.word	0x20001294
  402bd4:	004036a7 	.word	0x004036a7

00402bd8 <pdcInit>:
{
  402bd8:	b508      	push	{r3, lr}
  adcPdc = adc_get_pdc_base(ADC);
  402bda:	480a      	ldr	r0, [pc, #40]	; (402c04 <pdcInit+0x2c>)
  402bdc:	4b0a      	ldr	r3, [pc, #40]	; (402c08 <pdcInit+0x30>)
  402bde:	4798      	blx	r3
  402be0:	4b0a      	ldr	r3, [pc, #40]	; (402c0c <pdcInit+0x34>)
  402be2:	6018      	str	r0, [r3, #0]
  if(adcPdc != NULL)
  402be4:	b160      	cbz	r0, 402c00 <pdcInit+0x28>
    adcPdcPacket.ul_addr = (uint32_t)&adcPdcBuff;
  402be6:	4b0a      	ldr	r3, [pc, #40]	; (402c10 <pdcInit+0x38>)
  402be8:	4a0a      	ldr	r2, [pc, #40]	; (402c14 <pdcInit+0x3c>)
  402bea:	601a      	str	r2, [r3, #0]
    adcPdcPacket.ul_size = *settings->blockSize;
  402bec:	4a0a      	ldr	r2, [pc, #40]	; (402c18 <pdcInit+0x40>)
  402bee:	6812      	ldr	r2, [r2, #0]
  402bf0:	6952      	ldr	r2, [r2, #20]
  402bf2:	6812      	ldr	r2, [r2, #0]
  402bf4:	605a      	str	r2, [r3, #4]
    pdc_enable_transfer(adcPdc, PERIPH_PTCR_RXTEN);
  402bf6:	2101      	movs	r1, #1
  402bf8:	4b08      	ldr	r3, [pc, #32]	; (402c1c <pdcInit+0x44>)
  402bfa:	4798      	blx	r3
  return true;
  402bfc:	2001      	movs	r0, #1
  402bfe:	bd08      	pop	{r3, pc}
    return false;
  402c00:	2000      	movs	r0, #0
}
  402c02:	bd08      	pop	{r3, pc}
  402c04:	40038000 	.word	0x40038000
  402c08:	00400f3d 	.word	0x00400f3d
  402c0c:	20001afc 	.word	0x20001afc
  402c10:	20001b04 	.word	0x20001b04
  402c14:	200012fc 	.word	0x200012fc
  402c18:	20001294 	.word	0x20001294
  402c1c:	00403723 	.word	0x00403723

00402c20 <timerSetTimePeriod>:
{
  402c20:	b530      	push	{r4, r5, lr}
  402c22:	b085      	sub	sp, #20
  uint32_t ul_div = 0;
  402c24:	2300      	movs	r3, #0
  402c26:	9303      	str	r3, [sp, #12]
  uint32_t ul_tc_clks = 0;
  402c28:	9302      	str	r3, [sp, #8]
  if(settings->acqusitionTime > 1000000)
  402c2a:	4b14      	ldr	r3, [pc, #80]	; (402c7c <timerSetTimePeriod+0x5c>)
  402c2c:	681b      	ldr	r3, [r3, #0]
  402c2e:	681b      	ldr	r3, [r3, #0]
  402c30:	4a13      	ldr	r2, [pc, #76]	; (402c80 <timerSetTimePeriod+0x60>)
  402c32:	4293      	cmp	r3, r2
  402c34:	d902      	bls.n	402c3c <timerSetTimePeriod+0x1c>
    return false;
  402c36:	2000      	movs	r0, #0
} /*** end of timer_set_compare_time ***/
  402c38:	b005      	add	sp, #20
  402c3a:	bd30      	pop	{r4, r5, pc}
		timerFreq = 1000000 / settings->acqusitionTime;
  402c3c:	fbb2 f4f3 	udiv	r4, r2, r3
		if(!tc_find_mck_divisor(timerFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk))
  402c40:	4910      	ldr	r1, [pc, #64]	; (402c84 <timerSetTimePeriod+0x64>)
  402c42:	9100      	str	r1, [sp, #0]
  402c44:	ab02      	add	r3, sp, #8
  402c46:	aa03      	add	r2, sp, #12
  402c48:	4620      	mov	r0, r4
  402c4a:	4d0f      	ldr	r5, [pc, #60]	; (402c88 <timerSetTimePeriod+0x68>)
  402c4c:	47a8      	blx	r5
  402c4e:	b198      	cbz	r0, 402c78 <timerSetTimePeriod+0x58>
		TC0->TC_CHANNEL[0].TC_CMR = (TC0->TC_CHANNEL[0].TC_CMR & 0xFFFFFFF8) | ul_tc_clks;
  402c50:	4a0e      	ldr	r2, [pc, #56]	; (402c8c <timerSetTimePeriod+0x6c>)
  402c52:	6853      	ldr	r3, [r2, #4]
  402c54:	f023 0307 	bic.w	r3, r3, #7
  402c58:	9902      	ldr	r1, [sp, #8]
  402c5a:	430b      	orrs	r3, r1
  402c5c:	6053      	str	r3, [r2, #4]
		TC0->TC_CHANNEL[0].TC_RA = ((ul_sysclk / ul_div) / timerFreq) / 2;
  402c5e:	9903      	ldr	r1, [sp, #12]
  402c60:	4b08      	ldr	r3, [pc, #32]	; (402c84 <timerSetTimePeriod+0x64>)
  402c62:	fbb3 f3f1 	udiv	r3, r3, r1
  402c66:	fbb3 f3f4 	udiv	r3, r3, r4
  402c6a:	0859      	lsrs	r1, r3, #1
  402c6c:	6151      	str	r1, [r2, #20]
		TC0->TC_CHANNEL[0].TC_RC = ((ul_sysclk / ul_div) / timerFreq) / 1;
  402c6e:	61d3      	str	r3, [r2, #28]
		TC0->TC_CHANNEL[0].TC_CV = 0;
  402c70:	2300      	movs	r3, #0
  402c72:	6113      	str	r3, [r2, #16]
		return true;
  402c74:	2001      	movs	r0, #1
  402c76:	e7df      	b.n	402c38 <timerSetTimePeriod+0x18>
				return false;
  402c78:	2000      	movs	r0, #0
  402c7a:	e7dd      	b.n	402c38 <timerSetTimePeriod+0x18>
  402c7c:	20001294 	.word	0x20001294
  402c80:	000f4240 	.word	0x000f4240
  402c84:	03d09000 	.word	0x03d09000
  402c88:	00403941 	.word	0x00403941
  402c8c:	40010000 	.word	0x40010000

00402c90 <timerInit>:
{
  402c90:	b508      	push	{r3, lr}
	if(pmc_enable_periph_clk(ID_TC0))
  402c92:	2017      	movs	r0, #23
  402c94:	4b06      	ldr	r3, [pc, #24]	; (402cb0 <timerInit+0x20>)
  402c96:	4798      	blx	r3
  402c98:	b108      	cbz	r0, 402c9e <timerInit+0xe>
		return false;
  402c9a:	2000      	movs	r0, #0
}
  402c9c:	bd08      	pop	{r3, pc}
	tc_init(TC0, 0, TC_CMR_CPCTRG | TC_CMR_WAVE | TC_CMR_ACPA_CLEAR | TC_CMR_ACPC_SET);
  402c9e:	f44f 22d8 	mov.w	r2, #442368	; 0x6c000
  402ca2:	2100      	movs	r1, #0
  402ca4:	4803      	ldr	r0, [pc, #12]	; (402cb4 <timerInit+0x24>)
  402ca6:	4b04      	ldr	r3, [pc, #16]	; (402cb8 <timerInit+0x28>)
  402ca8:	4798      	blx	r3
	if(!timerSetTimePeriod())
  402caa:	4b04      	ldr	r3, [pc, #16]	; (402cbc <timerInit+0x2c>)
  402cac:	4798      	blx	r3
  402cae:	bd08      	pop	{r3, pc}
  402cb0:	0040383d 	.word	0x0040383d
  402cb4:	40010000 	.word	0x40010000
  402cb8:	00403919 	.word	0x00403919
  402cbc:	00402c21 	.word	0x00402c21

00402cc0 <coreStart>:
{  
  402cc0:	b508      	push	{r3, lr}
  if(settings != NULL)
  402cc2:	4b0c      	ldr	r3, [pc, #48]	; (402cf4 <coreStart+0x34>)
  402cc4:	681b      	ldr	r3, [r3, #0]
  402cc6:	b19b      	cbz	r3, 402cf0 <coreStart+0x30>
			if(!timerInit())
  402cc8:	4b0b      	ldr	r3, [pc, #44]	; (402cf8 <coreStart+0x38>)
  402cca:	4798      	blx	r3
  402ccc:	4603      	mov	r3, r0
  402cce:	b908      	cbnz	r0, 402cd4 <coreStart+0x14>
} /*** end of coreInit ***/
  402cd0:	4618      	mov	r0, r3
  402cd2:	bd08      	pop	{r3, pc}
			if(!pdcInit())
  402cd4:	4b09      	ldr	r3, [pc, #36]	; (402cfc <coreStart+0x3c>)
  402cd6:	4798      	blx	r3
  402cd8:	4603      	mov	r3, r0
  402cda:	2800      	cmp	r0, #0
  402cdc:	d0f8      	beq.n	402cd0 <coreStart+0x10>
			if(!adcInit())
  402cde:	4b08      	ldr	r3, [pc, #32]	; (402d00 <coreStart+0x40>)
  402ce0:	4798      	blx	r3
  402ce2:	4603      	mov	r3, r0
  402ce4:	2800      	cmp	r0, #0
  402ce6:	d0f3      	beq.n	402cd0 <coreStart+0x10>
			if(!dacInit())
  402ce8:	4b06      	ldr	r3, [pc, #24]	; (402d04 <coreStart+0x44>)
  402cea:	4798      	blx	r3
  402cec:	4603      	mov	r3, r0
  402cee:	e7ef      	b.n	402cd0 <coreStart+0x10>
  return true;
  402cf0:	2301      	movs	r3, #1
  402cf2:	e7ed      	b.n	402cd0 <coreStart+0x10>
  402cf4:	20001294 	.word	0x20001294
  402cf8:	00402c91 	.word	0x00402c91
  402cfc:	00402bd9 	.word	0x00402bd9
  402d00:	00402a79 	.word	0x00402a79
  402d04:	00402b25 	.word	0x00402b25

00402d08 <timerStart>:
{
  402d08:	b508      	push	{r3, lr}
  adcHandler(true);
  402d0a:	2001      	movs	r0, #1
  402d0c:	4b03      	ldr	r3, [pc, #12]	; (402d1c <timerStart+0x14>)
  402d0e:	4798      	blx	r3
  tc_start(TC0, 0);
  402d10:	2100      	movs	r1, #0
  402d12:	4803      	ldr	r0, [pc, #12]	; (402d20 <timerStart+0x18>)
  402d14:	4b03      	ldr	r3, [pc, #12]	; (402d24 <timerStart+0x1c>)
  402d16:	4798      	blx	r3
  402d18:	bd08      	pop	{r3, pc}
  402d1a:	bf00      	nop
  402d1c:	00402a29 	.word	0x00402a29
  402d20:	40010000 	.word	0x40010000
  402d24:	00403931 	.word	0x00403931

00402d28 <timerStop>:
{
  402d28:	b508      	push	{r3, lr}
  tc_stop(TC0, 0);
  402d2a:	2100      	movs	r1, #0
  402d2c:	4801      	ldr	r0, [pc, #4]	; (402d34 <timerStop+0xc>)
  402d2e:	4b02      	ldr	r3, [pc, #8]	; (402d38 <timerStop+0x10>)
  402d30:	4798      	blx	r3
  402d32:	bd08      	pop	{r3, pc}
  402d34:	40010000 	.word	0x40010000
  402d38:	00403939 	.word	0x00403939

00402d3c <ADC_Handler>:
{
  402d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t status = adc_get_status(ADC);
  402d3e:	4826      	ldr	r0, [pc, #152]	; (402dd8 <ADC_Handler+0x9c>)
  402d40:	4b26      	ldr	r3, [pc, #152]	; (402ddc <ADC_Handler+0xa0>)
  402d42:	4798      	blx	r3
  402d44:	4604      	mov	r4, r0
  if((status & ADC_ISR_RXBUFF) == ADC_ISR_RXBUFF)
  402d46:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
  402d4a:	d00c      	beq.n	402d66 <ADC_Handler+0x2a>
    if(!pdcAdcTransfetComplete)
  402d4c:	4b24      	ldr	r3, [pc, #144]	; (402de0 <ADC_Handler+0xa4>)
  402d4e:	781b      	ldrb	r3, [r3, #0]
  402d50:	b96b      	cbnz	r3, 402d6e <ADC_Handler+0x32>
      pdc_rx_init(adcPdc, &adcPdcPacket, NULL);
  402d52:	4d24      	ldr	r5, [pc, #144]	; (402de4 <ADC_Handler+0xa8>)
  402d54:	2200      	movs	r2, #0
  402d56:	4924      	ldr	r1, [pc, #144]	; (402de8 <ADC_Handler+0xac>)
  402d58:	6828      	ldr	r0, [r5, #0]
  402d5a:	4b24      	ldr	r3, [pc, #144]	; (402dec <ADC_Handler+0xb0>)
  402d5c:	4798      	blx	r3
      pdc_enable_transfer(adcPdc, PERIPH_PTCR_RXTEN);
  402d5e:	2101      	movs	r1, #1
  402d60:	6828      	ldr	r0, [r5, #0]
  402d62:	4b23      	ldr	r3, [pc, #140]	; (402df0 <ADC_Handler+0xb4>)
  402d64:	4798      	blx	r3
  if((status & ADC_ISR_ENDRX) == ADC_ISR_ENDRX)
  402d66:	f014 6f00 	tst.w	r4, #134217728	; 0x8000000
  402d6a:	d12a      	bne.n	402dc2 <ADC_Handler+0x86>
  402d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      timerStop();
  402d6e:	4b21      	ldr	r3, [pc, #132]	; (402df4 <ADC_Handler+0xb8>)
  402d70:	4798      	blx	r3
      adcHandler(false);
  402d72:	2000      	movs	r0, #0
  402d74:	4b20      	ldr	r3, [pc, #128]	; (402df8 <ADC_Handler+0xbc>)
  402d76:	4798      	blx	r3
      pdcAdcTransfetComplete = false;
  402d78:	2200      	movs	r2, #0
  402d7a:	4b19      	ldr	r3, [pc, #100]	; (402de0 <ADC_Handler+0xa4>)
  402d7c:	701a      	strb	r2, [r3, #0]
      settings->acqusitionTime = 1000000;
  402d7e:	4d1f      	ldr	r5, [pc, #124]	; (402dfc <ADC_Handler+0xc0>)
  402d80:	682b      	ldr	r3, [r5, #0]
  402d82:	4a1f      	ldr	r2, [pc, #124]	; (402e00 <ADC_Handler+0xc4>)
  402d84:	601a      	str	r2, [r3, #0]
      timerSetTimePeriod();
  402d86:	4b1f      	ldr	r3, [pc, #124]	; (402e04 <ADC_Handler+0xc8>)
  402d88:	4798      	blx	r3
      settings->com->len = sprintf((char*)settings->com->buf, "Sample rate to high!\n\r");
  402d8a:	f8d5 e000 	ldr.w	lr, [r5]
  402d8e:	f8de 7018 	ldr.w	r7, [lr, #24]
  402d92:	4d1d      	ldr	r5, [pc, #116]	; (402e08 <ADC_Handler+0xcc>)
  402d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402d96:	61f8      	str	r0, [r7, #28]
  402d98:	6239      	str	r1, [r7, #32]
  402d9a:	627a      	str	r2, [r7, #36]	; 0x24
  402d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  402d9e:	6828      	ldr	r0, [r5, #0]
  402da0:	62f8      	str	r0, [r7, #44]	; 0x2c
  402da2:	88aa      	ldrh	r2, [r5, #4]
  402da4:	79ab      	ldrb	r3, [r5, #6]
  402da6:	863a      	strh	r2, [r7, #48]	; 0x30
  402da8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  402dac:	2316      	movs	r3, #22
  402dae:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
      settings->com->printBuf(settings->com->buf, settings->com->len);
  402db2:	f8de 0018 	ldr.w	r0, [lr, #24]
  402db6:	6903      	ldr	r3, [r0, #16]
  402db8:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
  402dbc:	301c      	adds	r0, #28
  402dbe:	4798      	blx	r3
  402dc0:	e7d1      	b.n	402d66 <ADC_Handler+0x2a>
    pdcAdcTransfetComplete = true;
  402dc2:	2201      	movs	r2, #1
  402dc4:	4b06      	ldr	r3, [pc, #24]	; (402de0 <ADC_Handler+0xa4>)
  402dc6:	701a      	strb	r2, [r3, #0]
    settings->com->printBuf(syncBytes, 2);
  402dc8:	4b0c      	ldr	r3, [pc, #48]	; (402dfc <ADC_Handler+0xc0>)
  402dca:	681b      	ldr	r3, [r3, #0]
  402dcc:	699b      	ldr	r3, [r3, #24]
  402dce:	691b      	ldr	r3, [r3, #16]
  402dd0:	2102      	movs	r1, #2
  402dd2:	480e      	ldr	r0, [pc, #56]	; (402e0c <ADC_Handler+0xd0>)
  402dd4:	4798      	blx	r3
}
  402dd6:	e7c9      	b.n	402d6c <ADC_Handler+0x30>
  402dd8:	40038000 	.word	0x40038000
  402ddc:	00400f25 	.word	0x00400f25
  402de0:	20001291 	.word	0x20001291
  402de4:	20001afc 	.word	0x20001afc
  402de8:	20001b04 	.word	0x20001b04
  402dec:	0040370b 	.word	0x0040370b
  402df0:	00403723 	.word	0x00403723
  402df4:	00402d29 	.word	0x00402d29
  402df8:	00402a29 	.word	0x00402a29
  402dfc:	20001294 	.word	0x20001294
  402e00:	000f4240 	.word	0x000f4240
  402e04:	00402c21 	.word	0x00402c21
  402e08:	00408754 	.word	0x00408754
  402e0c:	20000230 	.word	0x20000230

00402e10 <coreTxEmptyCallBack>:
**
****************************************************************************************/
void * coreTxEmptyCallBack(void)
{
  return comTxEmptyCallback;
}
  402e10:	4800      	ldr	r0, [pc, #0]	; (402e14 <coreTxEmptyCallBack+0x4>)
  402e12:	4770      	bx	lr
  402e14:	00402729 	.word	0x00402729

00402e18 <DacStop>:
}

bool DacStop (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface)
{
	
}
  402e18:	4770      	bx	lr

00402e1a <DacStart>:

bool DacStart (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface)
{

}
  402e1a:	4770      	bx	lr

00402e1c <DacSequencer>:

bool DacSequencer (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface)
{

}
  402e1c:	4770      	bx	lr
	...

00402e20 <startACQ>:
{
  402e20:	b570      	push	{r4, r5, r6, lr}
  402e22:	4616      	mov	r6, r2
  timerStart();
  402e24:	4b08      	ldr	r3, [pc, #32]	; (402e48 <startACQ+0x28>)
  402e26:	4798      	blx	r3
  comInterface->len = sprintf((char*)comInterface->buf, "Acquisition started\n\r");
  402e28:	4c08      	ldr	r4, [pc, #32]	; (402e4c <startACQ+0x2c>)
  402e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402e2c:	61f0      	str	r0, [r6, #28]
  402e2e:	6231      	str	r1, [r6, #32]
  402e30:	6272      	str	r2, [r6, #36]	; 0x24
  402e32:	62b3      	str	r3, [r6, #40]	; 0x28
  402e34:	6820      	ldr	r0, [r4, #0]
  402e36:	62f0      	str	r0, [r6, #44]	; 0x2c
  402e38:	88a3      	ldrh	r3, [r4, #4]
  402e3a:	8633      	strh	r3, [r6, #48]	; 0x30
  402e3c:	2315      	movs	r3, #21
  402e3e:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
} /*** end of StartACQ ***/
  402e42:	2001      	movs	r0, #1
  402e44:	bd70      	pop	{r4, r5, r6, pc}
  402e46:	bf00      	nop
  402e48:	00402d09 	.word	0x00402d09
  402e4c:	00408980 	.word	0x00408980

00402e50 <setMode>:
  if(*parPtr >= MODE_LOWRANGE && *parPtr <= MODE_HIGHRANGE)
  402e50:	6803      	ldr	r3, [r0, #0]
  402e52:	2b01      	cmp	r3, #1
  402e54:	d901      	bls.n	402e5a <setMode+0xa>
  return FALSE;
  402e56:	2000      	movs	r0, #0
  402e58:	4770      	bx	lr
{
  402e5a:	b470      	push	{r4, r5, r6}
  402e5c:	4614      	mov	r4, r2
    settings->mode = (uint8_t)*parPtr;
  402e5e:	748b      	strb	r3, [r1, #18]
    switch((uint8_t)*parPtr)
  402e60:	7803      	ldrb	r3, [r0, #0]
  402e62:	b11b      	cbz	r3, 402e6c <setMode+0x1c>
  402e64:	2b01      	cmp	r3, #1
  402e66:	d016      	beq.n	402e96 <setMode+0x46>
    return TRUE;
  402e68:	2001      	movs	r0, #1
  402e6a:	e012      	b.n	402e92 <setMode+0x42>
        comInterface->len = sprintf((char*)comInterface->buf,
  402e6c:	4d12      	ldr	r5, [pc, #72]	; (402eb8 <setMode+0x68>)
  402e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402e70:	61e0      	str	r0, [r4, #28]
  402e72:	6221      	str	r1, [r4, #32]
  402e74:	6262      	str	r2, [r4, #36]	; 0x24
  402e76:	62a3      	str	r3, [r4, #40]	; 0x28
  402e78:	cd07      	ldmia	r5!, {r0, r1, r2}
  402e7a:	62e0      	str	r0, [r4, #44]	; 0x2c
  402e7c:	6321      	str	r1, [r4, #48]	; 0x30
  402e7e:	6362      	str	r2, [r4, #52]	; 0x34
  402e80:	882a      	ldrh	r2, [r5, #0]
  402e82:	78ab      	ldrb	r3, [r5, #2]
  402e84:	8722      	strh	r2, [r4, #56]	; 0x38
  402e86:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  402e8a:	231e      	movs	r3, #30
  402e8c:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
    return TRUE;
  402e90:	2001      	movs	r0, #1
} /*** end of setMode ***/
  402e92:	bc70      	pop	{r4, r5, r6}
  402e94:	4770      	bx	lr
        comInterface->len = sprintf((char*)comInterface->buf,
  402e96:	4d09      	ldr	r5, [pc, #36]	; (402ebc <setMode+0x6c>)
  402e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402e9a:	61e0      	str	r0, [r4, #28]
  402e9c:	6221      	str	r1, [r4, #32]
  402e9e:	6262      	str	r2, [r4, #36]	; 0x24
  402ea0:	62a3      	str	r3, [r4, #40]	; 0x28
  402ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402ea4:	62e0      	str	r0, [r4, #44]	; 0x2c
  402ea6:	6321      	str	r1, [r4, #48]	; 0x30
  402ea8:	6362      	str	r2, [r4, #52]	; 0x34
  402eaa:	63a3      	str	r3, [r4, #56]	; 0x38
  402eac:	231f      	movs	r3, #31
  402eae:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
    return TRUE;
  402eb2:	2001      	movs	r0, #1
        break;
  402eb4:	e7ed      	b.n	402e92 <setMode+0x42>
  402eb6:	bf00      	nop
  402eb8:	004088fc 	.word	0x004088fc
  402ebc:	0040891c 	.word	0x0040891c

00402ec0 <SetLutValues>:
{
  402ec0:	b430      	push	{r4, r5}
				uint8_t channel = (uint8_t)*(parPtr + 0);
  402ec2:	6804      	ldr	r4, [r0, #0]
				if(channel < DAC_CH_LOWRANGE || channel > DAC_CH_HIGHRANGE
  402ec4:	1e63      	subs	r3, r4, #1
  402ec6:	b2db      	uxtb	r3, r3
  402ec8:	2b01      	cmp	r3, #1
  402eca:	d902      	bls.n	402ed2 <SetLutValues+0x12>
				) return false; //Parameter out of range
  402ecc:	2000      	movs	r0, #0
}
  402ece:	bc30      	pop	{r4, r5}
  402ed0:	4770      	bx	lr
				uint16_t location = (uint16_t)*(parPtr + 1);
  402ed2:	6843      	ldr	r3, [r0, #4]
				|| value < DAC_VALUE_MIN || value > DAC_VALUE_MAX
  402ed4:	b29d      	uxth	r5, r3
  402ed6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
  402eda:	d216      	bcs.n	402f0a <SetLutValues+0x4a>
				uint16_t value = (uint16_t)*(parPtr + 2);
  402edc:	8900      	ldrh	r0, [r0, #8]
				|| value < DAC_VALUE_MIN || value > DAC_VALUE_MAX
  402ede:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  402ee2:	d301      	bcc.n	402ee8 <SetLutValues+0x28>
				) return false; //Parameter out of range
  402ee4:	2000      	movs	r0, #0
  402ee6:	e7f2      	b.n	402ece <SetLutValues+0xe>
				settings->DAC[channel].Lut[location] = value;
  402ee8:	b2e4      	uxtb	r4, r4
  402eea:	462b      	mov	r3, r5
  402eec:	eb04 2544 	add.w	r5, r4, r4, lsl #9
  402ef0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  402ef4:	441c      	add	r4, r3
  402ef6:	3414      	adds	r4, #20
  402ef8:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
				comInterface->len = sprintf((char*)comInterface->buf,
  402efc:	4b04      	ldr	r3, [pc, #16]	; (402f10 <SetLutValues+0x50>)
  402efe:	881b      	ldrh	r3, [r3, #0]
  402f00:	8393      	strh	r3, [r2, #28]
  402f02:	2001      	movs	r0, #1
  402f04:	f882 011c 	strb.w	r0, [r2, #284]	; 0x11c
				return true;
  402f08:	e7e1      	b.n	402ece <SetLutValues+0xe>
				) return false; //Parameter out of range
  402f0a:	2000      	movs	r0, #0
  402f0c:	e7df      	b.n	402ece <SetLutValues+0xe>
  402f0e:	bf00      	nop
  402f10:	004087f4 	.word	0x004087f4

00402f14 <stopACQ>:
{
  402f14:	b570      	push	{r4, r5, r6, lr}
  402f16:	4616      	mov	r6, r2
  timerStop();
  402f18:	4b08      	ldr	r3, [pc, #32]	; (402f3c <stopACQ+0x28>)
  402f1a:	4798      	blx	r3
  comInterface->len = sprintf((char*)comInterface->buf, "Acquisition stopped\n\r");
  402f1c:	4c08      	ldr	r4, [pc, #32]	; (402f40 <stopACQ+0x2c>)
  402f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402f20:	61f0      	str	r0, [r6, #28]
  402f22:	6231      	str	r1, [r6, #32]
  402f24:	6272      	str	r2, [r6, #36]	; 0x24
  402f26:	62b3      	str	r3, [r6, #40]	; 0x28
  402f28:	6820      	ldr	r0, [r4, #0]
  402f2a:	62f0      	str	r0, [r6, #44]	; 0x2c
  402f2c:	88a3      	ldrh	r3, [r4, #4]
  402f2e:	8633      	strh	r3, [r6, #48]	; 0x30
  402f30:	2315      	movs	r3, #21
  402f32:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
} /*** end of StopACQ ***/
  402f36:	2001      	movs	r0, #1
  402f38:	bd70      	pop	{r4, r5, r6, pc}
  402f3a:	bf00      	nop
  402f3c:	00402d29 	.word	0x00402d29
  402f40:	00408998 	.word	0x00408998

00402f44 <setSamplePeriod>:
{
  402f44:	b570      	push	{r4, r5, r6, lr}
  if(*parPtr >= SAMPLE_PERIOD_LOWRANGE && *parPtr <= SAMPLE_PERIOD_HIGHRANGE)
  402f46:	6803      	ldr	r3, [r0, #0]
  402f48:	1e5c      	subs	r4, r3, #1
  402f4a:	480b      	ldr	r0, [pc, #44]	; (402f78 <setSamplePeriod+0x34>)
  402f4c:	4284      	cmp	r4, r0
  402f4e:	d902      	bls.n	402f56 <setSamplePeriod+0x12>
  return FALSE;
  402f50:	2600      	movs	r6, #0
} /*** end of SetSamplePeriod ***/
  402f52:	4630      	mov	r0, r6
  402f54:	bd70      	pop	{r4, r5, r6, pc}
  402f56:	4615      	mov	r5, r2
  402f58:	460c      	mov	r4, r1
    settings->acqusitionTime = (uint32_t)*parPtr;
  402f5a:	600b      	str	r3, [r1, #0]
    if(timerSetTimePeriod())
  402f5c:	4b07      	ldr	r3, [pc, #28]	; (402f7c <setSamplePeriod+0x38>)
  402f5e:	4798      	blx	r3
  402f60:	4606      	mov	r6, r0
  402f62:	2800      	cmp	r0, #0
  402f64:	d0f5      	beq.n	402f52 <setSamplePeriod+0xe>
      comInterface->len = sprintf((char*)comInterface->buf,
  402f66:	6822      	ldr	r2, [r4, #0]
  402f68:	4905      	ldr	r1, [pc, #20]	; (402f80 <setSamplePeriod+0x3c>)
  402f6a:	f105 001c 	add.w	r0, r5, #28
  402f6e:	4b05      	ldr	r3, [pc, #20]	; (402f84 <setSamplePeriod+0x40>)
  402f70:	4798      	blx	r3
  402f72:	f885 011c 	strb.w	r0, [r5, #284]	; 0x11c
						return TRUE;
  402f76:	e7ec      	b.n	402f52 <setSamplePeriod+0xe>
  402f78:	000f423f 	.word	0x000f423f
  402f7c:	00402c21 	.word	0x00402c21
  402f80:	0040893c 	.word	0x0040893c
  402f84:	00404231 	.word	0x00404231

00402f88 <setAverageCount>:
  if(*parPtr >= AVERAGE_COUNT_LOWRANGE &&  *parPtr <= AVERAGE_COUNT_HIGHRANGE)
  402f88:	6803      	ldr	r3, [r0, #0]
  402f8a:	1e58      	subs	r0, r3, #1
  402f8c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  402f90:	d301      	bcc.n	402f96 <setAverageCount+0xe>
  return FALSE;
  402f92:	2000      	movs	r0, #0
  402f94:	4770      	bx	lr
{
  402f96:	b510      	push	{r4, lr}
  402f98:	4614      	mov	r4, r2
    settings->averaging = (uint16_t)*parPtr;
  402f9a:	80cb      	strh	r3, [r1, #6]
    comInterface->len = sprintf((char*)comInterface->buf,
  402f9c:	b29a      	uxth	r2, r3
  402f9e:	4904      	ldr	r1, [pc, #16]	; (402fb0 <setAverageCount+0x28>)
  402fa0:	f104 001c 	add.w	r0, r4, #28
  402fa4:	4b03      	ldr	r3, [pc, #12]	; (402fb4 <setAverageCount+0x2c>)
  402fa6:	4798      	blx	r3
  402fa8:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    return TRUE;
  402fac:	2001      	movs	r0, #1
  402fae:	bd10      	pop	{r4, pc}
  402fb0:	00408860 	.word	0x00408860
  402fb4:	00404231 	.word	0x00404231

00402fb8 <setMeasurmentCount>:
  if(*parPtr >= MEASURMENT_COUNT_LOWRANGE &&  *parPtr <= MEASURMENT_COUNT_HIGHRANGE)
  402fb8:	6803      	ldr	r3, [r0, #0]
  402fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402fbe:	d901      	bls.n	402fc4 <setMeasurmentCount+0xc>
  return FALSE;
  402fc0:	2000      	movs	r0, #0
  402fc2:	4770      	bx	lr
{  
  402fc4:	b510      	push	{r4, lr}
  402fc6:	4614      	mov	r4, r2
    settings->acquisitionNbr = (uint16_t)*parPtr;
  402fc8:	808b      	strh	r3, [r1, #4]
    comInterface->len = sprintf((char*)comInterface->buf,
  402fca:	b29a      	uxth	r2, r3
  402fcc:	4904      	ldr	r1, [pc, #16]	; (402fe0 <setMeasurmentCount+0x28>)
  402fce:	f104 001c 	add.w	r0, r4, #28
  402fd2:	4b04      	ldr	r3, [pc, #16]	; (402fe4 <setMeasurmentCount+0x2c>)
  402fd4:	4798      	blx	r3
  402fd6:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    return TRUE;
  402fda:	2001      	movs	r0, #1
  402fdc:	bd10      	pop	{r4, pc}
  402fde:	bf00      	nop
  402fe0:	004088cc 	.word	0x004088cc
  402fe4:	00404231 	.word	0x00404231

00402fe8 <setSequencer>:
  if((*(parPtr + 0) >= SEQUENCER_LOWRANGE && *(parPtr + 0) <= SEQUENCER_HIGHRANGE) &&
  402fe8:	6803      	ldr	r3, [r0, #0]
  402fea:	2b04      	cmp	r3, #4
  402fec:	d81d      	bhi.n	40302a <setSequencer+0x42>
  402fee:	6843      	ldr	r3, [r0, #4]
  402ff0:	2b04      	cmp	r3, #4
  402ff2:	d81c      	bhi.n	40302e <setSequencer+0x46>
     (*(parPtr + 1) >= SEQUENCER_LOWRANGE && *(parPtr + 1) <= SEQUENCER_HIGHRANGE) &&
  402ff4:	6883      	ldr	r3, [r0, #8]
  402ff6:	2b04      	cmp	r3, #4
  402ff8:	d81b      	bhi.n	403032 <setSequencer+0x4a>
     (*(parPtr + 2) >= SEQUENCER_LOWRANGE && *(parPtr + 2) <= SEQUENCER_HIGHRANGE) &&
  402ffa:	68c3      	ldr	r3, [r0, #12]
  402ffc:	2b04      	cmp	r3, #4
  402ffe:	d901      	bls.n	403004 <setSequencer+0x1c>
  return FALSE;
  403000:	2000      	movs	r0, #0
  403002:	4770      	bx	lr
{
  403004:	b530      	push	{r4, r5, lr}
  403006:	b083      	sub	sp, #12
  403008:	4614      	mov	r4, r2
    comInterface->len = sprintf((char*)comInterface->buf,
  40300a:	7bcb      	ldrb	r3, [r1, #15]
  40300c:	7b8a      	ldrb	r2, [r1, #14]
  40300e:	7c48      	ldrb	r0, [r1, #17]
  403010:	9001      	str	r0, [sp, #4]
  403012:	7c09      	ldrb	r1, [r1, #16]
  403014:	9100      	str	r1, [sp, #0]
  403016:	4908      	ldr	r1, [pc, #32]	; (403038 <setSequencer+0x50>)
  403018:	f104 001c 	add.w	r0, r4, #28
  40301c:	4d07      	ldr	r5, [pc, #28]	; (40303c <setSequencer+0x54>)
  40301e:	47a8      	blx	r5
  403020:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    return TRUE;
  403024:	2001      	movs	r0, #1
} /*** end of SetSequencer ***/
  403026:	b003      	add	sp, #12
  403028:	bd30      	pop	{r4, r5, pc}
  return FALSE;
  40302a:	2000      	movs	r0, #0
  40302c:	4770      	bx	lr
  40302e:	2000      	movs	r0, #0
  403030:	4770      	bx	lr
  403032:	2000      	movs	r0, #0
  403034:	4770      	bx	lr
  403036:	bf00      	nop
  403038:	0040895c 	.word	0x0040895c
  40303c:	00404231 	.word	0x00404231

00403040 <setBlockSize>:
{
  403040:	b510      	push	{r4, lr}
  if(*(parPtr + 0) >= BLOCK_SIZE_MIN &&  *(parPtr + 0) <= BLOCK_SIZE_MAX)
  403042:	6803      	ldr	r3, [r0, #0]
  403044:	1e5c      	subs	r4, r3, #1
  403046:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  40304a:	d301      	bcc.n	403050 <setBlockSize+0x10>
  return FALSE;
  40304c:	2000      	movs	r0, #0
} /*** end of setBlockSize ***/
  40304e:	bd10      	pop	{r4, pc}
  403050:	4614      	mov	r4, r2
    *(settings->blockSize) = (uint32_t)*(parPtr + 0);
  403052:	694a      	ldr	r2, [r1, #20]
  403054:	6013      	str	r3, [r2, #0]
    comInterface->len = sprintf((char*)comInterface->buf, "Block size set to %u\n\r",
  403056:	8802      	ldrh	r2, [r0, #0]
  403058:	4904      	ldr	r1, [pc, #16]	; (40306c <setBlockSize+0x2c>)
  40305a:	f104 001c 	add.w	r0, r4, #28
  40305e:	4b04      	ldr	r3, [pc, #16]	; (403070 <setBlockSize+0x30>)
  403060:	4798      	blx	r3
  403062:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    return TRUE;
  403066:	2001      	movs	r0, #1
  403068:	bd10      	pop	{r4, pc}
  40306a:	bf00      	nop
  40306c:	00408894 	.word	0x00408894
  403070:	00404231 	.word	0x00404231

00403074 <DacSetNumberOfRepeats>:
{
  403074:	b570      	push	{r4, r5, r6, lr}
			if(*(parPtr + 0) < DAC_CH_LOWRANGE || *(parPtr + 0) > DAC_CH_HIGHRANGE
  403076:	6803      	ldr	r3, [r0, #0]
  403078:	1e5c      	subs	r4, r3, #1
  40307a:	2c01      	cmp	r4, #1
  40307c:	d901      	bls.n	403082 <DacSetNumberOfRepeats+0xe>
			) return false; //Parameter out of range
  40307e:	2000      	movs	r0, #0
  403080:	bd70      	pop	{r4, r5, r6, pc}
			|| *(parPtr + 1) < DAC_REPEAT_NUM_MIN || *(parPtr + 1) > DAC_REPEAT_NUM_MAX
  403082:	6845      	ldr	r5, [r0, #4]
  403084:	f64f 74dc 	movw	r4, #65500	; 0xffdc
  403088:	42a5      	cmp	r5, r4
  40308a:	d901      	bls.n	403090 <DacSetNumberOfRepeats+0x1c>
			) return false; //Parameter out of range
  40308c:	2000      	movs	r0, #0
}
  40308e:	bd70      	pop	{r4, r5, r6, pc}
  403090:	4614      	mov	r4, r2
			settings->DAC[(uint16_t)*parPtr].NumOfRepeats = (uint16_t)*(parPtr + 1);
  403092:	b29b      	uxth	r3, r3
  403094:	f640 0606 	movw	r6, #2054	; 0x806
  403098:	fb06 1303 	mla	r3, r6, r3, r1
  40309c:	f8a3 582a 	strh.w	r5, [r3, #2090]	; 0x82a
  4030a0:	8802      	ldrh	r2, [r0, #0]
			settings->DAC[(uint16_t)*parPtr].NumOfRepeats);
  4030a2:	fb06 1102 	mla	r1, r6, r2, r1
			comInterface->len = sprintf((char*)comInterface->buf,
  4030a6:	f8b1 382a 	ldrh.w	r3, [r1, #2090]	; 0x82a
  4030aa:	4904      	ldr	r1, [pc, #16]	; (4030bc <DacSetNumberOfRepeats+0x48>)
  4030ac:	f104 001c 	add.w	r0, r4, #28
  4030b0:	4d03      	ldr	r5, [pc, #12]	; (4030c0 <DacSetNumberOfRepeats+0x4c>)
  4030b2:	47a8      	blx	r5
  4030b4:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
			return true;
  4030b8:	2001      	movs	r0, #1
  4030ba:	bd70      	pop	{r4, r5, r6, pc}
  4030bc:	004087c4 	.word	0x004087c4
  4030c0:	00404231 	.word	0x00404231

004030c4 <DacSetFreq>:
//Timer frequency for DAC
bool DacSetFreq (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface)
{
  4030c4:	b530      	push	{r4, r5, lr}
  4030c6:	b085      	sub	sp, #20
  4030c8:	4614      	mov	r4, r2
		comInterface->len = sprintf((char*)comInterface->buf,
  4030ca:	f8b1 3830 	ldrh.w	r3, [r1, #2096]	; 0x830
  4030ce:	f8b1 282e 	ldrh.w	r2, [r1, #2094]	; 0x82e
  4030d2:	f8b1 0836 	ldrh.w	r0, [r1, #2102]	; 0x836
  4030d6:	9002      	str	r0, [sp, #8]
  4030d8:	f8b1 0834 	ldrh.w	r0, [r1, #2100]	; 0x834
  4030dc:	9001      	str	r0, [sp, #4]
  4030de:	f8b1 1832 	ldrh.w	r1, [r1, #2098]	; 0x832
  4030e2:	9100      	str	r1, [sp, #0]
  4030e4:	4904      	ldr	r1, [pc, #16]	; (4030f8 <DacSetFreq+0x34>)
  4030e6:	f104 001c 	add.w	r0, r4, #28
  4030ea:	4d04      	ldr	r5, [pc, #16]	; (4030fc <DacSetFreq+0x38>)
  4030ec:	47a8      	blx	r5
  4030ee:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
settings->DAC[1].Lut[1]
,settings->DAC[1].Lut[2]
,settings->DAC[1].Lut[3]
,settings->DAC[1].Lut[4]
);
}
  4030f2:	b005      	add	sp, #20
  4030f4:	bd30      	pop	{r4, r5, pc}
  4030f6:	bf00      	nop
  4030f8:	00408780 	.word	0x00408780
  4030fc:	00404231 	.word	0x00404231

00403100 <DacSetLutLength>:

bool DacSetLutLength (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface)
{
  403100:	b570      	push	{r4, r5, r6, lr}
	//1. Parameter: DAC channel
	//2. Parameter: LUT length
  if(*(parPtr + 0) < DAC_CH_LOWRANGE || *(parPtr + 0) > DAC_CH_HIGHRANGE
  403102:	6803      	ldr	r3, [r0, #0]
  403104:	1e5c      	subs	r4, r3, #1
  403106:	2c01      	cmp	r4, #1
  403108:	d901      	bls.n	40310e <DacSetLutLength+0xe>
		|| *(parPtr + 1) < 1 || *(parPtr + 1) > DAC_LUT_LOCATION_HIGHRANGE+1 //Has to be above 0 and lower 1025
					 ) return false; //Parameter out of range
  40310a:	2000      	movs	r0, #0
  40310c:	bd70      	pop	{r4, r5, r6, pc}
		|| *(parPtr + 1) < 1 || *(parPtr + 1) > DAC_LUT_LOCATION_HIGHRANGE+1 //Has to be above 0 and lower 1025
  40310e:	6845      	ldr	r5, [r0, #4]
  403110:	1e6c      	subs	r4, r5, #1
  403112:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  403116:	d215      	bcs.n	403144 <DacSetLutLength+0x44>
  403118:	4614      	mov	r4, r2
  
	  /* Set parameters */
	  settings->DAC[(uint16_t)*parPtr].LutLength = (uint16_t)*(parPtr + 1);
  40311a:	b29b      	uxth	r3, r3
  40311c:	f640 0606 	movw	r6, #2054	; 0x806
  403120:	fb06 1303 	mla	r3, r6, r3, r1
  403124:	f8a3 5828 	strh.w	r5, [r3, #2088]	; 0x828
  403128:	8802      	ldrh	r2, [r0, #0]
	  /* Print msg to inform user */
	  comInterface->len = sprintf((char*)comInterface->buf,
																															"$LUT length of DAC channel %u was set to %u\n\r",
																															(uint16_t)*parPtr,
																															settings->DAC[(uint16_t)*parPtr].LutLength);
  40312a:	fb06 1102 	mla	r1, r6, r2, r1
	  comInterface->len = sprintf((char*)comInterface->buf,
  40312e:	f8b1 3828 	ldrh.w	r3, [r1, #2088]	; 0x828
  403132:	4905      	ldr	r1, [pc, #20]	; (403148 <DacSetLutLength+0x48>)
  403134:	f104 001c 	add.w	r0, r4, #28
  403138:	4d04      	ldr	r5, [pc, #16]	; (40314c <DacSetLutLength+0x4c>)
  40313a:	47a8      	blx	r5
  40313c:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
			return true;
  403140:	2001      	movs	r0, #1
  403142:	bd70      	pop	{r4, r5, r6, pc}
					 ) return false; //Parameter out of range
  403144:	2000      	movs	r0, #0
}
  403146:	bd70      	pop	{r4, r5, r6, pc}
  403148:	00408794 	.word	0x00408794
  40314c:	00404231 	.word	0x00404231

00403150 <setDACvalue>:
{
  403150:	b570      	push	{r4, r5, r6, lr}
  if( (*(parPtr + 0) >= DAC_CH_LOWRANGE && *(parPtr + 0) <= DAC_CH_HIGHRANGE) &&
  403152:	6806      	ldr	r6, [r0, #0]
  403154:	1e73      	subs	r3, r6, #1
  403156:	2b01      	cmp	r3, #1
  403158:	d901      	bls.n	40315e <setDACvalue+0xe>
  return FALSE;
  40315a:	2000      	movs	r0, #0
  40315c:	bd70      	pop	{r4, r5, r6, pc}
      (*(parPtr + 1) >= DAC_VALUE_PAR1_LOWRANGE && *(parPtr + 1) <= DAC_VALUE_PAR1_HIGHRANGE) )
  40315e:	6843      	ldr	r3, [r0, #4]
  403160:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
  403164:	3410      	adds	r4, #16
  if( (*(parPtr + 0) >= DAC_CH_LOWRANGE && *(parPtr + 0) <= DAC_CH_HIGHRANGE) &&
  403166:	f644 6520 	movw	r5, #20000	; 0x4e20
  40316a:	42ac      	cmp	r4, r5
  40316c:	d901      	bls.n	403172 <setDACvalue+0x22>
  return FALSE;
  40316e:	2000      	movs	r0, #0
} /*** end of SetDACvalue ***/
  403170:	bd70      	pop	{r4, r5, r6, pc}
  403172:	4615      	mov	r5, r2
  403174:	4604      	mov	r4, r0
    uint32_t tmp = (uint32_t)((int16_t)*(parPtr + 1) + 10000);
  403176:	b21b      	sxth	r3, r3
  403178:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
  40317c:	3310      	adds	r3, #16
    tmp *= 25;
  40317e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403182:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    tmp += 36;
  403186:	3324      	adds	r3, #36	; 0x24
    tmp *= 4095;
  403188:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    settings->DACval[((uint8_t)*parPtr) - 1] = (uint16_t)tmp;
  40318c:	b2f6      	uxtb	r6, r6
  40318e:	eb01 0646 	add.w	r6, r1, r6, lsl #1
    tmp /= 500000;
  403192:	4a09      	ldr	r2, [pc, #36]	; (4031b8 <setDACvalue+0x68>)
  403194:	fba2 2303 	umull	r2, r3, r2, r3
  403198:	0c5b      	lsrs	r3, r3, #17
    settings->DACval[((uint8_t)*parPtr) - 1] = (uint16_t)tmp;
  40319a:	8373      	strh	r3, [r6, #26]
    coreSetDacVal();
  40319c:	4b07      	ldr	r3, [pc, #28]	; (4031bc <setDACvalue+0x6c>)
  40319e:	4798      	blx	r3
    comInterface->len = sprintf((char*)comInterface->buf,
  4031a0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4031a4:	7822      	ldrb	r2, [r4, #0]
  4031a6:	4906      	ldr	r1, [pc, #24]	; (4031c0 <setDACvalue+0x70>)
  4031a8:	f105 001c 	add.w	r0, r5, #28
  4031ac:	4c05      	ldr	r4, [pc, #20]	; (4031c4 <setDACvalue+0x74>)
  4031ae:	47a0      	blx	r4
  4031b0:	f885 011c 	strb.w	r0, [r5, #284]	; 0x11c
    return TRUE;
  4031b4:	2001      	movs	r0, #1
  4031b6:	bd70      	pop	{r4, r5, r6, pc}
  4031b8:	431bde83 	.word	0x431bde83
  4031bc:	00402b91 	.word	0x00402b91
  4031c0:	004088ac 	.word	0x004088ac
  4031c4:	00404231 	.word	0x00404231

004031c8 <setADCgain>:
{
  4031c8:	b538      	push	{r3, r4, r5, lr}
  if( ( (*(parPtr + 0) > 0) && (*(parPtr + 0) <= 4) ) &&
  4031ca:	6803      	ldr	r3, [r0, #0]
  4031cc:	1e5c      	subs	r4, r3, #1
  4031ce:	2c03      	cmp	r4, #3
  4031d0:	d815      	bhi.n	4031fe <setADCgain+0x36>
      ( (*(parPtr + 1) == ADC_GAIN_0_5) || (*(parPtr + 1) == ADC_GAIN_1) ||
  4031d2:	6844      	ldr	r4, [r0, #4]
  if( ( (*(parPtr + 0) > 0) && (*(parPtr + 0) <= 4) ) &&
  4031d4:	2c02      	cmp	r4, #2
  4031d6:	d901      	bls.n	4031dc <setADCgain+0x14>
  return FALSE;
  4031d8:	2000      	movs	r0, #0
} /*** end of SetDACvalue ***/
  4031da:	bd38      	pop	{r3, r4, r5, pc}
  4031dc:	4615      	mov	r5, r2
    settings->ADCgain[*(parPtr + 0) - 1] = (uint8_t)*(parPtr + 1);
  4031de:	440b      	add	r3, r1
  4031e0:	71dc      	strb	r4, [r3, #7]
    comInterface->len = sprintf((char*)comInterface->buf,
  4031e2:	f990 3004 	ldrsb.w	r3, [r0, #4]
  4031e6:	7802      	ldrb	r2, [r0, #0]
  4031e8:	4906      	ldr	r1, [pc, #24]	; (403204 <setADCgain+0x3c>)
  4031ea:	f105 001c 	add.w	r0, r5, #28
  4031ee:	4c06      	ldr	r4, [pc, #24]	; (403208 <setADCgain+0x40>)
  4031f0:	47a0      	blx	r4
  4031f2:	f885 011c 	strb.w	r0, [r5, #284]	; 0x11c
    adcSetGain();
  4031f6:	4b05      	ldr	r3, [pc, #20]	; (40320c <setADCgain+0x44>)
  4031f8:	4798      	blx	r3
    return TRUE;
  4031fa:	2001      	movs	r0, #1
  4031fc:	bd38      	pop	{r3, r4, r5, pc}
  return FALSE;
  4031fe:	2000      	movs	r0, #0
  403200:	bd38      	pop	{r3, r4, r5, pc}
  403202:	bf00      	nop
  403204:	004087f8 	.word	0x004087f8
  403208:	00404231 	.word	0x00404231
  40320c:	004029c9 	.word	0x004029c9

00403210 <setADClowRes>:
{
  403210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( (*(parPtr + 0) == ADC_RES_12_BITS) || (*(parPtr + 0) == ADC_RES_10_BITS) )
  403212:	6803      	ldr	r3, [r0, #0]
  403214:	2b01      	cmp	r3, #1
  403216:	d901      	bls.n	40321c <setADClowRes+0xc>
  return FALSE;
  403218:	2000      	movs	r0, #0
} /*** end of setADClowRes ***/
  40321a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40321c:	4614      	mov	r4, r2
    settings->ADClowRes = (uint8_t)*(parPtr + 0);
  40321e:	b2db      	uxtb	r3, r3
  403220:	730b      	strb	r3, [r1, #12]
    if(settings->ADClowRes)
  403222:	b1bb      	cbz	r3, 403254 <setADClowRes+0x44>
      comInterface->len = sprintf((char*)comInterface->buf,
  403224:	4f16      	ldr	r7, [pc, #88]	; (403280 <setADClowRes+0x70>)
  403226:	f102 051c 	add.w	r5, r2, #28
  40322a:	f107 0e20 	add.w	lr, r7, #32
  40322e:	463e      	mov	r6, r7
  403230:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403232:	6028      	str	r0, [r5, #0]
  403234:	6069      	str	r1, [r5, #4]
  403236:	60aa      	str	r2, [r5, #8]
  403238:	60eb      	str	r3, [r5, #12]
  40323a:	4637      	mov	r7, r6
  40323c:	3510      	adds	r5, #16
  40323e:	4576      	cmp	r6, lr
  403240:	d1f5      	bne.n	40322e <setADClowRes+0x1e>
  403242:	7833      	ldrb	r3, [r6, #0]
  403244:	702b      	strb	r3, [r5, #0]
  403246:	2320      	movs	r3, #32
  403248:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
    adcSetRes();
  40324c:	4b0d      	ldr	r3, [pc, #52]	; (403284 <setADClowRes+0x74>)
  40324e:	4798      	blx	r3
    return TRUE;
  403250:	2001      	movs	r0, #1
  403252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      comInterface->len = sprintf((char*)comInterface->buf,
  403254:	4f0c      	ldr	r7, [pc, #48]	; (403288 <setADClowRes+0x78>)
  403256:	f102 051c 	add.w	r5, r2, #28
  40325a:	f107 0e20 	add.w	lr, r7, #32
  40325e:	463e      	mov	r6, r7
  403260:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403262:	6028      	str	r0, [r5, #0]
  403264:	6069      	str	r1, [r5, #4]
  403266:	60aa      	str	r2, [r5, #8]
  403268:	60eb      	str	r3, [r5, #12]
  40326a:	4637      	mov	r7, r6
  40326c:	3510      	adds	r5, #16
  40326e:	4576      	cmp	r6, lr
  403270:	d1f5      	bne.n	40325e <setADClowRes+0x4e>
  403272:	7833      	ldrb	r3, [r6, #0]
  403274:	702b      	strb	r3, [r5, #0]
  403276:	2320      	movs	r3, #32
  403278:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
  40327c:	e7e6      	b.n	40324c <setADClowRes+0x3c>
  40327e:	bf00      	nop
  403280:	00408818 	.word	0x00408818
  403284:	00402a01 	.word	0x00402a01
  403288:	0040883c 	.word	0x0040883c

0040328c <getPar>:
{
  40328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403290:	b089      	sub	sp, #36	; 0x24
  403292:	4681      	mov	r9, r0
  403294:	4688      	mov	r8, r1
  403296:	4616      	mov	r6, r2
  403298:	461c      	mov	r4, r3
  40329a:	f10d 0303 	add.w	r3, sp, #3
  40329e:	f10d 001f 	add.w	r0, sp, #31
      buf[x][y] = 0;
  4032a2:	2100      	movs	r1, #0
  4032a4:	1dda      	adds	r2, r3, #7
  4032a6:	f803 1f01 	strb.w	r1, [r3, #1]!
    for(uint8_t y = 0; y < MAX_PARAMETER_LENGHT; y++)
  4032aa:	429a      	cmp	r2, r3
  4032ac:	d1fb      	bne.n	4032a6 <getPar+0x1a>
  4032ae:	4613      	mov	r3, r2
  for(uint8_t x = 0; x < MAX_PARAMETER_COUNT; x++)
  4032b0:	4290      	cmp	r0, r2
  4032b2:	d1f7      	bne.n	4032a4 <getPar+0x18>
  4032b4:	f109 35ff 	add.w	r5, r9, #4294967295
  4032b8:	b2ed      	uxtb	r5, r5
  4032ba:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  4032be:	2700      	movs	r7, #0
  4032c0:	46ba      	mov	sl, r7
        buf[currentPar][idx] = 0;
  4032c2:	46bb      	mov	fp, r7
  while(!result && timeout)
  4032c4:	f1b8 0f00 	cmp.w	r8, #0
  4032c8:	d061      	beq.n	40338e <getPar+0x102>
    if(comInterface->available())
  4032ca:	6863      	ldr	r3, [r4, #4]
  4032cc:	4798      	blx	r3
  4032ce:	2800      	cmp	r0, #0
  4032d0:	d0fb      	beq.n	4032ca <getPar+0x3e>
      newChar = comInterface->read();
  4032d2:	68a3      	ldr	r3, [r4, #8]
  4032d4:	4798      	blx	r3
      if(newChar == '\r')
  4032d6:	280d      	cmp	r0, #13
  4032d8:	d016      	beq.n	403308 <getPar+0x7c>
      else if(newChar == ',')
  4032da:	282c      	cmp	r0, #44	; 0x2c
  4032dc:	d030      	beq.n	403340 <getPar+0xb4>
      else if(newChar == '\b')
  4032de:	2808      	cmp	r0, #8
  4032e0:	d032      	beq.n	403348 <getPar+0xbc>
      else if((newChar >= '0' && newChar <= '9') || newChar == '-')
  4032e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  4032e6:	b2db      	uxtb	r3, r3
  4032e8:	2b09      	cmp	r3, #9
  4032ea:	d901      	bls.n	4032f0 <getPar+0x64>
  4032ec:	282d      	cmp	r0, #45	; 0x2d
  4032ee:	d1e9      	bne.n	4032c4 <getPar+0x38>
        buf[currentPar][idx] = newChar;
  4032f0:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
  4032f4:	aa08      	add	r2, sp, #32
  4032f6:	4413      	add	r3, r2
  4032f8:	4453      	add	r3, sl
  4032fa:	f803 0c1c 	strb.w	r0, [r3, #-28]
        idx++;
  4032fe:	f10a 0a01 	add.w	sl, sl, #1
  403302:	fa5f fa8a 	uxtb.w	sl, sl
  403306:	e7dd      	b.n	4032c4 <getPar+0x38>
        if((parCount == (currentPar + 1) && idx) || !parCount)
  403308:	1c7b      	adds	r3, r7, #1
  40330a:	4599      	cmp	r9, r3
  40330c:	d004      	beq.n	403318 <getPar+0x8c>
  40330e:	f1b9 0f00 	cmp.w	r9, #0
  403312:	d011      	beq.n	403338 <getPar+0xac>
        else timeout = 0;
  403314:	46d8      	mov	r8, fp
  403316:	e7d5      	b.n	4032c4 <getPar+0x38>
        if((parCount == (currentPar + 1) && idx) || !parCount)
  403318:	f1ba 0f00 	cmp.w	sl, #0
  40331c:	d0f7      	beq.n	40330e <getPar+0x82>
          for(uint8_t i=0; i<parCount; i++) *(parPtr + i)=(int32_t)atoll((char*)buf[i]);
  40331e:	f1b9 0f00 	cmp.w	r9, #0
  403322:	d009      	beq.n	403338 <getPar+0xac>
  403324:	ac01      	add	r4, sp, #4
  403326:	3e04      	subs	r6, #4
  403328:	4f1a      	ldr	r7, [pc, #104]	; (403394 <getPar+0x108>)
  40332a:	4620      	mov	r0, r4
  40332c:	47b8      	blx	r7
  40332e:	f846 0f04 	str.w	r0, [r6, #4]!
  403332:	3407      	adds	r4, #7
  403334:	42ae      	cmp	r6, r5
  403336:	d1f8      	bne.n	40332a <getPar+0x9e>
  while(!result && timeout)
  403338:	2001      	movs	r0, #1
} /*** end of getPar ***/
  40333a:	b009      	add	sp, #36	; 0x24
  40333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        currentPar++;
  403340:	3701      	adds	r7, #1
  403342:	b2ff      	uxtb	r7, r7
        idx = 0;
  403344:	46da      	mov	sl, fp
  403346:	e7bd      	b.n	4032c4 <getPar+0x38>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403348:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
  40334c:	aa08      	add	r2, sp, #32
  40334e:	4413      	add	r3, r2
  403350:	4453      	add	r3, sl
  403352:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
  403356:	2b2c      	cmp	r3, #44	; 0x2c
  403358:	d007      	beq.n	40336a <getPar+0xde>
        else if(idx) idx--;
  40335a:	f1ba 0f00 	cmp.w	sl, #0
  40335e:	d00d      	beq.n	40337c <getPar+0xf0>
  403360:	f10a 3aff 	add.w	sl, sl, #4294967295
  403364:	fa5f fa8a 	uxtb.w	sl, sl
  403368:	e009      	b.n	40337e <getPar+0xf2>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  40336a:	2f00      	cmp	r7, #0
  40336c:	d0f5      	beq.n	40335a <getPar+0xce>
          currentPar--;
  40336e:	3f01      	subs	r7, #1
  403370:	b2ff      	uxtb	r7, r7
          idx = prevIdx + 1;
  403372:	f10a 0a01 	add.w	sl, sl, #1
  403376:	fa5f fa8a 	uxtb.w	sl, sl
  40337a:	e000      	b.n	40337e <getPar+0xf2>
        else timeout = 0;
  40337c:	46d8      	mov	r8, fp
        buf[currentPar][idx] = 0;
  40337e:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
  403382:	aa08      	add	r2, sp, #32
  403384:	4413      	add	r3, r2
  403386:	4453      	add	r3, sl
  403388:	f803 bc1c 	strb.w	fp, [r3, #-28]
  40338c:	e79a      	b.n	4032c4 <getPar+0x38>
  while(!result && timeout)
  40338e:	2000      	movs	r0, #0
  403390:	e7d3      	b.n	40333a <getPar+0xae>
  403392:	bf00      	nop
  403394:	00404051 	.word	0x00404051

00403398 <parseCommand>:
{
  403398:	b510      	push	{r4, lr}
  switch (CMD)
  40339a:	3841      	subs	r0, #65	; 0x41
  40339c:	2813      	cmp	r0, #19
  40339e:	f200 80ec 	bhi.w	40357a <parseCommand+0x1e2>
  4033a2:	e8df f010 	tbh	[pc, r0, lsl #1]
  4033a6:	0042      	.short	0x0042
  4033a8:	00960066 	.word	0x00960066
  4033ac:	008a007e 	.word	0x008a007e
  4033b0:	0072004e 	.word	0x0072004e
  4033b4:	00ae00a2 	.word	0x00ae00a2
  4033b8:	00c600ba 	.word	0x00c600ba
  4033bc:	002a005a 	.word	0x002a005a
  4033c0:	00d200de 	.word	0x00d200de
  4033c4:	00ea00ea 	.word	0x00ea00ea
  4033c8:	00140036 	.word	0x00140036
  4033cc:	001f      	.short	0x001f
      parsedCMD->cmd = CMD_START_ACQ;
  4033ce:	2353      	movs	r3, #83	; 0x53
  4033d0:	700b      	strb	r3, [r1, #0]
      parsedCMD->funcPtr = startACQ;
  4033d2:	4b6c      	ldr	r3, [pc, #432]	; (403584 <parseCommand+0x1ec>)
  4033d4:	604b      	str	r3, [r1, #4]
      result = getPar(0, PARAMETER_TIMEOUT, NULL, comInterface);
  4033d6:	4613      	mov	r3, r2
  4033d8:	2200      	movs	r2, #0
  4033da:	2164      	movs	r1, #100	; 0x64
  4033dc:	4610      	mov	r0, r2
  4033de:	4c6a      	ldr	r4, [pc, #424]	; (403588 <parseCommand+0x1f0>)
  4033e0:	47a0      	blx	r4
      break;
  4033e2:	bd10      	pop	{r4, pc}
      parsedCMD->cmd = CMD_STOP_ACQ;
  4033e4:	2354      	movs	r3, #84	; 0x54
  4033e6:	700b      	strb	r3, [r1, #0]
      parsedCMD->funcPtr = stopACQ;
  4033e8:	4b68      	ldr	r3, [pc, #416]	; (40358c <parseCommand+0x1f4>)
  4033ea:	604b      	str	r3, [r1, #4]
      result = getPar(0, PARAMETER_TIMEOUT, NULL, comInterface);
  4033ec:	4613      	mov	r3, r2
  4033ee:	2200      	movs	r2, #0
  4033f0:	2164      	movs	r1, #100	; 0x64
  4033f2:	4610      	mov	r0, r2
  4033f4:	4c64      	ldr	r4, [pc, #400]	; (403588 <parseCommand+0x1f0>)
  4033f6:	47a0      	blx	r4
      break;
  4033f8:	bd10      	pop	{r4, pc}
      parsedCMD->cmd = CMD_SET_MODE;
  4033fa:	234d      	movs	r3, #77	; 0x4d
  4033fc:	700b      	strb	r3, [r1, #0]
      parsedCMD->funcPtr = setMode;
  4033fe:	4b64      	ldr	r3, [pc, #400]	; (403590 <parseCommand+0x1f8>)
  403400:	604b      	str	r3, [r1, #4]
      result = getPar(1, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  403402:	4613      	mov	r3, r2
  403404:	f101 0208 	add.w	r2, r1, #8
  403408:	2164      	movs	r1, #100	; 0x64
  40340a:	2001      	movs	r0, #1
  40340c:	4c5e      	ldr	r4, [pc, #376]	; (403588 <parseCommand+0x1f0>)
  40340e:	47a0      	blx	r4
      break;
  403410:	bd10      	pop	{r4, pc}
      parsedCMD->cmd = CMD_SET_SAMPLE_PERIOD;
  403412:	2352      	movs	r3, #82	; 0x52
  403414:	700b      	strb	r3, [r1, #0]
      parsedCMD->funcPtr = setSamplePeriod;
  403416:	4b5f      	ldr	r3, [pc, #380]	; (403594 <parseCommand+0x1fc>)
  403418:	604b      	str	r3, [r1, #4]
      result = getPar(1, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  40341a:	4613      	mov	r3, r2
  40341c:	f101 0208 	add.w	r2, r1, #8
  403420:	2164      	movs	r1, #100	; 0x64
  403422:	2001      	movs	r0, #1
  403424:	4c58      	ldr	r4, [pc, #352]	; (403588 <parseCommand+0x1f0>)
  403426:	47a0      	blx	r4
      break;
  403428:	bd10      	pop	{r4, pc}
      parsedCMD->cmd =  CMD_SET_AVERAGE_COUNT;
  40342a:	2341      	movs	r3, #65	; 0x41
  40342c:	700b      	strb	r3, [r1, #0]
      parsedCMD->funcPtr = setAverageCount;
  40342e:	4b5a      	ldr	r3, [pc, #360]	; (403598 <parseCommand+0x200>)
  403430:	604b      	str	r3, [r1, #4]
      result = getPar(1, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  403432:	4613      	mov	r3, r2
  403434:	f101 0208 	add.w	r2, r1, #8
  403438:	2164      	movs	r1, #100	; 0x64
  40343a:	2001      	movs	r0, #1
  40343c:	4c52      	ldr	r4, [pc, #328]	; (403588 <parseCommand+0x1f0>)
  40343e:	47a0      	blx	r4
      break;
  403440:	bd10      	pop	{r4, pc}
      parsedCMD->cmd =  CMD_SET_MEASURMENT_COUNT;
  403442:	2346      	movs	r3, #70	; 0x46
  403444:	700b      	strb	r3, [r1, #0]
      parsedCMD->funcPtr = setMeasurmentCount;
  403446:	4b55      	ldr	r3, [pc, #340]	; (40359c <parseCommand+0x204>)
  403448:	604b      	str	r3, [r1, #4]
      result = getPar(1, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  40344a:	4613      	mov	r3, r2
  40344c:	f101 0208 	add.w	r2, r1, #8
  403450:	2164      	movs	r1, #100	; 0x64
  403452:	2001      	movs	r0, #1
  403454:	4c4c      	ldr	r4, [pc, #304]	; (403588 <parseCommand+0x1f0>)
  403456:	47a0      	blx	r4
      break;
  403458:	bd10      	pop	{r4, pc}
      parsedCMD->cmd =  CMD_SET_ADC_LOW_RESOLUTION;
  40345a:	234c      	movs	r3, #76	; 0x4c
  40345c:	700b      	strb	r3, [r1, #0]
      parsedCMD->funcPtr = setADClowRes;
  40345e:	4b50      	ldr	r3, [pc, #320]	; (4035a0 <parseCommand+0x208>)
  403460:	604b      	str	r3, [r1, #4]
      result = getPar(1, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  403462:	4613      	mov	r3, r2
  403464:	f101 0208 	add.w	r2, r1, #8
  403468:	2164      	movs	r1, #100	; 0x64
  40346a:	2001      	movs	r0, #1
  40346c:	4c46      	ldr	r4, [pc, #280]	; (403588 <parseCommand+0x1f0>)
  40346e:	47a0      	blx	r4
      break;
  403470:	bd10      	pop	{r4, pc}
      parsedCMD->cmd =  CMD_SET_BLOCK_SIZE;
  403472:	2342      	movs	r3, #66	; 0x42
  403474:	700b      	strb	r3, [r1, #0]
      parsedCMD->funcPtr = setBlockSize;
  403476:	4b4b      	ldr	r3, [pc, #300]	; (4035a4 <parseCommand+0x20c>)
  403478:	604b      	str	r3, [r1, #4]
      result = getPar(1, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  40347a:	4613      	mov	r3, r2
  40347c:	f101 0208 	add.w	r2, r1, #8
  403480:	2164      	movs	r1, #100	; 0x64
  403482:	2001      	movs	r0, #1
  403484:	4c40      	ldr	r4, [pc, #256]	; (403588 <parseCommand+0x1f0>)
  403486:	47a0      	blx	r4
      break;
  403488:	bd10      	pop	{r4, pc}
      parsedCMD->cmd =  CMD_SET_ADC_GAIN;
  40348a:	2347      	movs	r3, #71	; 0x47
  40348c:	700b      	strb	r3, [r1, #0]
      parsedCMD->funcPtr = setADCgain;
  40348e:	4b46      	ldr	r3, [pc, #280]	; (4035a8 <parseCommand+0x210>)
  403490:	604b      	str	r3, [r1, #4]
      result = getPar(2, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  403492:	4613      	mov	r3, r2
  403494:	f101 0208 	add.w	r2, r1, #8
  403498:	2164      	movs	r1, #100	; 0x64
  40349a:	2002      	movs	r0, #2
  40349c:	4c3a      	ldr	r4, [pc, #232]	; (403588 <parseCommand+0x1f0>)
  40349e:	47a0      	blx	r4
      break;
  4034a0:	bd10      	pop	{r4, pc}
      parsedCMD->cmd =  CMD_SET_DAC_VALUE;
  4034a2:	2344      	movs	r3, #68	; 0x44
  4034a4:	700b      	strb	r3, [r1, #0]
      parsedCMD->funcPtr = setDACvalue;
  4034a6:	4b41      	ldr	r3, [pc, #260]	; (4035ac <parseCommand+0x214>)
  4034a8:	604b      	str	r3, [r1, #4]
      result = getPar(2, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  4034aa:	4613      	mov	r3, r2
  4034ac:	f101 0208 	add.w	r2, r1, #8
  4034b0:	2164      	movs	r1, #100	; 0x64
  4034b2:	2002      	movs	r0, #2
  4034b4:	4c34      	ldr	r4, [pc, #208]	; (403588 <parseCommand+0x1f0>)
  4034b6:	47a0      	blx	r4
      break;
  4034b8:	bd10      	pop	{r4, pc}
      parsedCMD->cmd =  CMD_SET_SEQUENCER;
  4034ba:	2345      	movs	r3, #69	; 0x45
  4034bc:	700b      	strb	r3, [r1, #0]
      parsedCMD->funcPtr = setSequencer;
  4034be:	4b3c      	ldr	r3, [pc, #240]	; (4035b0 <parseCommand+0x218>)
  4034c0:	604b      	str	r3, [r1, #4]
      result = getPar(4, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  4034c2:	4613      	mov	r3, r2
  4034c4:	f101 0208 	add.w	r2, r1, #8
  4034c8:	2164      	movs	r1, #100	; 0x64
  4034ca:	2004      	movs	r0, #4
  4034cc:	4c2e      	ldr	r4, [pc, #184]	; (403588 <parseCommand+0x1f0>)
  4034ce:	47a0      	blx	r4
      break;
  4034d0:	bd10      	pop	{r4, pc}
		parsedCMD->cmd =  CMD_SET_REPEAT_NUM;
  4034d2:	2343      	movs	r3, #67	; 0x43
  4034d4:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr = DacSetNumberOfRepeats;
  4034d6:	4b37      	ldr	r3, [pc, #220]	; (4035b4 <parseCommand+0x21c>)
  4034d8:	604b      	str	r3, [r1, #4]
		result = getPar(2, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  4034da:	4613      	mov	r3, r2
  4034dc:	f101 0208 	add.w	r2, r1, #8
  4034e0:	2164      	movs	r1, #100	; 0x64
  4034e2:	2002      	movs	r0, #2
  4034e4:	4c28      	ldr	r4, [pc, #160]	; (403588 <parseCommand+0x1f0>)
  4034e6:	47a0      	blx	r4
		break;
  4034e8:	bd10      	pop	{r4, pc}
		parsedCMD->cmd =  CMD_SET_DAC_FREQ;
  4034ea:	2348      	movs	r3, #72	; 0x48
  4034ec:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr = DacSetFreq;
  4034ee:	4b32      	ldr	r3, [pc, #200]	; (4035b8 <parseCommand+0x220>)
  4034f0:	604b      	str	r3, [r1, #4]
		result = getPar(1, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  4034f2:	4613      	mov	r3, r2
  4034f4:	f101 0208 	add.w	r2, r1, #8
  4034f8:	2164      	movs	r1, #100	; 0x64
  4034fa:	2001      	movs	r0, #1
  4034fc:	4c22      	ldr	r4, [pc, #136]	; (403588 <parseCommand+0x1f0>)
  4034fe:	47a0      	blx	r4
		break;
  403500:	bd10      	pop	{r4, pc}
		parsedCMD->cmd =  CMD_SET_DAC_SEQUENCER;
  403502:	2349      	movs	r3, #73	; 0x49
  403504:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr = DacSequencer;
  403506:	4b2d      	ldr	r3, [pc, #180]	; (4035bc <parseCommand+0x224>)
  403508:	604b      	str	r3, [r1, #4]
		result = getPar(2, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  40350a:	4613      	mov	r3, r2
  40350c:	f101 0208 	add.w	r2, r1, #8
  403510:	2164      	movs	r1, #100	; 0x64
  403512:	2002      	movs	r0, #2
  403514:	4c1c      	ldr	r4, [pc, #112]	; (403588 <parseCommand+0x1f0>)
  403516:	47a0      	blx	r4
		break;
  403518:	bd10      	pop	{r4, pc}
		parsedCMD->cmd =  CMD_SET_DAC_LUT;
  40351a:	234a      	movs	r3, #74	; 0x4a
  40351c:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr = SetLutValues;
  40351e:	4b28      	ldr	r3, [pc, #160]	; (4035c0 <parseCommand+0x228>)
  403520:	604b      	str	r3, [r1, #4]
		result = getPar(3, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  403522:	4613      	mov	r3, r2
  403524:	f101 0208 	add.w	r2, r1, #8
  403528:	2164      	movs	r1, #100	; 0x64
  40352a:	2003      	movs	r0, #3
  40352c:	4c16      	ldr	r4, [pc, #88]	; (403588 <parseCommand+0x1f0>)
  40352e:	47a0      	blx	r4
		break;
  403530:	bd10      	pop	{r4, pc}
		parsedCMD->cmd =  CMD_DAC_STOP;
  403532:	234b      	movs	r3, #75	; 0x4b
  403534:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr = DacStop;
  403536:	4b23      	ldr	r3, [pc, #140]	; (4035c4 <parseCommand+0x22c>)
  403538:	604b      	str	r3, [r1, #4]
		result = getPar(1, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  40353a:	4613      	mov	r3, r2
  40353c:	f101 0208 	add.w	r2, r1, #8
  403540:	2164      	movs	r1, #100	; 0x64
  403542:	2001      	movs	r0, #1
  403544:	4c10      	ldr	r4, [pc, #64]	; (403588 <parseCommand+0x1f0>)
  403546:	47a0      	blx	r4
		break;
  403548:	bd10      	pop	{r4, pc}
		parsedCMD->cmd =  CMD_DAC_START;
  40354a:	234f      	movs	r3, #79	; 0x4f
  40354c:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr = DacStart;
  40354e:	4b1e      	ldr	r3, [pc, #120]	; (4035c8 <parseCommand+0x230>)
  403550:	604b      	str	r3, [r1, #4]
		result = getPar(1, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  403552:	4613      	mov	r3, r2
  403554:	f101 0208 	add.w	r2, r1, #8
  403558:	2164      	movs	r1, #100	; 0x64
  40355a:	2001      	movs	r0, #1
  40355c:	4c0a      	ldr	r4, [pc, #40]	; (403588 <parseCommand+0x1f0>)
  40355e:	47a0      	blx	r4
		break;
  403560:	bd10      	pop	{r4, pc}
		parsedCMD->cmd =  CMD_DAC_LUT_LENGTH;
  403562:	234e      	movs	r3, #78	; 0x4e
  403564:	700b      	strb	r3, [r1, #0]
		parsedCMD->funcPtr = DacSetLutLength;
  403566:	4b19      	ldr	r3, [pc, #100]	; (4035cc <parseCommand+0x234>)
  403568:	604b      	str	r3, [r1, #4]
		result = getPar(2, PARAMETER_TIMEOUT, parsedCMD->par, comInterface);
  40356a:	4613      	mov	r3, r2
  40356c:	f101 0208 	add.w	r2, r1, #8
  403570:	2164      	movs	r1, #100	; 0x64
  403572:	2002      	movs	r0, #2
  403574:	4c04      	ldr	r4, [pc, #16]	; (403588 <parseCommand+0x1f0>)
  403576:	47a0      	blx	r4
		break;
  403578:	bd10      	pop	{r4, pc}
      parsedCMD->cmd = 0;
  40357a:	2000      	movs	r0, #0
  40357c:	7008      	strb	r0, [r1, #0]
      parsedCMD->funcPtr = NULL;
  40357e:	6048      	str	r0, [r1, #4]
} /*** end of parseCommand ***/
  403580:	bd10      	pop	{r4, pc}
  403582:	bf00      	nop
  403584:	00402e21 	.word	0x00402e21
  403588:	0040328d 	.word	0x0040328d
  40358c:	00402f15 	.word	0x00402f15
  403590:	00402e51 	.word	0x00402e51
  403594:	00402f45 	.word	0x00402f45
  403598:	00402f89 	.word	0x00402f89
  40359c:	00402fb9 	.word	0x00402fb9
  4035a0:	00403211 	.word	0x00403211
  4035a4:	00403041 	.word	0x00403041
  4035a8:	004031c9 	.word	0x004031c9
  4035ac:	00403151 	.word	0x00403151
  4035b0:	00402fe9 	.word	0x00402fe9
  4035b4:	00403075 	.word	0x00403075
  4035b8:	004030c5 	.word	0x004030c5
  4035bc:	00402e1d 	.word	0x00402e1d
  4035c0:	00402ec1 	.word	0x00402ec1
  4035c4:	00402e19 	.word	0x00402e19
  4035c8:	00402e1b 	.word	0x00402e1b
  4035cc:	00403101 	.word	0x00403101

004035d0 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  4035d0:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4035d2:	213e      	movs	r1, #62	; 0x3e
  4035d4:	2000      	movs	r0, #0
  4035d6:	4b0a      	ldr	r3, [pc, #40]	; (403600 <sysclk_enable_usb+0x30>)
  4035d8:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4035da:	4c0a      	ldr	r4, [pc, #40]	; (403604 <sysclk_enable_usb+0x34>)
  4035dc:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4035de:	2800      	cmp	r0, #0
  4035e0:	d0fc      	beq.n	4035dc <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  4035e2:	4b09      	ldr	r3, [pc, #36]	; (403608 <sysclk_enable_usb+0x38>)
  4035e4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4035e6:	4a09      	ldr	r2, [pc, #36]	; (40360c <sysclk_enable_usb+0x3c>)
  4035e8:	4b09      	ldr	r3, [pc, #36]	; (403610 <sysclk_enable_usb+0x40>)
  4035ea:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  4035ec:	4c09      	ldr	r4, [pc, #36]	; (403614 <sysclk_enable_usb+0x44>)
  4035ee:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4035f0:	2800      	cmp	r0, #0
  4035f2:	d0fc      	beq.n	4035ee <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  4035f4:	2001      	movs	r0, #1
  4035f6:	4b08      	ldr	r3, [pc, #32]	; (403618 <sysclk_enable_usb+0x48>)
  4035f8:	4798      	blx	r3
		pmc_enable_udpck();
  4035fa:	4b08      	ldr	r3, [pc, #32]	; (40361c <sysclk_enable_usb+0x4c>)
  4035fc:	4798      	blx	r3
  4035fe:	bd10      	pop	{r4, pc}
  403600:	0040379d 	.word	0x0040379d
  403604:	004037f1 	.word	0x004037f1
  403608:	00403821 	.word	0x00403821
  40360c:	00113f03 	.word	0x00113f03
  403610:	400e0400 	.word	0x400e0400
  403614:	0040382d 	.word	0x0040382d
  403618:	004038e5 	.word	0x004038e5
  40361c:	004038f9 	.word	0x004038f9

00403620 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  403620:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  403622:	480e      	ldr	r0, [pc, #56]	; (40365c <sysclk_init+0x3c>)
  403624:	4b0e      	ldr	r3, [pc, #56]	; (403660 <sysclk_init+0x40>)
  403626:	4798      	blx	r3
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403628:	213e      	movs	r1, #62	; 0x3e
  40362a:	2000      	movs	r0, #0
  40362c:	4b0d      	ldr	r3, [pc, #52]	; (403664 <sysclk_init+0x44>)
  40362e:	4798      	blx	r3
		return pmc_osc_is_ready_mainck();
  403630:	4c0d      	ldr	r4, [pc, #52]	; (403668 <sysclk_init+0x48>)
  403632:	47a0      	blx	r4
  403634:	2800      	cmp	r0, #0
  403636:	d0fc      	beq.n	403632 <sysclk_init+0x12>
		pmc_disable_pllack(); // Always stop PLL first!
  403638:	4b0c      	ldr	r3, [pc, #48]	; (40366c <sysclk_init+0x4c>)
  40363a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40363c:	4a0c      	ldr	r2, [pc, #48]	; (403670 <sysclk_init+0x50>)
  40363e:	4b0d      	ldr	r3, [pc, #52]	; (403674 <sysclk_init+0x54>)
  403640:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
  403642:	4c0d      	ldr	r4, [pc, #52]	; (403678 <sysclk_init+0x58>)
  403644:	47a0      	blx	r4
  403646:	2800      	cmp	r0, #0
  403648:	d0fc      	beq.n	403644 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40364a:	2010      	movs	r0, #16
  40364c:	4b0b      	ldr	r3, [pc, #44]	; (40367c <sysclk_init+0x5c>)
  40364e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403650:	4b0b      	ldr	r3, [pc, #44]	; (403680 <sysclk_init+0x60>)
  403652:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  403654:	4801      	ldr	r0, [pc, #4]	; (40365c <sysclk_init+0x3c>)
  403656:	4b02      	ldr	r3, [pc, #8]	; (403660 <sysclk_init+0x40>)
  403658:	4798      	blx	r3
  40365a:	bd10      	pop	{r4, pc}
  40365c:	03d09000 	.word	0x03d09000
  403660:	200000a1 	.word	0x200000a1
  403664:	0040379d 	.word	0x0040379d
  403668:	004037f1 	.word	0x004037f1
  40366c:	00403801 	.word	0x00403801
  403670:	20173f03 	.word	0x20173f03
  403674:	400e0400 	.word	0x400e0400
  403678:	00403811 	.word	0x00403811
  40367c:	00403739 	.word	0x00403739
  403680:	00403a5d 	.word	0x00403a5d

00403684 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  403684:	2301      	movs	r3, #1
  403686:	6003      	str	r3, [r0, #0]
  403688:	4770      	bx	lr

0040368a <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  40368a:	b929      	cbnz	r1, 403698 <dacc_set_transfer_mode+0xe>
		p_dacc->DACC_MR |= DACC_MR_ONE;
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
		p_dacc->DACC_MR = ul_mode;
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  40368c:	6843      	ldr	r3, [r0, #4]
  40368e:	f023 0310 	bic.w	r3, r3, #16
  403692:	6043      	str	r3, [r0, #4]
#endif
	}
	return DACC_RC_OK;
}
  403694:	2000      	movs	r0, #0
  403696:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  403698:	6843      	ldr	r3, [r0, #4]
  40369a:	f043 0310 	orr.w	r3, r3, #16
  40369e:	6043      	str	r3, [r0, #4]
  4036a0:	e7f8      	b.n	403694 <dacc_set_transfer_mode+0xa>

004036a2 <dacc_get_interrupt_status>:
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
	return p_dacc->DACC_ISR;
  4036a2:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  4036a4:	4770      	bx	lr

004036a6 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  4036a6:	6201      	str	r1, [r0, #32]
  4036a8:	4770      	bx	lr

004036aa <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  4036aa:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  4036ac:	2901      	cmp	r1, #1
  4036ae:	d901      	bls.n	4036b4 <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  4036b0:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  4036b2:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  4036b4:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  4036b8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  4036bc:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  4036be:	2000      	movs	r0, #0
  4036c0:	4770      	bx	lr

004036c2 <dacc_set_power_save>:
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_power_save(Dacc *p_dacc,
		uint32_t ul_sleep_mode, uint32_t ul_fast_wakeup_mode)
{
	if (ul_sleep_mode) {
  4036c2:	b151      	cbz	r1, 4036da <dacc_set_power_save+0x18>
		p_dacc->DACC_MR |= DACC_MR_SLEEP;
  4036c4:	6843      	ldr	r3, [r0, #4]
  4036c6:	f043 0320 	orr.w	r3, r3, #32
  4036ca:	6043      	str	r3, [r0, #4]
	} else {
		p_dacc->DACC_MR &= (~DACC_MR_SLEEP);
	}
	if (ul_fast_wakeup_mode) {
  4036cc:	b952      	cbnz	r2, 4036e4 <dacc_set_power_save+0x22>
		p_dacc->DACC_MR |= DACC_MR_FASTWKUP;
	} else {
		p_dacc->DACC_MR &= (~DACC_MR_FASTWKUP);
  4036ce:	6843      	ldr	r3, [r0, #4]
  4036d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4036d4:	6043      	str	r3, [r0, #4]
	}
	return DACC_RC_OK;
}
  4036d6:	2000      	movs	r0, #0
  4036d8:	4770      	bx	lr
		p_dacc->DACC_MR &= (~DACC_MR_SLEEP);
  4036da:	6843      	ldr	r3, [r0, #4]
  4036dc:	f023 0320 	bic.w	r3, r3, #32
  4036e0:	6043      	str	r3, [r0, #4]
  4036e2:	e7f3      	b.n	4036cc <dacc_set_power_save+0xa>
		p_dacc->DACC_MR |= DACC_MR_FASTWKUP;
  4036e4:	6843      	ldr	r3, [r0, #4]
  4036e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4036ea:	6043      	str	r3, [r0, #4]
  4036ec:	e7f3      	b.n	4036d6 <dacc_set_power_save+0x14>

004036ee <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  4036ee:	2901      	cmp	r1, #1
  4036f0:	d901      	bls.n	4036f6 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  4036f2:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  4036f4:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  4036f6:	2301      	movs	r3, #1
  4036f8:	fa03 f101 	lsl.w	r1, r3, r1
  4036fc:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  4036fe:	2000      	movs	r0, #0
  403700:	4770      	bx	lr

00403702 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  403702:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  403706:	2000      	movs	r0, #0
  403708:	4770      	bx	lr

0040370a <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  40370a:	460b      	mov	r3, r1
  40370c:	b119      	cbz	r1, 403716 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  40370e:	6809      	ldr	r1, [r1, #0]
  403710:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  403712:	685b      	ldr	r3, [r3, #4]
  403714:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  403716:	b11a      	cbz	r2, 403720 <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  403718:	6813      	ldr	r3, [r2, #0]
  40371a:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  40371c:	6853      	ldr	r3, [r2, #4]
  40371e:	6143      	str	r3, [r0, #20]
  403720:	4770      	bx	lr

00403722 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  403722:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  403726:	05c9      	lsls	r1, r1, #23
  403728:	0dc9      	lsrs	r1, r1, #23
	p_pdc->PERIPH_PTCR =
  40372a:	6201      	str	r1, [r0, #32]
  40372c:	4770      	bx	lr

0040372e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40372e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  403730:	4770      	bx	lr

00403732 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403732:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  403734:	4770      	bx	lr
	...

00403738 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403738:	4a17      	ldr	r2, [pc, #92]	; (403798 <pmc_switch_mck_to_pllack+0x60>)
  40373a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40373c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403740:	4318      	orrs	r0, r3
  403742:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403744:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403746:	f013 0f08 	tst.w	r3, #8
  40374a:	d10a      	bne.n	403762 <pmc_switch_mck_to_pllack+0x2a>
  40374c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403750:	4911      	ldr	r1, [pc, #68]	; (403798 <pmc_switch_mck_to_pllack+0x60>)
  403752:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403754:	f012 0f08 	tst.w	r2, #8
  403758:	d103      	bne.n	403762 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40375a:	3b01      	subs	r3, #1
  40375c:	d1f9      	bne.n	403752 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40375e:	2001      	movs	r0, #1
  403760:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  403762:	4a0d      	ldr	r2, [pc, #52]	; (403798 <pmc_switch_mck_to_pllack+0x60>)
  403764:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403766:	f023 0303 	bic.w	r3, r3, #3
  40376a:	f043 0302 	orr.w	r3, r3, #2
  40376e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403770:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403772:	f013 0f08 	tst.w	r3, #8
  403776:	d10a      	bne.n	40378e <pmc_switch_mck_to_pllack+0x56>
  403778:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40377c:	4906      	ldr	r1, [pc, #24]	; (403798 <pmc_switch_mck_to_pllack+0x60>)
  40377e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403780:	f012 0f08 	tst.w	r2, #8
  403784:	d105      	bne.n	403792 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403786:	3b01      	subs	r3, #1
  403788:	d1f9      	bne.n	40377e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40378a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40378c:	4770      	bx	lr
	return 0;
  40378e:	2000      	movs	r0, #0
  403790:	4770      	bx	lr
  403792:	2000      	movs	r0, #0
  403794:	4770      	bx	lr
  403796:	bf00      	nop
  403798:	400e0400 	.word	0x400e0400

0040379c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40379c:	b9c8      	cbnz	r0, 4037d2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40379e:	4a11      	ldr	r2, [pc, #68]	; (4037e4 <pmc_switch_mainck_to_xtal+0x48>)
  4037a0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4037a2:	0209      	lsls	r1, r1, #8
  4037a4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4037a6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4037aa:	f023 0303 	bic.w	r3, r3, #3
  4037ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4037b2:	f043 0301 	orr.w	r3, r3, #1
  4037b6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4037b8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4037ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4037bc:	f013 0f01 	tst.w	r3, #1
  4037c0:	d0fb      	beq.n	4037ba <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4037c2:	4a08      	ldr	r2, [pc, #32]	; (4037e4 <pmc_switch_mainck_to_xtal+0x48>)
  4037c4:	6a13      	ldr	r3, [r2, #32]
  4037c6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4037ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4037ce:	6213      	str	r3, [r2, #32]
  4037d0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4037d2:	4904      	ldr	r1, [pc, #16]	; (4037e4 <pmc_switch_mainck_to_xtal+0x48>)
  4037d4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4037d6:	4a04      	ldr	r2, [pc, #16]	; (4037e8 <pmc_switch_mainck_to_xtal+0x4c>)
  4037d8:	401a      	ands	r2, r3
  4037da:	4b04      	ldr	r3, [pc, #16]	; (4037ec <pmc_switch_mainck_to_xtal+0x50>)
  4037dc:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4037de:	620b      	str	r3, [r1, #32]
  4037e0:	4770      	bx	lr
  4037e2:	bf00      	nop
  4037e4:	400e0400 	.word	0x400e0400
  4037e8:	fec8fffc 	.word	0xfec8fffc
  4037ec:	01370002 	.word	0x01370002

004037f0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4037f0:	4b02      	ldr	r3, [pc, #8]	; (4037fc <pmc_osc_is_ready_mainck+0xc>)
  4037f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4037f4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4037f8:	4770      	bx	lr
  4037fa:	bf00      	nop
  4037fc:	400e0400 	.word	0x400e0400

00403800 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  403800:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  403804:	4b01      	ldr	r3, [pc, #4]	; (40380c <pmc_disable_pllack+0xc>)
  403806:	629a      	str	r2, [r3, #40]	; 0x28
  403808:	4770      	bx	lr
  40380a:	bf00      	nop
  40380c:	400e0400 	.word	0x400e0400

00403810 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403810:	4b02      	ldr	r3, [pc, #8]	; (40381c <pmc_is_locked_pllack+0xc>)
  403812:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403814:	f000 0002 	and.w	r0, r0, #2
  403818:	4770      	bx	lr
  40381a:	bf00      	nop
  40381c:	400e0400 	.word	0x400e0400

00403820 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  403820:	2200      	movs	r2, #0
  403822:	4b01      	ldr	r3, [pc, #4]	; (403828 <pmc_disable_pllbck+0x8>)
  403824:	62da      	str	r2, [r3, #44]	; 0x2c
  403826:	4770      	bx	lr
  403828:	400e0400 	.word	0x400e0400

0040382c <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40382c:	4b02      	ldr	r3, [pc, #8]	; (403838 <pmc_is_locked_pllbck+0xc>)
  40382e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403830:	f000 0004 	and.w	r0, r0, #4
  403834:	4770      	bx	lr
  403836:	bf00      	nop
  403838:	400e0400 	.word	0x400e0400

0040383c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40383c:	2822      	cmp	r0, #34	; 0x22
  40383e:	d81e      	bhi.n	40387e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  403840:	281f      	cmp	r0, #31
  403842:	d80c      	bhi.n	40385e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403844:	4b11      	ldr	r3, [pc, #68]	; (40388c <pmc_enable_periph_clk+0x50>)
  403846:	699a      	ldr	r2, [r3, #24]
  403848:	2301      	movs	r3, #1
  40384a:	4083      	lsls	r3, r0
  40384c:	4393      	bics	r3, r2
  40384e:	d018      	beq.n	403882 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  403850:	2301      	movs	r3, #1
  403852:	fa03 f000 	lsl.w	r0, r3, r0
  403856:	4b0d      	ldr	r3, [pc, #52]	; (40388c <pmc_enable_periph_clk+0x50>)
  403858:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40385a:	2000      	movs	r0, #0
  40385c:	4770      	bx	lr
		ul_id -= 32;
  40385e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403860:	4b0a      	ldr	r3, [pc, #40]	; (40388c <pmc_enable_periph_clk+0x50>)
  403862:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  403866:	2301      	movs	r3, #1
  403868:	4083      	lsls	r3, r0
  40386a:	4393      	bics	r3, r2
  40386c:	d00b      	beq.n	403886 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40386e:	2301      	movs	r3, #1
  403870:	fa03 f000 	lsl.w	r0, r3, r0
  403874:	4b05      	ldr	r3, [pc, #20]	; (40388c <pmc_enable_periph_clk+0x50>)
  403876:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40387a:	2000      	movs	r0, #0
  40387c:	4770      	bx	lr
		return 1;
  40387e:	2001      	movs	r0, #1
  403880:	4770      	bx	lr
	return 0;
  403882:	2000      	movs	r0, #0
  403884:	4770      	bx	lr
  403886:	2000      	movs	r0, #0
}
  403888:	4770      	bx	lr
  40388a:	bf00      	nop
  40388c:	400e0400 	.word	0x400e0400

00403890 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  403890:	2822      	cmp	r0, #34	; 0x22
  403892:	d822      	bhi.n	4038da <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  403894:	281f      	cmp	r0, #31
  403896:	d80e      	bhi.n	4038b6 <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  403898:	4b11      	ldr	r3, [pc, #68]	; (4038e0 <pmc_disable_periph_clk+0x50>)
  40389a:	699a      	ldr	r2, [r3, #24]
  40389c:	2301      	movs	r3, #1
  40389e:	4083      	lsls	r3, r0
  4038a0:	4393      	bics	r3, r2
  4038a2:	d001      	beq.n	4038a8 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  4038a4:	2000      	movs	r0, #0
  4038a6:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  4038a8:	2301      	movs	r3, #1
  4038aa:	fa03 f000 	lsl.w	r0, r3, r0
  4038ae:	4b0c      	ldr	r3, [pc, #48]	; (4038e0 <pmc_disable_periph_clk+0x50>)
  4038b0:	6158      	str	r0, [r3, #20]
	return 0;
  4038b2:	2000      	movs	r0, #0
  4038b4:	4770      	bx	lr
		ul_id -= 32;
  4038b6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  4038b8:	4b09      	ldr	r3, [pc, #36]	; (4038e0 <pmc_disable_periph_clk+0x50>)
  4038ba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4038be:	2301      	movs	r3, #1
  4038c0:	4083      	lsls	r3, r0
  4038c2:	4393      	bics	r3, r2
  4038c4:	d001      	beq.n	4038ca <pmc_disable_periph_clk+0x3a>
	return 0;
  4038c6:	2000      	movs	r0, #0
}
  4038c8:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  4038ca:	2301      	movs	r3, #1
  4038cc:	fa03 f000 	lsl.w	r0, r3, r0
  4038d0:	4b03      	ldr	r3, [pc, #12]	; (4038e0 <pmc_disable_periph_clk+0x50>)
  4038d2:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  4038d6:	2000      	movs	r0, #0
  4038d8:	4770      	bx	lr
		return 1;
  4038da:	2001      	movs	r0, #1
  4038dc:	4770      	bx	lr
  4038de:	bf00      	nop
  4038e0:	400e0400 	.word	0x400e0400

004038e4 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  4038e4:	0200      	lsls	r0, r0, #8
  4038e6:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  4038ea:	f040 0001 	orr.w	r0, r0, #1
  4038ee:	4b01      	ldr	r3, [pc, #4]	; (4038f4 <pmc_switch_udpck_to_pllbck+0x10>)
  4038f0:	6398      	str	r0, [r3, #56]	; 0x38
  4038f2:	4770      	bx	lr
  4038f4:	400e0400 	.word	0x400e0400

004038f8 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  4038f8:	2280      	movs	r2, #128	; 0x80
  4038fa:	4b01      	ldr	r3, [pc, #4]	; (403900 <pmc_enable_udpck+0x8>)
  4038fc:	601a      	str	r2, [r3, #0]
  4038fe:	4770      	bx	lr
  403900:	400e0400 	.word	0x400e0400

00403904 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  403904:	4b03      	ldr	r3, [pc, #12]	; (403914 <pmc_set_fast_startup_input+0x10>)
  403906:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  403908:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  40390c:	4310      	orrs	r0, r2
  40390e:	6718      	str	r0, [r3, #112]	; 0x70
  403910:	4770      	bx	lr
  403912:	bf00      	nop
  403914:	400e0400 	.word	0x400e0400

00403918 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  403918:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40391a:	0189      	lsls	r1, r1, #6
  40391c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40391e:	2402      	movs	r4, #2
  403920:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  403922:	f04f 31ff 	mov.w	r1, #4294967295
  403926:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  403928:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40392a:	605a      	str	r2, [r3, #4]
}
  40392c:	bc10      	pop	{r4}
  40392e:	4770      	bx	lr

00403930 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  403930:	0189      	lsls	r1, r1, #6
  403932:	2305      	movs	r3, #5
  403934:	5043      	str	r3, [r0, r1]
  403936:	4770      	bx	lr

00403938 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  403938:	0189      	lsls	r1, r1, #6
  40393a:	2302      	movs	r3, #2
  40393c:	5043      	str	r3, [r0, r1]
  40393e:	4770      	bx	lr

00403940 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  403940:	b4f0      	push	{r4, r5, r6, r7}
  403942:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  403944:	2402      	movs	r4, #2
  403946:	9401      	str	r4, [sp, #4]
  403948:	2408      	movs	r4, #8
  40394a:	9402      	str	r4, [sp, #8]
  40394c:	2420      	movs	r4, #32
  40394e:	9403      	str	r4, [sp, #12]
  403950:	2480      	movs	r4, #128	; 0x80
  403952:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  403954:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403956:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  403958:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40395a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40395e:	d814      	bhi.n	40398a <tc_find_mck_divisor+0x4a>
  403960:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  403962:	42a0      	cmp	r0, r4
  403964:	d217      	bcs.n	403996 <tc_find_mck_divisor+0x56>
  403966:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  403968:	af01      	add	r7, sp, #4
  40396a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40396e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  403972:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  403974:	4284      	cmp	r4, r0
  403976:	d30a      	bcc.n	40398e <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  403978:	4286      	cmp	r6, r0
  40397a:	d90d      	bls.n	403998 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40397c:	3501      	adds	r5, #1
	for (ul_index = 0;
  40397e:	2d05      	cmp	r5, #5
  403980:	d1f3      	bne.n	40396a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  403982:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  403984:	b006      	add	sp, #24
  403986:	bcf0      	pop	{r4, r5, r6, r7}
  403988:	4770      	bx	lr
			return 0;
  40398a:	2000      	movs	r0, #0
  40398c:	e7fa      	b.n	403984 <tc_find_mck_divisor+0x44>
  40398e:	2000      	movs	r0, #0
  403990:	e7f8      	b.n	403984 <tc_find_mck_divisor+0x44>
	return 1;
  403992:	2001      	movs	r0, #1
  403994:	e7f6      	b.n	403984 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  403996:	2500      	movs	r5, #0
	if (p_uldiv) {
  403998:	b12a      	cbz	r2, 4039a6 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40399a:	a906      	add	r1, sp, #24
  40399c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4039a0:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4039a4:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4039a6:	2b00      	cmp	r3, #0
  4039a8:	d0f3      	beq.n	403992 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4039aa:	601d      	str	r5, [r3, #0]
	return 1;
  4039ac:	2001      	movs	r0, #1
  4039ae:	e7e9      	b.n	403984 <tc_find_mck_divisor+0x44>

004039b0 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  4039b0:	4b02      	ldr	r3, [pc, #8]	; (4039bc <pmc_is_wakeup_clocks_restored+0xc>)
  4039b2:	7818      	ldrb	r0, [r3, #0]
}
  4039b4:	f080 0001 	eor.w	r0, r0, #1
  4039b8:	4770      	bx	lr
  4039ba:	bf00      	nop
  4039bc:	20001298 	.word	0x20001298

004039c0 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4039c0:	4770      	bx	lr

004039c2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4039c2:	e7fe      	b.n	4039c2 <Dummy_Handler>

004039c4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4039c4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4039c6:	4b1c      	ldr	r3, [pc, #112]	; (403a38 <Reset_Handler+0x74>)
  4039c8:	4a1c      	ldr	r2, [pc, #112]	; (403a3c <Reset_Handler+0x78>)
  4039ca:	429a      	cmp	r2, r3
  4039cc:	d010      	beq.n	4039f0 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
  4039ce:	4b1c      	ldr	r3, [pc, #112]	; (403a40 <Reset_Handler+0x7c>)
  4039d0:	4a19      	ldr	r2, [pc, #100]	; (403a38 <Reset_Handler+0x74>)
  4039d2:	429a      	cmp	r2, r3
  4039d4:	d20c      	bcs.n	4039f0 <Reset_Handler+0x2c>
  4039d6:	3b01      	subs	r3, #1
  4039d8:	1a9b      	subs	r3, r3, r2
  4039da:	f023 0303 	bic.w	r3, r3, #3
  4039de:	3304      	adds	r3, #4
  4039e0:	4413      	add	r3, r2
  4039e2:	4916      	ldr	r1, [pc, #88]	; (403a3c <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
  4039e4:	f851 0b04 	ldr.w	r0, [r1], #4
  4039e8:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4039ec:	429a      	cmp	r2, r3
  4039ee:	d1f9      	bne.n	4039e4 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4039f0:	4b14      	ldr	r3, [pc, #80]	; (403a44 <Reset_Handler+0x80>)
  4039f2:	4a15      	ldr	r2, [pc, #84]	; (403a48 <Reset_Handler+0x84>)
  4039f4:	429a      	cmp	r2, r3
  4039f6:	d20a      	bcs.n	403a0e <Reset_Handler+0x4a>
  4039f8:	3b01      	subs	r3, #1
  4039fa:	1a9b      	subs	r3, r3, r2
  4039fc:	f023 0303 	bic.w	r3, r3, #3
  403a00:	3304      	adds	r3, #4
  403a02:	4413      	add	r3, r2
		*pDest++ = 0;
  403a04:	2100      	movs	r1, #0
  403a06:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  403a0a:	4293      	cmp	r3, r2
  403a0c:	d1fb      	bne.n	403a06 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403a0e:	4b0f      	ldr	r3, [pc, #60]	; (403a4c <Reset_Handler+0x88>)
  403a10:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
  403a14:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  403a18:	490d      	ldr	r1, [pc, #52]	; (403a50 <Reset_Handler+0x8c>)
  403a1a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  403a1c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  403a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  403a24:	d203      	bcs.n	403a2e <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  403a26:	688b      	ldr	r3, [r1, #8]
  403a28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403a2c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  403a2e:	4b09      	ldr	r3, [pc, #36]	; (403a54 <Reset_Handler+0x90>)
  403a30:	4798      	blx	r3

	/* Branch to main function */
	main();
  403a32:	4b09      	ldr	r3, [pc, #36]	; (403a58 <Reset_Handler+0x94>)
  403a34:	4798      	blx	r3
  403a36:	e7fe      	b.n	403a36 <Reset_Handler+0x72>
  403a38:	20000000 	.word	0x20000000
  403a3c:	00408c94 	.word	0x00408c94
  403a40:	20000c60 	.word	0x20000c60
  403a44:	20002b70 	.word	0x20002b70
  403a48:	20000c60 	.word	0x20000c60
  403a4c:	00400000 	.word	0x00400000
  403a50:	e000ed00 	.word	0xe000ed00
  403a54:	00404059 	.word	0x00404059
  403a58:	00403c39 	.word	0x00403c39

00403a5c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  403a5c:	4b3c      	ldr	r3, [pc, #240]	; (403b50 <SystemCoreClockUpdate+0xf4>)
  403a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403a60:	f003 0303 	and.w	r3, r3, #3
  403a64:	2b03      	cmp	r3, #3
  403a66:	d80e      	bhi.n	403a86 <SystemCoreClockUpdate+0x2a>
  403a68:	e8df f003 	tbb	[pc, r3]
  403a6c:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  403a70:	4b38      	ldr	r3, [pc, #224]	; (403b54 <SystemCoreClockUpdate+0xf8>)
  403a72:	695b      	ldr	r3, [r3, #20]
  403a74:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403a78:	bf14      	ite	ne
  403a7a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403a7e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403a82:	4b35      	ldr	r3, [pc, #212]	; (403b58 <SystemCoreClockUpdate+0xfc>)
  403a84:	601a      	str	r2, [r3, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  403a86:	4b32      	ldr	r3, [pc, #200]	; (403b50 <SystemCoreClockUpdate+0xf4>)
  403a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403a8e:	2b70      	cmp	r3, #112	; 0x70
  403a90:	d055      	beq.n	403b3e <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403a92:	4b2f      	ldr	r3, [pc, #188]	; (403b50 <SystemCoreClockUpdate+0xf4>)
  403a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403a96:	4930      	ldr	r1, [pc, #192]	; (403b58 <SystemCoreClockUpdate+0xfc>)
  403a98:	f3c2 1202 	ubfx	r2, r2, #4, #3
  403a9c:	680b      	ldr	r3, [r1, #0]
  403a9e:	40d3      	lsrs	r3, r2
  403aa0:	600b      	str	r3, [r1, #0]
  403aa2:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  403aa4:	4b2a      	ldr	r3, [pc, #168]	; (403b50 <SystemCoreClockUpdate+0xf4>)
  403aa6:	6a1b      	ldr	r3, [r3, #32]
  403aa8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403aac:	d003      	beq.n	403ab6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403aae:	4a2b      	ldr	r2, [pc, #172]	; (403b5c <SystemCoreClockUpdate+0x100>)
  403ab0:	4b29      	ldr	r3, [pc, #164]	; (403b58 <SystemCoreClockUpdate+0xfc>)
  403ab2:	601a      	str	r2, [r3, #0]
  403ab4:	e7e7      	b.n	403a86 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403ab6:	4a2a      	ldr	r2, [pc, #168]	; (403b60 <SystemCoreClockUpdate+0x104>)
  403ab8:	4b27      	ldr	r3, [pc, #156]	; (403b58 <SystemCoreClockUpdate+0xfc>)
  403aba:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  403abc:	4b24      	ldr	r3, [pc, #144]	; (403b50 <SystemCoreClockUpdate+0xf4>)
  403abe:	6a1b      	ldr	r3, [r3, #32]
  403ac0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403ac4:	2b10      	cmp	r3, #16
  403ac6:	d005      	beq.n	403ad4 <SystemCoreClockUpdate+0x78>
  403ac8:	2b20      	cmp	r3, #32
  403aca:	d1dc      	bne.n	403a86 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
  403acc:	4a23      	ldr	r2, [pc, #140]	; (403b5c <SystemCoreClockUpdate+0x100>)
  403ace:	4b22      	ldr	r3, [pc, #136]	; (403b58 <SystemCoreClockUpdate+0xfc>)
  403ad0:	601a      	str	r2, [r3, #0]
				break;
  403ad2:	e7d8      	b.n	403a86 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
  403ad4:	4a23      	ldr	r2, [pc, #140]	; (403b64 <SystemCoreClockUpdate+0x108>)
  403ad6:	4b20      	ldr	r3, [pc, #128]	; (403b58 <SystemCoreClockUpdate+0xfc>)
  403ad8:	601a      	str	r2, [r3, #0]
				break;
  403ada:	e7d4      	b.n	403a86 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  403adc:	4b1c      	ldr	r3, [pc, #112]	; (403b50 <SystemCoreClockUpdate+0xf4>)
  403ade:	6a1b      	ldr	r3, [r3, #32]
  403ae0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403ae4:	d018      	beq.n	403b18 <SystemCoreClockUpdate+0xbc>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403ae6:	4a1d      	ldr	r2, [pc, #116]	; (403b5c <SystemCoreClockUpdate+0x100>)
  403ae8:	4b1b      	ldr	r3, [pc, #108]	; (403b58 <SystemCoreClockUpdate+0xfc>)
  403aea:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  403aec:	4b18      	ldr	r3, [pc, #96]	; (403b50 <SystemCoreClockUpdate+0xf4>)
  403aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403af0:	f003 0303 	and.w	r3, r3, #3
  403af4:	2b02      	cmp	r3, #2
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  403af6:	4a16      	ldr	r2, [pc, #88]	; (403b50 <SystemCoreClockUpdate+0xf4>)
  403af8:	bf07      	ittee	eq
  403afa:	6a91      	ldreq	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  403afc:	6a92      	ldreq	r2, [r2, #40]	; 0x28
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  403afe:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  403b00:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  403b02:	4815      	ldr	r0, [pc, #84]	; (403b58 <SystemCoreClockUpdate+0xfc>)
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  403b04:	f3c1 410a 	ubfx	r1, r1, #16, #11
  403b08:	6803      	ldr	r3, [r0, #0]
  403b0a:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  403b0e:	b2d2      	uxtb	r2, r2
  403b10:	fbb3 f3f2 	udiv	r3, r3, r2
  403b14:	6003      	str	r3, [r0, #0]
  403b16:	e7b6      	b.n	403a86 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403b18:	4a11      	ldr	r2, [pc, #68]	; (403b60 <SystemCoreClockUpdate+0x104>)
  403b1a:	4b0f      	ldr	r3, [pc, #60]	; (403b58 <SystemCoreClockUpdate+0xfc>)
  403b1c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  403b1e:	4b0c      	ldr	r3, [pc, #48]	; (403b50 <SystemCoreClockUpdate+0xf4>)
  403b20:	6a1b      	ldr	r3, [r3, #32]
  403b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403b26:	2b10      	cmp	r3, #16
  403b28:	d005      	beq.n	403b36 <SystemCoreClockUpdate+0xda>
  403b2a:	2b20      	cmp	r3, #32
  403b2c:	d1de      	bne.n	403aec <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  403b2e:	4a0b      	ldr	r2, [pc, #44]	; (403b5c <SystemCoreClockUpdate+0x100>)
  403b30:	4b09      	ldr	r3, [pc, #36]	; (403b58 <SystemCoreClockUpdate+0xfc>)
  403b32:	601a      	str	r2, [r3, #0]
				break;
  403b34:	e7da      	b.n	403aec <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  403b36:	4a0b      	ldr	r2, [pc, #44]	; (403b64 <SystemCoreClockUpdate+0x108>)
  403b38:	4b07      	ldr	r3, [pc, #28]	; (403b58 <SystemCoreClockUpdate+0xfc>)
  403b3a:	601a      	str	r2, [r3, #0]
				break;
  403b3c:	e7d6      	b.n	403aec <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  403b3e:	4a06      	ldr	r2, [pc, #24]	; (403b58 <SystemCoreClockUpdate+0xfc>)
  403b40:	6813      	ldr	r3, [r2, #0]
  403b42:	4909      	ldr	r1, [pc, #36]	; (403b68 <SystemCoreClockUpdate+0x10c>)
  403b44:	fba1 1303 	umull	r1, r3, r1, r3
  403b48:	085b      	lsrs	r3, r3, #1
  403b4a:	6013      	str	r3, [r2, #0]
  403b4c:	4770      	bx	lr
  403b4e:	bf00      	nop
  403b50:	400e0400 	.word	0x400e0400
  403b54:	400e1410 	.word	0x400e1410
  403b58:	200002ac 	.word	0x200002ac
  403b5c:	00b71b00 	.word	0x00b71b00
  403b60:	003d0900 	.word	0x003d0900
  403b64:	007a1200 	.word	0x007a1200
  403b68:	aaaaaaab 	.word	0xaaaaaaab

00403b6c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403b6c:	4b0a      	ldr	r3, [pc, #40]	; (403b98 <_sbrk+0x2c>)
  403b6e:	681b      	ldr	r3, [r3, #0]
  403b70:	b153      	cbz	r3, 403b88 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  403b72:	4b09      	ldr	r3, [pc, #36]	; (403b98 <_sbrk+0x2c>)
  403b74:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403b76:	181a      	adds	r2, r3, r0
  403b78:	4908      	ldr	r1, [pc, #32]	; (403b9c <_sbrk+0x30>)
  403b7a:	4291      	cmp	r1, r2
  403b7c:	db08      	blt.n	403b90 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  403b7e:	4610      	mov	r0, r2
  403b80:	4a05      	ldr	r2, [pc, #20]	; (403b98 <_sbrk+0x2c>)
  403b82:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403b84:	4618      	mov	r0, r3
  403b86:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  403b88:	4a05      	ldr	r2, [pc, #20]	; (403ba0 <_sbrk+0x34>)
  403b8a:	4b03      	ldr	r3, [pc, #12]	; (403b98 <_sbrk+0x2c>)
  403b8c:	601a      	str	r2, [r3, #0]
  403b8e:	e7f0      	b.n	403b72 <_sbrk+0x6>
		return (caddr_t) -1;	
  403b90:	f04f 30ff 	mov.w	r0, #4294967295
}
  403b94:	4770      	bx	lr
  403b96:	bf00      	nop
  403b98:	2000129c 	.word	0x2000129c
  403b9c:	2000bffc 	.word	0x2000bffc
  403ba0:	20004b70 	.word	0x20004b70

00403ba4 <usbRxcallback>:
  
}


void usbRxcallback(uint8_t port)
{
  403ba4:	b570      	push	{r4, r5, r6, lr}
  403ba6:	b086      	sub	sp, #24
  CMD_t incomingCMD;
  if(USB->available())
  403ba8:	4b1e      	ldr	r3, [pc, #120]	; (403c24 <usbRxcallback+0x80>)
  403baa:	681b      	ldr	r3, [r3, #0]
  403bac:	685b      	ldr	r3, [r3, #4]
  403bae:	4798      	blx	r3
  403bb0:	b908      	cbnz	r0, 403bb6 <usbRxcallback+0x12>
    {
      USB->len = sprintf((char*)USB->buf, "Command syntax ERROR\n\r");
    }
    USB->printBuf(USB->buf, USB->len);
  }
  403bb2:	b006      	add	sp, #24
  403bb4:	bd70      	pop	{r4, r5, r6, pc}
    if (parseCommand(USB->read(), &incomingCMD, USB))
  403bb6:	4c1b      	ldr	r4, [pc, #108]	; (403c24 <usbRxcallback+0x80>)
  403bb8:	6823      	ldr	r3, [r4, #0]
  403bba:	689b      	ldr	r3, [r3, #8]
  403bbc:	4798      	blx	r3
  403bbe:	6822      	ldr	r2, [r4, #0]
  403bc0:	4669      	mov	r1, sp
  403bc2:	4b19      	ldr	r3, [pc, #100]	; (403c28 <usbRxcallback+0x84>)
  403bc4:	4798      	blx	r3
  403bc6:	b198      	cbz	r0, 403bf0 <usbRxcallback+0x4c>
      if(!incomingCMD.funcPtr(incomingCMD.par, &master_settings, USB))
  403bc8:	6822      	ldr	r2, [r4, #0]
  403bca:	4918      	ldr	r1, [pc, #96]	; (403c2c <usbRxcallback+0x88>)
  403bcc:	a802      	add	r0, sp, #8
  403bce:	9b01      	ldr	r3, [sp, #4]
  403bd0:	4798      	blx	r3
  403bd2:	b9f8      	cbnz	r0, 403c14 <usbRxcallback+0x70>
        USB->len = sprintf((char*)USB->buf, "ERROR setting command\n\r");
  403bd4:	6826      	ldr	r6, [r4, #0]
  403bd6:	4c16      	ldr	r4, [pc, #88]	; (403c30 <usbRxcallback+0x8c>)
  403bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  403bda:	61f0      	str	r0, [r6, #28]
  403bdc:	6231      	str	r1, [r6, #32]
  403bde:	6272      	str	r2, [r6, #36]	; 0x24
  403be0:	62b3      	str	r3, [r6, #40]	; 0x28
  403be2:	cc03      	ldmia	r4!, {r0, r1}
  403be4:	62f0      	str	r0, [r6, #44]	; 0x2c
  403be6:	6331      	str	r1, [r6, #48]	; 0x30
  403be8:	2317      	movs	r3, #23
  403bea:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
  403bee:	e011      	b.n	403c14 <usbRxcallback+0x70>
      USB->len = sprintf((char*)USB->buf, "Command syntax ERROR\n\r");
  403bf0:	4b0c      	ldr	r3, [pc, #48]	; (403c24 <usbRxcallback+0x80>)
  403bf2:	681e      	ldr	r6, [r3, #0]
  403bf4:	4c0f      	ldr	r4, [pc, #60]	; (403c34 <usbRxcallback+0x90>)
  403bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  403bf8:	61f0      	str	r0, [r6, #28]
  403bfa:	6231      	str	r1, [r6, #32]
  403bfc:	6272      	str	r2, [r6, #36]	; 0x24
  403bfe:	62b3      	str	r3, [r6, #40]	; 0x28
  403c00:	6820      	ldr	r0, [r4, #0]
  403c02:	62f0      	str	r0, [r6, #44]	; 0x2c
  403c04:	88a2      	ldrh	r2, [r4, #4]
  403c06:	79a3      	ldrb	r3, [r4, #6]
  403c08:	8632      	strh	r2, [r6, #48]	; 0x30
  403c0a:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
  403c0e:	2316      	movs	r3, #22
  403c10:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
    USB->printBuf(USB->buf, USB->len);
  403c14:	4b03      	ldr	r3, [pc, #12]	; (403c24 <usbRxcallback+0x80>)
  403c16:	6818      	ldr	r0, [r3, #0]
  403c18:	6903      	ldr	r3, [r0, #16]
  403c1a:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
  403c1e:	301c      	adds	r0, #28
  403c20:	4798      	blx	r3
  403c22:	e7c6      	b.n	403bb2 <usbRxcallback+0xe>
  403c24:	20001b10 	.word	0x20001b10
  403c28:	00403399 	.word	0x00403399
  403c2c:	20001b14 	.word	0x20001b14
  403c30:	004089b0 	.word	0x004089b0
  403c34:	004089c8 	.word	0x004089c8

00403c38 <main>:
{
  403c38:	b508      	push	{r3, lr}
  wdt_disable(WDT);
  403c3a:	481d      	ldr	r0, [pc, #116]	; (403cb0 <main+0x78>)
  403c3c:	4b1d      	ldr	r3, [pc, #116]	; (403cb4 <main+0x7c>)
  403c3e:	4798      	blx	r3
  sysclk_init(); // clock init, ASF
  403c40:	4b1d      	ldr	r3, [pc, #116]	; (403cb8 <main+0x80>)
  403c42:	4798      	blx	r3
  board_init();  // ASF function, empty function??
  403c44:	4b1d      	ldr	r3, [pc, #116]	; (403cbc <main+0x84>)
  403c46:	4798      	blx	r3
  USB = getComInterface();
  403c48:	4b1d      	ldr	r3, [pc, #116]	; (403cc0 <main+0x88>)
  403c4a:	4798      	blx	r3
  403c4c:	4605      	mov	r5, r0
  403c4e:	4c1d      	ldr	r4, [pc, #116]	; (403cc4 <main+0x8c>)
  403c50:	6020      	str	r0, [r4, #0]
  USB->rxCallback = usbRxcallback;
  403c52:	4b1d      	ldr	r3, [pc, #116]	; (403cc8 <main+0x90>)
  403c54:	6143      	str	r3, [r0, #20]
  USB->txEmptyCallback = coreTxEmptyCallBack();
  403c56:	4b1d      	ldr	r3, [pc, #116]	; (403ccc <main+0x94>)
  403c58:	4798      	blx	r3
  403c5a:	61a8      	str	r0, [r5, #24]
  USB->init(NULL);
  403c5c:	6823      	ldr	r3, [r4, #0]
  403c5e:	681b      	ldr	r3, [r3, #0]
  403c60:	2000      	movs	r0, #0
  403c62:	4798      	blx	r3
  master_settings.acquisitionNbr = 0;
  403c64:	481a      	ldr	r0, [pc, #104]	; (403cd0 <main+0x98>)
  403c66:	2200      	movs	r2, #0
  403c68:	8082      	strh	r2, [r0, #4]
  master_settings.acqusitionTime = 1000000;
  403c6a:	4b1a      	ldr	r3, [pc, #104]	; (403cd4 <main+0x9c>)
  403c6c:	6003      	str	r3, [r0, #0]
  master_settings.averaging = 0;
  403c6e:	80c2      	strh	r2, [r0, #6]
  master_settings.sequence[0] = 1;
  403c70:	2301      	movs	r3, #1
  403c72:	7383      	strb	r3, [r0, #14]
  master_settings.sequence[1] = 2;
  403c74:	2102      	movs	r1, #2
  403c76:	73c1      	strb	r1, [r0, #15]
  master_settings.sequence[2] = 3;
  403c78:	2503      	movs	r5, #3
  403c7a:	7405      	strb	r5, [r0, #16]
  master_settings.sequence[3] = 4;
  403c7c:	2504      	movs	r5, #4
  403c7e:	7445      	strb	r5, [r0, #17]
  master_settings.mode = ASCII_MODE;
  403c80:	7482      	strb	r2, [r0, #18]
  master_settings.DACval[0] = 2047;
  403c82:	f240 75ff 	movw	r5, #2047	; 0x7ff
  403c86:	8385      	strh	r5, [r0, #28]
  master_settings.DACval[1] = 2047;
  403c88:	83c5      	strh	r5, [r0, #30]
  master_settings.blockSize = 16;
  403c8a:	2510      	movs	r5, #16
  403c8c:	6145      	str	r5, [r0, #20]
  master_settings.ADCgain[0] = 1;
  403c8e:	7203      	strb	r3, [r0, #8]
  master_settings.ADCgain[1] = 1;
  403c90:	7243      	strb	r3, [r0, #9]
  master_settings.ADCgain[2] = 1;
  403c92:	7283      	strb	r3, [r0, #10]
  master_settings.ADCgain[3] = 1;
  403c94:	72c3      	strb	r3, [r0, #11]
  master_settings.ADClowRes = false;
  403c96:	7302      	strb	r2, [r0, #12]
  master_settings.com = USB;
  403c98:	6822      	ldr	r2, [r4, #0]
  403c9a:	6182      	str	r2, [r0, #24]
  master_settings.DacSequence[0] = 1;
  403c9c:	f880 3020 	strb.w	r3, [r0, #32]
  master_settings.DacSequence[1] = 2;
  403ca0:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  coreConfigure(&master_settings);
  403ca4:	4b0c      	ldr	r3, [pc, #48]	; (403cd8 <main+0xa0>)
  403ca6:	4798      	blx	r3
  coreStart();
  403ca8:	4b0c      	ldr	r3, [pc, #48]	; (403cdc <main+0xa4>)
  403caa:	4798      	blx	r3
  403cac:	e7fe      	b.n	403cac <main+0x74>
  403cae:	bf00      	nop
  403cb0:	400e1450 	.word	0x400e1450
  403cb4:	00402695 	.word	0x00402695
  403cb8:	00403621 	.word	0x00403621
  403cbc:	004039c1 	.word	0x004039c1
  403cc0:	00402701 	.word	0x00402701
  403cc4:	20001b10 	.word	0x20001b10
  403cc8:	00403ba5 	.word	0x00403ba5
  403ccc:	00402e11 	.word	0x00402e11
  403cd0:	20001b14 	.word	0x20001b14
  403cd4:	000f4240 	.word	0x000f4240
  403cd8:	00402941 	.word	0x00402941
  403cdc:	00402cc1 	.word	0x00402cc1

00403ce0 <__aeabi_drsub>:
  403ce0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403ce4:	e002      	b.n	403cec <__adddf3>
  403ce6:	bf00      	nop

00403ce8 <__aeabi_dsub>:
  403ce8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403cec <__adddf3>:
  403cec:	b530      	push	{r4, r5, lr}
  403cee:	ea4f 0441 	mov.w	r4, r1, lsl #1
  403cf2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403cf6:	ea94 0f05 	teq	r4, r5
  403cfa:	bf08      	it	eq
  403cfc:	ea90 0f02 	teqeq	r0, r2
  403d00:	bf1f      	itttt	ne
  403d02:	ea54 0c00 	orrsne.w	ip, r4, r0
  403d06:	ea55 0c02 	orrsne.w	ip, r5, r2
  403d0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403d0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403d12:	f000 80e2 	beq.w	403eda <__adddf3+0x1ee>
  403d16:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403d1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403d1e:	bfb8      	it	lt
  403d20:	426d      	neglt	r5, r5
  403d22:	dd0c      	ble.n	403d3e <__adddf3+0x52>
  403d24:	442c      	add	r4, r5
  403d26:	ea80 0202 	eor.w	r2, r0, r2
  403d2a:	ea81 0303 	eor.w	r3, r1, r3
  403d2e:	ea82 0000 	eor.w	r0, r2, r0
  403d32:	ea83 0101 	eor.w	r1, r3, r1
  403d36:	ea80 0202 	eor.w	r2, r0, r2
  403d3a:	ea81 0303 	eor.w	r3, r1, r3
  403d3e:	2d36      	cmp	r5, #54	; 0x36
  403d40:	bf88      	it	hi
  403d42:	bd30      	pophi	{r4, r5, pc}
  403d44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403d48:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403d4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403d50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403d54:	d002      	beq.n	403d5c <__adddf3+0x70>
  403d56:	4240      	negs	r0, r0
  403d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403d5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403d60:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403d64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  403d68:	d002      	beq.n	403d70 <__adddf3+0x84>
  403d6a:	4252      	negs	r2, r2
  403d6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403d70:	ea94 0f05 	teq	r4, r5
  403d74:	f000 80a7 	beq.w	403ec6 <__adddf3+0x1da>
  403d78:	f1a4 0401 	sub.w	r4, r4, #1
  403d7c:	f1d5 0e20 	rsbs	lr, r5, #32
  403d80:	db0d      	blt.n	403d9e <__adddf3+0xb2>
  403d82:	fa02 fc0e 	lsl.w	ip, r2, lr
  403d86:	fa22 f205 	lsr.w	r2, r2, r5
  403d8a:	1880      	adds	r0, r0, r2
  403d8c:	f141 0100 	adc.w	r1, r1, #0
  403d90:	fa03 f20e 	lsl.w	r2, r3, lr
  403d94:	1880      	adds	r0, r0, r2
  403d96:	fa43 f305 	asr.w	r3, r3, r5
  403d9a:	4159      	adcs	r1, r3
  403d9c:	e00e      	b.n	403dbc <__adddf3+0xd0>
  403d9e:	f1a5 0520 	sub.w	r5, r5, #32
  403da2:	f10e 0e20 	add.w	lr, lr, #32
  403da6:	2a01      	cmp	r2, #1
  403da8:	fa03 fc0e 	lsl.w	ip, r3, lr
  403dac:	bf28      	it	cs
  403dae:	f04c 0c02 	orrcs.w	ip, ip, #2
  403db2:	fa43 f305 	asr.w	r3, r3, r5
  403db6:	18c0      	adds	r0, r0, r3
  403db8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403dbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403dc0:	d507      	bpl.n	403dd2 <__adddf3+0xe6>
  403dc2:	f04f 0e00 	mov.w	lr, #0
  403dc6:	f1dc 0c00 	rsbs	ip, ip, #0
  403dca:	eb7e 0000 	sbcs.w	r0, lr, r0
  403dce:	eb6e 0101 	sbc.w	r1, lr, r1
  403dd2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403dd6:	d31b      	bcc.n	403e10 <__adddf3+0x124>
  403dd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403ddc:	d30c      	bcc.n	403df8 <__adddf3+0x10c>
  403dde:	0849      	lsrs	r1, r1, #1
  403de0:	ea5f 0030 	movs.w	r0, r0, rrx
  403de4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403de8:	f104 0401 	add.w	r4, r4, #1
  403dec:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403df0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403df4:	f080 809a 	bcs.w	403f2c <__adddf3+0x240>
  403df8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403dfc:	bf08      	it	eq
  403dfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403e02:	f150 0000 	adcs.w	r0, r0, #0
  403e06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403e0a:	ea41 0105 	orr.w	r1, r1, r5
  403e0e:	bd30      	pop	{r4, r5, pc}
  403e10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403e14:	4140      	adcs	r0, r0
  403e16:	eb41 0101 	adc.w	r1, r1, r1
  403e1a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403e1e:	f1a4 0401 	sub.w	r4, r4, #1
  403e22:	d1e9      	bne.n	403df8 <__adddf3+0x10c>
  403e24:	f091 0f00 	teq	r1, #0
  403e28:	bf04      	itt	eq
  403e2a:	4601      	moveq	r1, r0
  403e2c:	2000      	moveq	r0, #0
  403e2e:	fab1 f381 	clz	r3, r1
  403e32:	bf08      	it	eq
  403e34:	3320      	addeq	r3, #32
  403e36:	f1a3 030b 	sub.w	r3, r3, #11
  403e3a:	f1b3 0220 	subs.w	r2, r3, #32
  403e3e:	da0c      	bge.n	403e5a <__adddf3+0x16e>
  403e40:	320c      	adds	r2, #12
  403e42:	dd08      	ble.n	403e56 <__adddf3+0x16a>
  403e44:	f102 0c14 	add.w	ip, r2, #20
  403e48:	f1c2 020c 	rsb	r2, r2, #12
  403e4c:	fa01 f00c 	lsl.w	r0, r1, ip
  403e50:	fa21 f102 	lsr.w	r1, r1, r2
  403e54:	e00c      	b.n	403e70 <__adddf3+0x184>
  403e56:	f102 0214 	add.w	r2, r2, #20
  403e5a:	bfd8      	it	le
  403e5c:	f1c2 0c20 	rsble	ip, r2, #32
  403e60:	fa01 f102 	lsl.w	r1, r1, r2
  403e64:	fa20 fc0c 	lsr.w	ip, r0, ip
  403e68:	bfdc      	itt	le
  403e6a:	ea41 010c 	orrle.w	r1, r1, ip
  403e6e:	4090      	lslle	r0, r2
  403e70:	1ae4      	subs	r4, r4, r3
  403e72:	bfa2      	ittt	ge
  403e74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403e78:	4329      	orrge	r1, r5
  403e7a:	bd30      	popge	{r4, r5, pc}
  403e7c:	ea6f 0404 	mvn.w	r4, r4
  403e80:	3c1f      	subs	r4, #31
  403e82:	da1c      	bge.n	403ebe <__adddf3+0x1d2>
  403e84:	340c      	adds	r4, #12
  403e86:	dc0e      	bgt.n	403ea6 <__adddf3+0x1ba>
  403e88:	f104 0414 	add.w	r4, r4, #20
  403e8c:	f1c4 0220 	rsb	r2, r4, #32
  403e90:	fa20 f004 	lsr.w	r0, r0, r4
  403e94:	fa01 f302 	lsl.w	r3, r1, r2
  403e98:	ea40 0003 	orr.w	r0, r0, r3
  403e9c:	fa21 f304 	lsr.w	r3, r1, r4
  403ea0:	ea45 0103 	orr.w	r1, r5, r3
  403ea4:	bd30      	pop	{r4, r5, pc}
  403ea6:	f1c4 040c 	rsb	r4, r4, #12
  403eaa:	f1c4 0220 	rsb	r2, r4, #32
  403eae:	fa20 f002 	lsr.w	r0, r0, r2
  403eb2:	fa01 f304 	lsl.w	r3, r1, r4
  403eb6:	ea40 0003 	orr.w	r0, r0, r3
  403eba:	4629      	mov	r1, r5
  403ebc:	bd30      	pop	{r4, r5, pc}
  403ebe:	fa21 f004 	lsr.w	r0, r1, r4
  403ec2:	4629      	mov	r1, r5
  403ec4:	bd30      	pop	{r4, r5, pc}
  403ec6:	f094 0f00 	teq	r4, #0
  403eca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403ece:	bf06      	itte	eq
  403ed0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403ed4:	3401      	addeq	r4, #1
  403ed6:	3d01      	subne	r5, #1
  403ed8:	e74e      	b.n	403d78 <__adddf3+0x8c>
  403eda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403ede:	bf18      	it	ne
  403ee0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403ee4:	d029      	beq.n	403f3a <__adddf3+0x24e>
  403ee6:	ea94 0f05 	teq	r4, r5
  403eea:	bf08      	it	eq
  403eec:	ea90 0f02 	teqeq	r0, r2
  403ef0:	d005      	beq.n	403efe <__adddf3+0x212>
  403ef2:	ea54 0c00 	orrs.w	ip, r4, r0
  403ef6:	bf04      	itt	eq
  403ef8:	4619      	moveq	r1, r3
  403efa:	4610      	moveq	r0, r2
  403efc:	bd30      	pop	{r4, r5, pc}
  403efe:	ea91 0f03 	teq	r1, r3
  403f02:	bf1e      	ittt	ne
  403f04:	2100      	movne	r1, #0
  403f06:	2000      	movne	r0, #0
  403f08:	bd30      	popne	{r4, r5, pc}
  403f0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403f0e:	d105      	bne.n	403f1c <__adddf3+0x230>
  403f10:	0040      	lsls	r0, r0, #1
  403f12:	4149      	adcs	r1, r1
  403f14:	bf28      	it	cs
  403f16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403f1a:	bd30      	pop	{r4, r5, pc}
  403f1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403f20:	bf3c      	itt	cc
  403f22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403f26:	bd30      	popcc	{r4, r5, pc}
  403f28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403f2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403f30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403f34:	f04f 0000 	mov.w	r0, #0
  403f38:	bd30      	pop	{r4, r5, pc}
  403f3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403f3e:	bf1a      	itte	ne
  403f40:	4619      	movne	r1, r3
  403f42:	4610      	movne	r0, r2
  403f44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403f48:	bf1c      	itt	ne
  403f4a:	460b      	movne	r3, r1
  403f4c:	4602      	movne	r2, r0
  403f4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403f52:	bf06      	itte	eq
  403f54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403f58:	ea91 0f03 	teqeq	r1, r3
  403f5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403f60:	bd30      	pop	{r4, r5, pc}
  403f62:	bf00      	nop

00403f64 <__aeabi_ui2d>:
  403f64:	f090 0f00 	teq	r0, #0
  403f68:	bf04      	itt	eq
  403f6a:	2100      	moveq	r1, #0
  403f6c:	4770      	bxeq	lr
  403f6e:	b530      	push	{r4, r5, lr}
  403f70:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403f74:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403f78:	f04f 0500 	mov.w	r5, #0
  403f7c:	f04f 0100 	mov.w	r1, #0
  403f80:	e750      	b.n	403e24 <__adddf3+0x138>
  403f82:	bf00      	nop

00403f84 <__aeabi_i2d>:
  403f84:	f090 0f00 	teq	r0, #0
  403f88:	bf04      	itt	eq
  403f8a:	2100      	moveq	r1, #0
  403f8c:	4770      	bxeq	lr
  403f8e:	b530      	push	{r4, r5, lr}
  403f90:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403f94:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403f98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403f9c:	bf48      	it	mi
  403f9e:	4240      	negmi	r0, r0
  403fa0:	f04f 0100 	mov.w	r1, #0
  403fa4:	e73e      	b.n	403e24 <__adddf3+0x138>
  403fa6:	bf00      	nop

00403fa8 <__aeabi_f2d>:
  403fa8:	0042      	lsls	r2, r0, #1
  403faa:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403fae:	ea4f 0131 	mov.w	r1, r1, rrx
  403fb2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403fb6:	bf1f      	itttt	ne
  403fb8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403fbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403fc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403fc4:	4770      	bxne	lr
  403fc6:	f092 0f00 	teq	r2, #0
  403fca:	bf14      	ite	ne
  403fcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403fd0:	4770      	bxeq	lr
  403fd2:	b530      	push	{r4, r5, lr}
  403fd4:	f44f 7460 	mov.w	r4, #896	; 0x380
  403fd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403fdc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403fe0:	e720      	b.n	403e24 <__adddf3+0x138>
  403fe2:	bf00      	nop

00403fe4 <__aeabi_ul2d>:
  403fe4:	ea50 0201 	orrs.w	r2, r0, r1
  403fe8:	bf08      	it	eq
  403fea:	4770      	bxeq	lr
  403fec:	b530      	push	{r4, r5, lr}
  403fee:	f04f 0500 	mov.w	r5, #0
  403ff2:	e00a      	b.n	40400a <__aeabi_l2d+0x16>

00403ff4 <__aeabi_l2d>:
  403ff4:	ea50 0201 	orrs.w	r2, r0, r1
  403ff8:	bf08      	it	eq
  403ffa:	4770      	bxeq	lr
  403ffc:	b530      	push	{r4, r5, lr}
  403ffe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  404002:	d502      	bpl.n	40400a <__aeabi_l2d+0x16>
  404004:	4240      	negs	r0, r0
  404006:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40400a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40400e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404012:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  404016:	f43f aedc 	beq.w	403dd2 <__adddf3+0xe6>
  40401a:	f04f 0203 	mov.w	r2, #3
  40401e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404022:	bf18      	it	ne
  404024:	3203      	addne	r2, #3
  404026:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40402a:	bf18      	it	ne
  40402c:	3203      	addne	r2, #3
  40402e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  404032:	f1c2 0320 	rsb	r3, r2, #32
  404036:	fa00 fc03 	lsl.w	ip, r0, r3
  40403a:	fa20 f002 	lsr.w	r0, r0, r2
  40403e:	fa01 fe03 	lsl.w	lr, r1, r3
  404042:	ea40 000e 	orr.w	r0, r0, lr
  404046:	fa21 f102 	lsr.w	r1, r1, r2
  40404a:	4414      	add	r4, r2
  40404c:	e6c1      	b.n	403dd2 <__adddf3+0xe6>
  40404e:	bf00      	nop

00404050 <atoll>:
  404050:	220a      	movs	r2, #10
  404052:	2100      	movs	r1, #0
  404054:	f000 ba0e 	b.w	404474 <strtoll>

00404058 <__libc_init_array>:
  404058:	b570      	push	{r4, r5, r6, lr}
  40405a:	4e0f      	ldr	r6, [pc, #60]	; (404098 <__libc_init_array+0x40>)
  40405c:	4d0f      	ldr	r5, [pc, #60]	; (40409c <__libc_init_array+0x44>)
  40405e:	1b76      	subs	r6, r6, r5
  404060:	10b6      	asrs	r6, r6, #2
  404062:	bf18      	it	ne
  404064:	2400      	movne	r4, #0
  404066:	d005      	beq.n	404074 <__libc_init_array+0x1c>
  404068:	3401      	adds	r4, #1
  40406a:	f855 3b04 	ldr.w	r3, [r5], #4
  40406e:	4798      	blx	r3
  404070:	42a6      	cmp	r6, r4
  404072:	d1f9      	bne.n	404068 <__libc_init_array+0x10>
  404074:	4e0a      	ldr	r6, [pc, #40]	; (4040a0 <__libc_init_array+0x48>)
  404076:	4d0b      	ldr	r5, [pc, #44]	; (4040a4 <__libc_init_array+0x4c>)
  404078:	f004 fdf6 	bl	408c68 <_init>
  40407c:	1b76      	subs	r6, r6, r5
  40407e:	10b6      	asrs	r6, r6, #2
  404080:	bf18      	it	ne
  404082:	2400      	movne	r4, #0
  404084:	d006      	beq.n	404094 <__libc_init_array+0x3c>
  404086:	3401      	adds	r4, #1
  404088:	f855 3b04 	ldr.w	r3, [r5], #4
  40408c:	4798      	blx	r3
  40408e:	42a6      	cmp	r6, r4
  404090:	d1f9      	bne.n	404086 <__libc_init_array+0x2e>
  404092:	bd70      	pop	{r4, r5, r6, pc}
  404094:	bd70      	pop	{r4, r5, r6, pc}
  404096:	bf00      	nop
  404098:	00408c74 	.word	0x00408c74
  40409c:	00408c74 	.word	0x00408c74
  4040a0:	00408c7c 	.word	0x00408c7c
  4040a4:	00408c74 	.word	0x00408c74

004040a8 <memcpy>:
  4040a8:	4684      	mov	ip, r0
  4040aa:	ea41 0300 	orr.w	r3, r1, r0
  4040ae:	f013 0303 	ands.w	r3, r3, #3
  4040b2:	d149      	bne.n	404148 <memcpy+0xa0>
  4040b4:	3a40      	subs	r2, #64	; 0x40
  4040b6:	d323      	bcc.n	404100 <memcpy+0x58>
  4040b8:	680b      	ldr	r3, [r1, #0]
  4040ba:	6003      	str	r3, [r0, #0]
  4040bc:	684b      	ldr	r3, [r1, #4]
  4040be:	6043      	str	r3, [r0, #4]
  4040c0:	688b      	ldr	r3, [r1, #8]
  4040c2:	6083      	str	r3, [r0, #8]
  4040c4:	68cb      	ldr	r3, [r1, #12]
  4040c6:	60c3      	str	r3, [r0, #12]
  4040c8:	690b      	ldr	r3, [r1, #16]
  4040ca:	6103      	str	r3, [r0, #16]
  4040cc:	694b      	ldr	r3, [r1, #20]
  4040ce:	6143      	str	r3, [r0, #20]
  4040d0:	698b      	ldr	r3, [r1, #24]
  4040d2:	6183      	str	r3, [r0, #24]
  4040d4:	69cb      	ldr	r3, [r1, #28]
  4040d6:	61c3      	str	r3, [r0, #28]
  4040d8:	6a0b      	ldr	r3, [r1, #32]
  4040da:	6203      	str	r3, [r0, #32]
  4040dc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  4040de:	6243      	str	r3, [r0, #36]	; 0x24
  4040e0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  4040e2:	6283      	str	r3, [r0, #40]	; 0x28
  4040e4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  4040e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  4040e8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4040ea:	6303      	str	r3, [r0, #48]	; 0x30
  4040ec:	6b4b      	ldr	r3, [r1, #52]	; 0x34
  4040ee:	6343      	str	r3, [r0, #52]	; 0x34
  4040f0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  4040f2:	6383      	str	r3, [r0, #56]	; 0x38
  4040f4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  4040f6:	63c3      	str	r3, [r0, #60]	; 0x3c
  4040f8:	3040      	adds	r0, #64	; 0x40
  4040fa:	3140      	adds	r1, #64	; 0x40
  4040fc:	3a40      	subs	r2, #64	; 0x40
  4040fe:	d2db      	bcs.n	4040b8 <memcpy+0x10>
  404100:	3230      	adds	r2, #48	; 0x30
  404102:	d30b      	bcc.n	40411c <memcpy+0x74>
  404104:	680b      	ldr	r3, [r1, #0]
  404106:	6003      	str	r3, [r0, #0]
  404108:	684b      	ldr	r3, [r1, #4]
  40410a:	6043      	str	r3, [r0, #4]
  40410c:	688b      	ldr	r3, [r1, #8]
  40410e:	6083      	str	r3, [r0, #8]
  404110:	68cb      	ldr	r3, [r1, #12]
  404112:	60c3      	str	r3, [r0, #12]
  404114:	3010      	adds	r0, #16
  404116:	3110      	adds	r1, #16
  404118:	3a10      	subs	r2, #16
  40411a:	d2f3      	bcs.n	404104 <memcpy+0x5c>
  40411c:	320c      	adds	r2, #12
  40411e:	d305      	bcc.n	40412c <memcpy+0x84>
  404120:	f851 3b04 	ldr.w	r3, [r1], #4
  404124:	f840 3b04 	str.w	r3, [r0], #4
  404128:	3a04      	subs	r2, #4
  40412a:	d2f9      	bcs.n	404120 <memcpy+0x78>
  40412c:	3204      	adds	r2, #4
  40412e:	d008      	beq.n	404142 <memcpy+0x9a>
  404130:	07d2      	lsls	r2, r2, #31
  404132:	bf1c      	itt	ne
  404134:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404138:	f800 3b01 	strbne.w	r3, [r0], #1
  40413c:	d301      	bcc.n	404142 <memcpy+0x9a>
  40413e:	880b      	ldrh	r3, [r1, #0]
  404140:	8003      	strh	r3, [r0, #0]
  404142:	4660      	mov	r0, ip
  404144:	4770      	bx	lr
  404146:	bf00      	nop
  404148:	2a08      	cmp	r2, #8
  40414a:	d313      	bcc.n	404174 <memcpy+0xcc>
  40414c:	078b      	lsls	r3, r1, #30
  40414e:	d0b1      	beq.n	4040b4 <memcpy+0xc>
  404150:	f010 0303 	ands.w	r3, r0, #3
  404154:	d0ae      	beq.n	4040b4 <memcpy+0xc>
  404156:	f1c3 0304 	rsb	r3, r3, #4
  40415a:	1ad2      	subs	r2, r2, r3
  40415c:	07db      	lsls	r3, r3, #31
  40415e:	bf1c      	itt	ne
  404160:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404164:	f800 3b01 	strbne.w	r3, [r0], #1
  404168:	d3a4      	bcc.n	4040b4 <memcpy+0xc>
  40416a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40416e:	f820 3b02 	strh.w	r3, [r0], #2
  404172:	e79f      	b.n	4040b4 <memcpy+0xc>
  404174:	3a04      	subs	r2, #4
  404176:	d3d9      	bcc.n	40412c <memcpy+0x84>
  404178:	3a01      	subs	r2, #1
  40417a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40417e:	f800 3b01 	strb.w	r3, [r0], #1
  404182:	d2f9      	bcs.n	404178 <memcpy+0xd0>
  404184:	780b      	ldrb	r3, [r1, #0]
  404186:	7003      	strb	r3, [r0, #0]
  404188:	784b      	ldrb	r3, [r1, #1]
  40418a:	7043      	strb	r3, [r0, #1]
  40418c:	788b      	ldrb	r3, [r1, #2]
  40418e:	7083      	strb	r3, [r0, #2]
  404190:	4660      	mov	r0, ip
  404192:	4770      	bx	lr

00404194 <memset>:
  404194:	b470      	push	{r4, r5, r6}
  404196:	0786      	lsls	r6, r0, #30
  404198:	d046      	beq.n	404228 <memset+0x94>
  40419a:	1e54      	subs	r4, r2, #1
  40419c:	2a00      	cmp	r2, #0
  40419e:	d041      	beq.n	404224 <memset+0x90>
  4041a0:	b2ca      	uxtb	r2, r1
  4041a2:	4603      	mov	r3, r0
  4041a4:	e002      	b.n	4041ac <memset+0x18>
  4041a6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4041aa:	d33b      	bcc.n	404224 <memset+0x90>
  4041ac:	f803 2b01 	strb.w	r2, [r3], #1
  4041b0:	079d      	lsls	r5, r3, #30
  4041b2:	d1f8      	bne.n	4041a6 <memset+0x12>
  4041b4:	2c03      	cmp	r4, #3
  4041b6:	d92e      	bls.n	404216 <memset+0x82>
  4041b8:	b2cd      	uxtb	r5, r1
  4041ba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4041be:	2c0f      	cmp	r4, #15
  4041c0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4041c4:	d919      	bls.n	4041fa <memset+0x66>
  4041c6:	4626      	mov	r6, r4
  4041c8:	f103 0210 	add.w	r2, r3, #16
  4041cc:	3e10      	subs	r6, #16
  4041ce:	2e0f      	cmp	r6, #15
  4041d0:	f842 5c10 	str.w	r5, [r2, #-16]
  4041d4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4041d8:	f842 5c08 	str.w	r5, [r2, #-8]
  4041dc:	f842 5c04 	str.w	r5, [r2, #-4]
  4041e0:	f102 0210 	add.w	r2, r2, #16
  4041e4:	d8f2      	bhi.n	4041cc <memset+0x38>
  4041e6:	f1a4 0210 	sub.w	r2, r4, #16
  4041ea:	f022 020f 	bic.w	r2, r2, #15
  4041ee:	f004 040f 	and.w	r4, r4, #15
  4041f2:	3210      	adds	r2, #16
  4041f4:	2c03      	cmp	r4, #3
  4041f6:	4413      	add	r3, r2
  4041f8:	d90d      	bls.n	404216 <memset+0x82>
  4041fa:	461e      	mov	r6, r3
  4041fc:	4622      	mov	r2, r4
  4041fe:	3a04      	subs	r2, #4
  404200:	2a03      	cmp	r2, #3
  404202:	f846 5b04 	str.w	r5, [r6], #4
  404206:	d8fa      	bhi.n	4041fe <memset+0x6a>
  404208:	1f22      	subs	r2, r4, #4
  40420a:	f022 0203 	bic.w	r2, r2, #3
  40420e:	3204      	adds	r2, #4
  404210:	4413      	add	r3, r2
  404212:	f004 0403 	and.w	r4, r4, #3
  404216:	b12c      	cbz	r4, 404224 <memset+0x90>
  404218:	b2c9      	uxtb	r1, r1
  40421a:	441c      	add	r4, r3
  40421c:	f803 1b01 	strb.w	r1, [r3], #1
  404220:	429c      	cmp	r4, r3
  404222:	d1fb      	bne.n	40421c <memset+0x88>
  404224:	bc70      	pop	{r4, r5, r6}
  404226:	4770      	bx	lr
  404228:	4614      	mov	r4, r2
  40422a:	4603      	mov	r3, r0
  40422c:	e7c2      	b.n	4041b4 <memset+0x20>
  40422e:	bf00      	nop

00404230 <sprintf>:
  404230:	b40e      	push	{r1, r2, r3}
  404232:	4601      	mov	r1, r0
  404234:	b5f0      	push	{r4, r5, r6, r7, lr}
  404236:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  40423a:	f44f 7702 	mov.w	r7, #520	; 0x208
  40423e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  404242:	b09c      	sub	sp, #112	; 0x70
  404244:	ac21      	add	r4, sp, #132	; 0x84
  404246:	f854 2b04 	ldr.w	r2, [r4], #4
  40424a:	4b0b      	ldr	r3, [pc, #44]	; (404278 <sprintf+0x48>)
  40424c:	9102      	str	r1, [sp, #8]
  40424e:	9106      	str	r1, [sp, #24]
  404250:	6818      	ldr	r0, [r3, #0]
  404252:	a902      	add	r1, sp, #8
  404254:	4623      	mov	r3, r4
  404256:	9401      	str	r4, [sp, #4]
  404258:	f8ad 7014 	strh.w	r7, [sp, #20]
  40425c:	9504      	str	r5, [sp, #16]
  40425e:	9507      	str	r5, [sp, #28]
  404260:	f8ad 6016 	strh.w	r6, [sp, #22]
  404264:	f000 f91c 	bl	4044a0 <_svfprintf_r>
  404268:	2200      	movs	r2, #0
  40426a:	9b02      	ldr	r3, [sp, #8]
  40426c:	701a      	strb	r2, [r3, #0]
  40426e:	b01c      	add	sp, #112	; 0x70
  404270:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404274:	b003      	add	sp, #12
  404276:	4770      	bx	lr
  404278:	200002b0 	.word	0x200002b0

0040427c <strlen>:
  40427c:	f020 0103 	bic.w	r1, r0, #3
  404280:	f010 0003 	ands.w	r0, r0, #3
  404284:	f1c0 0000 	rsb	r0, r0, #0
  404288:	f851 3b04 	ldr.w	r3, [r1], #4
  40428c:	f100 0c04 	add.w	ip, r0, #4
  404290:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  404294:	f06f 0200 	mvn.w	r2, #0
  404298:	bf1c      	itt	ne
  40429a:	fa22 f20c 	lsrne.w	r2, r2, ip
  40429e:	4313      	orrne	r3, r2
  4042a0:	f04f 0c01 	mov.w	ip, #1
  4042a4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4042a8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4042ac:	eba3 020c 	sub.w	r2, r3, ip
  4042b0:	ea22 0203 	bic.w	r2, r2, r3
  4042b4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4042b8:	bf04      	itt	eq
  4042ba:	f851 3b04 	ldreq.w	r3, [r1], #4
  4042be:	3004      	addeq	r0, #4
  4042c0:	d0f4      	beq.n	4042ac <strlen+0x30>
  4042c2:	f1c2 0100 	rsb	r1, r2, #0
  4042c6:	ea02 0201 	and.w	r2, r2, r1
  4042ca:	fab2 f282 	clz	r2, r2
  4042ce:	f1c2 021f 	rsb	r2, r2, #31
  4042d2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4042d6:	4770      	bx	lr

004042d8 <_strtoll_l.isra.0>:
  4042d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4042dc:	b085      	sub	sp, #20
  4042de:	9102      	str	r1, [sp, #8]
  4042e0:	9003      	str	r0, [sp, #12]
  4042e2:	9200      	str	r2, [sp, #0]
  4042e4:	461e      	mov	r6, r3
  4042e6:	4688      	mov	r8, r1
  4042e8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4042ea:	e000      	b.n	4042ee <_strtoll_l.isra.0+0x16>
  4042ec:	46a8      	mov	r8, r5
  4042ee:	4645      	mov	r5, r8
  4042f0:	4638      	mov	r0, r7
  4042f2:	f815 4b01 	ldrb.w	r4, [r5], #1
  4042f6:	f002 fc69 	bl	406bcc <__locale_ctype_ptr_l>
  4042fa:	4420      	add	r0, r4
  4042fc:	7843      	ldrb	r3, [r0, #1]
  4042fe:	f013 0308 	ands.w	r3, r3, #8
  404302:	d1f3      	bne.n	4042ec <_strtoll_l.isra.0+0x14>
  404304:	2c2d      	cmp	r4, #45	; 0x2d
  404306:	f000 8081 	beq.w	40440c <_strtoll_l.isra.0+0x134>
  40430a:	2c2b      	cmp	r4, #43	; 0x2b
  40430c:	bf03      	ittte	eq
  40430e:	782c      	ldrbeq	r4, [r5, #0]
  404310:	9301      	streq	r3, [sp, #4]
  404312:	f108 0502 	addeq.w	r5, r8, #2
  404316:	9301      	strne	r3, [sp, #4]
  404318:	b166      	cbz	r6, 404334 <_strtoll_l.isra.0+0x5c>
  40431a:	2e10      	cmp	r6, #16
  40431c:	f000 8088 	beq.w	404430 <_strtoll_l.isra.0+0x158>
  404320:	9b01      	ldr	r3, [sp, #4]
  404322:	46b0      	mov	r8, r6
  404324:	ea4f 79e6 	mov.w	r9, r6, asr #31
  404328:	b97b      	cbnz	r3, 40434a <_strtoll_l.isra.0+0x72>
  40432a:	f04f 3aff 	mov.w	sl, #4294967295
  40432e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
  404332:	e00e      	b.n	404352 <_strtoll_l.isra.0+0x7a>
  404334:	2c30      	cmp	r4, #48	; 0x30
  404336:	f000 808a 	beq.w	40444e <_strtoll_l.isra.0+0x176>
  40433a:	f04f 080a 	mov.w	r8, #10
  40433e:	f04f 0900 	mov.w	r9, #0
  404342:	260a      	movs	r6, #10
  404344:	9b01      	ldr	r3, [sp, #4]
  404346:	2b00      	cmp	r3, #0
  404348:	d0ef      	beq.n	40432a <_strtoll_l.isra.0+0x52>
  40434a:	f04f 0a00 	mov.w	sl, #0
  40434e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  404352:	4642      	mov	r2, r8
  404354:	464b      	mov	r3, r9
  404356:	4650      	mov	r0, sl
  404358:	4639      	mov	r1, r7
  40435a:	f004 f873 	bl	408444 <__aeabi_uldivmod>
  40435e:	464b      	mov	r3, r9
  404360:	4693      	mov	fp, r2
  404362:	4650      	mov	r0, sl
  404364:	4642      	mov	r2, r8
  404366:	4639      	mov	r1, r7
  404368:	f004 f86c 	bl	408444 <__aeabi_uldivmod>
  40436c:	f04f 0e00 	mov.w	lr, #0
  404370:	2200      	movs	r2, #0
  404372:	2300      	movs	r3, #0
  404374:	e00f      	b.n	404396 <_strtoll_l.isra.0+0xbe>
  404376:	d044      	beq.n	404402 <_strtoll_l.isra.0+0x12a>
  404378:	f04f 0e01 	mov.w	lr, #1
  40437c:	fb02 f409 	mul.w	r4, r2, r9
  404380:	fb08 4403 	mla	r4, r8, r3, r4
  404384:	fba2 2308 	umull	r2, r3, r2, r8
  404388:	4423      	add	r3, r4
  40438a:	eb12 020c 	adds.w	r2, r2, ip
  40438e:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
  404392:	f815 4b01 	ldrb.w	r4, [r5], #1
  404396:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  40439a:	f1bc 0f09 	cmp.w	ip, #9
  40439e:	d906      	bls.n	4043ae <_strtoll_l.isra.0+0xd6>
  4043a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
  4043a4:	f1bc 0f19 	cmp.w	ip, #25
  4043a8:	d80d      	bhi.n	4043c6 <_strtoll_l.isra.0+0xee>
  4043aa:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
  4043ae:	4566      	cmp	r6, ip
  4043b0:	dd12      	ble.n	4043d8 <_strtoll_l.isra.0+0x100>
  4043b2:	f1be 3fff 	cmp.w	lr, #4294967295
  4043b6:	d0ec      	beq.n	404392 <_strtoll_l.isra.0+0xba>
  4043b8:	4299      	cmp	r1, r3
  4043ba:	bf08      	it	eq
  4043bc:	4290      	cmpeq	r0, r2
  4043be:	d2da      	bcs.n	404376 <_strtoll_l.isra.0+0x9e>
  4043c0:	f04f 3eff 	mov.w	lr, #4294967295
  4043c4:	e7e5      	b.n	404392 <_strtoll_l.isra.0+0xba>
  4043c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
  4043ca:	f1bc 0f19 	cmp.w	ip, #25
  4043ce:	d803      	bhi.n	4043d8 <_strtoll_l.isra.0+0x100>
  4043d0:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
  4043d4:	4566      	cmp	r6, ip
  4043d6:	dcec      	bgt.n	4043b2 <_strtoll_l.isra.0+0xda>
  4043d8:	f1be 3fff 	cmp.w	lr, #4294967295
  4043dc:	d01c      	beq.n	404418 <_strtoll_l.isra.0+0x140>
  4043de:	9901      	ldr	r1, [sp, #4]
  4043e0:	b111      	cbz	r1, 4043e8 <_strtoll_l.isra.0+0x110>
  4043e2:	4252      	negs	r2, r2
  4043e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4043e8:	9900      	ldr	r1, [sp, #0]
  4043ea:	b129      	cbz	r1, 4043f8 <_strtoll_l.isra.0+0x120>
  4043ec:	f1be 0f00 	cmp.w	lr, #0
  4043f0:	d11b      	bne.n	40442a <_strtoll_l.isra.0+0x152>
  4043f2:	9d02      	ldr	r5, [sp, #8]
  4043f4:	9900      	ldr	r1, [sp, #0]
  4043f6:	600d      	str	r5, [r1, #0]
  4043f8:	4610      	mov	r0, r2
  4043fa:	4619      	mov	r1, r3
  4043fc:	b005      	add	sp, #20
  4043fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404402:	45e3      	cmp	fp, ip
  404404:	dab8      	bge.n	404378 <_strtoll_l.isra.0+0xa0>
  404406:	f04f 3eff 	mov.w	lr, #4294967295
  40440a:	e7c2      	b.n	404392 <_strtoll_l.isra.0+0xba>
  40440c:	2301      	movs	r3, #1
  40440e:	782c      	ldrb	r4, [r5, #0]
  404410:	9301      	str	r3, [sp, #4]
  404412:	f108 0502 	add.w	r5, r8, #2
  404416:	e77f      	b.n	404318 <_strtoll_l.isra.0+0x40>
  404418:	2322      	movs	r3, #34	; 0x22
  40441a:	9a03      	ldr	r2, [sp, #12]
  40441c:	6013      	str	r3, [r2, #0]
  40441e:	9b00      	ldr	r3, [sp, #0]
  404420:	b32b      	cbz	r3, 40446e <_strtoll_l.isra.0+0x196>
  404422:	4652      	mov	r2, sl
  404424:	3d01      	subs	r5, #1
  404426:	463b      	mov	r3, r7
  404428:	e7e4      	b.n	4043f4 <_strtoll_l.isra.0+0x11c>
  40442a:	4692      	mov	sl, r2
  40442c:	461f      	mov	r7, r3
  40442e:	e7f8      	b.n	404422 <_strtoll_l.isra.0+0x14a>
  404430:	2c30      	cmp	r4, #48	; 0x30
  404432:	d117      	bne.n	404464 <_strtoll_l.isra.0+0x18c>
  404434:	782b      	ldrb	r3, [r5, #0]
  404436:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  40443a:	2b58      	cmp	r3, #88	; 0x58
  40443c:	d112      	bne.n	404464 <_strtoll_l.isra.0+0x18c>
  40443e:	786c      	ldrb	r4, [r5, #1]
  404440:	f04f 0810 	mov.w	r8, #16
  404444:	f04f 0900 	mov.w	r9, #0
  404448:	3502      	adds	r5, #2
  40444a:	2610      	movs	r6, #16
  40444c:	e77a      	b.n	404344 <_strtoll_l.isra.0+0x6c>
  40444e:	782b      	ldrb	r3, [r5, #0]
  404450:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  404454:	2b58      	cmp	r3, #88	; 0x58
  404456:	d0f2      	beq.n	40443e <_strtoll_l.isra.0+0x166>
  404458:	f04f 0808 	mov.w	r8, #8
  40445c:	f04f 0900 	mov.w	r9, #0
  404460:	2608      	movs	r6, #8
  404462:	e76f      	b.n	404344 <_strtoll_l.isra.0+0x6c>
  404464:	f04f 0810 	mov.w	r8, #16
  404468:	f04f 0900 	mov.w	r9, #0
  40446c:	e76a      	b.n	404344 <_strtoll_l.isra.0+0x6c>
  40446e:	4652      	mov	r2, sl
  404470:	463b      	mov	r3, r7
  404472:	e7c1      	b.n	4043f8 <_strtoll_l.isra.0+0x120>

00404474 <strtoll>:
  404474:	4b08      	ldr	r3, [pc, #32]	; (404498 <strtoll+0x24>)
  404476:	b570      	push	{r4, r5, r6, lr}
  404478:	681d      	ldr	r5, [r3, #0]
  40447a:	4e08      	ldr	r6, [pc, #32]	; (40449c <strtoll+0x28>)
  40447c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  40447e:	b082      	sub	sp, #8
  404480:	2c00      	cmp	r4, #0
  404482:	bf08      	it	eq
  404484:	4634      	moveq	r4, r6
  404486:	4613      	mov	r3, r2
  404488:	9400      	str	r4, [sp, #0]
  40448a:	460a      	mov	r2, r1
  40448c:	4601      	mov	r1, r0
  40448e:	4628      	mov	r0, r5
  404490:	f7ff ff22 	bl	4042d8 <_strtoll_l.isra.0>
  404494:	b002      	add	sp, #8
  404496:	bd70      	pop	{r4, r5, r6, pc}
  404498:	200002b0 	.word	0x200002b0
  40449c:	200006e4 	.word	0x200006e4

004044a0 <_svfprintf_r>:
  4044a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044a4:	b0c3      	sub	sp, #268	; 0x10c
  4044a6:	460c      	mov	r4, r1
  4044a8:	910b      	str	r1, [sp, #44]	; 0x2c
  4044aa:	4692      	mov	sl, r2
  4044ac:	930f      	str	r3, [sp, #60]	; 0x3c
  4044ae:	900c      	str	r0, [sp, #48]	; 0x30
  4044b0:	f002 fb90 	bl	406bd4 <_localeconv_r>
  4044b4:	6803      	ldr	r3, [r0, #0]
  4044b6:	4618      	mov	r0, r3
  4044b8:	931a      	str	r3, [sp, #104]	; 0x68
  4044ba:	f7ff fedf 	bl	40427c <strlen>
  4044be:	89a3      	ldrh	r3, [r4, #12]
  4044c0:	9019      	str	r0, [sp, #100]	; 0x64
  4044c2:	0619      	lsls	r1, r3, #24
  4044c4:	d503      	bpl.n	4044ce <_svfprintf_r+0x2e>
  4044c6:	6923      	ldr	r3, [r4, #16]
  4044c8:	2b00      	cmp	r3, #0
  4044ca:	f001 8035 	beq.w	405538 <_svfprintf_r+0x1098>
  4044ce:	2300      	movs	r3, #0
  4044d0:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4044d4:	46c8      	mov	r8, r9
  4044d6:	9315      	str	r3, [sp, #84]	; 0x54
  4044d8:	9313      	str	r3, [sp, #76]	; 0x4c
  4044da:	9314      	str	r3, [sp, #80]	; 0x50
  4044dc:	9318      	str	r3, [sp, #96]	; 0x60
  4044de:	931b      	str	r3, [sp, #108]	; 0x6c
  4044e0:	9309      	str	r3, [sp, #36]	; 0x24
  4044e2:	9316      	str	r3, [sp, #88]	; 0x58
  4044e4:	9317      	str	r3, [sp, #92]	; 0x5c
  4044e6:	9327      	str	r3, [sp, #156]	; 0x9c
  4044e8:	9326      	str	r3, [sp, #152]	; 0x98
  4044ea:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4044ee:	f89a 3000 	ldrb.w	r3, [sl]
  4044f2:	4654      	mov	r4, sl
  4044f4:	b1eb      	cbz	r3, 404532 <_svfprintf_r+0x92>
  4044f6:	2b25      	cmp	r3, #37	; 0x25
  4044f8:	d102      	bne.n	404500 <_svfprintf_r+0x60>
  4044fa:	e01a      	b.n	404532 <_svfprintf_r+0x92>
  4044fc:	2b25      	cmp	r3, #37	; 0x25
  4044fe:	d003      	beq.n	404508 <_svfprintf_r+0x68>
  404500:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404504:	2b00      	cmp	r3, #0
  404506:	d1f9      	bne.n	4044fc <_svfprintf_r+0x5c>
  404508:	eba4 050a 	sub.w	r5, r4, sl
  40450c:	b18d      	cbz	r5, 404532 <_svfprintf_r+0x92>
  40450e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404510:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404512:	3301      	adds	r3, #1
  404514:	442a      	add	r2, r5
  404516:	2b07      	cmp	r3, #7
  404518:	f8c8 a000 	str.w	sl, [r8]
  40451c:	f8c8 5004 	str.w	r5, [r8, #4]
  404520:	9227      	str	r2, [sp, #156]	; 0x9c
  404522:	9326      	str	r3, [sp, #152]	; 0x98
  404524:	f300 808a 	bgt.w	40463c <_svfprintf_r+0x19c>
  404528:	f108 0808 	add.w	r8, r8, #8
  40452c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40452e:	442b      	add	r3, r5
  404530:	9309      	str	r3, [sp, #36]	; 0x24
  404532:	7823      	ldrb	r3, [r4, #0]
  404534:	2b00      	cmp	r3, #0
  404536:	f000 8089 	beq.w	40464c <_svfprintf_r+0x1ac>
  40453a:	2300      	movs	r3, #0
  40453c:	f04f 30ff 	mov.w	r0, #4294967295
  404540:	461a      	mov	r2, r3
  404542:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404546:	4619      	mov	r1, r3
  404548:	930d      	str	r3, [sp, #52]	; 0x34
  40454a:	469b      	mov	fp, r3
  40454c:	7863      	ldrb	r3, [r4, #1]
  40454e:	f104 0a01 	add.w	sl, r4, #1
  404552:	900a      	str	r0, [sp, #40]	; 0x28
  404554:	f10a 0a01 	add.w	sl, sl, #1
  404558:	f1a3 0020 	sub.w	r0, r3, #32
  40455c:	2858      	cmp	r0, #88	; 0x58
  40455e:	f200 83b7 	bhi.w	404cd0 <_svfprintf_r+0x830>
  404562:	e8df f010 	tbh	[pc, r0, lsl #1]
  404566:	034c      	.short	0x034c
  404568:	03b503b5 	.word	0x03b503b5
  40456c:	03b50354 	.word	0x03b50354
  404570:	03b503b5 	.word	0x03b503b5
  404574:	03b503b5 	.word	0x03b503b5
  404578:	005903b5 	.word	0x005903b5
  40457c:	03b50359 	.word	0x03b50359
  404580:	02140066 	.word	0x02140066
  404584:	022f03b5 	.word	0x022f03b5
  404588:	03a503a5 	.word	0x03a503a5
  40458c:	03a503a5 	.word	0x03a503a5
  404590:	03a503a5 	.word	0x03a503a5
  404594:	03a503a5 	.word	0x03a503a5
  404598:	03b503a5 	.word	0x03b503a5
  40459c:	03b503b5 	.word	0x03b503b5
  4045a0:	03b503b5 	.word	0x03b503b5
  4045a4:	03b503b5 	.word	0x03b503b5
  4045a8:	03b503b5 	.word	0x03b503b5
  4045ac:	028b03b5 	.word	0x028b03b5
  4045b0:	03b502d3 	.word	0x03b502d3
  4045b4:	03b502d3 	.word	0x03b502d3
  4045b8:	03b503b5 	.word	0x03b503b5
  4045bc:	031b03b5 	.word	0x031b03b5
  4045c0:	03b503b5 	.word	0x03b503b5
  4045c4:	03b50320 	.word	0x03b50320
  4045c8:	03b503b5 	.word	0x03b503b5
  4045cc:	03b503b5 	.word	0x03b503b5
  4045d0:	03b50234 	.word	0x03b50234
  4045d4:	024b03b5 	.word	0x024b03b5
  4045d8:	03b503b5 	.word	0x03b503b5
  4045dc:	03b503b5 	.word	0x03b503b5
  4045e0:	03b503b5 	.word	0x03b503b5
  4045e4:	03b503b5 	.word	0x03b503b5
  4045e8:	03b503b5 	.word	0x03b503b5
  4045ec:	039e0276 	.word	0x039e0276
  4045f0:	02d302d3 	.word	0x02d302d3
  4045f4:	036302d3 	.word	0x036302d3
  4045f8:	03b5039e 	.word	0x03b5039e
  4045fc:	036803b5 	.word	0x036803b5
  404600:	037503b5 	.word	0x037503b5
  404604:	038c01dd 	.word	0x038c01dd
  404608:	03b5035e 	.word	0x03b5035e
  40460c:	03b501f2 	.word	0x03b501f2
  404610:	03b50087 	.word	0x03b50087
  404614:	033203b5 	.word	0x033203b5
  404618:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40461a:	6823      	ldr	r3, [r4, #0]
  40461c:	4618      	mov	r0, r3
  40461e:	930d      	str	r3, [sp, #52]	; 0x34
  404620:	4623      	mov	r3, r4
  404622:	2800      	cmp	r0, #0
  404624:	f103 0304 	add.w	r3, r3, #4
  404628:	930f      	str	r3, [sp, #60]	; 0x3c
  40462a:	da04      	bge.n	404636 <_svfprintf_r+0x196>
  40462c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40462e:	425b      	negs	r3, r3
  404630:	930d      	str	r3, [sp, #52]	; 0x34
  404632:	f04b 0b04 	orr.w	fp, fp, #4
  404636:	f89a 3000 	ldrb.w	r3, [sl]
  40463a:	e78b      	b.n	404554 <_svfprintf_r+0xb4>
  40463c:	aa25      	add	r2, sp, #148	; 0x94
  40463e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404640:	980c      	ldr	r0, [sp, #48]	; 0x30
  404642:	f003 fb0b 	bl	407c5c <__ssprint_r>
  404646:	b940      	cbnz	r0, 40465a <_svfprintf_r+0x1ba>
  404648:	46c8      	mov	r8, r9
  40464a:	e76f      	b.n	40452c <_svfprintf_r+0x8c>
  40464c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40464e:	b123      	cbz	r3, 40465a <_svfprintf_r+0x1ba>
  404650:	980c      	ldr	r0, [sp, #48]	; 0x30
  404652:	aa25      	add	r2, sp, #148	; 0x94
  404654:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404656:	f003 fb01 	bl	407c5c <__ssprint_r>
  40465a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40465c:	899b      	ldrh	r3, [r3, #12]
  40465e:	f013 0f40 	tst.w	r3, #64	; 0x40
  404662:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404664:	bf18      	it	ne
  404666:	f04f 33ff 	movne.w	r3, #4294967295
  40466a:	9309      	str	r3, [sp, #36]	; 0x24
  40466c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40466e:	b043      	add	sp, #268	; 0x10c
  404670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404674:	f01b 0f20 	tst.w	fp, #32
  404678:	9311      	str	r3, [sp, #68]	; 0x44
  40467a:	f040 81af 	bne.w	4049dc <_svfprintf_r+0x53c>
  40467e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404680:	f01b 0f10 	tst.w	fp, #16
  404684:	4613      	mov	r3, r2
  404686:	f040 859a 	bne.w	4051be <_svfprintf_r+0xd1e>
  40468a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40468e:	f000 8596 	beq.w	4051be <_svfprintf_r+0xd1e>
  404692:	2500      	movs	r5, #0
  404694:	2301      	movs	r3, #1
  404696:	8814      	ldrh	r4, [r2, #0]
  404698:	3204      	adds	r2, #4
  40469a:	920f      	str	r2, [sp, #60]	; 0x3c
  40469c:	2200      	movs	r2, #0
  40469e:	4617      	mov	r7, r2
  4046a0:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
  4046a4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4046a6:	1c4a      	adds	r2, r1, #1
  4046a8:	f000 8210 	beq.w	404acc <_svfprintf_r+0x62c>
  4046ac:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4046b0:	9207      	str	r2, [sp, #28]
  4046b2:	ea54 0205 	orrs.w	r2, r4, r5
  4046b6:	f040 820f 	bne.w	404ad8 <_svfprintf_r+0x638>
  4046ba:	2900      	cmp	r1, #0
  4046bc:	f040 8431 	bne.w	404f22 <_svfprintf_r+0xa82>
  4046c0:	2b00      	cmp	r3, #0
  4046c2:	f040 8539 	bne.w	405138 <_svfprintf_r+0xc98>
  4046c6:	f01b 0301 	ands.w	r3, fp, #1
  4046ca:	930e      	str	r3, [sp, #56]	; 0x38
  4046cc:	f000 8662 	beq.w	405394 <_svfprintf_r+0xef4>
  4046d0:	2330      	movs	r3, #48	; 0x30
  4046d2:	ae42      	add	r6, sp, #264	; 0x108
  4046d4:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4046d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4046da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4046dc:	4293      	cmp	r3, r2
  4046de:	bfb8      	it	lt
  4046e0:	4613      	movlt	r3, r2
  4046e2:	9308      	str	r3, [sp, #32]
  4046e4:	2300      	movs	r3, #0
  4046e6:	9312      	str	r3, [sp, #72]	; 0x48
  4046e8:	b117      	cbz	r7, 4046f0 <_svfprintf_r+0x250>
  4046ea:	9b08      	ldr	r3, [sp, #32]
  4046ec:	3301      	adds	r3, #1
  4046ee:	9308      	str	r3, [sp, #32]
  4046f0:	9b07      	ldr	r3, [sp, #28]
  4046f2:	f013 0302 	ands.w	r3, r3, #2
  4046f6:	9310      	str	r3, [sp, #64]	; 0x40
  4046f8:	d002      	beq.n	404700 <_svfprintf_r+0x260>
  4046fa:	9b08      	ldr	r3, [sp, #32]
  4046fc:	3302      	adds	r3, #2
  4046fe:	9308      	str	r3, [sp, #32]
  404700:	9b07      	ldr	r3, [sp, #28]
  404702:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  404706:	f040 8310 	bne.w	404d2a <_svfprintf_r+0x88a>
  40470a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40470c:	9a08      	ldr	r2, [sp, #32]
  40470e:	eba3 0b02 	sub.w	fp, r3, r2
  404712:	f1bb 0f00 	cmp.w	fp, #0
  404716:	f340 8308 	ble.w	404d2a <_svfprintf_r+0x88a>
  40471a:	f1bb 0f10 	cmp.w	fp, #16
  40471e:	f340 87b2 	ble.w	405686 <_svfprintf_r+0x11e6>
  404722:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404724:	4643      	mov	r3, r8
  404726:	4621      	mov	r1, r4
  404728:	46a8      	mov	r8, r5
  40472a:	2710      	movs	r7, #16
  40472c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40472e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404730:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404732:	e006      	b.n	404742 <_svfprintf_r+0x2a2>
  404734:	f1ab 0b10 	sub.w	fp, fp, #16
  404738:	f1bb 0f10 	cmp.w	fp, #16
  40473c:	f103 0308 	add.w	r3, r3, #8
  404740:	dd18      	ble.n	404774 <_svfprintf_r+0x2d4>
  404742:	3201      	adds	r2, #1
  404744:	48ab      	ldr	r0, [pc, #684]	; (4049f4 <_svfprintf_r+0x554>)
  404746:	3110      	adds	r1, #16
  404748:	2a07      	cmp	r2, #7
  40474a:	9127      	str	r1, [sp, #156]	; 0x9c
  40474c:	9226      	str	r2, [sp, #152]	; 0x98
  40474e:	e883 0081 	stmia.w	r3, {r0, r7}
  404752:	ddef      	ble.n	404734 <_svfprintf_r+0x294>
  404754:	aa25      	add	r2, sp, #148	; 0x94
  404756:	4629      	mov	r1, r5
  404758:	4620      	mov	r0, r4
  40475a:	f003 fa7f 	bl	407c5c <__ssprint_r>
  40475e:	2800      	cmp	r0, #0
  404760:	f47f af7b 	bne.w	40465a <_svfprintf_r+0x1ba>
  404764:	f1ab 0b10 	sub.w	fp, fp, #16
  404768:	f1bb 0f10 	cmp.w	fp, #16
  40476c:	464b      	mov	r3, r9
  40476e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404770:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404772:	dce6      	bgt.n	404742 <_svfprintf_r+0x2a2>
  404774:	4645      	mov	r5, r8
  404776:	460c      	mov	r4, r1
  404778:	4698      	mov	r8, r3
  40477a:	3201      	adds	r2, #1
  40477c:	4b9d      	ldr	r3, [pc, #628]	; (4049f4 <_svfprintf_r+0x554>)
  40477e:	445c      	add	r4, fp
  404780:	2a07      	cmp	r2, #7
  404782:	9427      	str	r4, [sp, #156]	; 0x9c
  404784:	9226      	str	r2, [sp, #152]	; 0x98
  404786:	e888 0808 	stmia.w	r8, {r3, fp}
  40478a:	f300 82c3 	bgt.w	404d14 <_svfprintf_r+0x874>
  40478e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404792:	f108 0808 	add.w	r8, r8, #8
  404796:	b187      	cbz	r7, 4047ba <_svfprintf_r+0x31a>
  404798:	2101      	movs	r1, #1
  40479a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40479c:	440c      	add	r4, r1
  40479e:	440b      	add	r3, r1
  4047a0:	f10d 0277 	add.w	r2, sp, #119	; 0x77
  4047a4:	2b07      	cmp	r3, #7
  4047a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4047a8:	9326      	str	r3, [sp, #152]	; 0x98
  4047aa:	f8c8 1004 	str.w	r1, [r8, #4]
  4047ae:	f8c8 2000 	str.w	r2, [r8]
  4047b2:	f300 83cd 	bgt.w	404f50 <_svfprintf_r+0xab0>
  4047b6:	f108 0808 	add.w	r8, r8, #8
  4047ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4047bc:	b17b      	cbz	r3, 4047de <_svfprintf_r+0x33e>
  4047be:	2102      	movs	r1, #2
  4047c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047c2:	440c      	add	r4, r1
  4047c4:	3301      	adds	r3, #1
  4047c6:	aa1e      	add	r2, sp, #120	; 0x78
  4047c8:	2b07      	cmp	r3, #7
  4047ca:	9427      	str	r4, [sp, #156]	; 0x9c
  4047cc:	9326      	str	r3, [sp, #152]	; 0x98
  4047ce:	f8c8 1004 	str.w	r1, [r8, #4]
  4047d2:	f8c8 2000 	str.w	r2, [r8]
  4047d6:	f300 8411 	bgt.w	404ffc <_svfprintf_r+0xb5c>
  4047da:	f108 0808 	add.w	r8, r8, #8
  4047de:	2d80      	cmp	r5, #128	; 0x80
  4047e0:	f000 8304 	beq.w	404dec <_svfprintf_r+0x94c>
  4047e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4047e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4047e8:	1a9f      	subs	r7, r3, r2
  4047ea:	2f00      	cmp	r7, #0
  4047ec:	dd37      	ble.n	40485e <_svfprintf_r+0x3be>
  4047ee:	2f10      	cmp	r7, #16
  4047f0:	f340 8679 	ble.w	4054e6 <_svfprintf_r+0x1046>
  4047f4:	4d80      	ldr	r5, [pc, #512]	; (4049f8 <_svfprintf_r+0x558>)
  4047f6:	4642      	mov	r2, r8
  4047f8:	4621      	mov	r1, r4
  4047fa:	46b0      	mov	r8, r6
  4047fc:	f04f 0b10 	mov.w	fp, #16
  404800:	462e      	mov	r6, r5
  404802:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404804:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404806:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404808:	e004      	b.n	404814 <_svfprintf_r+0x374>
  40480a:	3f10      	subs	r7, #16
  40480c:	2f10      	cmp	r7, #16
  40480e:	f102 0208 	add.w	r2, r2, #8
  404812:	dd15      	ble.n	404840 <_svfprintf_r+0x3a0>
  404814:	3301      	adds	r3, #1
  404816:	3110      	adds	r1, #16
  404818:	2b07      	cmp	r3, #7
  40481a:	9127      	str	r1, [sp, #156]	; 0x9c
  40481c:	9326      	str	r3, [sp, #152]	; 0x98
  40481e:	e882 0840 	stmia.w	r2, {r6, fp}
  404822:	ddf2      	ble.n	40480a <_svfprintf_r+0x36a>
  404824:	aa25      	add	r2, sp, #148	; 0x94
  404826:	4629      	mov	r1, r5
  404828:	4620      	mov	r0, r4
  40482a:	f003 fa17 	bl	407c5c <__ssprint_r>
  40482e:	2800      	cmp	r0, #0
  404830:	f47f af13 	bne.w	40465a <_svfprintf_r+0x1ba>
  404834:	3f10      	subs	r7, #16
  404836:	2f10      	cmp	r7, #16
  404838:	464a      	mov	r2, r9
  40483a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40483c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40483e:	dce9      	bgt.n	404814 <_svfprintf_r+0x374>
  404840:	4635      	mov	r5, r6
  404842:	460c      	mov	r4, r1
  404844:	4646      	mov	r6, r8
  404846:	4690      	mov	r8, r2
  404848:	3301      	adds	r3, #1
  40484a:	443c      	add	r4, r7
  40484c:	2b07      	cmp	r3, #7
  40484e:	9427      	str	r4, [sp, #156]	; 0x9c
  404850:	9326      	str	r3, [sp, #152]	; 0x98
  404852:	e888 00a0 	stmia.w	r8, {r5, r7}
  404856:	f300 8370 	bgt.w	404f3a <_svfprintf_r+0xa9a>
  40485a:	f108 0808 	add.w	r8, r8, #8
  40485e:	9b07      	ldr	r3, [sp, #28]
  404860:	05df      	lsls	r7, r3, #23
  404862:	f100 8264 	bmi.w	404d2e <_svfprintf_r+0x88e>
  404866:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404868:	990e      	ldr	r1, [sp, #56]	; 0x38
  40486a:	3301      	adds	r3, #1
  40486c:	440c      	add	r4, r1
  40486e:	2b07      	cmp	r3, #7
  404870:	9427      	str	r4, [sp, #156]	; 0x9c
  404872:	f8c8 6000 	str.w	r6, [r8]
  404876:	f8c8 1004 	str.w	r1, [r8, #4]
  40487a:	9326      	str	r3, [sp, #152]	; 0x98
  40487c:	f300 83b3 	bgt.w	404fe6 <_svfprintf_r+0xb46>
  404880:	f108 0808 	add.w	r8, r8, #8
  404884:	9b07      	ldr	r3, [sp, #28]
  404886:	075b      	lsls	r3, r3, #29
  404888:	d53b      	bpl.n	404902 <_svfprintf_r+0x462>
  40488a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40488c:	9a08      	ldr	r2, [sp, #32]
  40488e:	1a9d      	subs	r5, r3, r2
  404890:	2d00      	cmp	r5, #0
  404892:	dd36      	ble.n	404902 <_svfprintf_r+0x462>
  404894:	2d10      	cmp	r5, #16
  404896:	f340 8721 	ble.w	4056dc <_svfprintf_r+0x123c>
  40489a:	2610      	movs	r6, #16
  40489c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40489e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4048a0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4048a4:	e004      	b.n	4048b0 <_svfprintf_r+0x410>
  4048a6:	3d10      	subs	r5, #16
  4048a8:	2d10      	cmp	r5, #16
  4048aa:	f108 0808 	add.w	r8, r8, #8
  4048ae:	dd16      	ble.n	4048de <_svfprintf_r+0x43e>
  4048b0:	3301      	adds	r3, #1
  4048b2:	4a50      	ldr	r2, [pc, #320]	; (4049f4 <_svfprintf_r+0x554>)
  4048b4:	3410      	adds	r4, #16
  4048b6:	2b07      	cmp	r3, #7
  4048b8:	9427      	str	r4, [sp, #156]	; 0x9c
  4048ba:	9326      	str	r3, [sp, #152]	; 0x98
  4048bc:	e888 0044 	stmia.w	r8, {r2, r6}
  4048c0:	ddf1      	ble.n	4048a6 <_svfprintf_r+0x406>
  4048c2:	aa25      	add	r2, sp, #148	; 0x94
  4048c4:	4659      	mov	r1, fp
  4048c6:	4638      	mov	r0, r7
  4048c8:	f003 f9c8 	bl	407c5c <__ssprint_r>
  4048cc:	2800      	cmp	r0, #0
  4048ce:	f47f aec4 	bne.w	40465a <_svfprintf_r+0x1ba>
  4048d2:	3d10      	subs	r5, #16
  4048d4:	2d10      	cmp	r5, #16
  4048d6:	46c8      	mov	r8, r9
  4048d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048da:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048dc:	dce8      	bgt.n	4048b0 <_svfprintf_r+0x410>
  4048de:	3301      	adds	r3, #1
  4048e0:	4a44      	ldr	r2, [pc, #272]	; (4049f4 <_svfprintf_r+0x554>)
  4048e2:	442c      	add	r4, r5
  4048e4:	2b07      	cmp	r3, #7
  4048e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4048e8:	9326      	str	r3, [sp, #152]	; 0x98
  4048ea:	e888 0024 	stmia.w	r8, {r2, r5}
  4048ee:	dd08      	ble.n	404902 <_svfprintf_r+0x462>
  4048f0:	aa25      	add	r2, sp, #148	; 0x94
  4048f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048f4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048f6:	f003 f9b1 	bl	407c5c <__ssprint_r>
  4048fa:	2800      	cmp	r0, #0
  4048fc:	f47f aead 	bne.w	40465a <_svfprintf_r+0x1ba>
  404900:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404902:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404904:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404906:	9908      	ldr	r1, [sp, #32]
  404908:	428a      	cmp	r2, r1
  40490a:	bfac      	ite	ge
  40490c:	189b      	addge	r3, r3, r2
  40490e:	185b      	addlt	r3, r3, r1
  404910:	9309      	str	r3, [sp, #36]	; 0x24
  404912:	2c00      	cmp	r4, #0
  404914:	f040 82fb 	bne.w	404f0e <_svfprintf_r+0xa6e>
  404918:	2300      	movs	r3, #0
  40491a:	46c8      	mov	r8, r9
  40491c:	9326      	str	r3, [sp, #152]	; 0x98
  40491e:	e5e6      	b.n	4044ee <_svfprintf_r+0x4e>
  404920:	9311      	str	r3, [sp, #68]	; 0x44
  404922:	f01b 0320 	ands.w	r3, fp, #32
  404926:	f040 8145 	bne.w	404bb4 <_svfprintf_r+0x714>
  40492a:	f01b 0210 	ands.w	r2, fp, #16
  40492e:	f040 8466 	bne.w	4051fe <_svfprintf_r+0xd5e>
  404932:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404936:	f000 8462 	beq.w	4051fe <_svfprintf_r+0xd5e>
  40493a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40493c:	4613      	mov	r3, r2
  40493e:	460a      	mov	r2, r1
  404940:	3204      	adds	r2, #4
  404942:	880c      	ldrh	r4, [r1, #0]
  404944:	2500      	movs	r5, #0
  404946:	920f      	str	r2, [sp, #60]	; 0x3c
  404948:	e6a8      	b.n	40469c <_svfprintf_r+0x1fc>
  40494a:	2500      	movs	r5, #0
  40494c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40494e:	9311      	str	r3, [sp, #68]	; 0x44
  404950:	6816      	ldr	r6, [r2, #0]
  404952:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  404956:	1d14      	adds	r4, r2, #4
  404958:	2e00      	cmp	r6, #0
  40495a:	f000 86cd 	beq.w	4056f8 <_svfprintf_r+0x1258>
  40495e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404960:	1c53      	adds	r3, r2, #1
  404962:	f000 861b 	beq.w	40559c <_svfprintf_r+0x10fc>
  404966:	4629      	mov	r1, r5
  404968:	4630      	mov	r0, r6
  40496a:	f002 fbfd 	bl	407168 <memchr>
  40496e:	2800      	cmp	r0, #0
  404970:	f000 870d 	beq.w	40578e <_svfprintf_r+0x12ee>
  404974:	1b83      	subs	r3, r0, r6
  404976:	950a      	str	r5, [sp, #40]	; 0x28
  404978:	930e      	str	r3, [sp, #56]	; 0x38
  40497a:	940f      	str	r4, [sp, #60]	; 0x3c
  40497c:	f8cd b01c 	str.w	fp, [sp, #28]
  404980:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404984:	9308      	str	r3, [sp, #32]
  404986:	9512      	str	r5, [sp, #72]	; 0x48
  404988:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40498c:	e6ac      	b.n	4046e8 <_svfprintf_r+0x248>
  40498e:	f89a 3000 	ldrb.w	r3, [sl]
  404992:	f10a 0401 	add.w	r4, sl, #1
  404996:	2b2a      	cmp	r3, #42	; 0x2a
  404998:	f000 87c2 	beq.w	405920 <_svfprintf_r+0x1480>
  40499c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4049a0:	2809      	cmp	r0, #9
  4049a2:	46a2      	mov	sl, r4
  4049a4:	f200 8718 	bhi.w	4057d8 <_svfprintf_r+0x1338>
  4049a8:	2300      	movs	r3, #0
  4049aa:	461c      	mov	r4, r3
  4049ac:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4049b0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4049b4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4049b8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4049bc:	2809      	cmp	r0, #9
  4049be:	d9f5      	bls.n	4049ac <_svfprintf_r+0x50c>
  4049c0:	940a      	str	r4, [sp, #40]	; 0x28
  4049c2:	e5c9      	b.n	404558 <_svfprintf_r+0xb8>
  4049c4:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4049c8:	f89a 3000 	ldrb.w	r3, [sl]
  4049cc:	e5c2      	b.n	404554 <_svfprintf_r+0xb4>
  4049ce:	f04b 0b10 	orr.w	fp, fp, #16
  4049d2:	f01b 0f20 	tst.w	fp, #32
  4049d6:	9311      	str	r3, [sp, #68]	; 0x44
  4049d8:	f43f ae51 	beq.w	40467e <_svfprintf_r+0x1de>
  4049dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4049de:	3407      	adds	r4, #7
  4049e0:	f024 0307 	bic.w	r3, r4, #7
  4049e4:	f103 0208 	add.w	r2, r3, #8
  4049e8:	e9d3 4500 	ldrd	r4, r5, [r3]
  4049ec:	920f      	str	r2, [sp, #60]	; 0x3c
  4049ee:	2301      	movs	r3, #1
  4049f0:	e654      	b.n	40469c <_svfprintf_r+0x1fc>
  4049f2:	bf00      	nop
  4049f4:	00408a28 	.word	0x00408a28
  4049f8:	00408a38 	.word	0x00408a38
  4049fc:	9311      	str	r3, [sp, #68]	; 0x44
  4049fe:	2a00      	cmp	r2, #0
  404a00:	f040 87ad 	bne.w	40595e <_svfprintf_r+0x14be>
  404a04:	4bbe      	ldr	r3, [pc, #760]	; (404d00 <_svfprintf_r+0x860>)
  404a06:	f01b 0f20 	tst.w	fp, #32
  404a0a:	9318      	str	r3, [sp, #96]	; 0x60
  404a0c:	f040 80e7 	bne.w	404bde <_svfprintf_r+0x73e>
  404a10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a12:	f01b 0f10 	tst.w	fp, #16
  404a16:	4613      	mov	r3, r2
  404a18:	f040 83d8 	bne.w	4051cc <_svfprintf_r+0xd2c>
  404a1c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404a20:	f000 83d4 	beq.w	4051cc <_svfprintf_r+0xd2c>
  404a24:	2500      	movs	r5, #0
  404a26:	3304      	adds	r3, #4
  404a28:	8814      	ldrh	r4, [r2, #0]
  404a2a:	930f      	str	r3, [sp, #60]	; 0x3c
  404a2c:	f01b 0f01 	tst.w	fp, #1
  404a30:	f000 80e3 	beq.w	404bfa <_svfprintf_r+0x75a>
  404a34:	ea54 0305 	orrs.w	r3, r4, r5
  404a38:	f000 80df 	beq.w	404bfa <_svfprintf_r+0x75a>
  404a3c:	2330      	movs	r3, #48	; 0x30
  404a3e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404a42:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  404a46:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404a4a:	f04b 0b02 	orr.w	fp, fp, #2
  404a4e:	2302      	movs	r3, #2
  404a50:	e624      	b.n	40469c <_svfprintf_r+0x1fc>
  404a52:	2201      	movs	r2, #1
  404a54:	9311      	str	r3, [sp, #68]	; 0x44
  404a56:	2300      	movs	r3, #0
  404a58:	4611      	mov	r1, r2
  404a5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404a5c:	9208      	str	r2, [sp, #32]
  404a5e:	6802      	ldr	r2, [r0, #0]
  404a60:	461f      	mov	r7, r3
  404a62:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404a66:	930a      	str	r3, [sp, #40]	; 0x28
  404a68:	9312      	str	r3, [sp, #72]	; 0x48
  404a6a:	1d03      	adds	r3, r0, #4
  404a6c:	f8cd b01c 	str.w	fp, [sp, #28]
  404a70:	910e      	str	r1, [sp, #56]	; 0x38
  404a72:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404a76:	930f      	str	r3, [sp, #60]	; 0x3c
  404a78:	ae28      	add	r6, sp, #160	; 0xa0
  404a7a:	e639      	b.n	4046f0 <_svfprintf_r+0x250>
  404a7c:	9311      	str	r3, [sp, #68]	; 0x44
  404a7e:	2a00      	cmp	r2, #0
  404a80:	f040 8784 	bne.w	40598c <_svfprintf_r+0x14ec>
  404a84:	f04b 0b10 	orr.w	fp, fp, #16
  404a88:	f01b 0f20 	tst.w	fp, #32
  404a8c:	f040 8475 	bne.w	40537a <_svfprintf_r+0xeda>
  404a90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a92:	f01b 0f10 	tst.w	fp, #16
  404a96:	4613      	mov	r3, r2
  404a98:	f040 839d 	bne.w	4051d6 <_svfprintf_r+0xd36>
  404a9c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404aa0:	f000 8399 	beq.w	4051d6 <_svfprintf_r+0xd36>
  404aa4:	f9b2 4000 	ldrsh.w	r4, [r2]
  404aa8:	3304      	adds	r3, #4
  404aaa:	17e5      	asrs	r5, r4, #31
  404aac:	930f      	str	r3, [sp, #60]	; 0x3c
  404aae:	4622      	mov	r2, r4
  404ab0:	462b      	mov	r3, r5
  404ab2:	2a00      	cmp	r2, #0
  404ab4:	f173 0300 	sbcs.w	r3, r3, #0
  404ab8:	f2c0 8398 	blt.w	4051ec <_svfprintf_r+0xd4c>
  404abc:	990a      	ldr	r1, [sp, #40]	; 0x28
  404abe:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404ac2:	1c4a      	adds	r2, r1, #1
  404ac4:	f04f 0301 	mov.w	r3, #1
  404ac8:	f47f adf0 	bne.w	4046ac <_svfprintf_r+0x20c>
  404acc:	ea54 0205 	orrs.w	r2, r4, r5
  404ad0:	f000 8229 	beq.w	404f26 <_svfprintf_r+0xa86>
  404ad4:	f8cd b01c 	str.w	fp, [sp, #28]
  404ad8:	2b01      	cmp	r3, #1
  404ada:	f000 830e 	beq.w	4050fa <_svfprintf_r+0xc5a>
  404ade:	2b02      	cmp	r3, #2
  404ae0:	f040 829c 	bne.w	40501c <_svfprintf_r+0xb7c>
  404ae4:	464e      	mov	r6, r9
  404ae6:	9818      	ldr	r0, [sp, #96]	; 0x60
  404ae8:	0923      	lsrs	r3, r4, #4
  404aea:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404aee:	0929      	lsrs	r1, r5, #4
  404af0:	f004 020f 	and.w	r2, r4, #15
  404af4:	460d      	mov	r5, r1
  404af6:	461c      	mov	r4, r3
  404af8:	5c83      	ldrb	r3, [r0, r2]
  404afa:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404afe:	ea54 0305 	orrs.w	r3, r4, r5
  404b02:	d1f1      	bne.n	404ae8 <_svfprintf_r+0x648>
  404b04:	eba9 0306 	sub.w	r3, r9, r6
  404b08:	930e      	str	r3, [sp, #56]	; 0x38
  404b0a:	e5e5      	b.n	4046d8 <_svfprintf_r+0x238>
  404b0c:	9311      	str	r3, [sp, #68]	; 0x44
  404b0e:	2a00      	cmp	r2, #0
  404b10:	f040 8738 	bne.w	405984 <_svfprintf_r+0x14e4>
  404b14:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404b16:	f01b 0f08 	tst.w	fp, #8
  404b1a:	f104 0407 	add.w	r4, r4, #7
  404b1e:	f000 84cf 	beq.w	4054c0 <_svfprintf_r+0x1020>
  404b22:	f024 0307 	bic.w	r3, r4, #7
  404b26:	f103 0208 	add.w	r2, r3, #8
  404b2a:	920f      	str	r2, [sp, #60]	; 0x3c
  404b2c:	681a      	ldr	r2, [r3, #0]
  404b2e:	685b      	ldr	r3, [r3, #4]
  404b30:	9215      	str	r2, [sp, #84]	; 0x54
  404b32:	9314      	str	r3, [sp, #80]	; 0x50
  404b34:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404b36:	9d15      	ldr	r5, [sp, #84]	; 0x54
  404b38:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404b3c:	4628      	mov	r0, r5
  404b3e:	4621      	mov	r1, r4
  404b40:	f04f 32ff 	mov.w	r2, #4294967295
  404b44:	4b6f      	ldr	r3, [pc, #444]	; (404d04 <_svfprintf_r+0x864>)
  404b46:	f003 fc3f 	bl	4083c8 <__aeabi_dcmpun>
  404b4a:	2800      	cmp	r0, #0
  404b4c:	f040 8434 	bne.w	4053b8 <_svfprintf_r+0xf18>
  404b50:	4628      	mov	r0, r5
  404b52:	4621      	mov	r1, r4
  404b54:	f04f 32ff 	mov.w	r2, #4294967295
  404b58:	4b6a      	ldr	r3, [pc, #424]	; (404d04 <_svfprintf_r+0x864>)
  404b5a:	f003 fc17 	bl	40838c <__aeabi_dcmple>
  404b5e:	2800      	cmp	r0, #0
  404b60:	f040 842a 	bne.w	4053b8 <_svfprintf_r+0xf18>
  404b64:	a815      	add	r0, sp, #84	; 0x54
  404b66:	c80d      	ldmia	r0, {r0, r2, r3}
  404b68:	9914      	ldr	r1, [sp, #80]	; 0x50
  404b6a:	f003 fc05 	bl	408378 <__aeabi_dcmplt>
  404b6e:	2800      	cmp	r0, #0
  404b70:	f040 85d4 	bne.w	40571c <_svfprintf_r+0x127c>
  404b74:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404b78:	2303      	movs	r3, #3
  404b7a:	461a      	mov	r2, r3
  404b7c:	9308      	str	r3, [sp, #32]
  404b7e:	2300      	movs	r3, #0
  404b80:	4e61      	ldr	r6, [pc, #388]	; (404d08 <_svfprintf_r+0x868>)
  404b82:	4619      	mov	r1, r3
  404b84:	930a      	str	r3, [sp, #40]	; 0x28
  404b86:	4b61      	ldr	r3, [pc, #388]	; (404d0c <_svfprintf_r+0x86c>)
  404b88:	920e      	str	r2, [sp, #56]	; 0x38
  404b8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b8c:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404b90:	9007      	str	r0, [sp, #28]
  404b92:	9112      	str	r1, [sp, #72]	; 0x48
  404b94:	2a47      	cmp	r2, #71	; 0x47
  404b96:	bfd8      	it	le
  404b98:	461e      	movle	r6, r3
  404b9a:	e5a5      	b.n	4046e8 <_svfprintf_r+0x248>
  404b9c:	f04b 0b08 	orr.w	fp, fp, #8
  404ba0:	f89a 3000 	ldrb.w	r3, [sl]
  404ba4:	e4d6      	b.n	404554 <_svfprintf_r+0xb4>
  404ba6:	f04b 0b10 	orr.w	fp, fp, #16
  404baa:	9311      	str	r3, [sp, #68]	; 0x44
  404bac:	f01b 0320 	ands.w	r3, fp, #32
  404bb0:	f43f aebb 	beq.w	40492a <_svfprintf_r+0x48a>
  404bb4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404bb6:	3407      	adds	r4, #7
  404bb8:	f024 0307 	bic.w	r3, r4, #7
  404bbc:	f103 0208 	add.w	r2, r3, #8
  404bc0:	e9d3 4500 	ldrd	r4, r5, [r3]
  404bc4:	920f      	str	r2, [sp, #60]	; 0x3c
  404bc6:	2300      	movs	r3, #0
  404bc8:	e568      	b.n	40469c <_svfprintf_r+0x1fc>
  404bca:	9311      	str	r3, [sp, #68]	; 0x44
  404bcc:	2a00      	cmp	r2, #0
  404bce:	f040 86c2 	bne.w	405956 <_svfprintf_r+0x14b6>
  404bd2:	4b4f      	ldr	r3, [pc, #316]	; (404d10 <_svfprintf_r+0x870>)
  404bd4:	f01b 0f20 	tst.w	fp, #32
  404bd8:	9318      	str	r3, [sp, #96]	; 0x60
  404bda:	f43f af19 	beq.w	404a10 <_svfprintf_r+0x570>
  404bde:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404be0:	f01b 0f01 	tst.w	fp, #1
  404be4:	f104 0407 	add.w	r4, r4, #7
  404be8:	f024 0307 	bic.w	r3, r4, #7
  404bec:	f103 0208 	add.w	r2, r3, #8
  404bf0:	920f      	str	r2, [sp, #60]	; 0x3c
  404bf2:	e9d3 4500 	ldrd	r4, r5, [r3]
  404bf6:	f47f af1d 	bne.w	404a34 <_svfprintf_r+0x594>
  404bfa:	2302      	movs	r3, #2
  404bfc:	e54e      	b.n	40469c <_svfprintf_r+0x1fc>
  404bfe:	f89a 3000 	ldrb.w	r3, [sl]
  404c02:	2900      	cmp	r1, #0
  404c04:	f47f aca6 	bne.w	404554 <_svfprintf_r+0xb4>
  404c08:	2201      	movs	r2, #1
  404c0a:	2120      	movs	r1, #32
  404c0c:	e4a2      	b.n	404554 <_svfprintf_r+0xb4>
  404c0e:	f04b 0b01 	orr.w	fp, fp, #1
  404c12:	f89a 3000 	ldrb.w	r3, [sl]
  404c16:	e49d      	b.n	404554 <_svfprintf_r+0xb4>
  404c18:	f89a 3000 	ldrb.w	r3, [sl]
  404c1c:	2201      	movs	r2, #1
  404c1e:	212b      	movs	r1, #43	; 0x2b
  404c20:	e498      	b.n	404554 <_svfprintf_r+0xb4>
  404c22:	f04b 0b20 	orr.w	fp, fp, #32
  404c26:	f89a 3000 	ldrb.w	r3, [sl]
  404c2a:	e493      	b.n	404554 <_svfprintf_r+0xb4>
  404c2c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404c30:	f89a 3000 	ldrb.w	r3, [sl]
  404c34:	e48e      	b.n	404554 <_svfprintf_r+0xb4>
  404c36:	f89a 3000 	ldrb.w	r3, [sl]
  404c3a:	2b6c      	cmp	r3, #108	; 0x6c
  404c3c:	bf03      	ittte	eq
  404c3e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404c42:	f04b 0b20 	orreq.w	fp, fp, #32
  404c46:	f10a 0a01 	addeq.w	sl, sl, #1
  404c4a:	f04b 0b10 	orrne.w	fp, fp, #16
  404c4e:	e481      	b.n	404554 <_svfprintf_r+0xb4>
  404c50:	2a00      	cmp	r2, #0
  404c52:	f040 867c 	bne.w	40594e <_svfprintf_r+0x14ae>
  404c56:	f01b 0f20 	tst.w	fp, #32
  404c5a:	f040 8452 	bne.w	405502 <_svfprintf_r+0x1062>
  404c5e:	f01b 0f10 	tst.w	fp, #16
  404c62:	f040 8438 	bne.w	4054d6 <_svfprintf_r+0x1036>
  404c66:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404c6a:	f000 8434 	beq.w	4054d6 <_svfprintf_r+0x1036>
  404c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404c70:	6813      	ldr	r3, [r2, #0]
  404c72:	3204      	adds	r2, #4
  404c74:	920f      	str	r2, [sp, #60]	; 0x3c
  404c76:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404c7a:	801a      	strh	r2, [r3, #0]
  404c7c:	e437      	b.n	4044ee <_svfprintf_r+0x4e>
  404c7e:	2378      	movs	r3, #120	; 0x78
  404c80:	2230      	movs	r2, #48	; 0x30
  404c82:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404c84:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404c88:	9311      	str	r3, [sp, #68]	; 0x44
  404c8a:	1d03      	adds	r3, r0, #4
  404c8c:	930f      	str	r3, [sp, #60]	; 0x3c
  404c8e:	4b20      	ldr	r3, [pc, #128]	; (404d10 <_svfprintf_r+0x870>)
  404c90:	6804      	ldr	r4, [r0, #0]
  404c92:	9318      	str	r3, [sp, #96]	; 0x60
  404c94:	f04b 0b02 	orr.w	fp, fp, #2
  404c98:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404c9c:	2500      	movs	r5, #0
  404c9e:	2302      	movs	r3, #2
  404ca0:	e4fc      	b.n	40469c <_svfprintf_r+0x1fc>
  404ca2:	9311      	str	r3, [sp, #68]	; 0x44
  404ca4:	2a00      	cmp	r2, #0
  404ca6:	f43f aeef 	beq.w	404a88 <_svfprintf_r+0x5e8>
  404caa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404cae:	e6eb      	b.n	404a88 <_svfprintf_r+0x5e8>
  404cb0:	2000      	movs	r0, #0
  404cb2:	4604      	mov	r4, r0
  404cb4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404cb8:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404cbc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404cc0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404cc4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404cc8:	2809      	cmp	r0, #9
  404cca:	d9f5      	bls.n	404cb8 <_svfprintf_r+0x818>
  404ccc:	940d      	str	r4, [sp, #52]	; 0x34
  404cce:	e443      	b.n	404558 <_svfprintf_r+0xb8>
  404cd0:	9311      	str	r3, [sp, #68]	; 0x44
  404cd2:	2a00      	cmp	r2, #0
  404cd4:	f040 864a 	bne.w	40596c <_svfprintf_r+0x14cc>
  404cd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cda:	2a00      	cmp	r2, #0
  404cdc:	f43f acb6 	beq.w	40464c <_svfprintf_r+0x1ac>
  404ce0:	2300      	movs	r3, #0
  404ce2:	2101      	movs	r1, #1
  404ce4:	461f      	mov	r7, r3
  404ce6:	9108      	str	r1, [sp, #32]
  404ce8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404cec:	f8cd b01c 	str.w	fp, [sp, #28]
  404cf0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404cf4:	930a      	str	r3, [sp, #40]	; 0x28
  404cf6:	9312      	str	r3, [sp, #72]	; 0x48
  404cf8:	910e      	str	r1, [sp, #56]	; 0x38
  404cfa:	ae28      	add	r6, sp, #160	; 0xa0
  404cfc:	e4f8      	b.n	4046f0 <_svfprintf_r+0x250>
  404cfe:	bf00      	nop
  404d00:	004089f4 	.word	0x004089f4
  404d04:	7fefffff 	.word	0x7fefffff
  404d08:	004089e8 	.word	0x004089e8
  404d0c:	004089e4 	.word	0x004089e4
  404d10:	00408a08 	.word	0x00408a08
  404d14:	aa25      	add	r2, sp, #148	; 0x94
  404d16:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d18:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d1a:	f002 ff9f 	bl	407c5c <__ssprint_r>
  404d1e:	2800      	cmp	r0, #0
  404d20:	f47f ac9b 	bne.w	40465a <_svfprintf_r+0x1ba>
  404d24:	46c8      	mov	r8, r9
  404d26:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404d2a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d2c:	e533      	b.n	404796 <_svfprintf_r+0x2f6>
  404d2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d30:	2b65      	cmp	r3, #101	; 0x65
  404d32:	f340 809a 	ble.w	404e6a <_svfprintf_r+0x9ca>
  404d36:	a815      	add	r0, sp, #84	; 0x54
  404d38:	c80d      	ldmia	r0, {r0, r2, r3}
  404d3a:	9914      	ldr	r1, [sp, #80]	; 0x50
  404d3c:	f003 fb12 	bl	408364 <__aeabi_dcmpeq>
  404d40:	2800      	cmp	r0, #0
  404d42:	f000 8193 	beq.w	40506c <_svfprintf_r+0xbcc>
  404d46:	2101      	movs	r1, #1
  404d48:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d4a:	4ab5      	ldr	r2, [pc, #724]	; (405020 <_svfprintf_r+0xb80>)
  404d4c:	440b      	add	r3, r1
  404d4e:	440c      	add	r4, r1
  404d50:	2b07      	cmp	r3, #7
  404d52:	9427      	str	r4, [sp, #156]	; 0x9c
  404d54:	9326      	str	r3, [sp, #152]	; 0x98
  404d56:	f8c8 1004 	str.w	r1, [r8, #4]
  404d5a:	f8c8 2000 	str.w	r2, [r8]
  404d5e:	f300 83c6 	bgt.w	4054ee <_svfprintf_r+0x104e>
  404d62:	f108 0808 	add.w	r8, r8, #8
  404d66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404d68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404d6a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d6c:	4293      	cmp	r3, r2
  404d6e:	db03      	blt.n	404d78 <_svfprintf_r+0x8d8>
  404d70:	9b07      	ldr	r3, [sp, #28]
  404d72:	07dd      	lsls	r5, r3, #31
  404d74:	f57f ad86 	bpl.w	404884 <_svfprintf_r+0x3e4>
  404d78:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d7a:	9919      	ldr	r1, [sp, #100]	; 0x64
  404d7c:	3301      	adds	r3, #1
  404d7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404d80:	440c      	add	r4, r1
  404d82:	2b07      	cmp	r3, #7
  404d84:	f8c8 2000 	str.w	r2, [r8]
  404d88:	f8c8 1004 	str.w	r1, [r8, #4]
  404d8c:	9427      	str	r4, [sp, #156]	; 0x9c
  404d8e:	9326      	str	r3, [sp, #152]	; 0x98
  404d90:	f300 83c4 	bgt.w	40551c <_svfprintf_r+0x107c>
  404d94:	f108 0808 	add.w	r8, r8, #8
  404d98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404d9a:	1e5e      	subs	r6, r3, #1
  404d9c:	2e00      	cmp	r6, #0
  404d9e:	f77f ad71 	ble.w	404884 <_svfprintf_r+0x3e4>
  404da2:	2e10      	cmp	r6, #16
  404da4:	f340 8575 	ble.w	405892 <_svfprintf_r+0x13f2>
  404da8:	4622      	mov	r2, r4
  404daa:	2710      	movs	r7, #16
  404dac:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404dae:	4d9d      	ldr	r5, [pc, #628]	; (405024 <_svfprintf_r+0xb84>)
  404db0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404db4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404db6:	e005      	b.n	404dc4 <_svfprintf_r+0x924>
  404db8:	f108 0808 	add.w	r8, r8, #8
  404dbc:	3e10      	subs	r6, #16
  404dbe:	2e10      	cmp	r6, #16
  404dc0:	f340 8225 	ble.w	40520e <_svfprintf_r+0xd6e>
  404dc4:	3301      	adds	r3, #1
  404dc6:	3210      	adds	r2, #16
  404dc8:	2b07      	cmp	r3, #7
  404dca:	9227      	str	r2, [sp, #156]	; 0x9c
  404dcc:	9326      	str	r3, [sp, #152]	; 0x98
  404dce:	e888 00a0 	stmia.w	r8, {r5, r7}
  404dd2:	ddf1      	ble.n	404db8 <_svfprintf_r+0x918>
  404dd4:	aa25      	add	r2, sp, #148	; 0x94
  404dd6:	4621      	mov	r1, r4
  404dd8:	4658      	mov	r0, fp
  404dda:	f002 ff3f 	bl	407c5c <__ssprint_r>
  404dde:	2800      	cmp	r0, #0
  404de0:	f47f ac3b 	bne.w	40465a <_svfprintf_r+0x1ba>
  404de4:	46c8      	mov	r8, r9
  404de6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404de8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404dea:	e7e7      	b.n	404dbc <_svfprintf_r+0x91c>
  404dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404dee:	9a08      	ldr	r2, [sp, #32]
  404df0:	1a9f      	subs	r7, r3, r2
  404df2:	2f00      	cmp	r7, #0
  404df4:	f77f acf6 	ble.w	4047e4 <_svfprintf_r+0x344>
  404df8:	2f10      	cmp	r7, #16
  404dfa:	f340 84a8 	ble.w	40574e <_svfprintf_r+0x12ae>
  404dfe:	4d89      	ldr	r5, [pc, #548]	; (405024 <_svfprintf_r+0xb84>)
  404e00:	4642      	mov	r2, r8
  404e02:	4621      	mov	r1, r4
  404e04:	46b0      	mov	r8, r6
  404e06:	f04f 0b10 	mov.w	fp, #16
  404e0a:	462e      	mov	r6, r5
  404e0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404e10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404e12:	e004      	b.n	404e1e <_svfprintf_r+0x97e>
  404e14:	3f10      	subs	r7, #16
  404e16:	2f10      	cmp	r7, #16
  404e18:	f102 0208 	add.w	r2, r2, #8
  404e1c:	dd15      	ble.n	404e4a <_svfprintf_r+0x9aa>
  404e1e:	3301      	adds	r3, #1
  404e20:	3110      	adds	r1, #16
  404e22:	2b07      	cmp	r3, #7
  404e24:	9127      	str	r1, [sp, #156]	; 0x9c
  404e26:	9326      	str	r3, [sp, #152]	; 0x98
  404e28:	e882 0840 	stmia.w	r2, {r6, fp}
  404e2c:	ddf2      	ble.n	404e14 <_svfprintf_r+0x974>
  404e2e:	aa25      	add	r2, sp, #148	; 0x94
  404e30:	4629      	mov	r1, r5
  404e32:	4620      	mov	r0, r4
  404e34:	f002 ff12 	bl	407c5c <__ssprint_r>
  404e38:	2800      	cmp	r0, #0
  404e3a:	f47f ac0e 	bne.w	40465a <_svfprintf_r+0x1ba>
  404e3e:	3f10      	subs	r7, #16
  404e40:	2f10      	cmp	r7, #16
  404e42:	464a      	mov	r2, r9
  404e44:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404e46:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e48:	dce9      	bgt.n	404e1e <_svfprintf_r+0x97e>
  404e4a:	4635      	mov	r5, r6
  404e4c:	460c      	mov	r4, r1
  404e4e:	4646      	mov	r6, r8
  404e50:	4690      	mov	r8, r2
  404e52:	3301      	adds	r3, #1
  404e54:	443c      	add	r4, r7
  404e56:	2b07      	cmp	r3, #7
  404e58:	9427      	str	r4, [sp, #156]	; 0x9c
  404e5a:	9326      	str	r3, [sp, #152]	; 0x98
  404e5c:	e888 00a0 	stmia.w	r8, {r5, r7}
  404e60:	f300 829e 	bgt.w	4053a0 <_svfprintf_r+0xf00>
  404e64:	f108 0808 	add.w	r8, r8, #8
  404e68:	e4bc      	b.n	4047e4 <_svfprintf_r+0x344>
  404e6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404e6c:	2b01      	cmp	r3, #1
  404e6e:	f340 824f 	ble.w	405310 <_svfprintf_r+0xe70>
  404e72:	2301      	movs	r3, #1
  404e74:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404e76:	441c      	add	r4, r3
  404e78:	441f      	add	r7, r3
  404e7a:	2f07      	cmp	r7, #7
  404e7c:	9427      	str	r4, [sp, #156]	; 0x9c
  404e7e:	f8c8 6000 	str.w	r6, [r8]
  404e82:	9726      	str	r7, [sp, #152]	; 0x98
  404e84:	f8c8 3004 	str.w	r3, [r8, #4]
  404e88:	f300 825f 	bgt.w	40534a <_svfprintf_r+0xeaa>
  404e8c:	f108 0808 	add.w	r8, r8, #8
  404e90:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404e92:	3701      	adds	r7, #1
  404e94:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  404e96:	4414      	add	r4, r2
  404e98:	2f07      	cmp	r7, #7
  404e9a:	9427      	str	r4, [sp, #156]	; 0x9c
  404e9c:	9726      	str	r7, [sp, #152]	; 0x98
  404e9e:	f8c8 3000 	str.w	r3, [r8]
  404ea2:	f8c8 2004 	str.w	r2, [r8, #4]
  404ea6:	f300 825c 	bgt.w	405362 <_svfprintf_r+0xec2>
  404eaa:	f108 0808 	add.w	r8, r8, #8
  404eae:	a815      	add	r0, sp, #84	; 0x54
  404eb0:	c80d      	ldmia	r0, {r0, r2, r3}
  404eb2:	9914      	ldr	r1, [sp, #80]	; 0x50
  404eb4:	f003 fa56 	bl	408364 <__aeabi_dcmpeq>
  404eb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404eba:	2800      	cmp	r0, #0
  404ebc:	f040 8141 	bne.w	405142 <_svfprintf_r+0xca2>
  404ec0:	3b01      	subs	r3, #1
  404ec2:	3701      	adds	r7, #1
  404ec4:	3601      	adds	r6, #1
  404ec6:	441c      	add	r4, r3
  404ec8:	2f07      	cmp	r7, #7
  404eca:	f8c8 6000 	str.w	r6, [r8]
  404ece:	9726      	str	r7, [sp, #152]	; 0x98
  404ed0:	9427      	str	r4, [sp, #156]	; 0x9c
  404ed2:	f8c8 3004 	str.w	r3, [r8, #4]
  404ed6:	f300 8166 	bgt.w	4051a6 <_svfprintf_r+0xd06>
  404eda:	f108 0808 	add.w	r8, r8, #8
  404ede:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  404ee0:	3701      	adds	r7, #1
  404ee2:	4414      	add	r4, r2
  404ee4:	ab21      	add	r3, sp, #132	; 0x84
  404ee6:	2f07      	cmp	r7, #7
  404ee8:	9427      	str	r4, [sp, #156]	; 0x9c
  404eea:	9726      	str	r7, [sp, #152]	; 0x98
  404eec:	f8c8 2004 	str.w	r2, [r8, #4]
  404ef0:	f8c8 3000 	str.w	r3, [r8]
  404ef4:	f77f acc4 	ble.w	404880 <_svfprintf_r+0x3e0>
  404ef8:	aa25      	add	r2, sp, #148	; 0x94
  404efa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404efc:	980c      	ldr	r0, [sp, #48]	; 0x30
  404efe:	f002 fead 	bl	407c5c <__ssprint_r>
  404f02:	2800      	cmp	r0, #0
  404f04:	f47f aba9 	bne.w	40465a <_svfprintf_r+0x1ba>
  404f08:	46c8      	mov	r8, r9
  404f0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f0c:	e4ba      	b.n	404884 <_svfprintf_r+0x3e4>
  404f0e:	aa25      	add	r2, sp, #148	; 0x94
  404f10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f12:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f14:	f002 fea2 	bl	407c5c <__ssprint_r>
  404f18:	2800      	cmp	r0, #0
  404f1a:	f43f acfd 	beq.w	404918 <_svfprintf_r+0x478>
  404f1e:	f7ff bb9c 	b.w	40465a <_svfprintf_r+0x1ba>
  404f22:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404f26:	2b01      	cmp	r3, #1
  404f28:	f000 817e 	beq.w	405228 <_svfprintf_r+0xd88>
  404f2c:	2b02      	cmp	r3, #2
  404f2e:	d171      	bne.n	405014 <_svfprintf_r+0xb74>
  404f30:	f8cd b01c 	str.w	fp, [sp, #28]
  404f34:	2400      	movs	r4, #0
  404f36:	2500      	movs	r5, #0
  404f38:	e5d4      	b.n	404ae4 <_svfprintf_r+0x644>
  404f3a:	aa25      	add	r2, sp, #148	; 0x94
  404f3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f3e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f40:	f002 fe8c 	bl	407c5c <__ssprint_r>
  404f44:	2800      	cmp	r0, #0
  404f46:	f47f ab88 	bne.w	40465a <_svfprintf_r+0x1ba>
  404f4a:	46c8      	mov	r8, r9
  404f4c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f4e:	e486      	b.n	40485e <_svfprintf_r+0x3be>
  404f50:	aa25      	add	r2, sp, #148	; 0x94
  404f52:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f54:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f56:	f002 fe81 	bl	407c5c <__ssprint_r>
  404f5a:	2800      	cmp	r0, #0
  404f5c:	f47f ab7d 	bne.w	40465a <_svfprintf_r+0x1ba>
  404f60:	46c8      	mov	r8, r9
  404f62:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f64:	e429      	b.n	4047ba <_svfprintf_r+0x31a>
  404f66:	2001      	movs	r0, #1
  404f68:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f6a:	4a2d      	ldr	r2, [pc, #180]	; (405020 <_svfprintf_r+0xb80>)
  404f6c:	4403      	add	r3, r0
  404f6e:	4404      	add	r4, r0
  404f70:	2b07      	cmp	r3, #7
  404f72:	9427      	str	r4, [sp, #156]	; 0x9c
  404f74:	9326      	str	r3, [sp, #152]	; 0x98
  404f76:	f8c8 0004 	str.w	r0, [r8, #4]
  404f7a:	f8c8 2000 	str.w	r2, [r8]
  404f7e:	f340 82d8 	ble.w	405532 <_svfprintf_r+0x1092>
  404f82:	aa25      	add	r2, sp, #148	; 0x94
  404f84:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f86:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f88:	f002 fe68 	bl	407c5c <__ssprint_r>
  404f8c:	2800      	cmp	r0, #0
  404f8e:	f47f ab64 	bne.w	40465a <_svfprintf_r+0x1ba>
  404f92:	46c8      	mov	r8, r9
  404f94:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404f96:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f98:	b929      	cbnz	r1, 404fa6 <_svfprintf_r+0xb06>
  404f9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404f9c:	b91b      	cbnz	r3, 404fa6 <_svfprintf_r+0xb06>
  404f9e:	9b07      	ldr	r3, [sp, #28]
  404fa0:	07d8      	lsls	r0, r3, #31
  404fa2:	f57f ac6f 	bpl.w	404884 <_svfprintf_r+0x3e4>
  404fa6:	9819      	ldr	r0, [sp, #100]	; 0x64
  404fa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404faa:	4602      	mov	r2, r0
  404fac:	3301      	adds	r3, #1
  404fae:	4422      	add	r2, r4
  404fb0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  404fb2:	2b07      	cmp	r3, #7
  404fb4:	9227      	str	r2, [sp, #156]	; 0x9c
  404fb6:	f8c8 4000 	str.w	r4, [r8]
  404fba:	f8c8 0004 	str.w	r0, [r8, #4]
  404fbe:	9326      	str	r3, [sp, #152]	; 0x98
  404fc0:	f300 8431 	bgt.w	405826 <_svfprintf_r+0x1386>
  404fc4:	f108 0808 	add.w	r8, r8, #8
  404fc8:	2900      	cmp	r1, #0
  404fca:	f2c0 8409 	blt.w	4057e0 <_svfprintf_r+0x1340>
  404fce:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404fd0:	3301      	adds	r3, #1
  404fd2:	188c      	adds	r4, r1, r2
  404fd4:	2b07      	cmp	r3, #7
  404fd6:	9427      	str	r4, [sp, #156]	; 0x9c
  404fd8:	9326      	str	r3, [sp, #152]	; 0x98
  404fda:	f8c8 6000 	str.w	r6, [r8]
  404fde:	f8c8 1004 	str.w	r1, [r8, #4]
  404fe2:	f77f ac4d 	ble.w	404880 <_svfprintf_r+0x3e0>
  404fe6:	aa25      	add	r2, sp, #148	; 0x94
  404fe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fea:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fec:	f002 fe36 	bl	407c5c <__ssprint_r>
  404ff0:	2800      	cmp	r0, #0
  404ff2:	f47f ab32 	bne.w	40465a <_svfprintf_r+0x1ba>
  404ff6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ff8:	46c8      	mov	r8, r9
  404ffa:	e443      	b.n	404884 <_svfprintf_r+0x3e4>
  404ffc:	aa25      	add	r2, sp, #148	; 0x94
  404ffe:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405000:	980c      	ldr	r0, [sp, #48]	; 0x30
  405002:	f002 fe2b 	bl	407c5c <__ssprint_r>
  405006:	2800      	cmp	r0, #0
  405008:	f47f ab27 	bne.w	40465a <_svfprintf_r+0x1ba>
  40500c:	46c8      	mov	r8, r9
  40500e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405010:	f7ff bbe5 	b.w	4047de <_svfprintf_r+0x33e>
  405014:	2400      	movs	r4, #0
  405016:	2500      	movs	r5, #0
  405018:	f8cd b01c 	str.w	fp, [sp, #28]
  40501c:	4649      	mov	r1, r9
  40501e:	e004      	b.n	40502a <_svfprintf_r+0xb8a>
  405020:	00408a24 	.word	0x00408a24
  405024:	00408a38 	.word	0x00408a38
  405028:	4631      	mov	r1, r6
  40502a:	08e2      	lsrs	r2, r4, #3
  40502c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405030:	08e8      	lsrs	r0, r5, #3
  405032:	f004 0307 	and.w	r3, r4, #7
  405036:	4605      	mov	r5, r0
  405038:	4614      	mov	r4, r2
  40503a:	3330      	adds	r3, #48	; 0x30
  40503c:	ea54 0205 	orrs.w	r2, r4, r5
  405040:	f801 3c01 	strb.w	r3, [r1, #-1]
  405044:	f101 36ff 	add.w	r6, r1, #4294967295
  405048:	d1ee      	bne.n	405028 <_svfprintf_r+0xb88>
  40504a:	9a07      	ldr	r2, [sp, #28]
  40504c:	07d2      	lsls	r2, r2, #31
  40504e:	f57f ad59 	bpl.w	404b04 <_svfprintf_r+0x664>
  405052:	2b30      	cmp	r3, #48	; 0x30
  405054:	f43f ad56 	beq.w	404b04 <_svfprintf_r+0x664>
  405058:	2330      	movs	r3, #48	; 0x30
  40505a:	3902      	subs	r1, #2
  40505c:	f806 3c01 	strb.w	r3, [r6, #-1]
  405060:	eba9 0301 	sub.w	r3, r9, r1
  405064:	930e      	str	r3, [sp, #56]	; 0x38
  405066:	460e      	mov	r6, r1
  405068:	f7ff bb36 	b.w	4046d8 <_svfprintf_r+0x238>
  40506c:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40506e:	2900      	cmp	r1, #0
  405070:	f77f af79 	ble.w	404f66 <_svfprintf_r+0xac6>
  405074:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405076:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405078:	4293      	cmp	r3, r2
  40507a:	bfa8      	it	ge
  40507c:	4613      	movge	r3, r2
  40507e:	2b00      	cmp	r3, #0
  405080:	461f      	mov	r7, r3
  405082:	dd0b      	ble.n	40509c <_svfprintf_r+0xbfc>
  405084:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405086:	443c      	add	r4, r7
  405088:	3301      	adds	r3, #1
  40508a:	2b07      	cmp	r3, #7
  40508c:	9427      	str	r4, [sp, #156]	; 0x9c
  40508e:	e888 00c0 	stmia.w	r8, {r6, r7}
  405092:	9326      	str	r3, [sp, #152]	; 0x98
  405094:	f300 82fb 	bgt.w	40568e <_svfprintf_r+0x11ee>
  405098:	f108 0808 	add.w	r8, r8, #8
  40509c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40509e:	2f00      	cmp	r7, #0
  4050a0:	bfa8      	it	ge
  4050a2:	1bdb      	subge	r3, r3, r7
  4050a4:	2b00      	cmp	r3, #0
  4050a6:	461f      	mov	r7, r3
  4050a8:	f340 80d7 	ble.w	40525a <_svfprintf_r+0xdba>
  4050ac:	2b10      	cmp	r3, #16
  4050ae:	f340 8434 	ble.w	40591a <_svfprintf_r+0x147a>
  4050b2:	4dba      	ldr	r5, [pc, #744]	; (40539c <_svfprintf_r+0xefc>)
  4050b4:	4642      	mov	r2, r8
  4050b6:	4621      	mov	r1, r4
  4050b8:	46b0      	mov	r8, r6
  4050ba:	f04f 0b10 	mov.w	fp, #16
  4050be:	462e      	mov	r6, r5
  4050c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4050c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4050c6:	e004      	b.n	4050d2 <_svfprintf_r+0xc32>
  4050c8:	3208      	adds	r2, #8
  4050ca:	3f10      	subs	r7, #16
  4050cc:	2f10      	cmp	r7, #16
  4050ce:	f340 80b5 	ble.w	40523c <_svfprintf_r+0xd9c>
  4050d2:	3301      	adds	r3, #1
  4050d4:	3110      	adds	r1, #16
  4050d6:	2b07      	cmp	r3, #7
  4050d8:	9127      	str	r1, [sp, #156]	; 0x9c
  4050da:	9326      	str	r3, [sp, #152]	; 0x98
  4050dc:	e882 0840 	stmia.w	r2, {r6, fp}
  4050e0:	ddf2      	ble.n	4050c8 <_svfprintf_r+0xc28>
  4050e2:	aa25      	add	r2, sp, #148	; 0x94
  4050e4:	4629      	mov	r1, r5
  4050e6:	4620      	mov	r0, r4
  4050e8:	f002 fdb8 	bl	407c5c <__ssprint_r>
  4050ec:	2800      	cmp	r0, #0
  4050ee:	f47f aab4 	bne.w	40465a <_svfprintf_r+0x1ba>
  4050f2:	464a      	mov	r2, r9
  4050f4:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4050f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050f8:	e7e7      	b.n	4050ca <_svfprintf_r+0xc2a>
  4050fa:	2d00      	cmp	r5, #0
  4050fc:	bf08      	it	eq
  4050fe:	2c0a      	cmpeq	r4, #10
  405100:	f0c0 8090 	bcc.w	405224 <_svfprintf_r+0xd84>
  405104:	464e      	mov	r6, r9
  405106:	4620      	mov	r0, r4
  405108:	4629      	mov	r1, r5
  40510a:	220a      	movs	r2, #10
  40510c:	2300      	movs	r3, #0
  40510e:	f003 f999 	bl	408444 <__aeabi_uldivmod>
  405112:	3230      	adds	r2, #48	; 0x30
  405114:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405118:	4620      	mov	r0, r4
  40511a:	4629      	mov	r1, r5
  40511c:	2300      	movs	r3, #0
  40511e:	220a      	movs	r2, #10
  405120:	f003 f990 	bl	408444 <__aeabi_uldivmod>
  405124:	4604      	mov	r4, r0
  405126:	460d      	mov	r5, r1
  405128:	ea54 0305 	orrs.w	r3, r4, r5
  40512c:	d1eb      	bne.n	405106 <_svfprintf_r+0xc66>
  40512e:	eba9 0306 	sub.w	r3, r9, r6
  405132:	930e      	str	r3, [sp, #56]	; 0x38
  405134:	f7ff bad0 	b.w	4046d8 <_svfprintf_r+0x238>
  405138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40513a:	464e      	mov	r6, r9
  40513c:	930e      	str	r3, [sp, #56]	; 0x38
  40513e:	f7ff bacb 	b.w	4046d8 <_svfprintf_r+0x238>
  405142:	1e5e      	subs	r6, r3, #1
  405144:	2e00      	cmp	r6, #0
  405146:	f77f aeca 	ble.w	404ede <_svfprintf_r+0xa3e>
  40514a:	2e10      	cmp	r6, #16
  40514c:	f340 83e3 	ble.w	405916 <_svfprintf_r+0x1476>
  405150:	4622      	mov	r2, r4
  405152:	f04f 0b10 	mov.w	fp, #16
  405156:	4d91      	ldr	r5, [pc, #580]	; (40539c <_svfprintf_r+0xefc>)
  405158:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40515a:	e004      	b.n	405166 <_svfprintf_r+0xcc6>
  40515c:	3e10      	subs	r6, #16
  40515e:	2e10      	cmp	r6, #16
  405160:	f108 0808 	add.w	r8, r8, #8
  405164:	dd15      	ble.n	405192 <_svfprintf_r+0xcf2>
  405166:	3701      	adds	r7, #1
  405168:	3210      	adds	r2, #16
  40516a:	2f07      	cmp	r7, #7
  40516c:	9227      	str	r2, [sp, #156]	; 0x9c
  40516e:	9726      	str	r7, [sp, #152]	; 0x98
  405170:	e888 0820 	stmia.w	r8, {r5, fp}
  405174:	ddf2      	ble.n	40515c <_svfprintf_r+0xcbc>
  405176:	aa25      	add	r2, sp, #148	; 0x94
  405178:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40517a:	4620      	mov	r0, r4
  40517c:	f002 fd6e 	bl	407c5c <__ssprint_r>
  405180:	2800      	cmp	r0, #0
  405182:	f47f aa6a 	bne.w	40465a <_svfprintf_r+0x1ba>
  405186:	3e10      	subs	r6, #16
  405188:	2e10      	cmp	r6, #16
  40518a:	46c8      	mov	r8, r9
  40518c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40518e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405190:	dce9      	bgt.n	405166 <_svfprintf_r+0xcc6>
  405192:	4614      	mov	r4, r2
  405194:	3701      	adds	r7, #1
  405196:	4434      	add	r4, r6
  405198:	2f07      	cmp	r7, #7
  40519a:	9427      	str	r4, [sp, #156]	; 0x9c
  40519c:	9726      	str	r7, [sp, #152]	; 0x98
  40519e:	e888 0060 	stmia.w	r8, {r5, r6}
  4051a2:	f77f ae9a 	ble.w	404eda <_svfprintf_r+0xa3a>
  4051a6:	aa25      	add	r2, sp, #148	; 0x94
  4051a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4051aa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4051ac:	f002 fd56 	bl	407c5c <__ssprint_r>
  4051b0:	2800      	cmp	r0, #0
  4051b2:	f47f aa52 	bne.w	40465a <_svfprintf_r+0x1ba>
  4051b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4051b8:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4051ba:	46c8      	mov	r8, r9
  4051bc:	e68f      	b.n	404ede <_svfprintf_r+0xa3e>
  4051be:	3204      	adds	r2, #4
  4051c0:	681c      	ldr	r4, [r3, #0]
  4051c2:	2500      	movs	r5, #0
  4051c4:	2301      	movs	r3, #1
  4051c6:	920f      	str	r2, [sp, #60]	; 0x3c
  4051c8:	f7ff ba68 	b.w	40469c <_svfprintf_r+0x1fc>
  4051cc:	681c      	ldr	r4, [r3, #0]
  4051ce:	3304      	adds	r3, #4
  4051d0:	930f      	str	r3, [sp, #60]	; 0x3c
  4051d2:	2500      	movs	r5, #0
  4051d4:	e42a      	b.n	404a2c <_svfprintf_r+0x58c>
  4051d6:	681c      	ldr	r4, [r3, #0]
  4051d8:	3304      	adds	r3, #4
  4051da:	17e5      	asrs	r5, r4, #31
  4051dc:	4622      	mov	r2, r4
  4051de:	930f      	str	r3, [sp, #60]	; 0x3c
  4051e0:	462b      	mov	r3, r5
  4051e2:	2a00      	cmp	r2, #0
  4051e4:	f173 0300 	sbcs.w	r3, r3, #0
  4051e8:	f6bf ac68 	bge.w	404abc <_svfprintf_r+0x61c>
  4051ec:	272d      	movs	r7, #45	; 0x2d
  4051ee:	4264      	negs	r4, r4
  4051f0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4051f4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4051f8:	2301      	movs	r3, #1
  4051fa:	f7ff ba53 	b.w	4046a4 <_svfprintf_r+0x204>
  4051fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405200:	2500      	movs	r5, #0
  405202:	460a      	mov	r2, r1
  405204:	3204      	adds	r2, #4
  405206:	680c      	ldr	r4, [r1, #0]
  405208:	920f      	str	r2, [sp, #60]	; 0x3c
  40520a:	f7ff ba47 	b.w	40469c <_svfprintf_r+0x1fc>
  40520e:	4614      	mov	r4, r2
  405210:	3301      	adds	r3, #1
  405212:	4434      	add	r4, r6
  405214:	2b07      	cmp	r3, #7
  405216:	9427      	str	r4, [sp, #156]	; 0x9c
  405218:	9326      	str	r3, [sp, #152]	; 0x98
  40521a:	e888 0060 	stmia.w	r8, {r5, r6}
  40521e:	f77f ab2f 	ble.w	404880 <_svfprintf_r+0x3e0>
  405222:	e6e0      	b.n	404fe6 <_svfprintf_r+0xb46>
  405224:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405228:	2301      	movs	r3, #1
  40522a:	ae42      	add	r6, sp, #264	; 0x108
  40522c:	3430      	adds	r4, #48	; 0x30
  40522e:	f8cd b01c 	str.w	fp, [sp, #28]
  405232:	f806 4d41 	strb.w	r4, [r6, #-65]!
  405236:	930e      	str	r3, [sp, #56]	; 0x38
  405238:	f7ff ba4e 	b.w	4046d8 <_svfprintf_r+0x238>
  40523c:	4635      	mov	r5, r6
  40523e:	460c      	mov	r4, r1
  405240:	4646      	mov	r6, r8
  405242:	4690      	mov	r8, r2
  405244:	3301      	adds	r3, #1
  405246:	443c      	add	r4, r7
  405248:	2b07      	cmp	r3, #7
  40524a:	9427      	str	r4, [sp, #156]	; 0x9c
  40524c:	9326      	str	r3, [sp, #152]	; 0x98
  40524e:	e888 00a0 	stmia.w	r8, {r5, r7}
  405252:	f300 8246 	bgt.w	4056e2 <_svfprintf_r+0x1242>
  405256:	f108 0808 	add.w	r8, r8, #8
  40525a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40525c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40525e:	429a      	cmp	r2, r3
  405260:	db45      	blt.n	4052ee <_svfprintf_r+0xe4e>
  405262:	9b07      	ldr	r3, [sp, #28]
  405264:	07d9      	lsls	r1, r3, #31
  405266:	d442      	bmi.n	4052ee <_svfprintf_r+0xe4e>
  405268:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40526a:	9812      	ldr	r0, [sp, #72]	; 0x48
  40526c:	1a9a      	subs	r2, r3, r2
  40526e:	1a1d      	subs	r5, r3, r0
  405270:	4295      	cmp	r5, r2
  405272:	bfa8      	it	ge
  405274:	4615      	movge	r5, r2
  405276:	2d00      	cmp	r5, #0
  405278:	dd0e      	ble.n	405298 <_svfprintf_r+0xdf8>
  40527a:	9926      	ldr	r1, [sp, #152]	; 0x98
  40527c:	4406      	add	r6, r0
  40527e:	3101      	adds	r1, #1
  405280:	442c      	add	r4, r5
  405282:	2907      	cmp	r1, #7
  405284:	f8c8 6000 	str.w	r6, [r8]
  405288:	9427      	str	r4, [sp, #156]	; 0x9c
  40528a:	f8c8 5004 	str.w	r5, [r8, #4]
  40528e:	9126      	str	r1, [sp, #152]	; 0x98
  405290:	f300 8216 	bgt.w	4056c0 <_svfprintf_r+0x1220>
  405294:	f108 0808 	add.w	r8, r8, #8
  405298:	2d00      	cmp	r5, #0
  40529a:	bfb4      	ite	lt
  40529c:	4616      	movlt	r6, r2
  40529e:	1b56      	subge	r6, r2, r5
  4052a0:	2e00      	cmp	r6, #0
  4052a2:	f77f aaef 	ble.w	404884 <_svfprintf_r+0x3e4>
  4052a6:	2e10      	cmp	r6, #16
  4052a8:	f340 82f3 	ble.w	405892 <_svfprintf_r+0x13f2>
  4052ac:	4622      	mov	r2, r4
  4052ae:	2710      	movs	r7, #16
  4052b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052b2:	4d3a      	ldr	r5, [pc, #232]	; (40539c <_svfprintf_r+0xefc>)
  4052b4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4052b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4052ba:	e004      	b.n	4052c6 <_svfprintf_r+0xe26>
  4052bc:	f108 0808 	add.w	r8, r8, #8
  4052c0:	3e10      	subs	r6, #16
  4052c2:	2e10      	cmp	r6, #16
  4052c4:	dda3      	ble.n	40520e <_svfprintf_r+0xd6e>
  4052c6:	3301      	adds	r3, #1
  4052c8:	3210      	adds	r2, #16
  4052ca:	2b07      	cmp	r3, #7
  4052cc:	9227      	str	r2, [sp, #156]	; 0x9c
  4052ce:	9326      	str	r3, [sp, #152]	; 0x98
  4052d0:	e888 00a0 	stmia.w	r8, {r5, r7}
  4052d4:	ddf2      	ble.n	4052bc <_svfprintf_r+0xe1c>
  4052d6:	aa25      	add	r2, sp, #148	; 0x94
  4052d8:	4621      	mov	r1, r4
  4052da:	4658      	mov	r0, fp
  4052dc:	f002 fcbe 	bl	407c5c <__ssprint_r>
  4052e0:	2800      	cmp	r0, #0
  4052e2:	f47f a9ba 	bne.w	40465a <_svfprintf_r+0x1ba>
  4052e6:	46c8      	mov	r8, r9
  4052e8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4052ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052ec:	e7e8      	b.n	4052c0 <_svfprintf_r+0xe20>
  4052ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052f0:	9819      	ldr	r0, [sp, #100]	; 0x64
  4052f2:	3301      	adds	r3, #1
  4052f4:	991a      	ldr	r1, [sp, #104]	; 0x68
  4052f6:	4404      	add	r4, r0
  4052f8:	2b07      	cmp	r3, #7
  4052fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4052fc:	f8c8 1000 	str.w	r1, [r8]
  405300:	f8c8 0004 	str.w	r0, [r8, #4]
  405304:	9326      	str	r3, [sp, #152]	; 0x98
  405306:	f300 81cf 	bgt.w	4056a8 <_svfprintf_r+0x1208>
  40530a:	f108 0808 	add.w	r8, r8, #8
  40530e:	e7ab      	b.n	405268 <_svfprintf_r+0xdc8>
  405310:	9b07      	ldr	r3, [sp, #28]
  405312:	07da      	lsls	r2, r3, #31
  405314:	f53f adad 	bmi.w	404e72 <_svfprintf_r+0x9d2>
  405318:	2301      	movs	r3, #1
  40531a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40531c:	441c      	add	r4, r3
  40531e:	441f      	add	r7, r3
  405320:	2f07      	cmp	r7, #7
  405322:	9427      	str	r4, [sp, #156]	; 0x9c
  405324:	f8c8 6000 	str.w	r6, [r8]
  405328:	9726      	str	r7, [sp, #152]	; 0x98
  40532a:	f8c8 3004 	str.w	r3, [r8, #4]
  40532e:	f77f add4 	ble.w	404eda <_svfprintf_r+0xa3a>
  405332:	aa25      	add	r2, sp, #148	; 0x94
  405334:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405336:	980c      	ldr	r0, [sp, #48]	; 0x30
  405338:	f002 fc90 	bl	407c5c <__ssprint_r>
  40533c:	2800      	cmp	r0, #0
  40533e:	f47f a98c 	bne.w	40465a <_svfprintf_r+0x1ba>
  405342:	46c8      	mov	r8, r9
  405344:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405346:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405348:	e5c9      	b.n	404ede <_svfprintf_r+0xa3e>
  40534a:	aa25      	add	r2, sp, #148	; 0x94
  40534c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40534e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405350:	f002 fc84 	bl	407c5c <__ssprint_r>
  405354:	2800      	cmp	r0, #0
  405356:	f47f a980 	bne.w	40465a <_svfprintf_r+0x1ba>
  40535a:	46c8      	mov	r8, r9
  40535c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40535e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405360:	e596      	b.n	404e90 <_svfprintf_r+0x9f0>
  405362:	aa25      	add	r2, sp, #148	; 0x94
  405364:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405366:	980c      	ldr	r0, [sp, #48]	; 0x30
  405368:	f002 fc78 	bl	407c5c <__ssprint_r>
  40536c:	2800      	cmp	r0, #0
  40536e:	f47f a974 	bne.w	40465a <_svfprintf_r+0x1ba>
  405372:	46c8      	mov	r8, r9
  405374:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405376:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405378:	e599      	b.n	404eae <_svfprintf_r+0xa0e>
  40537a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40537c:	3407      	adds	r4, #7
  40537e:	f024 0407 	bic.w	r4, r4, #7
  405382:	f104 0108 	add.w	r1, r4, #8
  405386:	e9d4 2300 	ldrd	r2, r3, [r4]
  40538a:	910f      	str	r1, [sp, #60]	; 0x3c
  40538c:	4614      	mov	r4, r2
  40538e:	461d      	mov	r5, r3
  405390:	f7ff bb8f 	b.w	404ab2 <_svfprintf_r+0x612>
  405394:	464e      	mov	r6, r9
  405396:	f7ff b99f 	b.w	4046d8 <_svfprintf_r+0x238>
  40539a:	bf00      	nop
  40539c:	00408a38 	.word	0x00408a38
  4053a0:	aa25      	add	r2, sp, #148	; 0x94
  4053a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4053a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053a6:	f002 fc59 	bl	407c5c <__ssprint_r>
  4053aa:	2800      	cmp	r0, #0
  4053ac:	f47f a955 	bne.w	40465a <_svfprintf_r+0x1ba>
  4053b0:	46c8      	mov	r8, r9
  4053b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4053b4:	f7ff ba16 	b.w	4047e4 <_svfprintf_r+0x344>
  4053b8:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4053ba:	4622      	mov	r2, r4
  4053bc:	4620      	mov	r0, r4
  4053be:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4053c0:	4623      	mov	r3, r4
  4053c2:	4621      	mov	r1, r4
  4053c4:	f003 f800 	bl	4083c8 <__aeabi_dcmpun>
  4053c8:	2800      	cmp	r0, #0
  4053ca:	f040 8273 	bne.w	4058b4 <_svfprintf_r+0x1414>
  4053ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053d0:	3301      	adds	r3, #1
  4053d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053d4:	f023 0320 	bic.w	r3, r3, #32
  4053d8:	930e      	str	r3, [sp, #56]	; 0x38
  4053da:	f000 819c 	beq.w	405716 <_svfprintf_r+0x1276>
  4053de:	2b47      	cmp	r3, #71	; 0x47
  4053e0:	f000 80d6 	beq.w	405590 <_svfprintf_r+0x10f0>
  4053e4:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4053e8:	9307      	str	r3, [sp, #28]
  4053ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4053ec:	1e1f      	subs	r7, r3, #0
  4053ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4053f0:	9308      	str	r3, [sp, #32]
  4053f2:	bfb7      	itett	lt
  4053f4:	463b      	movlt	r3, r7
  4053f6:	2300      	movge	r3, #0
  4053f8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4053fc:	232d      	movlt	r3, #45	; 0x2d
  4053fe:	9310      	str	r3, [sp, #64]	; 0x40
  405400:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405402:	2b66      	cmp	r3, #102	; 0x66
  405404:	f000 8190 	beq.w	405728 <_svfprintf_r+0x1288>
  405408:	2b46      	cmp	r3, #70	; 0x46
  40540a:	f000 80a4 	beq.w	405556 <_svfprintf_r+0x10b6>
  40540e:	2002      	movs	r0, #2
  405410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405412:	a923      	add	r1, sp, #140	; 0x8c
  405414:	2b45      	cmp	r3, #69	; 0x45
  405416:	bf0a      	itet	eq
  405418:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40541a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40541c:	1c5d      	addeq	r5, r3, #1
  40541e:	e88d 0021 	stmia.w	sp, {r0, r5}
  405422:	9104      	str	r1, [sp, #16]
  405424:	a820      	add	r0, sp, #128	; 0x80
  405426:	a91f      	add	r1, sp, #124	; 0x7c
  405428:	463b      	mov	r3, r7
  40542a:	9003      	str	r0, [sp, #12]
  40542c:	9a08      	ldr	r2, [sp, #32]
  40542e:	9102      	str	r1, [sp, #8]
  405430:	980c      	ldr	r0, [sp, #48]	; 0x30
  405432:	f000 fb59 	bl	405ae8 <_dtoa_r>
  405436:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405438:	4606      	mov	r6, r0
  40543a:	2b67      	cmp	r3, #103	; 0x67
  40543c:	f040 81ba 	bne.w	4057b4 <_svfprintf_r+0x1314>
  405440:	f01b 0f01 	tst.w	fp, #1
  405444:	f000 8223 	beq.w	40588e <_svfprintf_r+0x13ee>
  405448:	1974      	adds	r4, r6, r5
  40544a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40544c:	9808      	ldr	r0, [sp, #32]
  40544e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405450:	4639      	mov	r1, r7
  405452:	f002 ff87 	bl	408364 <__aeabi_dcmpeq>
  405456:	2800      	cmp	r0, #0
  405458:	f040 8124 	bne.w	4056a4 <_svfprintf_r+0x1204>
  40545c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40545e:	42a3      	cmp	r3, r4
  405460:	d206      	bcs.n	405470 <_svfprintf_r+0xfd0>
  405462:	2130      	movs	r1, #48	; 0x30
  405464:	1c5a      	adds	r2, r3, #1
  405466:	9223      	str	r2, [sp, #140]	; 0x8c
  405468:	7019      	strb	r1, [r3, #0]
  40546a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40546c:	429c      	cmp	r4, r3
  40546e:	d8f9      	bhi.n	405464 <_svfprintf_r+0xfc4>
  405470:	1b9b      	subs	r3, r3, r6
  405472:	9313      	str	r3, [sp, #76]	; 0x4c
  405474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405476:	2b47      	cmp	r3, #71	; 0x47
  405478:	f000 80a2 	beq.w	4055c0 <_svfprintf_r+0x1120>
  40547c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40547e:	2b65      	cmp	r3, #101	; 0x65
  405480:	f340 81a7 	ble.w	4057d2 <_svfprintf_r+0x1332>
  405484:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405486:	2b66      	cmp	r3, #102	; 0x66
  405488:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40548a:	9312      	str	r3, [sp, #72]	; 0x48
  40548c:	f000 8171 	beq.w	405772 <_svfprintf_r+0x12d2>
  405490:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405492:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405494:	4619      	mov	r1, r3
  405496:	4291      	cmp	r1, r2
  405498:	f300 815d 	bgt.w	405756 <_svfprintf_r+0x12b6>
  40549c:	f01b 0f01 	tst.w	fp, #1
  4054a0:	f040 81f0 	bne.w	405884 <_svfprintf_r+0x13e4>
  4054a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4054a8:	9308      	str	r3, [sp, #32]
  4054aa:	2367      	movs	r3, #103	; 0x67
  4054ac:	920e      	str	r2, [sp, #56]	; 0x38
  4054ae:	9311      	str	r3, [sp, #68]	; 0x44
  4054b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4054b2:	2b00      	cmp	r3, #0
  4054b4:	d17d      	bne.n	4055b2 <_svfprintf_r+0x1112>
  4054b6:	930a      	str	r3, [sp, #40]	; 0x28
  4054b8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4054bc:	f7ff b914 	b.w	4046e8 <_svfprintf_r+0x248>
  4054c0:	f024 0407 	bic.w	r4, r4, #7
  4054c4:	6823      	ldr	r3, [r4, #0]
  4054c6:	9315      	str	r3, [sp, #84]	; 0x54
  4054c8:	6863      	ldr	r3, [r4, #4]
  4054ca:	9314      	str	r3, [sp, #80]	; 0x50
  4054cc:	f104 0308 	add.w	r3, r4, #8
  4054d0:	930f      	str	r3, [sp, #60]	; 0x3c
  4054d2:	f7ff bb2f 	b.w	404b34 <_svfprintf_r+0x694>
  4054d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4054d8:	6813      	ldr	r3, [r2, #0]
  4054da:	3204      	adds	r2, #4
  4054dc:	920f      	str	r2, [sp, #60]	; 0x3c
  4054de:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4054e0:	601a      	str	r2, [r3, #0]
  4054e2:	f7ff b804 	b.w	4044ee <_svfprintf_r+0x4e>
  4054e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4054e8:	4daf      	ldr	r5, [pc, #700]	; (4057a8 <_svfprintf_r+0x1308>)
  4054ea:	f7ff b9ad 	b.w	404848 <_svfprintf_r+0x3a8>
  4054ee:	aa25      	add	r2, sp, #148	; 0x94
  4054f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4054f2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4054f4:	f002 fbb2 	bl	407c5c <__ssprint_r>
  4054f8:	2800      	cmp	r0, #0
  4054fa:	f47f a8ae 	bne.w	40465a <_svfprintf_r+0x1ba>
  4054fe:	46c8      	mov	r8, r9
  405500:	e431      	b.n	404d66 <_svfprintf_r+0x8c6>
  405502:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405504:	4613      	mov	r3, r2
  405506:	3304      	adds	r3, #4
  405508:	930f      	str	r3, [sp, #60]	; 0x3c
  40550a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40550c:	6811      	ldr	r1, [r2, #0]
  40550e:	17dd      	asrs	r5, r3, #31
  405510:	461a      	mov	r2, r3
  405512:	462b      	mov	r3, r5
  405514:	e9c1 2300 	strd	r2, r3, [r1]
  405518:	f7fe bfe9 	b.w	4044ee <_svfprintf_r+0x4e>
  40551c:	aa25      	add	r2, sp, #148	; 0x94
  40551e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405520:	980c      	ldr	r0, [sp, #48]	; 0x30
  405522:	f002 fb9b 	bl	407c5c <__ssprint_r>
  405526:	2800      	cmp	r0, #0
  405528:	f47f a897 	bne.w	40465a <_svfprintf_r+0x1ba>
  40552c:	46c8      	mov	r8, r9
  40552e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405530:	e432      	b.n	404d98 <_svfprintf_r+0x8f8>
  405532:	f108 0808 	add.w	r8, r8, #8
  405536:	e52f      	b.n	404f98 <_svfprintf_r+0xaf8>
  405538:	2140      	movs	r1, #64	; 0x40
  40553a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40553c:	f001 fb5c 	bl	406bf8 <_malloc_r>
  405540:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405542:	6010      	str	r0, [r2, #0]
  405544:	6110      	str	r0, [r2, #16]
  405546:	2800      	cmp	r0, #0
  405548:	f000 8214 	beq.w	405974 <_svfprintf_r+0x14d4>
  40554c:	2340      	movs	r3, #64	; 0x40
  40554e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405550:	6153      	str	r3, [r2, #20]
  405552:	f7fe bfbc 	b.w	4044ce <_svfprintf_r+0x2e>
  405556:	2003      	movs	r0, #3
  405558:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40555a:	a923      	add	r1, sp, #140	; 0x8c
  40555c:	e88d 0011 	stmia.w	sp, {r0, r4}
  405560:	9104      	str	r1, [sp, #16]
  405562:	a820      	add	r0, sp, #128	; 0x80
  405564:	a91f      	add	r1, sp, #124	; 0x7c
  405566:	9003      	str	r0, [sp, #12]
  405568:	9a08      	ldr	r2, [sp, #32]
  40556a:	463b      	mov	r3, r7
  40556c:	9102      	str	r1, [sp, #8]
  40556e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405570:	f000 faba 	bl	405ae8 <_dtoa_r>
  405574:	4625      	mov	r5, r4
  405576:	4606      	mov	r6, r0
  405578:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40557a:	1974      	adds	r4, r6, r5
  40557c:	2b46      	cmp	r3, #70	; 0x46
  40557e:	f47f af64 	bne.w	40544a <_svfprintf_r+0xfaa>
  405582:	7833      	ldrb	r3, [r6, #0]
  405584:	2b30      	cmp	r3, #48	; 0x30
  405586:	f000 8187 	beq.w	405898 <_svfprintf_r+0x13f8>
  40558a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40558c:	442c      	add	r4, r5
  40558e:	e75c      	b.n	40544a <_svfprintf_r+0xfaa>
  405590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405592:	2b00      	cmp	r3, #0
  405594:	bf08      	it	eq
  405596:	2301      	moveq	r3, #1
  405598:	930a      	str	r3, [sp, #40]	; 0x28
  40559a:	e723      	b.n	4053e4 <_svfprintf_r+0xf44>
  40559c:	4630      	mov	r0, r6
  40559e:	950a      	str	r5, [sp, #40]	; 0x28
  4055a0:	f7fe fe6c 	bl	40427c <strlen>
  4055a4:	940f      	str	r4, [sp, #60]	; 0x3c
  4055a6:	900e      	str	r0, [sp, #56]	; 0x38
  4055a8:	f8cd b01c 	str.w	fp, [sp, #28]
  4055ac:	4603      	mov	r3, r0
  4055ae:	f7ff b9e7 	b.w	404980 <_svfprintf_r+0x4e0>
  4055b2:	272d      	movs	r7, #45	; 0x2d
  4055b4:	2300      	movs	r3, #0
  4055b6:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4055ba:	930a      	str	r3, [sp, #40]	; 0x28
  4055bc:	f7ff b895 	b.w	4046ea <_svfprintf_r+0x24a>
  4055c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4055c2:	461a      	mov	r2, r3
  4055c4:	9312      	str	r3, [sp, #72]	; 0x48
  4055c6:	3303      	adds	r3, #3
  4055c8:	db04      	blt.n	4055d4 <_svfprintf_r+0x1134>
  4055ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055cc:	4619      	mov	r1, r3
  4055ce:	4291      	cmp	r1, r2
  4055d0:	f6bf af5e 	bge.w	405490 <_svfprintf_r+0xff0>
  4055d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055d6:	3b02      	subs	r3, #2
  4055d8:	9311      	str	r3, [sp, #68]	; 0x44
  4055da:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4055dc:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4055e0:	3b01      	subs	r3, #1
  4055e2:	2b00      	cmp	r3, #0
  4055e4:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
  4055e8:	bfb4      	ite	lt
  4055ea:	222d      	movlt	r2, #45	; 0x2d
  4055ec:	222b      	movge	r2, #43	; 0x2b
  4055ee:	931f      	str	r3, [sp, #124]	; 0x7c
  4055f0:	bfb8      	it	lt
  4055f2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4055f4:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4055f8:	bfb8      	it	lt
  4055fa:	f1c3 0301 	rsblt	r3, r3, #1
  4055fe:	2b09      	cmp	r3, #9
  405600:	f340 811f 	ble.w	405842 <_svfprintf_r+0x13a2>
  405604:	f10d 0093 	add.w	r0, sp, #147	; 0x93
  405608:	4601      	mov	r1, r0
  40560a:	4c68      	ldr	r4, [pc, #416]	; (4057ac <_svfprintf_r+0x130c>)
  40560c:	e000      	b.n	405610 <_svfprintf_r+0x1170>
  40560e:	4611      	mov	r1, r2
  405610:	fb84 5203 	smull	r5, r2, r4, r3
  405614:	17dd      	asrs	r5, r3, #31
  405616:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
  40561a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
  40561e:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405622:	3230      	adds	r2, #48	; 0x30
  405624:	2d09      	cmp	r5, #9
  405626:	f801 2c01 	strb.w	r2, [r1, #-1]
  40562a:	462b      	mov	r3, r5
  40562c:	f101 32ff 	add.w	r2, r1, #4294967295
  405630:	dced      	bgt.n	40560e <_svfprintf_r+0x116e>
  405632:	3330      	adds	r3, #48	; 0x30
  405634:	3902      	subs	r1, #2
  405636:	b2dc      	uxtb	r4, r3
  405638:	4288      	cmp	r0, r1
  40563a:	f802 4c01 	strb.w	r4, [r2, #-1]
  40563e:	f240 8192 	bls.w	405966 <_svfprintf_r+0x14c6>
  405642:	f10d 0186 	add.w	r1, sp, #134	; 0x86
  405646:	4613      	mov	r3, r2
  405648:	e001      	b.n	40564e <_svfprintf_r+0x11ae>
  40564a:	f813 4b01 	ldrb.w	r4, [r3], #1
  40564e:	4283      	cmp	r3, r0
  405650:	f801 4b01 	strb.w	r4, [r1], #1
  405654:	d1f9      	bne.n	40564a <_svfprintf_r+0x11aa>
  405656:	3301      	adds	r3, #1
  405658:	1a9b      	subs	r3, r3, r2
  40565a:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40565e:	4413      	add	r3, r2
  405660:	aa21      	add	r2, sp, #132	; 0x84
  405662:	1a9b      	subs	r3, r3, r2
  405664:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405666:	931b      	str	r3, [sp, #108]	; 0x6c
  405668:	2a01      	cmp	r2, #1
  40566a:	4413      	add	r3, r2
  40566c:	930e      	str	r3, [sp, #56]	; 0x38
  40566e:	f340 8148 	ble.w	405902 <_svfprintf_r+0x1462>
  405672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405674:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405676:	4413      	add	r3, r2
  405678:	930e      	str	r3, [sp, #56]	; 0x38
  40567a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40567e:	9308      	str	r3, [sp, #32]
  405680:	2300      	movs	r3, #0
  405682:	9312      	str	r3, [sp, #72]	; 0x48
  405684:	e714      	b.n	4054b0 <_svfprintf_r+0x1010>
  405686:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405688:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40568a:	f7ff b876 	b.w	40477a <_svfprintf_r+0x2da>
  40568e:	aa25      	add	r2, sp, #148	; 0x94
  405690:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405692:	980c      	ldr	r0, [sp, #48]	; 0x30
  405694:	f002 fae2 	bl	407c5c <__ssprint_r>
  405698:	2800      	cmp	r0, #0
  40569a:	f47e afde 	bne.w	40465a <_svfprintf_r+0x1ba>
  40569e:	46c8      	mov	r8, r9
  4056a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056a2:	e4fb      	b.n	40509c <_svfprintf_r+0xbfc>
  4056a4:	4623      	mov	r3, r4
  4056a6:	e6e3      	b.n	405470 <_svfprintf_r+0xfd0>
  4056a8:	aa25      	add	r2, sp, #148	; 0x94
  4056aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056ac:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056ae:	f002 fad5 	bl	407c5c <__ssprint_r>
  4056b2:	2800      	cmp	r0, #0
  4056b4:	f47e afd1 	bne.w	40465a <_svfprintf_r+0x1ba>
  4056b8:	46c8      	mov	r8, r9
  4056ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4056bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056be:	e5d3      	b.n	405268 <_svfprintf_r+0xdc8>
  4056c0:	aa25      	add	r2, sp, #148	; 0x94
  4056c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056c4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056c6:	f002 fac9 	bl	407c5c <__ssprint_r>
  4056ca:	2800      	cmp	r0, #0
  4056cc:	f47e afc5 	bne.w	40465a <_svfprintf_r+0x1ba>
  4056d0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4056d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4056d4:	46c8      	mov	r8, r9
  4056d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056d8:	1a9a      	subs	r2, r3, r2
  4056da:	e5dd      	b.n	405298 <_svfprintf_r+0xdf8>
  4056dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4056de:	f7ff b8fe 	b.w	4048de <_svfprintf_r+0x43e>
  4056e2:	aa25      	add	r2, sp, #148	; 0x94
  4056e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056e8:	f002 fab8 	bl	407c5c <__ssprint_r>
  4056ec:	2800      	cmp	r0, #0
  4056ee:	f47e afb4 	bne.w	40465a <_svfprintf_r+0x1ba>
  4056f2:	46c8      	mov	r8, r9
  4056f4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056f6:	e5b0      	b.n	40525a <_svfprintf_r+0xdba>
  4056f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4056fa:	4637      	mov	r7, r6
  4056fc:	2b06      	cmp	r3, #6
  4056fe:	bf28      	it	cs
  405700:	2306      	movcs	r3, #6
  405702:	960a      	str	r6, [sp, #40]	; 0x28
  405704:	9612      	str	r6, [sp, #72]	; 0x48
  405706:	9308      	str	r3, [sp, #32]
  405708:	940f      	str	r4, [sp, #60]	; 0x3c
  40570a:	f8cd b01c 	str.w	fp, [sp, #28]
  40570e:	930e      	str	r3, [sp, #56]	; 0x38
  405710:	4e27      	ldr	r6, [pc, #156]	; (4057b0 <_svfprintf_r+0x1310>)
  405712:	f7fe bfe9 	b.w	4046e8 <_svfprintf_r+0x248>
  405716:	2306      	movs	r3, #6
  405718:	930a      	str	r3, [sp, #40]	; 0x28
  40571a:	e663      	b.n	4053e4 <_svfprintf_r+0xf44>
  40571c:	232d      	movs	r3, #45	; 0x2d
  40571e:	461f      	mov	r7, r3
  405720:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405724:	f7ff ba28 	b.w	404b78 <_svfprintf_r+0x6d8>
  405728:	2003      	movs	r0, #3
  40572a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40572c:	a923      	add	r1, sp, #140	; 0x8c
  40572e:	e88d 0011 	stmia.w	sp, {r0, r4}
  405732:	9104      	str	r1, [sp, #16]
  405734:	a820      	add	r0, sp, #128	; 0x80
  405736:	a91f      	add	r1, sp, #124	; 0x7c
  405738:	9003      	str	r0, [sp, #12]
  40573a:	9a08      	ldr	r2, [sp, #32]
  40573c:	463b      	mov	r3, r7
  40573e:	9102      	str	r1, [sp, #8]
  405740:	980c      	ldr	r0, [sp, #48]	; 0x30
  405742:	f000 f9d1 	bl	405ae8 <_dtoa_r>
  405746:	4625      	mov	r5, r4
  405748:	4606      	mov	r6, r0
  40574a:	1904      	adds	r4, r0, r4
  40574c:	e719      	b.n	405582 <_svfprintf_r+0x10e2>
  40574e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405750:	4d15      	ldr	r5, [pc, #84]	; (4057a8 <_svfprintf_r+0x1308>)
  405752:	f7ff bb7e 	b.w	404e52 <_svfprintf_r+0x9b2>
  405756:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405758:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40575a:	4413      	add	r3, r2
  40575c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40575e:	930e      	str	r3, [sp, #56]	; 0x38
  405760:	2a00      	cmp	r2, #0
  405762:	f340 80c7 	ble.w	4058f4 <_svfprintf_r+0x1454>
  405766:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40576a:	9308      	str	r3, [sp, #32]
  40576c:	2367      	movs	r3, #103	; 0x67
  40576e:	9311      	str	r3, [sp, #68]	; 0x44
  405770:	e69e      	b.n	4054b0 <_svfprintf_r+0x1010>
  405772:	2b00      	cmp	r3, #0
  405774:	f340 80e1 	ble.w	40593a <_svfprintf_r+0x149a>
  405778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40577a:	2a00      	cmp	r2, #0
  40577c:	f040 80b0 	bne.w	4058e0 <_svfprintf_r+0x1440>
  405780:	f01b 0f01 	tst.w	fp, #1
  405784:	f040 80ac 	bne.w	4058e0 <_svfprintf_r+0x1440>
  405788:	9308      	str	r3, [sp, #32]
  40578a:	930e      	str	r3, [sp, #56]	; 0x38
  40578c:	e690      	b.n	4054b0 <_svfprintf_r+0x1010>
  40578e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405790:	940f      	str	r4, [sp, #60]	; 0x3c
  405792:	9308      	str	r3, [sp, #32]
  405794:	930e      	str	r3, [sp, #56]	; 0x38
  405796:	900a      	str	r0, [sp, #40]	; 0x28
  405798:	f8cd b01c 	str.w	fp, [sp, #28]
  40579c:	9012      	str	r0, [sp, #72]	; 0x48
  40579e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4057a2:	f7fe bfa1 	b.w	4046e8 <_svfprintf_r+0x248>
  4057a6:	bf00      	nop
  4057a8:	00408a38 	.word	0x00408a38
  4057ac:	66666667 	.word	0x66666667
  4057b0:	00408a1c 	.word	0x00408a1c
  4057b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4057b6:	2b47      	cmp	r3, #71	; 0x47
  4057b8:	f47f ae46 	bne.w	405448 <_svfprintf_r+0xfa8>
  4057bc:	f01b 0f01 	tst.w	fp, #1
  4057c0:	f47f aeda 	bne.w	405578 <_svfprintf_r+0x10d8>
  4057c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4057c6:	1b9b      	subs	r3, r3, r6
  4057c8:	9313      	str	r3, [sp, #76]	; 0x4c
  4057ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4057cc:	2b47      	cmp	r3, #71	; 0x47
  4057ce:	f43f aef7 	beq.w	4055c0 <_svfprintf_r+0x1120>
  4057d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4057d4:	9312      	str	r3, [sp, #72]	; 0x48
  4057d6:	e700      	b.n	4055da <_svfprintf_r+0x113a>
  4057d8:	2000      	movs	r0, #0
  4057da:	900a      	str	r0, [sp, #40]	; 0x28
  4057dc:	f7fe bebc 	b.w	404558 <_svfprintf_r+0xb8>
  4057e0:	424f      	negs	r7, r1
  4057e2:	3110      	adds	r1, #16
  4057e4:	da35      	bge.n	405852 <_svfprintf_r+0x13b2>
  4057e6:	2410      	movs	r4, #16
  4057e8:	4d6a      	ldr	r5, [pc, #424]	; (405994 <_svfprintf_r+0x14f4>)
  4057ea:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4057ee:	e004      	b.n	4057fa <_svfprintf_r+0x135a>
  4057f0:	f108 0808 	add.w	r8, r8, #8
  4057f4:	3f10      	subs	r7, #16
  4057f6:	2f10      	cmp	r7, #16
  4057f8:	dd2c      	ble.n	405854 <_svfprintf_r+0x13b4>
  4057fa:	3301      	adds	r3, #1
  4057fc:	3210      	adds	r2, #16
  4057fe:	2b07      	cmp	r3, #7
  405800:	9227      	str	r2, [sp, #156]	; 0x9c
  405802:	9326      	str	r3, [sp, #152]	; 0x98
  405804:	f8c8 5000 	str.w	r5, [r8]
  405808:	f8c8 4004 	str.w	r4, [r8, #4]
  40580c:	ddf0      	ble.n	4057f0 <_svfprintf_r+0x1350>
  40580e:	aa25      	add	r2, sp, #148	; 0x94
  405810:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405812:	4658      	mov	r0, fp
  405814:	f002 fa22 	bl	407c5c <__ssprint_r>
  405818:	2800      	cmp	r0, #0
  40581a:	f47e af1e 	bne.w	40465a <_svfprintf_r+0x1ba>
  40581e:	46c8      	mov	r8, r9
  405820:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405822:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405824:	e7e6      	b.n	4057f4 <_svfprintf_r+0x1354>
  405826:	aa25      	add	r2, sp, #148	; 0x94
  405828:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40582a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40582c:	f002 fa16 	bl	407c5c <__ssprint_r>
  405830:	2800      	cmp	r0, #0
  405832:	f47e af12 	bne.w	40465a <_svfprintf_r+0x1ba>
  405836:	46c8      	mov	r8, r9
  405838:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40583a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40583c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40583e:	f7ff bbc3 	b.w	404fc8 <_svfprintf_r+0xb28>
  405842:	2230      	movs	r2, #48	; 0x30
  405844:	4413      	add	r3, r2
  405846:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40584a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40584e:	ab22      	add	r3, sp, #136	; 0x88
  405850:	e706      	b.n	405660 <_svfprintf_r+0x11c0>
  405852:	4d50      	ldr	r5, [pc, #320]	; (405994 <_svfprintf_r+0x14f4>)
  405854:	3301      	adds	r3, #1
  405856:	443a      	add	r2, r7
  405858:	2b07      	cmp	r3, #7
  40585a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40585e:	9227      	str	r2, [sp, #156]	; 0x9c
  405860:	9326      	str	r3, [sp, #152]	; 0x98
  405862:	f108 0808 	add.w	r8, r8, #8
  405866:	f77f abb2 	ble.w	404fce <_svfprintf_r+0xb2e>
  40586a:	aa25      	add	r2, sp, #148	; 0x94
  40586c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40586e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405870:	f002 f9f4 	bl	407c5c <__ssprint_r>
  405874:	2800      	cmp	r0, #0
  405876:	f47e aef0 	bne.w	40465a <_svfprintf_r+0x1ba>
  40587a:	46c8      	mov	r8, r9
  40587c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40587e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405880:	f7ff bba5 	b.w	404fce <_svfprintf_r+0xb2e>
  405884:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405886:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405888:	4413      	add	r3, r2
  40588a:	930e      	str	r3, [sp, #56]	; 0x38
  40588c:	e76b      	b.n	405766 <_svfprintf_r+0x12c6>
  40588e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405890:	e5ee      	b.n	405470 <_svfprintf_r+0xfd0>
  405892:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405894:	4d3f      	ldr	r5, [pc, #252]	; (405994 <_svfprintf_r+0x14f4>)
  405896:	e4bb      	b.n	405210 <_svfprintf_r+0xd70>
  405898:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40589a:	9808      	ldr	r0, [sp, #32]
  40589c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40589e:	4639      	mov	r1, r7
  4058a0:	f002 fd60 	bl	408364 <__aeabi_dcmpeq>
  4058a4:	2800      	cmp	r0, #0
  4058a6:	f47f ae70 	bne.w	40558a <_svfprintf_r+0x10ea>
  4058aa:	f1c5 0501 	rsb	r5, r5, #1
  4058ae:	951f      	str	r5, [sp, #124]	; 0x7c
  4058b0:	442c      	add	r4, r5
  4058b2:	e5ca      	b.n	40544a <_svfprintf_r+0xfaa>
  4058b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4058b6:	4e38      	ldr	r6, [pc, #224]	; (405998 <_svfprintf_r+0x14f8>)
  4058b8:	2b00      	cmp	r3, #0
  4058ba:	bfbe      	ittt	lt
  4058bc:	232d      	movlt	r3, #45	; 0x2d
  4058be:	461f      	movlt	r7, r3
  4058c0:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
  4058c4:	f04f 0303 	mov.w	r3, #3
  4058c8:	461a      	mov	r2, r3
  4058ca:	9308      	str	r3, [sp, #32]
  4058cc:	f04f 0300 	mov.w	r3, #0
  4058d0:	bfa8      	it	ge
  4058d2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  4058d6:	4619      	mov	r1, r3
  4058d8:	930a      	str	r3, [sp, #40]	; 0x28
  4058da:	4b30      	ldr	r3, [pc, #192]	; (40599c <_svfprintf_r+0x14fc>)
  4058dc:	f7ff b954 	b.w	404b88 <_svfprintf_r+0x6e8>
  4058e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4058e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4058e4:	4413      	add	r3, r2
  4058e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4058e8:	441a      	add	r2, r3
  4058ea:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4058ee:	920e      	str	r2, [sp, #56]	; 0x38
  4058f0:	9308      	str	r3, [sp, #32]
  4058f2:	e5dd      	b.n	4054b0 <_svfprintf_r+0x1010>
  4058f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4058f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4058f8:	f1c3 0301 	rsb	r3, r3, #1
  4058fc:	441a      	add	r2, r3
  4058fe:	4613      	mov	r3, r2
  405900:	e7c3      	b.n	40588a <_svfprintf_r+0x13ea>
  405902:	f01b 0301 	ands.w	r3, fp, #1
  405906:	9312      	str	r3, [sp, #72]	; 0x48
  405908:	f47f aeb3 	bne.w	405672 <_svfprintf_r+0x11d2>
  40590c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40590e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405912:	9308      	str	r3, [sp, #32]
  405914:	e5cc      	b.n	4054b0 <_svfprintf_r+0x1010>
  405916:	4d1f      	ldr	r5, [pc, #124]	; (405994 <_svfprintf_r+0x14f4>)
  405918:	e43c      	b.n	405194 <_svfprintf_r+0xcf4>
  40591a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40591c:	4d1d      	ldr	r5, [pc, #116]	; (405994 <_svfprintf_r+0x14f4>)
  40591e:	e491      	b.n	405244 <_svfprintf_r+0xda4>
  405920:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405922:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405926:	6828      	ldr	r0, [r5, #0]
  405928:	46a2      	mov	sl, r4
  40592a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40592e:	900a      	str	r0, [sp, #40]	; 0x28
  405930:	4628      	mov	r0, r5
  405932:	3004      	adds	r0, #4
  405934:	900f      	str	r0, [sp, #60]	; 0x3c
  405936:	f7fe be0d 	b.w	404554 <_svfprintf_r+0xb4>
  40593a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40593c:	b913      	cbnz	r3, 405944 <_svfprintf_r+0x14a4>
  40593e:	f01b 0f01 	tst.w	fp, #1
  405942:	d002      	beq.n	40594a <_svfprintf_r+0x14aa>
  405944:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405946:	3301      	adds	r3, #1
  405948:	e7cd      	b.n	4058e6 <_svfprintf_r+0x1446>
  40594a:	2301      	movs	r3, #1
  40594c:	e71c      	b.n	405788 <_svfprintf_r+0x12e8>
  40594e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405952:	f7ff b980 	b.w	404c56 <_svfprintf_r+0x7b6>
  405956:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40595a:	f7ff b93a 	b.w	404bd2 <_svfprintf_r+0x732>
  40595e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405962:	f7ff b84f 	b.w	404a04 <_svfprintf_r+0x564>
  405966:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40596a:	e679      	b.n	405660 <_svfprintf_r+0x11c0>
  40596c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405970:	f7ff b9b2 	b.w	404cd8 <_svfprintf_r+0x838>
  405974:	f04f 32ff 	mov.w	r2, #4294967295
  405978:	230c      	movs	r3, #12
  40597a:	9209      	str	r2, [sp, #36]	; 0x24
  40597c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40597e:	6013      	str	r3, [r2, #0]
  405980:	f7fe be74 	b.w	40466c <_svfprintf_r+0x1cc>
  405984:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405988:	f7ff b8c4 	b.w	404b14 <_svfprintf_r+0x674>
  40598c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405990:	f7ff b878 	b.w	404a84 <_svfprintf_r+0x5e4>
  405994:	00408a38 	.word	0x00408a38
  405998:	004089f0 	.word	0x004089f0
  40599c:	004089ec 	.word	0x004089ec

004059a0 <register_fini>:
  4059a0:	4b02      	ldr	r3, [pc, #8]	; (4059ac <register_fini+0xc>)
  4059a2:	b113      	cbz	r3, 4059aa <register_fini+0xa>
  4059a4:	4802      	ldr	r0, [pc, #8]	; (4059b0 <register_fini+0x10>)
  4059a6:	f000 b805 	b.w	4059b4 <atexit>
  4059aa:	4770      	bx	lr
  4059ac:	00000000 	.word	0x00000000
  4059b0:	0040692d 	.word	0x0040692d

004059b4 <atexit>:
  4059b4:	2300      	movs	r3, #0
  4059b6:	4601      	mov	r1, r0
  4059b8:	461a      	mov	r2, r3
  4059ba:	4618      	mov	r0, r3
  4059bc:	f002 b9d8 	b.w	407d70 <__register_exitproc>

004059c0 <quorem>:
  4059c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059c4:	6903      	ldr	r3, [r0, #16]
  4059c6:	690f      	ldr	r7, [r1, #16]
  4059c8:	b083      	sub	sp, #12
  4059ca:	429f      	cmp	r7, r3
  4059cc:	f300 8088 	bgt.w	405ae0 <quorem+0x120>
  4059d0:	3f01      	subs	r7, #1
  4059d2:	f101 0614 	add.w	r6, r1, #20
  4059d6:	f100 0a14 	add.w	sl, r0, #20
  4059da:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
  4059de:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  4059e2:	3301      	adds	r3, #1
  4059e4:	fbb2 f8f3 	udiv	r8, r2, r3
  4059e8:	00bb      	lsls	r3, r7, #2
  4059ea:	9300      	str	r3, [sp, #0]
  4059ec:	eb06 0903 	add.w	r9, r6, r3
  4059f0:	4453      	add	r3, sl
  4059f2:	9301      	str	r3, [sp, #4]
  4059f4:	f1b8 0f00 	cmp.w	r8, #0
  4059f8:	d03b      	beq.n	405a72 <quorem+0xb2>
  4059fa:	2300      	movs	r3, #0
  4059fc:	46b4      	mov	ip, r6
  4059fe:	461c      	mov	r4, r3
  405a00:	46d6      	mov	lr, sl
  405a02:	f85c 2b04 	ldr.w	r2, [ip], #4
  405a06:	f8de 5000 	ldr.w	r5, [lr]
  405a0a:	fa1f fb82 	uxth.w	fp, r2
  405a0e:	fb08 330b 	mla	r3, r8, fp, r3
  405a12:	0c12      	lsrs	r2, r2, #16
  405a14:	ea4f 4b13 	mov.w	fp, r3, lsr #16
  405a18:	fb08 bb02 	mla	fp, r8, r2, fp
  405a1c:	b29a      	uxth	r2, r3
  405a1e:	1aa2      	subs	r2, r4, r2
  405a20:	b2ab      	uxth	r3, r5
  405a22:	fa1f f48b 	uxth.w	r4, fp
  405a26:	441a      	add	r2, r3
  405a28:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
  405a2c:	eb04 4422 	add.w	r4, r4, r2, asr #16
  405a30:	b292      	uxth	r2, r2
  405a32:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  405a36:	45e1      	cmp	r9, ip
  405a38:	f84e 2b04 	str.w	r2, [lr], #4
  405a3c:	ea4f 4424 	mov.w	r4, r4, asr #16
  405a40:	ea4f 431b 	mov.w	r3, fp, lsr #16
  405a44:	d2dd      	bcs.n	405a02 <quorem+0x42>
  405a46:	9b00      	ldr	r3, [sp, #0]
  405a48:	f85a 3003 	ldr.w	r3, [sl, r3]
  405a4c:	b98b      	cbnz	r3, 405a72 <quorem+0xb2>
  405a4e:	9c01      	ldr	r4, [sp, #4]
  405a50:	1f23      	subs	r3, r4, #4
  405a52:	459a      	cmp	sl, r3
  405a54:	d20c      	bcs.n	405a70 <quorem+0xb0>
  405a56:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405a5a:	b94b      	cbnz	r3, 405a70 <quorem+0xb0>
  405a5c:	f1a4 0308 	sub.w	r3, r4, #8
  405a60:	e002      	b.n	405a68 <quorem+0xa8>
  405a62:	681a      	ldr	r2, [r3, #0]
  405a64:	3b04      	subs	r3, #4
  405a66:	b91a      	cbnz	r2, 405a70 <quorem+0xb0>
  405a68:	459a      	cmp	sl, r3
  405a6a:	f107 37ff 	add.w	r7, r7, #4294967295
  405a6e:	d3f8      	bcc.n	405a62 <quorem+0xa2>
  405a70:	6107      	str	r7, [r0, #16]
  405a72:	4604      	mov	r4, r0
  405a74:	f001 fe2c 	bl	4076d0 <__mcmp>
  405a78:	2800      	cmp	r0, #0
  405a7a:	db2d      	blt.n	405ad8 <quorem+0x118>
  405a7c:	4655      	mov	r5, sl
  405a7e:	2300      	movs	r3, #0
  405a80:	f108 0801 	add.w	r8, r8, #1
  405a84:	f856 1b04 	ldr.w	r1, [r6], #4
  405a88:	6828      	ldr	r0, [r5, #0]
  405a8a:	b28a      	uxth	r2, r1
  405a8c:	1a9a      	subs	r2, r3, r2
  405a8e:	0c0b      	lsrs	r3, r1, #16
  405a90:	b281      	uxth	r1, r0
  405a92:	440a      	add	r2, r1
  405a94:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  405a98:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405a9c:	b292      	uxth	r2, r2
  405a9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405aa2:	45b1      	cmp	r9, r6
  405aa4:	f845 2b04 	str.w	r2, [r5], #4
  405aa8:	ea4f 4323 	mov.w	r3, r3, asr #16
  405aac:	d2ea      	bcs.n	405a84 <quorem+0xc4>
  405aae:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  405ab2:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  405ab6:	b97a      	cbnz	r2, 405ad8 <quorem+0x118>
  405ab8:	1f1a      	subs	r2, r3, #4
  405aba:	4592      	cmp	sl, r2
  405abc:	d20b      	bcs.n	405ad6 <quorem+0x116>
  405abe:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405ac2:	b942      	cbnz	r2, 405ad6 <quorem+0x116>
  405ac4:	3b08      	subs	r3, #8
  405ac6:	e002      	b.n	405ace <quorem+0x10e>
  405ac8:	681a      	ldr	r2, [r3, #0]
  405aca:	3b04      	subs	r3, #4
  405acc:	b91a      	cbnz	r2, 405ad6 <quorem+0x116>
  405ace:	459a      	cmp	sl, r3
  405ad0:	f107 37ff 	add.w	r7, r7, #4294967295
  405ad4:	d3f8      	bcc.n	405ac8 <quorem+0x108>
  405ad6:	6127      	str	r7, [r4, #16]
  405ad8:	4640      	mov	r0, r8
  405ada:	b003      	add	sp, #12
  405adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ae0:	2000      	movs	r0, #0
  405ae2:	b003      	add	sp, #12
  405ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405ae8 <_dtoa_r>:
  405ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405aec:	6c05      	ldr	r5, [r0, #64]	; 0x40
  405aee:	b09b      	sub	sp, #108	; 0x6c
  405af0:	4604      	mov	r4, r0
  405af2:	4692      	mov	sl, r2
  405af4:	469b      	mov	fp, r3
  405af6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405af8:	b14d      	cbz	r5, 405b0e <_dtoa_r+0x26>
  405afa:	2301      	movs	r3, #1
  405afc:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405afe:	4629      	mov	r1, r5
  405b00:	4093      	lsls	r3, r2
  405b02:	60ab      	str	r3, [r5, #8]
  405b04:	606a      	str	r2, [r5, #4]
  405b06:	f001 fc0b 	bl	407320 <_Bfree>
  405b0a:	2300      	movs	r3, #0
  405b0c:	6423      	str	r3, [r4, #64]	; 0x40
  405b0e:	f1bb 0f00 	cmp.w	fp, #0
  405b12:	465d      	mov	r5, fp
  405b14:	db35      	blt.n	405b82 <_dtoa_r+0x9a>
  405b16:	2300      	movs	r3, #0
  405b18:	6033      	str	r3, [r6, #0]
  405b1a:	4b9d      	ldr	r3, [pc, #628]	; (405d90 <_dtoa_r+0x2a8>)
  405b1c:	43ab      	bics	r3, r5
  405b1e:	d015      	beq.n	405b4c <_dtoa_r+0x64>
  405b20:	2200      	movs	r2, #0
  405b22:	2300      	movs	r3, #0
  405b24:	4650      	mov	r0, sl
  405b26:	4659      	mov	r1, fp
  405b28:	f002 fc1c 	bl	408364 <__aeabi_dcmpeq>
  405b2c:	4680      	mov	r8, r0
  405b2e:	2800      	cmp	r0, #0
  405b30:	d02d      	beq.n	405b8e <_dtoa_r+0xa6>
  405b32:	2301      	movs	r3, #1
  405b34:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405b36:	6013      	str	r3, [r2, #0]
  405b38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405b3a:	2b00      	cmp	r3, #0
  405b3c:	f000 80bd 	beq.w	405cba <_dtoa_r+0x1d2>
  405b40:	4894      	ldr	r0, [pc, #592]	; (405d94 <_dtoa_r+0x2ac>)
  405b42:	6018      	str	r0, [r3, #0]
  405b44:	3801      	subs	r0, #1
  405b46:	b01b      	add	sp, #108	; 0x6c
  405b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b4c:	f242 730f 	movw	r3, #9999	; 0x270f
  405b50:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405b52:	6013      	str	r3, [r2, #0]
  405b54:	f1ba 0f00 	cmp.w	sl, #0
  405b58:	d10d      	bne.n	405b76 <_dtoa_r+0x8e>
  405b5a:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405b5e:	b955      	cbnz	r5, 405b76 <_dtoa_r+0x8e>
  405b60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405b62:	488d      	ldr	r0, [pc, #564]	; (405d98 <_dtoa_r+0x2b0>)
  405b64:	2b00      	cmp	r3, #0
  405b66:	d0ee      	beq.n	405b46 <_dtoa_r+0x5e>
  405b68:	f100 0308 	add.w	r3, r0, #8
  405b6c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405b6e:	6013      	str	r3, [r2, #0]
  405b70:	b01b      	add	sp, #108	; 0x6c
  405b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405b78:	4888      	ldr	r0, [pc, #544]	; (405d9c <_dtoa_r+0x2b4>)
  405b7a:	2b00      	cmp	r3, #0
  405b7c:	d0e3      	beq.n	405b46 <_dtoa_r+0x5e>
  405b7e:	1cc3      	adds	r3, r0, #3
  405b80:	e7f4      	b.n	405b6c <_dtoa_r+0x84>
  405b82:	2301      	movs	r3, #1
  405b84:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405b88:	6033      	str	r3, [r6, #0]
  405b8a:	46ab      	mov	fp, r5
  405b8c:	e7c5      	b.n	405b1a <_dtoa_r+0x32>
  405b8e:	aa18      	add	r2, sp, #96	; 0x60
  405b90:	ab19      	add	r3, sp, #100	; 0x64
  405b92:	9201      	str	r2, [sp, #4]
  405b94:	9300      	str	r3, [sp, #0]
  405b96:	4652      	mov	r2, sl
  405b98:	465b      	mov	r3, fp
  405b9a:	4620      	mov	r0, r4
  405b9c:	f001 fe42 	bl	407824 <__d2b>
  405ba0:	0d2b      	lsrs	r3, r5, #20
  405ba2:	4681      	mov	r9, r0
  405ba4:	d071      	beq.n	405c8a <_dtoa_r+0x1a2>
  405ba6:	4650      	mov	r0, sl
  405ba8:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405bac:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405bb0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405bb2:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405bb6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405bba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405bbe:	2200      	movs	r2, #0
  405bc0:	4b77      	ldr	r3, [pc, #476]	; (405da0 <_dtoa_r+0x2b8>)
  405bc2:	f7fe f891 	bl	403ce8 <__aeabi_dsub>
  405bc6:	a36c      	add	r3, pc, #432	; (adr r3, 405d78 <_dtoa_r+0x290>)
  405bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
  405bcc:	f002 f962 	bl	407e94 <__aeabi_dmul>
  405bd0:	a36b      	add	r3, pc, #428	; (adr r3, 405d80 <_dtoa_r+0x298>)
  405bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  405bd6:	f7fe f889 	bl	403cec <__adddf3>
  405bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405bde:	4630      	mov	r0, r6
  405be0:	f7fe f9d0 	bl	403f84 <__aeabi_i2d>
  405be4:	a368      	add	r3, pc, #416	; (adr r3, 405d88 <_dtoa_r+0x2a0>)
  405be6:	e9d3 2300 	ldrd	r2, r3, [r3]
  405bea:	f002 f953 	bl	407e94 <__aeabi_dmul>
  405bee:	4602      	mov	r2, r0
  405bf0:	460b      	mov	r3, r1
  405bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405bf6:	f7fe f879 	bl	403cec <__adddf3>
  405bfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405bfe:	f002 fbf9 	bl	4083f4 <__aeabi_d2iz>
  405c02:	2200      	movs	r2, #0
  405c04:	9002      	str	r0, [sp, #8]
  405c06:	2300      	movs	r3, #0
  405c08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405c0c:	f002 fbb4 	bl	408378 <__aeabi_dcmplt>
  405c10:	2800      	cmp	r0, #0
  405c12:	f040 816d 	bne.w	405ef0 <_dtoa_r+0x408>
  405c16:	9d02      	ldr	r5, [sp, #8]
  405c18:	2d16      	cmp	r5, #22
  405c1a:	f200 8157 	bhi.w	405ecc <_dtoa_r+0x3e4>
  405c1e:	4961      	ldr	r1, [pc, #388]	; (405da4 <_dtoa_r+0x2bc>)
  405c20:	4652      	mov	r2, sl
  405c22:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  405c26:	465b      	mov	r3, fp
  405c28:	e9d1 0100 	ldrd	r0, r1, [r1]
  405c2c:	f002 fbc2 	bl	4083b4 <__aeabi_dcmpgt>
  405c30:	2800      	cmp	r0, #0
  405c32:	f000 81be 	beq.w	405fb2 <_dtoa_r+0x4ca>
  405c36:	1e6b      	subs	r3, r5, #1
  405c38:	9302      	str	r3, [sp, #8]
  405c3a:	2300      	movs	r3, #0
  405c3c:	930e      	str	r3, [sp, #56]	; 0x38
  405c3e:	1bbf      	subs	r7, r7, r6
  405c40:	1e7b      	subs	r3, r7, #1
  405c42:	9308      	str	r3, [sp, #32]
  405c44:	f100 814e 	bmi.w	405ee4 <_dtoa_r+0x3fc>
  405c48:	2300      	movs	r3, #0
  405c4a:	930a      	str	r3, [sp, #40]	; 0x28
  405c4c:	9b02      	ldr	r3, [sp, #8]
  405c4e:	2b00      	cmp	r3, #0
  405c50:	f2c0 813f 	blt.w	405ed2 <_dtoa_r+0x3ea>
  405c54:	9a08      	ldr	r2, [sp, #32]
  405c56:	930d      	str	r3, [sp, #52]	; 0x34
  405c58:	4611      	mov	r1, r2
  405c5a:	4419      	add	r1, r3
  405c5c:	2300      	movs	r3, #0
  405c5e:	9108      	str	r1, [sp, #32]
  405c60:	930c      	str	r3, [sp, #48]	; 0x30
  405c62:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c64:	2b09      	cmp	r3, #9
  405c66:	d82a      	bhi.n	405cbe <_dtoa_r+0x1d6>
  405c68:	2b05      	cmp	r3, #5
  405c6a:	f340 8658 	ble.w	40691e <_dtoa_r+0xe36>
  405c6e:	2500      	movs	r5, #0
  405c70:	3b04      	subs	r3, #4
  405c72:	9324      	str	r3, [sp, #144]	; 0x90
  405c74:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c76:	3b02      	subs	r3, #2
  405c78:	2b03      	cmp	r3, #3
  405c7a:	f200 863f 	bhi.w	4068fc <_dtoa_r+0xe14>
  405c7e:	e8df f013 	tbh	[pc, r3, lsl #1]
  405c82:	03ce      	.short	0x03ce
  405c84:	03d902c3 	.word	0x03d902c3
  405c88:	045b      	.short	0x045b
  405c8a:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405c8c:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405c8e:	443e      	add	r6, r7
  405c90:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405c94:	2b20      	cmp	r3, #32
  405c96:	f340 8187 	ble.w	405fa8 <_dtoa_r+0x4c0>
  405c9a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405c9e:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405ca2:	409d      	lsls	r5, r3
  405ca4:	fa2a f000 	lsr.w	r0, sl, r0
  405ca8:	4328      	orrs	r0, r5
  405caa:	f7fe f95b 	bl	403f64 <__aeabi_ui2d>
  405cae:	2301      	movs	r3, #1
  405cb0:	3e01      	subs	r6, #1
  405cb2:	9314      	str	r3, [sp, #80]	; 0x50
  405cb4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405cb8:	e781      	b.n	405bbe <_dtoa_r+0xd6>
  405cba:	483b      	ldr	r0, [pc, #236]	; (405da8 <_dtoa_r+0x2c0>)
  405cbc:	e743      	b.n	405b46 <_dtoa_r+0x5e>
  405cbe:	2100      	movs	r1, #0
  405cc0:	4620      	mov	r0, r4
  405cc2:	6461      	str	r1, [r4, #68]	; 0x44
  405cc4:	9125      	str	r1, [sp, #148]	; 0x94
  405cc6:	f001 fb05 	bl	4072d4 <_Balloc>
  405cca:	f04f 33ff 	mov.w	r3, #4294967295
  405cce:	9307      	str	r3, [sp, #28]
  405cd0:	930f      	str	r3, [sp, #60]	; 0x3c
  405cd2:	2301      	movs	r3, #1
  405cd4:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405cd6:	9004      	str	r0, [sp, #16]
  405cd8:	6420      	str	r0, [r4, #64]	; 0x40
  405cda:	9224      	str	r2, [sp, #144]	; 0x90
  405cdc:	930b      	str	r3, [sp, #44]	; 0x2c
  405cde:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405ce0:	2b00      	cmp	r3, #0
  405ce2:	f2c0 80d3 	blt.w	405e8c <_dtoa_r+0x3a4>
  405ce6:	9a02      	ldr	r2, [sp, #8]
  405ce8:	2a0e      	cmp	r2, #14
  405cea:	f300 80cf 	bgt.w	405e8c <_dtoa_r+0x3a4>
  405cee:	4b2d      	ldr	r3, [pc, #180]	; (405da4 <_dtoa_r+0x2bc>)
  405cf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
  405cf8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405cfc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405cfe:	2b00      	cmp	r3, #0
  405d00:	f2c0 83b4 	blt.w	40646c <_dtoa_r+0x984>
  405d04:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  405d08:	4650      	mov	r0, sl
  405d0a:	462a      	mov	r2, r5
  405d0c:	4633      	mov	r3, r6
  405d0e:	4659      	mov	r1, fp
  405d10:	f002 f9ea 	bl	4080e8 <__aeabi_ddiv>
  405d14:	f002 fb6e 	bl	4083f4 <__aeabi_d2iz>
  405d18:	4680      	mov	r8, r0
  405d1a:	f7fe f933 	bl	403f84 <__aeabi_i2d>
  405d1e:	462a      	mov	r2, r5
  405d20:	4633      	mov	r3, r6
  405d22:	f002 f8b7 	bl	407e94 <__aeabi_dmul>
  405d26:	4602      	mov	r2, r0
  405d28:	460b      	mov	r3, r1
  405d2a:	4650      	mov	r0, sl
  405d2c:	4659      	mov	r1, fp
  405d2e:	f7fd ffdb 	bl	403ce8 <__aeabi_dsub>
  405d32:	9e07      	ldr	r6, [sp, #28]
  405d34:	9f04      	ldr	r7, [sp, #16]
  405d36:	f108 0530 	add.w	r5, r8, #48	; 0x30
  405d3a:	2e01      	cmp	r6, #1
  405d3c:	703d      	strb	r5, [r7, #0]
  405d3e:	4602      	mov	r2, r0
  405d40:	460b      	mov	r3, r1
  405d42:	f107 0501 	add.w	r5, r7, #1
  405d46:	d064      	beq.n	405e12 <_dtoa_r+0x32a>
  405d48:	2200      	movs	r2, #0
  405d4a:	4b18      	ldr	r3, [pc, #96]	; (405dac <_dtoa_r+0x2c4>)
  405d4c:	f002 f8a2 	bl	407e94 <__aeabi_dmul>
  405d50:	2200      	movs	r2, #0
  405d52:	2300      	movs	r3, #0
  405d54:	4606      	mov	r6, r0
  405d56:	460f      	mov	r7, r1
  405d58:	f002 fb04 	bl	408364 <__aeabi_dcmpeq>
  405d5c:	2800      	cmp	r0, #0
  405d5e:	f040 8082 	bne.w	405e66 <_dtoa_r+0x37e>
  405d62:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  405d66:	f04f 0a00 	mov.w	sl, #0
  405d6a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405d6e:	f04f 0b00 	mov.w	fp, #0
  405d72:	940b      	str	r4, [sp, #44]	; 0x2c
  405d74:	e029      	b.n	405dca <_dtoa_r+0x2e2>
  405d76:	bf00      	nop
  405d78:	636f4361 	.word	0x636f4361
  405d7c:	3fd287a7 	.word	0x3fd287a7
  405d80:	8b60c8b3 	.word	0x8b60c8b3
  405d84:	3fc68a28 	.word	0x3fc68a28
  405d88:	509f79fb 	.word	0x509f79fb
  405d8c:	3fd34413 	.word	0x3fd34413
  405d90:	7ff00000 	.word	0x7ff00000
  405d94:	00408a25 	.word	0x00408a25
  405d98:	00408a48 	.word	0x00408a48
  405d9c:	00408a54 	.word	0x00408a54
  405da0:	3ff80000 	.word	0x3ff80000
  405da4:	00408a90 	.word	0x00408a90
  405da8:	00408a24 	.word	0x00408a24
  405dac:	40240000 	.word	0x40240000
  405db0:	2200      	movs	r2, #0
  405db2:	4b81      	ldr	r3, [pc, #516]	; (405fb8 <_dtoa_r+0x4d0>)
  405db4:	f002 f86e 	bl	407e94 <__aeabi_dmul>
  405db8:	4652      	mov	r2, sl
  405dba:	465b      	mov	r3, fp
  405dbc:	4606      	mov	r6, r0
  405dbe:	460f      	mov	r7, r1
  405dc0:	f002 fad0 	bl	408364 <__aeabi_dcmpeq>
  405dc4:	2800      	cmp	r0, #0
  405dc6:	f040 83ba 	bne.w	40653e <_dtoa_r+0xa56>
  405dca:	4642      	mov	r2, r8
  405dcc:	464b      	mov	r3, r9
  405dce:	4630      	mov	r0, r6
  405dd0:	4639      	mov	r1, r7
  405dd2:	f002 f989 	bl	4080e8 <__aeabi_ddiv>
  405dd6:	f002 fb0d 	bl	4083f4 <__aeabi_d2iz>
  405dda:	4604      	mov	r4, r0
  405ddc:	f7fe f8d2 	bl	403f84 <__aeabi_i2d>
  405de0:	4642      	mov	r2, r8
  405de2:	464b      	mov	r3, r9
  405de4:	f002 f856 	bl	407e94 <__aeabi_dmul>
  405de8:	4602      	mov	r2, r0
  405dea:	460b      	mov	r3, r1
  405dec:	4630      	mov	r0, r6
  405dee:	4639      	mov	r1, r7
  405df0:	f7fd ff7a 	bl	403ce8 <__aeabi_dsub>
  405df4:	f104 0630 	add.w	r6, r4, #48	; 0x30
  405df8:	f805 6b01 	strb.w	r6, [r5], #1
  405dfc:	9e04      	ldr	r6, [sp, #16]
  405dfe:	9f07      	ldr	r7, [sp, #28]
  405e00:	1bae      	subs	r6, r5, r6
  405e02:	42be      	cmp	r6, r7
  405e04:	4602      	mov	r2, r0
  405e06:	460b      	mov	r3, r1
  405e08:	d1d2      	bne.n	405db0 <_dtoa_r+0x2c8>
  405e0a:	46a0      	mov	r8, r4
  405e0c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  405e10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405e12:	4610      	mov	r0, r2
  405e14:	4619      	mov	r1, r3
  405e16:	f7fd ff69 	bl	403cec <__adddf3>
  405e1a:	4606      	mov	r6, r0
  405e1c:	460f      	mov	r7, r1
  405e1e:	4602      	mov	r2, r0
  405e20:	460b      	mov	r3, r1
  405e22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405e26:	f002 faa7 	bl	408378 <__aeabi_dcmplt>
  405e2a:	b948      	cbnz	r0, 405e40 <_dtoa_r+0x358>
  405e2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405e30:	4632      	mov	r2, r6
  405e32:	463b      	mov	r3, r7
  405e34:	f002 fa96 	bl	408364 <__aeabi_dcmpeq>
  405e38:	b1a8      	cbz	r0, 405e66 <_dtoa_r+0x37e>
  405e3a:	f018 0f01 	tst.w	r8, #1
  405e3e:	d012      	beq.n	405e66 <_dtoa_r+0x37e>
  405e40:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405e44:	1e6b      	subs	r3, r5, #1
  405e46:	9a04      	ldr	r2, [sp, #16]
  405e48:	e004      	b.n	405e54 <_dtoa_r+0x36c>
  405e4a:	429a      	cmp	r2, r3
  405e4c:	f000 8402 	beq.w	406654 <_dtoa_r+0xb6c>
  405e50:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405e54:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405e58:	f103 0501 	add.w	r5, r3, #1
  405e5c:	d0f5      	beq.n	405e4a <_dtoa_r+0x362>
  405e5e:	f108 0801 	add.w	r8, r8, #1
  405e62:	f883 8000 	strb.w	r8, [r3]
  405e66:	4649      	mov	r1, r9
  405e68:	4620      	mov	r0, r4
  405e6a:	f001 fa59 	bl	407320 <_Bfree>
  405e6e:	2200      	movs	r2, #0
  405e70:	9b02      	ldr	r3, [sp, #8]
  405e72:	702a      	strb	r2, [r5, #0]
  405e74:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405e76:	3301      	adds	r3, #1
  405e78:	6013      	str	r3, [r2, #0]
  405e7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405e7c:	2b00      	cmp	r3, #0
  405e7e:	f000 839f 	beq.w	4065c0 <_dtoa_r+0xad8>
  405e82:	9804      	ldr	r0, [sp, #16]
  405e84:	601d      	str	r5, [r3, #0]
  405e86:	b01b      	add	sp, #108	; 0x6c
  405e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405e8e:	2a00      	cmp	r2, #0
  405e90:	d03e      	beq.n	405f10 <_dtoa_r+0x428>
  405e92:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405e94:	2a01      	cmp	r2, #1
  405e96:	f340 8311 	ble.w	4064bc <_dtoa_r+0x9d4>
  405e9a:	9b07      	ldr	r3, [sp, #28]
  405e9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405e9e:	1e5f      	subs	r7, r3, #1
  405ea0:	42ba      	cmp	r2, r7
  405ea2:	f2c0 8390 	blt.w	4065c6 <_dtoa_r+0xade>
  405ea6:	1bd7      	subs	r7, r2, r7
  405ea8:	9b07      	ldr	r3, [sp, #28]
  405eaa:	2b00      	cmp	r3, #0
  405eac:	f2c0 848c 	blt.w	4067c8 <_dtoa_r+0xce0>
  405eb0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405eb2:	9b07      	ldr	r3, [sp, #28]
  405eb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405eb6:	2101      	movs	r1, #1
  405eb8:	441a      	add	r2, r3
  405eba:	920a      	str	r2, [sp, #40]	; 0x28
  405ebc:	9a08      	ldr	r2, [sp, #32]
  405ebe:	4620      	mov	r0, r4
  405ec0:	441a      	add	r2, r3
  405ec2:	9208      	str	r2, [sp, #32]
  405ec4:	f001 fac8 	bl	407458 <__i2b>
  405ec8:	4606      	mov	r6, r0
  405eca:	e023      	b.n	405f14 <_dtoa_r+0x42c>
  405ecc:	2301      	movs	r3, #1
  405ece:	930e      	str	r3, [sp, #56]	; 0x38
  405ed0:	e6b5      	b.n	405c3e <_dtoa_r+0x156>
  405ed2:	2300      	movs	r3, #0
  405ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405ed6:	930d      	str	r3, [sp, #52]	; 0x34
  405ed8:	9b02      	ldr	r3, [sp, #8]
  405eda:	1ad2      	subs	r2, r2, r3
  405edc:	425b      	negs	r3, r3
  405ede:	920a      	str	r2, [sp, #40]	; 0x28
  405ee0:	930c      	str	r3, [sp, #48]	; 0x30
  405ee2:	e6be      	b.n	405c62 <_dtoa_r+0x17a>
  405ee4:	f1c7 0301 	rsb	r3, r7, #1
  405ee8:	930a      	str	r3, [sp, #40]	; 0x28
  405eea:	2300      	movs	r3, #0
  405eec:	9308      	str	r3, [sp, #32]
  405eee:	e6ad      	b.n	405c4c <_dtoa_r+0x164>
  405ef0:	9d02      	ldr	r5, [sp, #8]
  405ef2:	4628      	mov	r0, r5
  405ef4:	f7fe f846 	bl	403f84 <__aeabi_i2d>
  405ef8:	4602      	mov	r2, r0
  405efa:	460b      	mov	r3, r1
  405efc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405f00:	f002 fa30 	bl	408364 <__aeabi_dcmpeq>
  405f04:	2800      	cmp	r0, #0
  405f06:	f47f ae86 	bne.w	405c16 <_dtoa_r+0x12e>
  405f0a:	1e6b      	subs	r3, r5, #1
  405f0c:	9302      	str	r3, [sp, #8]
  405f0e:	e682      	b.n	405c16 <_dtoa_r+0x12e>
  405f10:	ad0a      	add	r5, sp, #40	; 0x28
  405f12:	cde0      	ldmia	r5, {r5, r6, r7}
  405f14:	2d00      	cmp	r5, #0
  405f16:	dd0c      	ble.n	405f32 <_dtoa_r+0x44a>
  405f18:	9908      	ldr	r1, [sp, #32]
  405f1a:	2900      	cmp	r1, #0
  405f1c:	460b      	mov	r3, r1
  405f1e:	dd08      	ble.n	405f32 <_dtoa_r+0x44a>
  405f20:	42a9      	cmp	r1, r5
  405f22:	bfa8      	it	ge
  405f24:	462b      	movge	r3, r5
  405f26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405f28:	1aed      	subs	r5, r5, r3
  405f2a:	1ad2      	subs	r2, r2, r3
  405f2c:	1acb      	subs	r3, r1, r3
  405f2e:	920a      	str	r2, [sp, #40]	; 0x28
  405f30:	9308      	str	r3, [sp, #32]
  405f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405f34:	b1d3      	cbz	r3, 405f6c <_dtoa_r+0x484>
  405f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405f38:	2b00      	cmp	r3, #0
  405f3a:	f000 82b8 	beq.w	4064ae <_dtoa_r+0x9c6>
  405f3e:	2f00      	cmp	r7, #0
  405f40:	dd10      	ble.n	405f64 <_dtoa_r+0x47c>
  405f42:	4631      	mov	r1, r6
  405f44:	463a      	mov	r2, r7
  405f46:	4620      	mov	r0, r4
  405f48:	f001 fb22 	bl	407590 <__pow5mult>
  405f4c:	464a      	mov	r2, r9
  405f4e:	4601      	mov	r1, r0
  405f50:	4606      	mov	r6, r0
  405f52:	4620      	mov	r0, r4
  405f54:	f001 fa8a 	bl	40746c <__multiply>
  405f58:	4603      	mov	r3, r0
  405f5a:	4649      	mov	r1, r9
  405f5c:	4620      	mov	r0, r4
  405f5e:	4699      	mov	r9, r3
  405f60:	f001 f9de 	bl	407320 <_Bfree>
  405f64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405f66:	1bda      	subs	r2, r3, r7
  405f68:	f040 82a2 	bne.w	4064b0 <_dtoa_r+0x9c8>
  405f6c:	2101      	movs	r1, #1
  405f6e:	4620      	mov	r0, r4
  405f70:	f001 fa72 	bl	407458 <__i2b>
  405f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405f76:	4680      	mov	r8, r0
  405f78:	2b00      	cmp	r3, #0
  405f7a:	dd1f      	ble.n	405fbc <_dtoa_r+0x4d4>
  405f7c:	4601      	mov	r1, r0
  405f7e:	461a      	mov	r2, r3
  405f80:	4620      	mov	r0, r4
  405f82:	f001 fb05 	bl	407590 <__pow5mult>
  405f86:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f88:	4680      	mov	r8, r0
  405f8a:	2b01      	cmp	r3, #1
  405f8c:	f340 8255 	ble.w	40643a <_dtoa_r+0x952>
  405f90:	2300      	movs	r3, #0
  405f92:	930c      	str	r3, [sp, #48]	; 0x30
  405f94:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405f98:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405f9c:	6918      	ldr	r0, [r3, #16]
  405f9e:	f001 fa0b 	bl	4073b8 <__hi0bits>
  405fa2:	f1c0 0020 	rsb	r0, r0, #32
  405fa6:	e013      	b.n	405fd0 <_dtoa_r+0x4e8>
  405fa8:	f1c3 0520 	rsb	r5, r3, #32
  405fac:	fa0a f005 	lsl.w	r0, sl, r5
  405fb0:	e67b      	b.n	405caa <_dtoa_r+0x1c2>
  405fb2:	900e      	str	r0, [sp, #56]	; 0x38
  405fb4:	e643      	b.n	405c3e <_dtoa_r+0x156>
  405fb6:	bf00      	nop
  405fb8:	40240000 	.word	0x40240000
  405fbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405fbe:	2b01      	cmp	r3, #1
  405fc0:	f340 8285 	ble.w	4064ce <_dtoa_r+0x9e6>
  405fc4:	2300      	movs	r3, #0
  405fc6:	930c      	str	r3, [sp, #48]	; 0x30
  405fc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405fca:	2001      	movs	r0, #1
  405fcc:	2b00      	cmp	r3, #0
  405fce:	d1e1      	bne.n	405f94 <_dtoa_r+0x4ac>
  405fd0:	9a08      	ldr	r2, [sp, #32]
  405fd2:	4410      	add	r0, r2
  405fd4:	f010 001f 	ands.w	r0, r0, #31
  405fd8:	f000 80a1 	beq.w	40611e <_dtoa_r+0x636>
  405fdc:	f1c0 0320 	rsb	r3, r0, #32
  405fe0:	2b04      	cmp	r3, #4
  405fe2:	f340 8486 	ble.w	4068f2 <_dtoa_r+0xe0a>
  405fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405fe8:	f1c0 001c 	rsb	r0, r0, #28
  405fec:	4403      	add	r3, r0
  405fee:	930a      	str	r3, [sp, #40]	; 0x28
  405ff0:	4613      	mov	r3, r2
  405ff2:	4403      	add	r3, r0
  405ff4:	4405      	add	r5, r0
  405ff6:	9308      	str	r3, [sp, #32]
  405ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ffa:	2b00      	cmp	r3, #0
  405ffc:	dd05      	ble.n	40600a <_dtoa_r+0x522>
  405ffe:	4649      	mov	r1, r9
  406000:	461a      	mov	r2, r3
  406002:	4620      	mov	r0, r4
  406004:	f001 fb14 	bl	407630 <__lshift>
  406008:	4681      	mov	r9, r0
  40600a:	9b08      	ldr	r3, [sp, #32]
  40600c:	2b00      	cmp	r3, #0
  40600e:	dd05      	ble.n	40601c <_dtoa_r+0x534>
  406010:	4641      	mov	r1, r8
  406012:	461a      	mov	r2, r3
  406014:	4620      	mov	r0, r4
  406016:	f001 fb0b 	bl	407630 <__lshift>
  40601a:	4680      	mov	r8, r0
  40601c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40601e:	2b00      	cmp	r3, #0
  406020:	f040 8086 	bne.w	406130 <_dtoa_r+0x648>
  406024:	9b07      	ldr	r3, [sp, #28]
  406026:	2b00      	cmp	r3, #0
  406028:	f340 8264 	ble.w	4064f4 <_dtoa_r+0xa0c>
  40602c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40602e:	2b00      	cmp	r3, #0
  406030:	f000 8098 	beq.w	406164 <_dtoa_r+0x67c>
  406034:	2d00      	cmp	r5, #0
  406036:	dd05      	ble.n	406044 <_dtoa_r+0x55c>
  406038:	4631      	mov	r1, r6
  40603a:	462a      	mov	r2, r5
  40603c:	4620      	mov	r0, r4
  40603e:	f001 faf7 	bl	407630 <__lshift>
  406042:	4606      	mov	r6, r0
  406044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406046:	2b00      	cmp	r3, #0
  406048:	f040 8336 	bne.w	4066b8 <_dtoa_r+0xbd0>
  40604c:	9608      	str	r6, [sp, #32]
  40604e:	9b07      	ldr	r3, [sp, #28]
  406050:	9a04      	ldr	r2, [sp, #16]
  406052:	3b01      	subs	r3, #1
  406054:	18d3      	adds	r3, r2, r3
  406056:	930b      	str	r3, [sp, #44]	; 0x2c
  406058:	4617      	mov	r7, r2
  40605a:	f00a 0301 	and.w	r3, sl, #1
  40605e:	46c2      	mov	sl, r8
  406060:	f8dd b020 	ldr.w	fp, [sp, #32]
  406064:	930c      	str	r3, [sp, #48]	; 0x30
  406066:	4651      	mov	r1, sl
  406068:	4648      	mov	r0, r9
  40606a:	f7ff fca9 	bl	4059c0 <quorem>
  40606e:	4631      	mov	r1, r6
  406070:	4605      	mov	r5, r0
  406072:	4648      	mov	r0, r9
  406074:	f001 fb2c 	bl	4076d0 <__mcmp>
  406078:	465a      	mov	r2, fp
  40607a:	9007      	str	r0, [sp, #28]
  40607c:	4651      	mov	r1, sl
  40607e:	4620      	mov	r0, r4
  406080:	f001 fb42 	bl	407708 <__mdiff>
  406084:	68c2      	ldr	r2, [r0, #12]
  406086:	4680      	mov	r8, r0
  406088:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40608c:	2a00      	cmp	r2, #0
  40608e:	f040 8229 	bne.w	4064e4 <_dtoa_r+0x9fc>
  406092:	4601      	mov	r1, r0
  406094:	4648      	mov	r0, r9
  406096:	930a      	str	r3, [sp, #40]	; 0x28
  406098:	f001 fb1a 	bl	4076d0 <__mcmp>
  40609c:	4641      	mov	r1, r8
  40609e:	9008      	str	r0, [sp, #32]
  4060a0:	4620      	mov	r0, r4
  4060a2:	f001 f93d 	bl	407320 <_Bfree>
  4060a6:	9a08      	ldr	r2, [sp, #32]
  4060a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4060aa:	b932      	cbnz	r2, 4060ba <_dtoa_r+0x5d2>
  4060ac:	9924      	ldr	r1, [sp, #144]	; 0x90
  4060ae:	b921      	cbnz	r1, 4060ba <_dtoa_r+0x5d2>
  4060b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4060b2:	2a00      	cmp	r2, #0
  4060b4:	f000 83ee 	beq.w	406894 <_dtoa_r+0xdac>
  4060b8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4060ba:	9907      	ldr	r1, [sp, #28]
  4060bc:	2900      	cmp	r1, #0
  4060be:	f2c0 829f 	blt.w	406600 <_dtoa_r+0xb18>
  4060c2:	d105      	bne.n	4060d0 <_dtoa_r+0x5e8>
  4060c4:	9924      	ldr	r1, [sp, #144]	; 0x90
  4060c6:	b919      	cbnz	r1, 4060d0 <_dtoa_r+0x5e8>
  4060c8:	990c      	ldr	r1, [sp, #48]	; 0x30
  4060ca:	2900      	cmp	r1, #0
  4060cc:	f000 8298 	beq.w	406600 <_dtoa_r+0xb18>
  4060d0:	2a00      	cmp	r2, #0
  4060d2:	f300 8305 	bgt.w	4066e0 <_dtoa_r+0xbf8>
  4060d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4060d8:	f107 0801 	add.w	r8, r7, #1
  4060dc:	4297      	cmp	r7, r2
  4060de:	703b      	strb	r3, [r7, #0]
  4060e0:	4645      	mov	r5, r8
  4060e2:	f000 830b 	beq.w	4066fc <_dtoa_r+0xc14>
  4060e6:	4649      	mov	r1, r9
  4060e8:	2300      	movs	r3, #0
  4060ea:	220a      	movs	r2, #10
  4060ec:	4620      	mov	r0, r4
  4060ee:	f001 f921 	bl	407334 <__multadd>
  4060f2:	455e      	cmp	r6, fp
  4060f4:	4681      	mov	r9, r0
  4060f6:	4631      	mov	r1, r6
  4060f8:	f04f 0300 	mov.w	r3, #0
  4060fc:	f04f 020a 	mov.w	r2, #10
  406100:	4620      	mov	r0, r4
  406102:	f000 81e9 	beq.w	4064d8 <_dtoa_r+0x9f0>
  406106:	f001 f915 	bl	407334 <__multadd>
  40610a:	4659      	mov	r1, fp
  40610c:	4606      	mov	r6, r0
  40610e:	2300      	movs	r3, #0
  406110:	220a      	movs	r2, #10
  406112:	4620      	mov	r0, r4
  406114:	f001 f90e 	bl	407334 <__multadd>
  406118:	4647      	mov	r7, r8
  40611a:	4683      	mov	fp, r0
  40611c:	e7a3      	b.n	406066 <_dtoa_r+0x57e>
  40611e:	201c      	movs	r0, #28
  406120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406122:	4405      	add	r5, r0
  406124:	4403      	add	r3, r0
  406126:	930a      	str	r3, [sp, #40]	; 0x28
  406128:	9b08      	ldr	r3, [sp, #32]
  40612a:	4403      	add	r3, r0
  40612c:	9308      	str	r3, [sp, #32]
  40612e:	e763      	b.n	405ff8 <_dtoa_r+0x510>
  406130:	4641      	mov	r1, r8
  406132:	4648      	mov	r0, r9
  406134:	f001 facc 	bl	4076d0 <__mcmp>
  406138:	2800      	cmp	r0, #0
  40613a:	f6bf af73 	bge.w	406024 <_dtoa_r+0x53c>
  40613e:	9f02      	ldr	r7, [sp, #8]
  406140:	4649      	mov	r1, r9
  406142:	2300      	movs	r3, #0
  406144:	220a      	movs	r2, #10
  406146:	4620      	mov	r0, r4
  406148:	3f01      	subs	r7, #1
  40614a:	9702      	str	r7, [sp, #8]
  40614c:	f001 f8f2 	bl	407334 <__multadd>
  406150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406152:	4681      	mov	r9, r0
  406154:	2b00      	cmp	r3, #0
  406156:	f040 83b5 	bne.w	4068c4 <_dtoa_r+0xddc>
  40615a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40615c:	2b00      	cmp	r3, #0
  40615e:	f340 83be 	ble.w	4068de <_dtoa_r+0xdf6>
  406162:	9307      	str	r3, [sp, #28]
  406164:	f8dd a010 	ldr.w	sl, [sp, #16]
  406168:	9f07      	ldr	r7, [sp, #28]
  40616a:	4655      	mov	r5, sl
  40616c:	e006      	b.n	40617c <_dtoa_r+0x694>
  40616e:	4649      	mov	r1, r9
  406170:	2300      	movs	r3, #0
  406172:	220a      	movs	r2, #10
  406174:	4620      	mov	r0, r4
  406176:	f001 f8dd 	bl	407334 <__multadd>
  40617a:	4681      	mov	r9, r0
  40617c:	4641      	mov	r1, r8
  40617e:	4648      	mov	r0, r9
  406180:	f7ff fc1e 	bl	4059c0 <quorem>
  406184:	3030      	adds	r0, #48	; 0x30
  406186:	f805 0b01 	strb.w	r0, [r5], #1
  40618a:	eba5 030a 	sub.w	r3, r5, sl
  40618e:	42bb      	cmp	r3, r7
  406190:	dbed      	blt.n	40616e <_dtoa_r+0x686>
  406192:	9b04      	ldr	r3, [sp, #16]
  406194:	9a07      	ldr	r2, [sp, #28]
  406196:	4682      	mov	sl, r0
  406198:	2a01      	cmp	r2, #1
  40619a:	bfac      	ite	ge
  40619c:	189b      	addge	r3, r3, r2
  40619e:	3301      	addlt	r3, #1
  4061a0:	f04f 0b00 	mov.w	fp, #0
  4061a4:	461d      	mov	r5, r3
  4061a6:	4649      	mov	r1, r9
  4061a8:	2201      	movs	r2, #1
  4061aa:	4620      	mov	r0, r4
  4061ac:	f001 fa40 	bl	407630 <__lshift>
  4061b0:	4641      	mov	r1, r8
  4061b2:	4681      	mov	r9, r0
  4061b4:	f001 fa8c 	bl	4076d0 <__mcmp>
  4061b8:	2800      	cmp	r0, #0
  4061ba:	f340 823f 	ble.w	40663c <_dtoa_r+0xb54>
  4061be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4061c2:	1e6b      	subs	r3, r5, #1
  4061c4:	9904      	ldr	r1, [sp, #16]
  4061c6:	e004      	b.n	4061d2 <_dtoa_r+0x6ea>
  4061c8:	428b      	cmp	r3, r1
  4061ca:	f000 81ae 	beq.w	40652a <_dtoa_r+0xa42>
  4061ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4061d2:	2a39      	cmp	r2, #57	; 0x39
  4061d4:	f103 0501 	add.w	r5, r3, #1
  4061d8:	d0f6      	beq.n	4061c8 <_dtoa_r+0x6e0>
  4061da:	3201      	adds	r2, #1
  4061dc:	701a      	strb	r2, [r3, #0]
  4061de:	4641      	mov	r1, r8
  4061e0:	4620      	mov	r0, r4
  4061e2:	f001 f89d 	bl	407320 <_Bfree>
  4061e6:	2e00      	cmp	r6, #0
  4061e8:	f43f ae3d 	beq.w	405e66 <_dtoa_r+0x37e>
  4061ec:	f1bb 0f00 	cmp.w	fp, #0
  4061f0:	d005      	beq.n	4061fe <_dtoa_r+0x716>
  4061f2:	45b3      	cmp	fp, r6
  4061f4:	d003      	beq.n	4061fe <_dtoa_r+0x716>
  4061f6:	4659      	mov	r1, fp
  4061f8:	4620      	mov	r0, r4
  4061fa:	f001 f891 	bl	407320 <_Bfree>
  4061fe:	4631      	mov	r1, r6
  406200:	4620      	mov	r0, r4
  406202:	f001 f88d 	bl	407320 <_Bfree>
  406206:	e62e      	b.n	405e66 <_dtoa_r+0x37e>
  406208:	2300      	movs	r3, #0
  40620a:	930b      	str	r3, [sp, #44]	; 0x2c
  40620c:	9b02      	ldr	r3, [sp, #8]
  40620e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406210:	4413      	add	r3, r2
  406212:	930f      	str	r3, [sp, #60]	; 0x3c
  406214:	3301      	adds	r3, #1
  406216:	2b01      	cmp	r3, #1
  406218:	461f      	mov	r7, r3
  40621a:	461e      	mov	r6, r3
  40621c:	bfb8      	it	lt
  40621e:	2701      	movlt	r7, #1
  406220:	9307      	str	r3, [sp, #28]
  406222:	2100      	movs	r1, #0
  406224:	2f17      	cmp	r7, #23
  406226:	6461      	str	r1, [r4, #68]	; 0x44
  406228:	d90a      	bls.n	406240 <_dtoa_r+0x758>
  40622a:	2201      	movs	r2, #1
  40622c:	2304      	movs	r3, #4
  40622e:	005b      	lsls	r3, r3, #1
  406230:	f103 0014 	add.w	r0, r3, #20
  406234:	4287      	cmp	r7, r0
  406236:	4611      	mov	r1, r2
  406238:	f102 0201 	add.w	r2, r2, #1
  40623c:	d2f7      	bcs.n	40622e <_dtoa_r+0x746>
  40623e:	6461      	str	r1, [r4, #68]	; 0x44
  406240:	4620      	mov	r0, r4
  406242:	f001 f847 	bl	4072d4 <_Balloc>
  406246:	2e0e      	cmp	r6, #14
  406248:	9004      	str	r0, [sp, #16]
  40624a:	6420      	str	r0, [r4, #64]	; 0x40
  40624c:	f63f ad47 	bhi.w	405cde <_dtoa_r+0x1f6>
  406250:	2d00      	cmp	r5, #0
  406252:	f43f ad44 	beq.w	405cde <_dtoa_r+0x1f6>
  406256:	9902      	ldr	r1, [sp, #8]
  406258:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40625c:	2900      	cmp	r1, #0
  40625e:	f340 8203 	ble.w	406668 <_dtoa_r+0xb80>
  406262:	4bb9      	ldr	r3, [pc, #740]	; (406548 <_dtoa_r+0xa60>)
  406264:	f001 020f 	and.w	r2, r1, #15
  406268:	110d      	asrs	r5, r1, #4
  40626a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40626e:	06e9      	lsls	r1, r5, #27
  406270:	e9d3 6700 	ldrd	r6, r7, [r3]
  406274:	f140 81af 	bpl.w	4065d6 <_dtoa_r+0xaee>
  406278:	4bb4      	ldr	r3, [pc, #720]	; (40654c <_dtoa_r+0xa64>)
  40627a:	4650      	mov	r0, sl
  40627c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406280:	4659      	mov	r1, fp
  406282:	f001 ff31 	bl	4080e8 <__aeabi_ddiv>
  406286:	f04f 0a03 	mov.w	sl, #3
  40628a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40628e:	f005 050f 	and.w	r5, r5, #15
  406292:	b18d      	cbz	r5, 4062b8 <_dtoa_r+0x7d0>
  406294:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40654c <_dtoa_r+0xa64>
  406298:	07ea      	lsls	r2, r5, #31
  40629a:	d509      	bpl.n	4062b0 <_dtoa_r+0x7c8>
  40629c:	e9d8 2300 	ldrd	r2, r3, [r8]
  4062a0:	4630      	mov	r0, r6
  4062a2:	4639      	mov	r1, r7
  4062a4:	f001 fdf6 	bl	407e94 <__aeabi_dmul>
  4062a8:	4606      	mov	r6, r0
  4062aa:	460f      	mov	r7, r1
  4062ac:	f10a 0a01 	add.w	sl, sl, #1
  4062b0:	106d      	asrs	r5, r5, #1
  4062b2:	f108 0808 	add.w	r8, r8, #8
  4062b6:	d1ef      	bne.n	406298 <_dtoa_r+0x7b0>
  4062b8:	463b      	mov	r3, r7
  4062ba:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4062be:	4632      	mov	r2, r6
  4062c0:	f001 ff12 	bl	4080e8 <__aeabi_ddiv>
  4062c4:	4607      	mov	r7, r0
  4062c6:	4688      	mov	r8, r1
  4062c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4062ca:	b143      	cbz	r3, 4062de <_dtoa_r+0x7f6>
  4062cc:	2200      	movs	r2, #0
  4062ce:	4ba0      	ldr	r3, [pc, #640]	; (406550 <_dtoa_r+0xa68>)
  4062d0:	4638      	mov	r0, r7
  4062d2:	4641      	mov	r1, r8
  4062d4:	f002 f850 	bl	408378 <__aeabi_dcmplt>
  4062d8:	2800      	cmp	r0, #0
  4062da:	f040 8287 	bne.w	4067ec <_dtoa_r+0xd04>
  4062de:	4650      	mov	r0, sl
  4062e0:	f7fd fe50 	bl	403f84 <__aeabi_i2d>
  4062e4:	463a      	mov	r2, r7
  4062e6:	4643      	mov	r3, r8
  4062e8:	f001 fdd4 	bl	407e94 <__aeabi_dmul>
  4062ec:	4b99      	ldr	r3, [pc, #612]	; (406554 <_dtoa_r+0xa6c>)
  4062ee:	2200      	movs	r2, #0
  4062f0:	f7fd fcfc 	bl	403cec <__adddf3>
  4062f4:	9b07      	ldr	r3, [sp, #28]
  4062f6:	4605      	mov	r5, r0
  4062f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4062fc:	2b00      	cmp	r3, #0
  4062fe:	f000 813f 	beq.w	406580 <_dtoa_r+0xa98>
  406302:	9b02      	ldr	r3, [sp, #8]
  406304:	9315      	str	r3, [sp, #84]	; 0x54
  406306:	9b07      	ldr	r3, [sp, #28]
  406308:	9312      	str	r3, [sp, #72]	; 0x48
  40630a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40630c:	2b00      	cmp	r3, #0
  40630e:	f000 81fb 	beq.w	406708 <_dtoa_r+0xc20>
  406312:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406314:	4b8c      	ldr	r3, [pc, #560]	; (406548 <_dtoa_r+0xa60>)
  406316:	2000      	movs	r0, #0
  406318:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40631c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  406320:	498d      	ldr	r1, [pc, #564]	; (406558 <_dtoa_r+0xa70>)
  406322:	f001 fee1 	bl	4080e8 <__aeabi_ddiv>
  406326:	462a      	mov	r2, r5
  406328:	4633      	mov	r3, r6
  40632a:	f7fd fcdd 	bl	403ce8 <__aeabi_dsub>
  40632e:	4682      	mov	sl, r0
  406330:	468b      	mov	fp, r1
  406332:	4638      	mov	r0, r7
  406334:	4641      	mov	r1, r8
  406336:	f002 f85d 	bl	4083f4 <__aeabi_d2iz>
  40633a:	4605      	mov	r5, r0
  40633c:	f7fd fe22 	bl	403f84 <__aeabi_i2d>
  406340:	4602      	mov	r2, r0
  406342:	460b      	mov	r3, r1
  406344:	4638      	mov	r0, r7
  406346:	4641      	mov	r1, r8
  406348:	f7fd fcce 	bl	403ce8 <__aeabi_dsub>
  40634c:	3530      	adds	r5, #48	; 0x30
  40634e:	fa5f f885 	uxtb.w	r8, r5
  406352:	9d04      	ldr	r5, [sp, #16]
  406354:	4606      	mov	r6, r0
  406356:	460f      	mov	r7, r1
  406358:	f885 8000 	strb.w	r8, [r5]
  40635c:	4602      	mov	r2, r0
  40635e:	460b      	mov	r3, r1
  406360:	4650      	mov	r0, sl
  406362:	4659      	mov	r1, fp
  406364:	3501      	adds	r5, #1
  406366:	f002 f825 	bl	4083b4 <__aeabi_dcmpgt>
  40636a:	2800      	cmp	r0, #0
  40636c:	d154      	bne.n	406418 <_dtoa_r+0x930>
  40636e:	4632      	mov	r2, r6
  406370:	463b      	mov	r3, r7
  406372:	2000      	movs	r0, #0
  406374:	4976      	ldr	r1, [pc, #472]	; (406550 <_dtoa_r+0xa68>)
  406376:	f7fd fcb7 	bl	403ce8 <__aeabi_dsub>
  40637a:	4602      	mov	r2, r0
  40637c:	460b      	mov	r3, r1
  40637e:	4650      	mov	r0, sl
  406380:	4659      	mov	r1, fp
  406382:	f002 f817 	bl	4083b4 <__aeabi_dcmpgt>
  406386:	2800      	cmp	r0, #0
  406388:	f040 8270 	bne.w	40686c <_dtoa_r+0xd84>
  40638c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40638e:	2a01      	cmp	r2, #1
  406390:	f000 8112 	beq.w	4065b8 <_dtoa_r+0xad0>
  406394:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406396:	9a04      	ldr	r2, [sp, #16]
  406398:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40639c:	4413      	add	r3, r2
  40639e:	4699      	mov	r9, r3
  4063a0:	e00f      	b.n	4063c2 <_dtoa_r+0x8da>
  4063a2:	4632      	mov	r2, r6
  4063a4:	463b      	mov	r3, r7
  4063a6:	2000      	movs	r0, #0
  4063a8:	4969      	ldr	r1, [pc, #420]	; (406550 <_dtoa_r+0xa68>)
  4063aa:	f7fd fc9d 	bl	403ce8 <__aeabi_dsub>
  4063ae:	4652      	mov	r2, sl
  4063b0:	465b      	mov	r3, fp
  4063b2:	f001 ffe1 	bl	408378 <__aeabi_dcmplt>
  4063b6:	2800      	cmp	r0, #0
  4063b8:	f040 8256 	bne.w	406868 <_dtoa_r+0xd80>
  4063bc:	454d      	cmp	r5, r9
  4063be:	f000 80f9 	beq.w	4065b4 <_dtoa_r+0xacc>
  4063c2:	4650      	mov	r0, sl
  4063c4:	4659      	mov	r1, fp
  4063c6:	2200      	movs	r2, #0
  4063c8:	4b64      	ldr	r3, [pc, #400]	; (40655c <_dtoa_r+0xa74>)
  4063ca:	f001 fd63 	bl	407e94 <__aeabi_dmul>
  4063ce:	2200      	movs	r2, #0
  4063d0:	4b62      	ldr	r3, [pc, #392]	; (40655c <_dtoa_r+0xa74>)
  4063d2:	4682      	mov	sl, r0
  4063d4:	468b      	mov	fp, r1
  4063d6:	4630      	mov	r0, r6
  4063d8:	4639      	mov	r1, r7
  4063da:	f001 fd5b 	bl	407e94 <__aeabi_dmul>
  4063de:	460f      	mov	r7, r1
  4063e0:	4606      	mov	r6, r0
  4063e2:	f002 f807 	bl	4083f4 <__aeabi_d2iz>
  4063e6:	4680      	mov	r8, r0
  4063e8:	f7fd fdcc 	bl	403f84 <__aeabi_i2d>
  4063ec:	4602      	mov	r2, r0
  4063ee:	460b      	mov	r3, r1
  4063f0:	4630      	mov	r0, r6
  4063f2:	4639      	mov	r1, r7
  4063f4:	f7fd fc78 	bl	403ce8 <__aeabi_dsub>
  4063f8:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4063fc:	fa5f f888 	uxtb.w	r8, r8
  406400:	f805 8b01 	strb.w	r8, [r5], #1
  406404:	4652      	mov	r2, sl
  406406:	465b      	mov	r3, fp
  406408:	4606      	mov	r6, r0
  40640a:	460f      	mov	r7, r1
  40640c:	f001 ffb4 	bl	408378 <__aeabi_dcmplt>
  406410:	2800      	cmp	r0, #0
  406412:	d0c6      	beq.n	4063a2 <_dtoa_r+0x8ba>
  406414:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406418:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40641a:	9302      	str	r3, [sp, #8]
  40641c:	e523      	b.n	405e66 <_dtoa_r+0x37e>
  40641e:	2300      	movs	r3, #0
  406420:	930b      	str	r3, [sp, #44]	; 0x2c
  406422:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406424:	2b00      	cmp	r3, #0
  406426:	f340 80dd 	ble.w	4065e4 <_dtoa_r+0xafc>
  40642a:	461f      	mov	r7, r3
  40642c:	461e      	mov	r6, r3
  40642e:	930f      	str	r3, [sp, #60]	; 0x3c
  406430:	9307      	str	r3, [sp, #28]
  406432:	e6f6      	b.n	406222 <_dtoa_r+0x73a>
  406434:	2301      	movs	r3, #1
  406436:	930b      	str	r3, [sp, #44]	; 0x2c
  406438:	e7f3      	b.n	406422 <_dtoa_r+0x93a>
  40643a:	f1ba 0f00 	cmp.w	sl, #0
  40643e:	f47f ada7 	bne.w	405f90 <_dtoa_r+0x4a8>
  406442:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406446:	2b00      	cmp	r3, #0
  406448:	f47f adbc 	bne.w	405fc4 <_dtoa_r+0x4dc>
  40644c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406450:	0d3f      	lsrs	r7, r7, #20
  406452:	053f      	lsls	r7, r7, #20
  406454:	2f00      	cmp	r7, #0
  406456:	f000 820d 	beq.w	406874 <_dtoa_r+0xd8c>
  40645a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40645c:	3301      	adds	r3, #1
  40645e:	930a      	str	r3, [sp, #40]	; 0x28
  406460:	9b08      	ldr	r3, [sp, #32]
  406462:	3301      	adds	r3, #1
  406464:	9308      	str	r3, [sp, #32]
  406466:	2301      	movs	r3, #1
  406468:	930c      	str	r3, [sp, #48]	; 0x30
  40646a:	e5ad      	b.n	405fc8 <_dtoa_r+0x4e0>
  40646c:	9b07      	ldr	r3, [sp, #28]
  40646e:	2b00      	cmp	r3, #0
  406470:	f73f ac48 	bgt.w	405d04 <_dtoa_r+0x21c>
  406474:	f040 8222 	bne.w	4068bc <_dtoa_r+0xdd4>
  406478:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40647c:	2200      	movs	r2, #0
  40647e:	4b38      	ldr	r3, [pc, #224]	; (406560 <_dtoa_r+0xa78>)
  406480:	f001 fd08 	bl	407e94 <__aeabi_dmul>
  406484:	4652      	mov	r2, sl
  406486:	465b      	mov	r3, fp
  406488:	f001 ff8a 	bl	4083a0 <__aeabi_dcmpge>
  40648c:	f8dd 801c 	ldr.w	r8, [sp, #28]
  406490:	4646      	mov	r6, r8
  406492:	2800      	cmp	r0, #0
  406494:	d041      	beq.n	40651a <_dtoa_r+0xa32>
  406496:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406498:	9d04      	ldr	r5, [sp, #16]
  40649a:	43db      	mvns	r3, r3
  40649c:	9302      	str	r3, [sp, #8]
  40649e:	4641      	mov	r1, r8
  4064a0:	4620      	mov	r0, r4
  4064a2:	f000 ff3d 	bl	407320 <_Bfree>
  4064a6:	2e00      	cmp	r6, #0
  4064a8:	f43f acdd 	beq.w	405e66 <_dtoa_r+0x37e>
  4064ac:	e6a7      	b.n	4061fe <_dtoa_r+0x716>
  4064ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4064b0:	4649      	mov	r1, r9
  4064b2:	4620      	mov	r0, r4
  4064b4:	f001 f86c 	bl	407590 <__pow5mult>
  4064b8:	4681      	mov	r9, r0
  4064ba:	e557      	b.n	405f6c <_dtoa_r+0x484>
  4064bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4064be:	2a00      	cmp	r2, #0
  4064c0:	f000 8188 	beq.w	4067d4 <_dtoa_r+0xcec>
  4064c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4064c8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4064ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4064cc:	e4f2      	b.n	405eb4 <_dtoa_r+0x3cc>
  4064ce:	f1ba 0f00 	cmp.w	sl, #0
  4064d2:	f47f ad77 	bne.w	405fc4 <_dtoa_r+0x4dc>
  4064d6:	e7b4      	b.n	406442 <_dtoa_r+0x95a>
  4064d8:	f000 ff2c 	bl	407334 <__multadd>
  4064dc:	4647      	mov	r7, r8
  4064de:	4606      	mov	r6, r0
  4064e0:	4683      	mov	fp, r0
  4064e2:	e5c0      	b.n	406066 <_dtoa_r+0x57e>
  4064e4:	4601      	mov	r1, r0
  4064e6:	4620      	mov	r0, r4
  4064e8:	9308      	str	r3, [sp, #32]
  4064ea:	f000 ff19 	bl	407320 <_Bfree>
  4064ee:	2201      	movs	r2, #1
  4064f0:	9b08      	ldr	r3, [sp, #32]
  4064f2:	e5e2      	b.n	4060ba <_dtoa_r+0x5d2>
  4064f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4064f6:	2b02      	cmp	r3, #2
  4064f8:	f77f ad98 	ble.w	40602c <_dtoa_r+0x544>
  4064fc:	9b07      	ldr	r3, [sp, #28]
  4064fe:	2b00      	cmp	r3, #0
  406500:	d1c9      	bne.n	406496 <_dtoa_r+0x9ae>
  406502:	4641      	mov	r1, r8
  406504:	2205      	movs	r2, #5
  406506:	4620      	mov	r0, r4
  406508:	f000 ff14 	bl	407334 <__multadd>
  40650c:	4601      	mov	r1, r0
  40650e:	4680      	mov	r8, r0
  406510:	4648      	mov	r0, r9
  406512:	f001 f8dd 	bl	4076d0 <__mcmp>
  406516:	2800      	cmp	r0, #0
  406518:	ddbd      	ble.n	406496 <_dtoa_r+0x9ae>
  40651a:	2331      	movs	r3, #49	; 0x31
  40651c:	9a02      	ldr	r2, [sp, #8]
  40651e:	9904      	ldr	r1, [sp, #16]
  406520:	3201      	adds	r2, #1
  406522:	9202      	str	r2, [sp, #8]
  406524:	700b      	strb	r3, [r1, #0]
  406526:	1c4d      	adds	r5, r1, #1
  406528:	e7b9      	b.n	40649e <_dtoa_r+0x9b6>
  40652a:	2331      	movs	r3, #49	; 0x31
  40652c:	9a02      	ldr	r2, [sp, #8]
  40652e:	3201      	adds	r2, #1
  406530:	9202      	str	r2, [sp, #8]
  406532:	9a04      	ldr	r2, [sp, #16]
  406534:	7013      	strb	r3, [r2, #0]
  406536:	e652      	b.n	4061de <_dtoa_r+0x6f6>
  406538:	2301      	movs	r3, #1
  40653a:	930b      	str	r3, [sp, #44]	; 0x2c
  40653c:	e666      	b.n	40620c <_dtoa_r+0x724>
  40653e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  406542:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  406544:	e48f      	b.n	405e66 <_dtoa_r+0x37e>
  406546:	bf00      	nop
  406548:	00408a90 	.word	0x00408a90
  40654c:	00408a68 	.word	0x00408a68
  406550:	3ff00000 	.word	0x3ff00000
  406554:	401c0000 	.word	0x401c0000
  406558:	3fe00000 	.word	0x3fe00000
  40655c:	40240000 	.word	0x40240000
  406560:	40140000 	.word	0x40140000
  406564:	4650      	mov	r0, sl
  406566:	f7fd fd0d 	bl	403f84 <__aeabi_i2d>
  40656a:	463a      	mov	r2, r7
  40656c:	4643      	mov	r3, r8
  40656e:	f001 fc91 	bl	407e94 <__aeabi_dmul>
  406572:	2200      	movs	r2, #0
  406574:	4bc1      	ldr	r3, [pc, #772]	; (40687c <_dtoa_r+0xd94>)
  406576:	f7fd fbb9 	bl	403cec <__adddf3>
  40657a:	4605      	mov	r5, r0
  40657c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406580:	4641      	mov	r1, r8
  406582:	2200      	movs	r2, #0
  406584:	4bbe      	ldr	r3, [pc, #760]	; (406880 <_dtoa_r+0xd98>)
  406586:	4638      	mov	r0, r7
  406588:	f7fd fbae 	bl	403ce8 <__aeabi_dsub>
  40658c:	462a      	mov	r2, r5
  40658e:	4633      	mov	r3, r6
  406590:	4682      	mov	sl, r0
  406592:	468b      	mov	fp, r1
  406594:	f001 ff0e 	bl	4083b4 <__aeabi_dcmpgt>
  406598:	4680      	mov	r8, r0
  40659a:	2800      	cmp	r0, #0
  40659c:	f040 8110 	bne.w	4067c0 <_dtoa_r+0xcd8>
  4065a0:	462a      	mov	r2, r5
  4065a2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4065a6:	4650      	mov	r0, sl
  4065a8:	4659      	mov	r1, fp
  4065aa:	f001 fee5 	bl	408378 <__aeabi_dcmplt>
  4065ae:	b118      	cbz	r0, 4065b8 <_dtoa_r+0xad0>
  4065b0:	4646      	mov	r6, r8
  4065b2:	e770      	b.n	406496 <_dtoa_r+0x9ae>
  4065b4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4065b8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4065bc:	f7ff bb8f 	b.w	405cde <_dtoa_r+0x1f6>
  4065c0:	9804      	ldr	r0, [sp, #16]
  4065c2:	f7ff bac0 	b.w	405b46 <_dtoa_r+0x5e>
  4065c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4065c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4065ca:	1afb      	subs	r3, r7, r3
  4065cc:	441a      	add	r2, r3
  4065ce:	970c      	str	r7, [sp, #48]	; 0x30
  4065d0:	920d      	str	r2, [sp, #52]	; 0x34
  4065d2:	2700      	movs	r7, #0
  4065d4:	e468      	b.n	405ea8 <_dtoa_r+0x3c0>
  4065d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4065da:	f04f 0a02 	mov.w	sl, #2
  4065de:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4065e2:	e656      	b.n	406292 <_dtoa_r+0x7aa>
  4065e4:	2100      	movs	r1, #0
  4065e6:	2301      	movs	r3, #1
  4065e8:	4620      	mov	r0, r4
  4065ea:	6461      	str	r1, [r4, #68]	; 0x44
  4065ec:	9325      	str	r3, [sp, #148]	; 0x94
  4065ee:	f000 fe71 	bl	4072d4 <_Balloc>
  4065f2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4065f4:	9004      	str	r0, [sp, #16]
  4065f6:	9307      	str	r3, [sp, #28]
  4065f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4065fa:	6420      	str	r0, [r4, #64]	; 0x40
  4065fc:	930f      	str	r3, [sp, #60]	; 0x3c
  4065fe:	e627      	b.n	406250 <_dtoa_r+0x768>
  406600:	2a00      	cmp	r2, #0
  406602:	46d0      	mov	r8, sl
  406604:	f8cd b020 	str.w	fp, [sp, #32]
  406608:	469a      	mov	sl, r3
  40660a:	dd11      	ble.n	406630 <_dtoa_r+0xb48>
  40660c:	4649      	mov	r1, r9
  40660e:	2201      	movs	r2, #1
  406610:	4620      	mov	r0, r4
  406612:	f001 f80d 	bl	407630 <__lshift>
  406616:	4641      	mov	r1, r8
  406618:	4681      	mov	r9, r0
  40661a:	f001 f859 	bl	4076d0 <__mcmp>
  40661e:	2800      	cmp	r0, #0
  406620:	f340 8145 	ble.w	4068ae <_dtoa_r+0xdc6>
  406624:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  406628:	f000 8105 	beq.w	406836 <_dtoa_r+0xd4e>
  40662c:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406630:	46b3      	mov	fp, r6
  406632:	f887 a000 	strb.w	sl, [r7]
  406636:	1c7d      	adds	r5, r7, #1
  406638:	9e08      	ldr	r6, [sp, #32]
  40663a:	e5d0      	b.n	4061de <_dtoa_r+0x6f6>
  40663c:	d104      	bne.n	406648 <_dtoa_r+0xb60>
  40663e:	f01a 0f01 	tst.w	sl, #1
  406642:	d001      	beq.n	406648 <_dtoa_r+0xb60>
  406644:	e5bb      	b.n	4061be <_dtoa_r+0x6d6>
  406646:	4615      	mov	r5, r2
  406648:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40664c:	1e6a      	subs	r2, r5, #1
  40664e:	2b30      	cmp	r3, #48	; 0x30
  406650:	d0f9      	beq.n	406646 <_dtoa_r+0xb5e>
  406652:	e5c4      	b.n	4061de <_dtoa_r+0x6f6>
  406654:	2230      	movs	r2, #48	; 0x30
  406656:	9904      	ldr	r1, [sp, #16]
  406658:	700a      	strb	r2, [r1, #0]
  40665a:	9a02      	ldr	r2, [sp, #8]
  40665c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406660:	3201      	adds	r2, #1
  406662:	9202      	str	r2, [sp, #8]
  406664:	f7ff bbfb 	b.w	405e5e <_dtoa_r+0x376>
  406668:	f000 80bb 	beq.w	4067e2 <_dtoa_r+0xcfa>
  40666c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  406670:	9b02      	ldr	r3, [sp, #8]
  406672:	f04f 0a02 	mov.w	sl, #2
  406676:	425d      	negs	r5, r3
  406678:	4b82      	ldr	r3, [pc, #520]	; (406884 <_dtoa_r+0xd9c>)
  40667a:	f005 020f 	and.w	r2, r5, #15
  40667e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406682:	e9d3 2300 	ldrd	r2, r3, [r3]
  406686:	f001 fc05 	bl	407e94 <__aeabi_dmul>
  40668a:	112d      	asrs	r5, r5, #4
  40668c:	4607      	mov	r7, r0
  40668e:	4688      	mov	r8, r1
  406690:	f43f ae1a 	beq.w	4062c8 <_dtoa_r+0x7e0>
  406694:	4e7c      	ldr	r6, [pc, #496]	; (406888 <_dtoa_r+0xda0>)
  406696:	07eb      	lsls	r3, r5, #31
  406698:	d509      	bpl.n	4066ae <_dtoa_r+0xbc6>
  40669a:	e9d6 2300 	ldrd	r2, r3, [r6]
  40669e:	4638      	mov	r0, r7
  4066a0:	4641      	mov	r1, r8
  4066a2:	f001 fbf7 	bl	407e94 <__aeabi_dmul>
  4066a6:	4607      	mov	r7, r0
  4066a8:	4688      	mov	r8, r1
  4066aa:	f10a 0a01 	add.w	sl, sl, #1
  4066ae:	106d      	asrs	r5, r5, #1
  4066b0:	f106 0608 	add.w	r6, r6, #8
  4066b4:	d1ef      	bne.n	406696 <_dtoa_r+0xbae>
  4066b6:	e607      	b.n	4062c8 <_dtoa_r+0x7e0>
  4066b8:	6871      	ldr	r1, [r6, #4]
  4066ba:	4620      	mov	r0, r4
  4066bc:	f000 fe0a 	bl	4072d4 <_Balloc>
  4066c0:	4605      	mov	r5, r0
  4066c2:	6933      	ldr	r3, [r6, #16]
  4066c4:	f106 010c 	add.w	r1, r6, #12
  4066c8:	3302      	adds	r3, #2
  4066ca:	009a      	lsls	r2, r3, #2
  4066cc:	300c      	adds	r0, #12
  4066ce:	f7fd fceb 	bl	4040a8 <memcpy>
  4066d2:	4629      	mov	r1, r5
  4066d4:	2201      	movs	r2, #1
  4066d6:	4620      	mov	r0, r4
  4066d8:	f000 ffaa 	bl	407630 <__lshift>
  4066dc:	9008      	str	r0, [sp, #32]
  4066de:	e4b6      	b.n	40604e <_dtoa_r+0x566>
  4066e0:	2b39      	cmp	r3, #57	; 0x39
  4066e2:	f8cd b020 	str.w	fp, [sp, #32]
  4066e6:	46d0      	mov	r8, sl
  4066e8:	f000 80a5 	beq.w	406836 <_dtoa_r+0xd4e>
  4066ec:	f103 0a01 	add.w	sl, r3, #1
  4066f0:	46b3      	mov	fp, r6
  4066f2:	f887 a000 	strb.w	sl, [r7]
  4066f6:	1c7d      	adds	r5, r7, #1
  4066f8:	9e08      	ldr	r6, [sp, #32]
  4066fa:	e570      	b.n	4061de <_dtoa_r+0x6f6>
  4066fc:	465a      	mov	r2, fp
  4066fe:	46d0      	mov	r8, sl
  406700:	46b3      	mov	fp, r6
  406702:	469a      	mov	sl, r3
  406704:	4616      	mov	r6, r2
  406706:	e54e      	b.n	4061a6 <_dtoa_r+0x6be>
  406708:	9812      	ldr	r0, [sp, #72]	; 0x48
  40670a:	495e      	ldr	r1, [pc, #376]	; (406884 <_dtoa_r+0xd9c>)
  40670c:	462a      	mov	r2, r5
  40670e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  406712:	4633      	mov	r3, r6
  406714:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406718:	f001 fbbc 	bl	407e94 <__aeabi_dmul>
  40671c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406720:	4638      	mov	r0, r7
  406722:	4641      	mov	r1, r8
  406724:	f001 fe66 	bl	4083f4 <__aeabi_d2iz>
  406728:	4605      	mov	r5, r0
  40672a:	f7fd fc2b 	bl	403f84 <__aeabi_i2d>
  40672e:	4602      	mov	r2, r0
  406730:	460b      	mov	r3, r1
  406732:	4638      	mov	r0, r7
  406734:	4641      	mov	r1, r8
  406736:	f7fd fad7 	bl	403ce8 <__aeabi_dsub>
  40673a:	4606      	mov	r6, r0
  40673c:	9812      	ldr	r0, [sp, #72]	; 0x48
  40673e:	9a04      	ldr	r2, [sp, #16]
  406740:	3530      	adds	r5, #48	; 0x30
  406742:	2801      	cmp	r0, #1
  406744:	7015      	strb	r5, [r2, #0]
  406746:	460f      	mov	r7, r1
  406748:	f102 0501 	add.w	r5, r2, #1
  40674c:	d026      	beq.n	40679c <_dtoa_r+0xcb4>
  40674e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406750:	9a04      	ldr	r2, [sp, #16]
  406752:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406756:	4413      	add	r3, r2
  406758:	f04f 0a00 	mov.w	sl, #0
  40675c:	4699      	mov	r9, r3
  40675e:	f8df b130 	ldr.w	fp, [pc, #304]	; 406890 <_dtoa_r+0xda8>
  406762:	4652      	mov	r2, sl
  406764:	465b      	mov	r3, fp
  406766:	4630      	mov	r0, r6
  406768:	4639      	mov	r1, r7
  40676a:	f001 fb93 	bl	407e94 <__aeabi_dmul>
  40676e:	460f      	mov	r7, r1
  406770:	4606      	mov	r6, r0
  406772:	f001 fe3f 	bl	4083f4 <__aeabi_d2iz>
  406776:	4680      	mov	r8, r0
  406778:	f7fd fc04 	bl	403f84 <__aeabi_i2d>
  40677c:	4602      	mov	r2, r0
  40677e:	460b      	mov	r3, r1
  406780:	4630      	mov	r0, r6
  406782:	4639      	mov	r1, r7
  406784:	f7fd fab0 	bl	403ce8 <__aeabi_dsub>
  406788:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40678c:	f805 8b01 	strb.w	r8, [r5], #1
  406790:	454d      	cmp	r5, r9
  406792:	4606      	mov	r6, r0
  406794:	460f      	mov	r7, r1
  406796:	d1e4      	bne.n	406762 <_dtoa_r+0xc7a>
  406798:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40679c:	2200      	movs	r2, #0
  40679e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4067a2:	4b3a      	ldr	r3, [pc, #232]	; (40688c <_dtoa_r+0xda4>)
  4067a4:	f7fd faa2 	bl	403cec <__adddf3>
  4067a8:	4632      	mov	r2, r6
  4067aa:	463b      	mov	r3, r7
  4067ac:	f001 fde4 	bl	408378 <__aeabi_dcmplt>
  4067b0:	2800      	cmp	r0, #0
  4067b2:	d046      	beq.n	406842 <_dtoa_r+0xd5a>
  4067b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4067b6:	9302      	str	r3, [sp, #8]
  4067b8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4067bc:	f7ff bb42 	b.w	405e44 <_dtoa_r+0x35c>
  4067c0:	f04f 0800 	mov.w	r8, #0
  4067c4:	4646      	mov	r6, r8
  4067c6:	e6a8      	b.n	40651a <_dtoa_r+0xa32>
  4067c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4067ca:	9a07      	ldr	r2, [sp, #28]
  4067cc:	1a9d      	subs	r5, r3, r2
  4067ce:	2300      	movs	r3, #0
  4067d0:	f7ff bb70 	b.w	405eb4 <_dtoa_r+0x3cc>
  4067d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4067d6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4067d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4067dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4067de:	f7ff bb69 	b.w	405eb4 <_dtoa_r+0x3cc>
  4067e2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4067e6:	f04f 0a02 	mov.w	sl, #2
  4067ea:	e56d      	b.n	4062c8 <_dtoa_r+0x7e0>
  4067ec:	9b07      	ldr	r3, [sp, #28]
  4067ee:	2b00      	cmp	r3, #0
  4067f0:	f43f aeb8 	beq.w	406564 <_dtoa_r+0xa7c>
  4067f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4067f6:	2b00      	cmp	r3, #0
  4067f8:	f77f aede 	ble.w	4065b8 <_dtoa_r+0xad0>
  4067fc:	2200      	movs	r2, #0
  4067fe:	4b24      	ldr	r3, [pc, #144]	; (406890 <_dtoa_r+0xda8>)
  406800:	4638      	mov	r0, r7
  406802:	4641      	mov	r1, r8
  406804:	f001 fb46 	bl	407e94 <__aeabi_dmul>
  406808:	4607      	mov	r7, r0
  40680a:	4688      	mov	r8, r1
  40680c:	f10a 0001 	add.w	r0, sl, #1
  406810:	f7fd fbb8 	bl	403f84 <__aeabi_i2d>
  406814:	463a      	mov	r2, r7
  406816:	4643      	mov	r3, r8
  406818:	f001 fb3c 	bl	407e94 <__aeabi_dmul>
  40681c:	2200      	movs	r2, #0
  40681e:	4b17      	ldr	r3, [pc, #92]	; (40687c <_dtoa_r+0xd94>)
  406820:	f7fd fa64 	bl	403cec <__adddf3>
  406824:	9a02      	ldr	r2, [sp, #8]
  406826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406828:	3a01      	subs	r2, #1
  40682a:	4605      	mov	r5, r0
  40682c:	9215      	str	r2, [sp, #84]	; 0x54
  40682e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406832:	9312      	str	r3, [sp, #72]	; 0x48
  406834:	e569      	b.n	40630a <_dtoa_r+0x822>
  406836:	2239      	movs	r2, #57	; 0x39
  406838:	46b3      	mov	fp, r6
  40683a:	703a      	strb	r2, [r7, #0]
  40683c:	9e08      	ldr	r6, [sp, #32]
  40683e:	1c7d      	adds	r5, r7, #1
  406840:	e4bf      	b.n	4061c2 <_dtoa_r+0x6da>
  406842:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  406846:	2000      	movs	r0, #0
  406848:	4910      	ldr	r1, [pc, #64]	; (40688c <_dtoa_r+0xda4>)
  40684a:	f7fd fa4d 	bl	403ce8 <__aeabi_dsub>
  40684e:	4632      	mov	r2, r6
  406850:	463b      	mov	r3, r7
  406852:	f001 fdaf 	bl	4083b4 <__aeabi_dcmpgt>
  406856:	b908      	cbnz	r0, 40685c <_dtoa_r+0xd74>
  406858:	e6ae      	b.n	4065b8 <_dtoa_r+0xad0>
  40685a:	4615      	mov	r5, r2
  40685c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406860:	1e6a      	subs	r2, r5, #1
  406862:	2b30      	cmp	r3, #48	; 0x30
  406864:	d0f9      	beq.n	40685a <_dtoa_r+0xd72>
  406866:	e5d7      	b.n	406418 <_dtoa_r+0x930>
  406868:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40686c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40686e:	9302      	str	r3, [sp, #8]
  406870:	f7ff bae8 	b.w	405e44 <_dtoa_r+0x35c>
  406874:	970c      	str	r7, [sp, #48]	; 0x30
  406876:	f7ff bba7 	b.w	405fc8 <_dtoa_r+0x4e0>
  40687a:	bf00      	nop
  40687c:	401c0000 	.word	0x401c0000
  406880:	40140000 	.word	0x40140000
  406884:	00408a90 	.word	0x00408a90
  406888:	00408a68 	.word	0x00408a68
  40688c:	3fe00000 	.word	0x3fe00000
  406890:	40240000 	.word	0x40240000
  406894:	2b39      	cmp	r3, #57	; 0x39
  406896:	f8cd b020 	str.w	fp, [sp, #32]
  40689a:	46d0      	mov	r8, sl
  40689c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4068a0:	469a      	mov	sl, r3
  4068a2:	d0c8      	beq.n	406836 <_dtoa_r+0xd4e>
  4068a4:	f1bb 0f00 	cmp.w	fp, #0
  4068a8:	f73f aec0 	bgt.w	40662c <_dtoa_r+0xb44>
  4068ac:	e6c0      	b.n	406630 <_dtoa_r+0xb48>
  4068ae:	f47f aebf 	bne.w	406630 <_dtoa_r+0xb48>
  4068b2:	f01a 0f01 	tst.w	sl, #1
  4068b6:	f43f aebb 	beq.w	406630 <_dtoa_r+0xb48>
  4068ba:	e6b3      	b.n	406624 <_dtoa_r+0xb3c>
  4068bc:	f04f 0800 	mov.w	r8, #0
  4068c0:	4646      	mov	r6, r8
  4068c2:	e5e8      	b.n	406496 <_dtoa_r+0x9ae>
  4068c4:	4631      	mov	r1, r6
  4068c6:	2300      	movs	r3, #0
  4068c8:	220a      	movs	r2, #10
  4068ca:	4620      	mov	r0, r4
  4068cc:	f000 fd32 	bl	407334 <__multadd>
  4068d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4068d2:	4606      	mov	r6, r0
  4068d4:	2b00      	cmp	r3, #0
  4068d6:	dd07      	ble.n	4068e8 <_dtoa_r+0xe00>
  4068d8:	9307      	str	r3, [sp, #28]
  4068da:	f7ff bbab 	b.w	406034 <_dtoa_r+0x54c>
  4068de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4068e0:	2b02      	cmp	r3, #2
  4068e2:	dc1f      	bgt.n	406924 <_dtoa_r+0xe3c>
  4068e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4068e6:	e43c      	b.n	406162 <_dtoa_r+0x67a>
  4068e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4068ea:	2b02      	cmp	r3, #2
  4068ec:	dc1a      	bgt.n	406924 <_dtoa_r+0xe3c>
  4068ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4068f0:	e7f2      	b.n	4068d8 <_dtoa_r+0xdf0>
  4068f2:	f43f ab81 	beq.w	405ff8 <_dtoa_r+0x510>
  4068f6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4068fa:	e411      	b.n	406120 <_dtoa_r+0x638>
  4068fc:	2500      	movs	r5, #0
  4068fe:	4620      	mov	r0, r4
  406900:	6465      	str	r5, [r4, #68]	; 0x44
  406902:	4629      	mov	r1, r5
  406904:	f000 fce6 	bl	4072d4 <_Balloc>
  406908:	f04f 33ff 	mov.w	r3, #4294967295
  40690c:	9307      	str	r3, [sp, #28]
  40690e:	930f      	str	r3, [sp, #60]	; 0x3c
  406910:	2301      	movs	r3, #1
  406912:	9004      	str	r0, [sp, #16]
  406914:	9525      	str	r5, [sp, #148]	; 0x94
  406916:	6420      	str	r0, [r4, #64]	; 0x40
  406918:	930b      	str	r3, [sp, #44]	; 0x2c
  40691a:	f7ff b9e0 	b.w	405cde <_dtoa_r+0x1f6>
  40691e:	2501      	movs	r5, #1
  406920:	f7ff b9a8 	b.w	405c74 <_dtoa_r+0x18c>
  406924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406926:	9307      	str	r3, [sp, #28]
  406928:	e5e8      	b.n	4064fc <_dtoa_r+0xa14>
  40692a:	bf00      	nop

0040692c <__libc_fini_array>:
  40692c:	b538      	push	{r3, r4, r5, lr}
  40692e:	4c0a      	ldr	r4, [pc, #40]	; (406958 <__libc_fini_array+0x2c>)
  406930:	4d0a      	ldr	r5, [pc, #40]	; (40695c <__libc_fini_array+0x30>)
  406932:	1b64      	subs	r4, r4, r5
  406934:	10a4      	asrs	r4, r4, #2
  406936:	d00a      	beq.n	40694e <__libc_fini_array+0x22>
  406938:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40693c:	3b01      	subs	r3, #1
  40693e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406942:	3c01      	subs	r4, #1
  406944:	f855 3904 	ldr.w	r3, [r5], #-4
  406948:	4798      	blx	r3
  40694a:	2c00      	cmp	r4, #0
  40694c:	d1f9      	bne.n	406942 <__libc_fini_array+0x16>
  40694e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406952:	f002 b993 	b.w	408c7c <_fini>
  406956:	bf00      	nop
  406958:	00408c8c 	.word	0x00408c8c
  40695c:	00408c88 	.word	0x00408c88

00406960 <_malloc_trim_r>:
  406960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406962:	460c      	mov	r4, r1
  406964:	4f23      	ldr	r7, [pc, #140]	; (4069f4 <_malloc_trim_r+0x94>)
  406966:	4606      	mov	r6, r0
  406968:	f000 fca8 	bl	4072bc <__malloc_lock>
  40696c:	68bb      	ldr	r3, [r7, #8]
  40696e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406972:	685d      	ldr	r5, [r3, #4]
  406974:	310f      	adds	r1, #15
  406976:	f025 0503 	bic.w	r5, r5, #3
  40697a:	4429      	add	r1, r5
  40697c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406980:	f021 010f 	bic.w	r1, r1, #15
  406984:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406988:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40698c:	db07      	blt.n	40699e <_malloc_trim_r+0x3e>
  40698e:	2100      	movs	r1, #0
  406990:	4630      	mov	r0, r6
  406992:	f001 f951 	bl	407c38 <_sbrk_r>
  406996:	68bb      	ldr	r3, [r7, #8]
  406998:	442b      	add	r3, r5
  40699a:	4298      	cmp	r0, r3
  40699c:	d004      	beq.n	4069a8 <_malloc_trim_r+0x48>
  40699e:	4630      	mov	r0, r6
  4069a0:	f000 fc92 	bl	4072c8 <__malloc_unlock>
  4069a4:	2000      	movs	r0, #0
  4069a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4069a8:	4261      	negs	r1, r4
  4069aa:	4630      	mov	r0, r6
  4069ac:	f001 f944 	bl	407c38 <_sbrk_r>
  4069b0:	3001      	adds	r0, #1
  4069b2:	d00d      	beq.n	4069d0 <_malloc_trim_r+0x70>
  4069b4:	4b10      	ldr	r3, [pc, #64]	; (4069f8 <_malloc_trim_r+0x98>)
  4069b6:	68ba      	ldr	r2, [r7, #8]
  4069b8:	6819      	ldr	r1, [r3, #0]
  4069ba:	1b2d      	subs	r5, r5, r4
  4069bc:	f045 0501 	orr.w	r5, r5, #1
  4069c0:	4630      	mov	r0, r6
  4069c2:	1b09      	subs	r1, r1, r4
  4069c4:	6055      	str	r5, [r2, #4]
  4069c6:	6019      	str	r1, [r3, #0]
  4069c8:	f000 fc7e 	bl	4072c8 <__malloc_unlock>
  4069cc:	2001      	movs	r0, #1
  4069ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4069d0:	2100      	movs	r1, #0
  4069d2:	4630      	mov	r0, r6
  4069d4:	f001 f930 	bl	407c38 <_sbrk_r>
  4069d8:	68ba      	ldr	r2, [r7, #8]
  4069da:	1a83      	subs	r3, r0, r2
  4069dc:	2b0f      	cmp	r3, #15
  4069de:	ddde      	ble.n	40699e <_malloc_trim_r+0x3e>
  4069e0:	4c06      	ldr	r4, [pc, #24]	; (4069fc <_malloc_trim_r+0x9c>)
  4069e2:	4905      	ldr	r1, [pc, #20]	; (4069f8 <_malloc_trim_r+0x98>)
  4069e4:	6824      	ldr	r4, [r4, #0]
  4069e6:	f043 0301 	orr.w	r3, r3, #1
  4069ea:	1b00      	subs	r0, r0, r4
  4069ec:	6053      	str	r3, [r2, #4]
  4069ee:	6008      	str	r0, [r1, #0]
  4069f0:	e7d5      	b.n	40699e <_malloc_trim_r+0x3e>
  4069f2:	bf00      	nop
  4069f4:	20000850 	.word	0x20000850
  4069f8:	200012a0 	.word	0x200012a0
  4069fc:	20000c58 	.word	0x20000c58

00406a00 <_free_r>:
  406a00:	2900      	cmp	r1, #0
  406a02:	d044      	beq.n	406a8e <_free_r+0x8e>
  406a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a08:	460d      	mov	r5, r1
  406a0a:	4680      	mov	r8, r0
  406a0c:	f000 fc56 	bl	4072bc <__malloc_lock>
  406a10:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406a14:	4969      	ldr	r1, [pc, #420]	; (406bbc <_free_r+0x1bc>)
  406a16:	f1a5 0408 	sub.w	r4, r5, #8
  406a1a:	f027 0301 	bic.w	r3, r7, #1
  406a1e:	18e2      	adds	r2, r4, r3
  406a20:	688e      	ldr	r6, [r1, #8]
  406a22:	6850      	ldr	r0, [r2, #4]
  406a24:	42b2      	cmp	r2, r6
  406a26:	f020 0003 	bic.w	r0, r0, #3
  406a2a:	d05e      	beq.n	406aea <_free_r+0xea>
  406a2c:	07fe      	lsls	r6, r7, #31
  406a2e:	6050      	str	r0, [r2, #4]
  406a30:	d40b      	bmi.n	406a4a <_free_r+0x4a>
  406a32:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406a36:	f101 0e08 	add.w	lr, r1, #8
  406a3a:	1be4      	subs	r4, r4, r7
  406a3c:	68a5      	ldr	r5, [r4, #8]
  406a3e:	443b      	add	r3, r7
  406a40:	4575      	cmp	r5, lr
  406a42:	d06d      	beq.n	406b20 <_free_r+0x120>
  406a44:	68e7      	ldr	r7, [r4, #12]
  406a46:	60ef      	str	r7, [r5, #12]
  406a48:	60bd      	str	r5, [r7, #8]
  406a4a:	1815      	adds	r5, r2, r0
  406a4c:	686d      	ldr	r5, [r5, #4]
  406a4e:	07ed      	lsls	r5, r5, #31
  406a50:	d53e      	bpl.n	406ad0 <_free_r+0xd0>
  406a52:	f043 0201 	orr.w	r2, r3, #1
  406a56:	6062      	str	r2, [r4, #4]
  406a58:	50e3      	str	r3, [r4, r3]
  406a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406a5e:	d217      	bcs.n	406a90 <_free_r+0x90>
  406a60:	2201      	movs	r2, #1
  406a62:	08db      	lsrs	r3, r3, #3
  406a64:	1098      	asrs	r0, r3, #2
  406a66:	684d      	ldr	r5, [r1, #4]
  406a68:	4413      	add	r3, r2
  406a6a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
  406a6e:	4082      	lsls	r2, r0
  406a70:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
  406a74:	432a      	orrs	r2, r5
  406a76:	3808      	subs	r0, #8
  406a78:	60e0      	str	r0, [r4, #12]
  406a7a:	60a7      	str	r7, [r4, #8]
  406a7c:	604a      	str	r2, [r1, #4]
  406a7e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
  406a82:	60fc      	str	r4, [r7, #12]
  406a84:	4640      	mov	r0, r8
  406a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406a8a:	f000 bc1d 	b.w	4072c8 <__malloc_unlock>
  406a8e:	4770      	bx	lr
  406a90:	0a5a      	lsrs	r2, r3, #9
  406a92:	2a04      	cmp	r2, #4
  406a94:	d852      	bhi.n	406b3c <_free_r+0x13c>
  406a96:	099a      	lsrs	r2, r3, #6
  406a98:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406a9c:	00ff      	lsls	r7, r7, #3
  406a9e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406aa2:	19c8      	adds	r0, r1, r7
  406aa4:	59ca      	ldr	r2, [r1, r7]
  406aa6:	3808      	subs	r0, #8
  406aa8:	4290      	cmp	r0, r2
  406aaa:	d04f      	beq.n	406b4c <_free_r+0x14c>
  406aac:	6851      	ldr	r1, [r2, #4]
  406aae:	f021 0103 	bic.w	r1, r1, #3
  406ab2:	428b      	cmp	r3, r1
  406ab4:	d232      	bcs.n	406b1c <_free_r+0x11c>
  406ab6:	6892      	ldr	r2, [r2, #8]
  406ab8:	4290      	cmp	r0, r2
  406aba:	d1f7      	bne.n	406aac <_free_r+0xac>
  406abc:	68c3      	ldr	r3, [r0, #12]
  406abe:	60a0      	str	r0, [r4, #8]
  406ac0:	60e3      	str	r3, [r4, #12]
  406ac2:	609c      	str	r4, [r3, #8]
  406ac4:	60c4      	str	r4, [r0, #12]
  406ac6:	4640      	mov	r0, r8
  406ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406acc:	f000 bbfc 	b.w	4072c8 <__malloc_unlock>
  406ad0:	6895      	ldr	r5, [r2, #8]
  406ad2:	4f3b      	ldr	r7, [pc, #236]	; (406bc0 <_free_r+0x1c0>)
  406ad4:	4403      	add	r3, r0
  406ad6:	42bd      	cmp	r5, r7
  406ad8:	d040      	beq.n	406b5c <_free_r+0x15c>
  406ada:	68d0      	ldr	r0, [r2, #12]
  406adc:	f043 0201 	orr.w	r2, r3, #1
  406ae0:	60e8      	str	r0, [r5, #12]
  406ae2:	6085      	str	r5, [r0, #8]
  406ae4:	6062      	str	r2, [r4, #4]
  406ae6:	50e3      	str	r3, [r4, r3]
  406ae8:	e7b7      	b.n	406a5a <_free_r+0x5a>
  406aea:	07ff      	lsls	r7, r7, #31
  406aec:	4403      	add	r3, r0
  406aee:	d407      	bmi.n	406b00 <_free_r+0x100>
  406af0:	f855 5c08 	ldr.w	r5, [r5, #-8]
  406af4:	1b64      	subs	r4, r4, r5
  406af6:	68e2      	ldr	r2, [r4, #12]
  406af8:	68a0      	ldr	r0, [r4, #8]
  406afa:	442b      	add	r3, r5
  406afc:	60c2      	str	r2, [r0, #12]
  406afe:	6090      	str	r0, [r2, #8]
  406b00:	4a30      	ldr	r2, [pc, #192]	; (406bc4 <_free_r+0x1c4>)
  406b02:	f043 0001 	orr.w	r0, r3, #1
  406b06:	6812      	ldr	r2, [r2, #0]
  406b08:	6060      	str	r0, [r4, #4]
  406b0a:	4293      	cmp	r3, r2
  406b0c:	608c      	str	r4, [r1, #8]
  406b0e:	d3b9      	bcc.n	406a84 <_free_r+0x84>
  406b10:	4b2d      	ldr	r3, [pc, #180]	; (406bc8 <_free_r+0x1c8>)
  406b12:	4640      	mov	r0, r8
  406b14:	6819      	ldr	r1, [r3, #0]
  406b16:	f7ff ff23 	bl	406960 <_malloc_trim_r>
  406b1a:	e7b3      	b.n	406a84 <_free_r+0x84>
  406b1c:	4610      	mov	r0, r2
  406b1e:	e7cd      	b.n	406abc <_free_r+0xbc>
  406b20:	1811      	adds	r1, r2, r0
  406b22:	6849      	ldr	r1, [r1, #4]
  406b24:	07c9      	lsls	r1, r1, #31
  406b26:	d444      	bmi.n	406bb2 <_free_r+0x1b2>
  406b28:	6891      	ldr	r1, [r2, #8]
  406b2a:	4403      	add	r3, r0
  406b2c:	68d2      	ldr	r2, [r2, #12]
  406b2e:	f043 0001 	orr.w	r0, r3, #1
  406b32:	60ca      	str	r2, [r1, #12]
  406b34:	6091      	str	r1, [r2, #8]
  406b36:	6060      	str	r0, [r4, #4]
  406b38:	50e3      	str	r3, [r4, r3]
  406b3a:	e7a3      	b.n	406a84 <_free_r+0x84>
  406b3c:	2a14      	cmp	r2, #20
  406b3e:	d816      	bhi.n	406b6e <_free_r+0x16e>
  406b40:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406b44:	00ff      	lsls	r7, r7, #3
  406b46:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406b4a:	e7aa      	b.n	406aa2 <_free_r+0xa2>
  406b4c:	2301      	movs	r3, #1
  406b4e:	10aa      	asrs	r2, r5, #2
  406b50:	684d      	ldr	r5, [r1, #4]
  406b52:	4093      	lsls	r3, r2
  406b54:	432b      	orrs	r3, r5
  406b56:	604b      	str	r3, [r1, #4]
  406b58:	4603      	mov	r3, r0
  406b5a:	e7b0      	b.n	406abe <_free_r+0xbe>
  406b5c:	f043 0201 	orr.w	r2, r3, #1
  406b60:	614c      	str	r4, [r1, #20]
  406b62:	610c      	str	r4, [r1, #16]
  406b64:	60e5      	str	r5, [r4, #12]
  406b66:	60a5      	str	r5, [r4, #8]
  406b68:	6062      	str	r2, [r4, #4]
  406b6a:	50e3      	str	r3, [r4, r3]
  406b6c:	e78a      	b.n	406a84 <_free_r+0x84>
  406b6e:	2a54      	cmp	r2, #84	; 0x54
  406b70:	d806      	bhi.n	406b80 <_free_r+0x180>
  406b72:	0b1a      	lsrs	r2, r3, #12
  406b74:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406b78:	00ff      	lsls	r7, r7, #3
  406b7a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406b7e:	e790      	b.n	406aa2 <_free_r+0xa2>
  406b80:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406b84:	d806      	bhi.n	406b94 <_free_r+0x194>
  406b86:	0bda      	lsrs	r2, r3, #15
  406b88:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406b8c:	00ff      	lsls	r7, r7, #3
  406b8e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406b92:	e786      	b.n	406aa2 <_free_r+0xa2>
  406b94:	f240 5054 	movw	r0, #1364	; 0x554
  406b98:	4282      	cmp	r2, r0
  406b9a:	d806      	bhi.n	406baa <_free_r+0x1aa>
  406b9c:	0c9a      	lsrs	r2, r3, #18
  406b9e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406ba2:	00ff      	lsls	r7, r7, #3
  406ba4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406ba8:	e77b      	b.n	406aa2 <_free_r+0xa2>
  406baa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406bae:	257e      	movs	r5, #126	; 0x7e
  406bb0:	e777      	b.n	406aa2 <_free_r+0xa2>
  406bb2:	f043 0101 	orr.w	r1, r3, #1
  406bb6:	6061      	str	r1, [r4, #4]
  406bb8:	6013      	str	r3, [r2, #0]
  406bba:	e763      	b.n	406a84 <_free_r+0x84>
  406bbc:	20000850 	.word	0x20000850
  406bc0:	20000858 	.word	0x20000858
  406bc4:	20000c5c 	.word	0x20000c5c
  406bc8:	200012d0 	.word	0x200012d0

00406bcc <__locale_ctype_ptr_l>:
  406bcc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  406bd0:	4770      	bx	lr
  406bd2:	bf00      	nop

00406bd4 <_localeconv_r>:
  406bd4:	4a04      	ldr	r2, [pc, #16]	; (406be8 <_localeconv_r+0x14>)
  406bd6:	4b05      	ldr	r3, [pc, #20]	; (406bec <_localeconv_r+0x18>)
  406bd8:	6812      	ldr	r2, [r2, #0]
  406bda:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406bdc:	2800      	cmp	r0, #0
  406bde:	bf08      	it	eq
  406be0:	4618      	moveq	r0, r3
  406be2:	30f0      	adds	r0, #240	; 0xf0
  406be4:	4770      	bx	lr
  406be6:	bf00      	nop
  406be8:	200002b0 	.word	0x200002b0
  406bec:	200006e4 	.word	0x200006e4

00406bf0 <__retarget_lock_acquire_recursive>:
  406bf0:	4770      	bx	lr
  406bf2:	bf00      	nop

00406bf4 <__retarget_lock_release_recursive>:
  406bf4:	4770      	bx	lr
  406bf6:	bf00      	nop

00406bf8 <_malloc_r>:
  406bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406bfc:	f101 060b 	add.w	r6, r1, #11
  406c00:	2e16      	cmp	r6, #22
  406c02:	b083      	sub	sp, #12
  406c04:	4605      	mov	r5, r0
  406c06:	f240 809e 	bls.w	406d46 <_malloc_r+0x14e>
  406c0a:	f036 0607 	bics.w	r6, r6, #7
  406c0e:	f100 80bd 	bmi.w	406d8c <_malloc_r+0x194>
  406c12:	42b1      	cmp	r1, r6
  406c14:	f200 80ba 	bhi.w	406d8c <_malloc_r+0x194>
  406c18:	f000 fb50 	bl	4072bc <__malloc_lock>
  406c1c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406c20:	f0c0 8285 	bcc.w	40712e <_malloc_r+0x536>
  406c24:	0a73      	lsrs	r3, r6, #9
  406c26:	f000 80b8 	beq.w	406d9a <_malloc_r+0x1a2>
  406c2a:	2b04      	cmp	r3, #4
  406c2c:	f200 816c 	bhi.w	406f08 <_malloc_r+0x310>
  406c30:	09b3      	lsrs	r3, r6, #6
  406c32:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406c36:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  406c3a:	00c1      	lsls	r1, r0, #3
  406c3c:	4fb8      	ldr	r7, [pc, #736]	; (406f20 <_malloc_r+0x328>)
  406c3e:	4439      	add	r1, r7
  406c40:	684c      	ldr	r4, [r1, #4]
  406c42:	3908      	subs	r1, #8
  406c44:	42a1      	cmp	r1, r4
  406c46:	d106      	bne.n	406c56 <_malloc_r+0x5e>
  406c48:	e00c      	b.n	406c64 <_malloc_r+0x6c>
  406c4a:	2a00      	cmp	r2, #0
  406c4c:	f280 80ab 	bge.w	406da6 <_malloc_r+0x1ae>
  406c50:	68e4      	ldr	r4, [r4, #12]
  406c52:	42a1      	cmp	r1, r4
  406c54:	d006      	beq.n	406c64 <_malloc_r+0x6c>
  406c56:	6863      	ldr	r3, [r4, #4]
  406c58:	f023 0303 	bic.w	r3, r3, #3
  406c5c:	1b9a      	subs	r2, r3, r6
  406c5e:	2a0f      	cmp	r2, #15
  406c60:	ddf3      	ble.n	406c4a <_malloc_r+0x52>
  406c62:	4670      	mov	r0, lr
  406c64:	693c      	ldr	r4, [r7, #16]
  406c66:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 406f34 <_malloc_r+0x33c>
  406c6a:	4574      	cmp	r4, lr
  406c6c:	f000 819e 	beq.w	406fac <_malloc_r+0x3b4>
  406c70:	6863      	ldr	r3, [r4, #4]
  406c72:	f023 0303 	bic.w	r3, r3, #3
  406c76:	1b9a      	subs	r2, r3, r6
  406c78:	2a0f      	cmp	r2, #15
  406c7a:	f300 8183 	bgt.w	406f84 <_malloc_r+0x38c>
  406c7e:	2a00      	cmp	r2, #0
  406c80:	f8c7 e014 	str.w	lr, [r7, #20]
  406c84:	f8c7 e010 	str.w	lr, [r7, #16]
  406c88:	f280 8091 	bge.w	406dae <_malloc_r+0x1b6>
  406c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406c90:	f080 8154 	bcs.w	406f3c <_malloc_r+0x344>
  406c94:	2201      	movs	r2, #1
  406c96:	08db      	lsrs	r3, r3, #3
  406c98:	6879      	ldr	r1, [r7, #4]
  406c9a:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  406c9e:	4413      	add	r3, r2
  406ca0:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
  406ca4:	fa02 f20c 	lsl.w	r2, r2, ip
  406ca8:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
  406cac:	430a      	orrs	r2, r1
  406cae:	f1ac 0108 	sub.w	r1, ip, #8
  406cb2:	60e1      	str	r1, [r4, #12]
  406cb4:	f8c4 8008 	str.w	r8, [r4, #8]
  406cb8:	607a      	str	r2, [r7, #4]
  406cba:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  406cbe:	f8c8 400c 	str.w	r4, [r8, #12]
  406cc2:	2401      	movs	r4, #1
  406cc4:	1083      	asrs	r3, r0, #2
  406cc6:	409c      	lsls	r4, r3
  406cc8:	4294      	cmp	r4, r2
  406cca:	d87d      	bhi.n	406dc8 <_malloc_r+0x1d0>
  406ccc:	4214      	tst	r4, r2
  406cce:	d106      	bne.n	406cde <_malloc_r+0xe6>
  406cd0:	f020 0003 	bic.w	r0, r0, #3
  406cd4:	0064      	lsls	r4, r4, #1
  406cd6:	4214      	tst	r4, r2
  406cd8:	f100 0004 	add.w	r0, r0, #4
  406cdc:	d0fa      	beq.n	406cd4 <_malloc_r+0xdc>
  406cde:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406ce2:	46cc      	mov	ip, r9
  406ce4:	4680      	mov	r8, r0
  406ce6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406cea:	459c      	cmp	ip, r3
  406cec:	d107      	bne.n	406cfe <_malloc_r+0x106>
  406cee:	e15f      	b.n	406fb0 <_malloc_r+0x3b8>
  406cf0:	2a00      	cmp	r2, #0
  406cf2:	f280 816d 	bge.w	406fd0 <_malloc_r+0x3d8>
  406cf6:	68db      	ldr	r3, [r3, #12]
  406cf8:	459c      	cmp	ip, r3
  406cfa:	f000 8159 	beq.w	406fb0 <_malloc_r+0x3b8>
  406cfe:	6859      	ldr	r1, [r3, #4]
  406d00:	f021 0103 	bic.w	r1, r1, #3
  406d04:	1b8a      	subs	r2, r1, r6
  406d06:	2a0f      	cmp	r2, #15
  406d08:	ddf2      	ble.n	406cf0 <_malloc_r+0xf8>
  406d0a:	68dc      	ldr	r4, [r3, #12]
  406d0c:	f8d3 c008 	ldr.w	ip, [r3, #8]
  406d10:	f046 0801 	orr.w	r8, r6, #1
  406d14:	4628      	mov	r0, r5
  406d16:	441e      	add	r6, r3
  406d18:	f042 0501 	orr.w	r5, r2, #1
  406d1c:	f8c3 8004 	str.w	r8, [r3, #4]
  406d20:	f8cc 400c 	str.w	r4, [ip, #12]
  406d24:	f8c4 c008 	str.w	ip, [r4, #8]
  406d28:	617e      	str	r6, [r7, #20]
  406d2a:	613e      	str	r6, [r7, #16]
  406d2c:	f8c6 e00c 	str.w	lr, [r6, #12]
  406d30:	f8c6 e008 	str.w	lr, [r6, #8]
  406d34:	6075      	str	r5, [r6, #4]
  406d36:	505a      	str	r2, [r3, r1]
  406d38:	9300      	str	r3, [sp, #0]
  406d3a:	f000 fac5 	bl	4072c8 <__malloc_unlock>
  406d3e:	9b00      	ldr	r3, [sp, #0]
  406d40:	f103 0408 	add.w	r4, r3, #8
  406d44:	e01e      	b.n	406d84 <_malloc_r+0x18c>
  406d46:	2910      	cmp	r1, #16
  406d48:	d820      	bhi.n	406d8c <_malloc_r+0x194>
  406d4a:	f000 fab7 	bl	4072bc <__malloc_lock>
  406d4e:	2610      	movs	r6, #16
  406d50:	2318      	movs	r3, #24
  406d52:	2002      	movs	r0, #2
  406d54:	4f72      	ldr	r7, [pc, #456]	; (406f20 <_malloc_r+0x328>)
  406d56:	443b      	add	r3, r7
  406d58:	685c      	ldr	r4, [r3, #4]
  406d5a:	f1a3 0208 	sub.w	r2, r3, #8
  406d5e:	4294      	cmp	r4, r2
  406d60:	f000 812f 	beq.w	406fc2 <_malloc_r+0x3ca>
  406d64:	6863      	ldr	r3, [r4, #4]
  406d66:	68e1      	ldr	r1, [r4, #12]
  406d68:	f023 0303 	bic.w	r3, r3, #3
  406d6c:	4423      	add	r3, r4
  406d6e:	685a      	ldr	r2, [r3, #4]
  406d70:	68a6      	ldr	r6, [r4, #8]
  406d72:	f042 0201 	orr.w	r2, r2, #1
  406d76:	60f1      	str	r1, [r6, #12]
  406d78:	4628      	mov	r0, r5
  406d7a:	608e      	str	r6, [r1, #8]
  406d7c:	605a      	str	r2, [r3, #4]
  406d7e:	f000 faa3 	bl	4072c8 <__malloc_unlock>
  406d82:	3408      	adds	r4, #8
  406d84:	4620      	mov	r0, r4
  406d86:	b003      	add	sp, #12
  406d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d8c:	2400      	movs	r4, #0
  406d8e:	230c      	movs	r3, #12
  406d90:	4620      	mov	r0, r4
  406d92:	602b      	str	r3, [r5, #0]
  406d94:	b003      	add	sp, #12
  406d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d9a:	2040      	movs	r0, #64	; 0x40
  406d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
  406da0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406da4:	e74a      	b.n	406c3c <_malloc_r+0x44>
  406da6:	4423      	add	r3, r4
  406da8:	685a      	ldr	r2, [r3, #4]
  406daa:	68e1      	ldr	r1, [r4, #12]
  406dac:	e7e0      	b.n	406d70 <_malloc_r+0x178>
  406dae:	4423      	add	r3, r4
  406db0:	685a      	ldr	r2, [r3, #4]
  406db2:	4628      	mov	r0, r5
  406db4:	f042 0201 	orr.w	r2, r2, #1
  406db8:	605a      	str	r2, [r3, #4]
  406dba:	3408      	adds	r4, #8
  406dbc:	f000 fa84 	bl	4072c8 <__malloc_unlock>
  406dc0:	4620      	mov	r0, r4
  406dc2:	b003      	add	sp, #12
  406dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dc8:	68bc      	ldr	r4, [r7, #8]
  406dca:	6863      	ldr	r3, [r4, #4]
  406dcc:	f023 0803 	bic.w	r8, r3, #3
  406dd0:	45b0      	cmp	r8, r6
  406dd2:	d304      	bcc.n	406dde <_malloc_r+0x1e6>
  406dd4:	eba8 0306 	sub.w	r3, r8, r6
  406dd8:	2b0f      	cmp	r3, #15
  406dda:	f300 8085 	bgt.w	406ee8 <_malloc_r+0x2f0>
  406dde:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406f38 <_malloc_r+0x340>
  406de2:	4b50      	ldr	r3, [pc, #320]	; (406f24 <_malloc_r+0x32c>)
  406de4:	f8d9 2000 	ldr.w	r2, [r9]
  406de8:	681b      	ldr	r3, [r3, #0]
  406dea:	3201      	adds	r2, #1
  406dec:	4433      	add	r3, r6
  406dee:	eb04 0a08 	add.w	sl, r4, r8
  406df2:	f000 8154 	beq.w	40709e <_malloc_r+0x4a6>
  406df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406dfa:	330f      	adds	r3, #15
  406dfc:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  406e00:	f02b 0b0f 	bic.w	fp, fp, #15
  406e04:	4659      	mov	r1, fp
  406e06:	4628      	mov	r0, r5
  406e08:	f000 ff16 	bl	407c38 <_sbrk_r>
  406e0c:	1c41      	adds	r1, r0, #1
  406e0e:	4602      	mov	r2, r0
  406e10:	f000 80fb 	beq.w	40700a <_malloc_r+0x412>
  406e14:	4582      	cmp	sl, r0
  406e16:	f200 80f6 	bhi.w	407006 <_malloc_r+0x40e>
  406e1a:	4b43      	ldr	r3, [pc, #268]	; (406f28 <_malloc_r+0x330>)
  406e1c:	6819      	ldr	r1, [r3, #0]
  406e1e:	4459      	add	r1, fp
  406e20:	6019      	str	r1, [r3, #0]
  406e22:	f000 814c 	beq.w	4070be <_malloc_r+0x4c6>
  406e26:	f8d9 0000 	ldr.w	r0, [r9]
  406e2a:	3001      	adds	r0, #1
  406e2c:	bf1b      	ittet	ne
  406e2e:	eba2 0a0a 	subne.w	sl, r2, sl
  406e32:	4451      	addne	r1, sl
  406e34:	f8c9 2000 	streq.w	r2, [r9]
  406e38:	6019      	strne	r1, [r3, #0]
  406e3a:	f012 0107 	ands.w	r1, r2, #7
  406e3e:	f000 8114 	beq.w	40706a <_malloc_r+0x472>
  406e42:	f1c1 0008 	rsb	r0, r1, #8
  406e46:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406e4a:	4402      	add	r2, r0
  406e4c:	3108      	adds	r1, #8
  406e4e:	eb02 090b 	add.w	r9, r2, fp
  406e52:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406e56:	eba1 0909 	sub.w	r9, r1, r9
  406e5a:	4649      	mov	r1, r9
  406e5c:	4628      	mov	r0, r5
  406e5e:	9301      	str	r3, [sp, #4]
  406e60:	9200      	str	r2, [sp, #0]
  406e62:	f000 fee9 	bl	407c38 <_sbrk_r>
  406e66:	1c43      	adds	r3, r0, #1
  406e68:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406e6c:	f000 8142 	beq.w	4070f4 <_malloc_r+0x4fc>
  406e70:	1a80      	subs	r0, r0, r2
  406e72:	4448      	add	r0, r9
  406e74:	f040 0001 	orr.w	r0, r0, #1
  406e78:	6819      	ldr	r1, [r3, #0]
  406e7a:	42bc      	cmp	r4, r7
  406e7c:	4449      	add	r1, r9
  406e7e:	60ba      	str	r2, [r7, #8]
  406e80:	6019      	str	r1, [r3, #0]
  406e82:	6050      	str	r0, [r2, #4]
  406e84:	d017      	beq.n	406eb6 <_malloc_r+0x2be>
  406e86:	f1b8 0f0f 	cmp.w	r8, #15
  406e8a:	f240 80fa 	bls.w	407082 <_malloc_r+0x48a>
  406e8e:	f04f 0c05 	mov.w	ip, #5
  406e92:	6862      	ldr	r2, [r4, #4]
  406e94:	f1a8 000c 	sub.w	r0, r8, #12
  406e98:	f020 0007 	bic.w	r0, r0, #7
  406e9c:	f002 0201 	and.w	r2, r2, #1
  406ea0:	eb04 0e00 	add.w	lr, r4, r0
  406ea4:	4302      	orrs	r2, r0
  406ea6:	280f      	cmp	r0, #15
  406ea8:	6062      	str	r2, [r4, #4]
  406eaa:	f8ce c004 	str.w	ip, [lr, #4]
  406eae:	f8ce c008 	str.w	ip, [lr, #8]
  406eb2:	f200 8116 	bhi.w	4070e2 <_malloc_r+0x4ea>
  406eb6:	4b1d      	ldr	r3, [pc, #116]	; (406f2c <_malloc_r+0x334>)
  406eb8:	68bc      	ldr	r4, [r7, #8]
  406eba:	681a      	ldr	r2, [r3, #0]
  406ebc:	4291      	cmp	r1, r2
  406ebe:	bf88      	it	hi
  406ec0:	6019      	strhi	r1, [r3, #0]
  406ec2:	4b1b      	ldr	r3, [pc, #108]	; (406f30 <_malloc_r+0x338>)
  406ec4:	681a      	ldr	r2, [r3, #0]
  406ec6:	4291      	cmp	r1, r2
  406ec8:	6862      	ldr	r2, [r4, #4]
  406eca:	bf88      	it	hi
  406ecc:	6019      	strhi	r1, [r3, #0]
  406ece:	f022 0203 	bic.w	r2, r2, #3
  406ed2:	4296      	cmp	r6, r2
  406ed4:	eba2 0306 	sub.w	r3, r2, r6
  406ed8:	d801      	bhi.n	406ede <_malloc_r+0x2e6>
  406eda:	2b0f      	cmp	r3, #15
  406edc:	dc04      	bgt.n	406ee8 <_malloc_r+0x2f0>
  406ede:	4628      	mov	r0, r5
  406ee0:	f000 f9f2 	bl	4072c8 <__malloc_unlock>
  406ee4:	2400      	movs	r4, #0
  406ee6:	e74d      	b.n	406d84 <_malloc_r+0x18c>
  406ee8:	f046 0201 	orr.w	r2, r6, #1
  406eec:	f043 0301 	orr.w	r3, r3, #1
  406ef0:	4426      	add	r6, r4
  406ef2:	6062      	str	r2, [r4, #4]
  406ef4:	4628      	mov	r0, r5
  406ef6:	60be      	str	r6, [r7, #8]
  406ef8:	3408      	adds	r4, #8
  406efa:	6073      	str	r3, [r6, #4]
  406efc:	f000 f9e4 	bl	4072c8 <__malloc_unlock>
  406f00:	4620      	mov	r0, r4
  406f02:	b003      	add	sp, #12
  406f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f08:	2b14      	cmp	r3, #20
  406f0a:	d970      	bls.n	406fee <_malloc_r+0x3f6>
  406f0c:	2b54      	cmp	r3, #84	; 0x54
  406f0e:	f200 80a2 	bhi.w	407056 <_malloc_r+0x45e>
  406f12:	0b33      	lsrs	r3, r6, #12
  406f14:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406f18:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  406f1c:	00c1      	lsls	r1, r0, #3
  406f1e:	e68d      	b.n	406c3c <_malloc_r+0x44>
  406f20:	20000850 	.word	0x20000850
  406f24:	200012d0 	.word	0x200012d0
  406f28:	200012a0 	.word	0x200012a0
  406f2c:	200012c8 	.word	0x200012c8
  406f30:	200012cc 	.word	0x200012cc
  406f34:	20000858 	.word	0x20000858
  406f38:	20000c58 	.word	0x20000c58
  406f3c:	0a5a      	lsrs	r2, r3, #9
  406f3e:	2a04      	cmp	r2, #4
  406f40:	d95b      	bls.n	406ffa <_malloc_r+0x402>
  406f42:	2a14      	cmp	r2, #20
  406f44:	f200 80ae 	bhi.w	4070a4 <_malloc_r+0x4ac>
  406f48:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406f4c:	00c9      	lsls	r1, r1, #3
  406f4e:	325b      	adds	r2, #91	; 0x5b
  406f50:	eb07 0c01 	add.w	ip, r7, r1
  406f54:	5879      	ldr	r1, [r7, r1]
  406f56:	f1ac 0c08 	sub.w	ip, ip, #8
  406f5a:	458c      	cmp	ip, r1
  406f5c:	f000 8088 	beq.w	407070 <_malloc_r+0x478>
  406f60:	684a      	ldr	r2, [r1, #4]
  406f62:	f022 0203 	bic.w	r2, r2, #3
  406f66:	4293      	cmp	r3, r2
  406f68:	d273      	bcs.n	407052 <_malloc_r+0x45a>
  406f6a:	6889      	ldr	r1, [r1, #8]
  406f6c:	458c      	cmp	ip, r1
  406f6e:	d1f7      	bne.n	406f60 <_malloc_r+0x368>
  406f70:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406f74:	687a      	ldr	r2, [r7, #4]
  406f76:	60e3      	str	r3, [r4, #12]
  406f78:	f8c4 c008 	str.w	ip, [r4, #8]
  406f7c:	609c      	str	r4, [r3, #8]
  406f7e:	f8cc 400c 	str.w	r4, [ip, #12]
  406f82:	e69e      	b.n	406cc2 <_malloc_r+0xca>
  406f84:	f046 0c01 	orr.w	ip, r6, #1
  406f88:	f042 0101 	orr.w	r1, r2, #1
  406f8c:	4426      	add	r6, r4
  406f8e:	f8c4 c004 	str.w	ip, [r4, #4]
  406f92:	4628      	mov	r0, r5
  406f94:	617e      	str	r6, [r7, #20]
  406f96:	613e      	str	r6, [r7, #16]
  406f98:	f8c6 e00c 	str.w	lr, [r6, #12]
  406f9c:	f8c6 e008 	str.w	lr, [r6, #8]
  406fa0:	6071      	str	r1, [r6, #4]
  406fa2:	50e2      	str	r2, [r4, r3]
  406fa4:	f000 f990 	bl	4072c8 <__malloc_unlock>
  406fa8:	3408      	adds	r4, #8
  406faa:	e6eb      	b.n	406d84 <_malloc_r+0x18c>
  406fac:	687a      	ldr	r2, [r7, #4]
  406fae:	e688      	b.n	406cc2 <_malloc_r+0xca>
  406fb0:	f108 0801 	add.w	r8, r8, #1
  406fb4:	f018 0f03 	tst.w	r8, #3
  406fb8:	f10c 0c08 	add.w	ip, ip, #8
  406fbc:	f47f ae93 	bne.w	406ce6 <_malloc_r+0xee>
  406fc0:	e02d      	b.n	40701e <_malloc_r+0x426>
  406fc2:	68dc      	ldr	r4, [r3, #12]
  406fc4:	42a3      	cmp	r3, r4
  406fc6:	bf08      	it	eq
  406fc8:	3002      	addeq	r0, #2
  406fca:	f43f ae4b 	beq.w	406c64 <_malloc_r+0x6c>
  406fce:	e6c9      	b.n	406d64 <_malloc_r+0x16c>
  406fd0:	461c      	mov	r4, r3
  406fd2:	4419      	add	r1, r3
  406fd4:	684a      	ldr	r2, [r1, #4]
  406fd6:	68db      	ldr	r3, [r3, #12]
  406fd8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406fdc:	f042 0201 	orr.w	r2, r2, #1
  406fe0:	604a      	str	r2, [r1, #4]
  406fe2:	4628      	mov	r0, r5
  406fe4:	60f3      	str	r3, [r6, #12]
  406fe6:	609e      	str	r6, [r3, #8]
  406fe8:	f000 f96e 	bl	4072c8 <__malloc_unlock>
  406fec:	e6ca      	b.n	406d84 <_malloc_r+0x18c>
  406fee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406ff2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406ff6:	00c1      	lsls	r1, r0, #3
  406ff8:	e620      	b.n	406c3c <_malloc_r+0x44>
  406ffa:	099a      	lsrs	r2, r3, #6
  406ffc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  407000:	00c9      	lsls	r1, r1, #3
  407002:	3238      	adds	r2, #56	; 0x38
  407004:	e7a4      	b.n	406f50 <_malloc_r+0x358>
  407006:	42bc      	cmp	r4, r7
  407008:	d054      	beq.n	4070b4 <_malloc_r+0x4bc>
  40700a:	68bc      	ldr	r4, [r7, #8]
  40700c:	6862      	ldr	r2, [r4, #4]
  40700e:	f022 0203 	bic.w	r2, r2, #3
  407012:	e75e      	b.n	406ed2 <_malloc_r+0x2da>
  407014:	f859 3908 	ldr.w	r3, [r9], #-8
  407018:	4599      	cmp	r9, r3
  40701a:	f040 8086 	bne.w	40712a <_malloc_r+0x532>
  40701e:	f010 0f03 	tst.w	r0, #3
  407022:	f100 30ff 	add.w	r0, r0, #4294967295
  407026:	d1f5      	bne.n	407014 <_malloc_r+0x41c>
  407028:	687b      	ldr	r3, [r7, #4]
  40702a:	ea23 0304 	bic.w	r3, r3, r4
  40702e:	607b      	str	r3, [r7, #4]
  407030:	0064      	lsls	r4, r4, #1
  407032:	429c      	cmp	r4, r3
  407034:	f63f aec8 	bhi.w	406dc8 <_malloc_r+0x1d0>
  407038:	2c00      	cmp	r4, #0
  40703a:	f43f aec5 	beq.w	406dc8 <_malloc_r+0x1d0>
  40703e:	421c      	tst	r4, r3
  407040:	4640      	mov	r0, r8
  407042:	f47f ae4c 	bne.w	406cde <_malloc_r+0xe6>
  407046:	0064      	lsls	r4, r4, #1
  407048:	421c      	tst	r4, r3
  40704a:	f100 0004 	add.w	r0, r0, #4
  40704e:	d0fa      	beq.n	407046 <_malloc_r+0x44e>
  407050:	e645      	b.n	406cde <_malloc_r+0xe6>
  407052:	468c      	mov	ip, r1
  407054:	e78c      	b.n	406f70 <_malloc_r+0x378>
  407056:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40705a:	d815      	bhi.n	407088 <_malloc_r+0x490>
  40705c:	0bf3      	lsrs	r3, r6, #15
  40705e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  407062:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  407066:	00c1      	lsls	r1, r0, #3
  407068:	e5e8      	b.n	406c3c <_malloc_r+0x44>
  40706a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40706e:	e6ee      	b.n	406e4e <_malloc_r+0x256>
  407070:	2101      	movs	r1, #1
  407072:	687b      	ldr	r3, [r7, #4]
  407074:	1092      	asrs	r2, r2, #2
  407076:	fa01 f202 	lsl.w	r2, r1, r2
  40707a:	431a      	orrs	r2, r3
  40707c:	607a      	str	r2, [r7, #4]
  40707e:	4663      	mov	r3, ip
  407080:	e779      	b.n	406f76 <_malloc_r+0x37e>
  407082:	2301      	movs	r3, #1
  407084:	6053      	str	r3, [r2, #4]
  407086:	e72a      	b.n	406ede <_malloc_r+0x2e6>
  407088:	f240 5254 	movw	r2, #1364	; 0x554
  40708c:	4293      	cmp	r3, r2
  40708e:	d822      	bhi.n	4070d6 <_malloc_r+0x4de>
  407090:	0cb3      	lsrs	r3, r6, #18
  407092:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  407096:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40709a:	00c1      	lsls	r1, r0, #3
  40709c:	e5ce      	b.n	406c3c <_malloc_r+0x44>
  40709e:	f103 0b10 	add.w	fp, r3, #16
  4070a2:	e6af      	b.n	406e04 <_malloc_r+0x20c>
  4070a4:	2a54      	cmp	r2, #84	; 0x54
  4070a6:	d829      	bhi.n	4070fc <_malloc_r+0x504>
  4070a8:	0b1a      	lsrs	r2, r3, #12
  4070aa:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4070ae:	00c9      	lsls	r1, r1, #3
  4070b0:	326e      	adds	r2, #110	; 0x6e
  4070b2:	e74d      	b.n	406f50 <_malloc_r+0x358>
  4070b4:	4b20      	ldr	r3, [pc, #128]	; (407138 <_malloc_r+0x540>)
  4070b6:	6819      	ldr	r1, [r3, #0]
  4070b8:	4459      	add	r1, fp
  4070ba:	6019      	str	r1, [r3, #0]
  4070bc:	e6b3      	b.n	406e26 <_malloc_r+0x22e>
  4070be:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4070c2:	2800      	cmp	r0, #0
  4070c4:	f47f aeaf 	bne.w	406e26 <_malloc_r+0x22e>
  4070c8:	eb08 030b 	add.w	r3, r8, fp
  4070cc:	68ba      	ldr	r2, [r7, #8]
  4070ce:	f043 0301 	orr.w	r3, r3, #1
  4070d2:	6053      	str	r3, [r2, #4]
  4070d4:	e6ef      	b.n	406eb6 <_malloc_r+0x2be>
  4070d6:	207f      	movs	r0, #127	; 0x7f
  4070d8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4070dc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4070e0:	e5ac      	b.n	406c3c <_malloc_r+0x44>
  4070e2:	f104 0108 	add.w	r1, r4, #8
  4070e6:	4628      	mov	r0, r5
  4070e8:	9300      	str	r3, [sp, #0]
  4070ea:	f7ff fc89 	bl	406a00 <_free_r>
  4070ee:	9b00      	ldr	r3, [sp, #0]
  4070f0:	6819      	ldr	r1, [r3, #0]
  4070f2:	e6e0      	b.n	406eb6 <_malloc_r+0x2be>
  4070f4:	2001      	movs	r0, #1
  4070f6:	f04f 0900 	mov.w	r9, #0
  4070fa:	e6bd      	b.n	406e78 <_malloc_r+0x280>
  4070fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407100:	d805      	bhi.n	40710e <_malloc_r+0x516>
  407102:	0bda      	lsrs	r2, r3, #15
  407104:	f102 0178 	add.w	r1, r2, #120	; 0x78
  407108:	00c9      	lsls	r1, r1, #3
  40710a:	3277      	adds	r2, #119	; 0x77
  40710c:	e720      	b.n	406f50 <_malloc_r+0x358>
  40710e:	f240 5154 	movw	r1, #1364	; 0x554
  407112:	428a      	cmp	r2, r1
  407114:	d805      	bhi.n	407122 <_malloc_r+0x52a>
  407116:	0c9a      	lsrs	r2, r3, #18
  407118:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40711c:	00c9      	lsls	r1, r1, #3
  40711e:	327c      	adds	r2, #124	; 0x7c
  407120:	e716      	b.n	406f50 <_malloc_r+0x358>
  407122:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  407126:	227e      	movs	r2, #126	; 0x7e
  407128:	e712      	b.n	406f50 <_malloc_r+0x358>
  40712a:	687b      	ldr	r3, [r7, #4]
  40712c:	e780      	b.n	407030 <_malloc_r+0x438>
  40712e:	08f0      	lsrs	r0, r6, #3
  407130:	f106 0308 	add.w	r3, r6, #8
  407134:	e60e      	b.n	406d54 <_malloc_r+0x15c>
  407136:	bf00      	nop
  407138:	200012a0 	.word	0x200012a0

0040713c <__ascii_mbtowc>:
  40713c:	b082      	sub	sp, #8
  40713e:	b149      	cbz	r1, 407154 <__ascii_mbtowc+0x18>
  407140:	b15a      	cbz	r2, 40715a <__ascii_mbtowc+0x1e>
  407142:	b16b      	cbz	r3, 407160 <__ascii_mbtowc+0x24>
  407144:	7813      	ldrb	r3, [r2, #0]
  407146:	600b      	str	r3, [r1, #0]
  407148:	7812      	ldrb	r2, [r2, #0]
  40714a:	1c10      	adds	r0, r2, #0
  40714c:	bf18      	it	ne
  40714e:	2001      	movne	r0, #1
  407150:	b002      	add	sp, #8
  407152:	4770      	bx	lr
  407154:	a901      	add	r1, sp, #4
  407156:	2a00      	cmp	r2, #0
  407158:	d1f3      	bne.n	407142 <__ascii_mbtowc+0x6>
  40715a:	4610      	mov	r0, r2
  40715c:	b002      	add	sp, #8
  40715e:	4770      	bx	lr
  407160:	f06f 0001 	mvn.w	r0, #1
  407164:	e7f4      	b.n	407150 <__ascii_mbtowc+0x14>
  407166:	bf00      	nop

00407168 <memchr>:
  407168:	0783      	lsls	r3, r0, #30
  40716a:	b470      	push	{r4, r5, r6}
  40716c:	b2cd      	uxtb	r5, r1
  40716e:	d03d      	beq.n	4071ec <memchr+0x84>
  407170:	1e54      	subs	r4, r2, #1
  407172:	b30a      	cbz	r2, 4071b8 <memchr+0x50>
  407174:	7803      	ldrb	r3, [r0, #0]
  407176:	42ab      	cmp	r3, r5
  407178:	d01f      	beq.n	4071ba <memchr+0x52>
  40717a:	1c43      	adds	r3, r0, #1
  40717c:	e005      	b.n	40718a <memchr+0x22>
  40717e:	f114 34ff 	adds.w	r4, r4, #4294967295
  407182:	d319      	bcc.n	4071b8 <memchr+0x50>
  407184:	7802      	ldrb	r2, [r0, #0]
  407186:	42aa      	cmp	r2, r5
  407188:	d017      	beq.n	4071ba <memchr+0x52>
  40718a:	f013 0f03 	tst.w	r3, #3
  40718e:	4618      	mov	r0, r3
  407190:	f103 0301 	add.w	r3, r3, #1
  407194:	d1f3      	bne.n	40717e <memchr+0x16>
  407196:	2c03      	cmp	r4, #3
  407198:	d811      	bhi.n	4071be <memchr+0x56>
  40719a:	b34c      	cbz	r4, 4071f0 <memchr+0x88>
  40719c:	7803      	ldrb	r3, [r0, #0]
  40719e:	42ab      	cmp	r3, r5
  4071a0:	d00b      	beq.n	4071ba <memchr+0x52>
  4071a2:	4404      	add	r4, r0
  4071a4:	1c43      	adds	r3, r0, #1
  4071a6:	e002      	b.n	4071ae <memchr+0x46>
  4071a8:	7802      	ldrb	r2, [r0, #0]
  4071aa:	42aa      	cmp	r2, r5
  4071ac:	d005      	beq.n	4071ba <memchr+0x52>
  4071ae:	429c      	cmp	r4, r3
  4071b0:	4618      	mov	r0, r3
  4071b2:	f103 0301 	add.w	r3, r3, #1
  4071b6:	d1f7      	bne.n	4071a8 <memchr+0x40>
  4071b8:	2000      	movs	r0, #0
  4071ba:	bc70      	pop	{r4, r5, r6}
  4071bc:	4770      	bx	lr
  4071be:	0209      	lsls	r1, r1, #8
  4071c0:	b289      	uxth	r1, r1
  4071c2:	4329      	orrs	r1, r5
  4071c4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4071c8:	6803      	ldr	r3, [r0, #0]
  4071ca:	4606      	mov	r6, r0
  4071cc:	404b      	eors	r3, r1
  4071ce:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4071d2:	ea22 0303 	bic.w	r3, r2, r3
  4071d6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4071da:	f100 0004 	add.w	r0, r0, #4
  4071de:	d103      	bne.n	4071e8 <memchr+0x80>
  4071e0:	3c04      	subs	r4, #4
  4071e2:	2c03      	cmp	r4, #3
  4071e4:	d8f0      	bhi.n	4071c8 <memchr+0x60>
  4071e6:	e7d8      	b.n	40719a <memchr+0x32>
  4071e8:	4630      	mov	r0, r6
  4071ea:	e7d7      	b.n	40719c <memchr+0x34>
  4071ec:	4614      	mov	r4, r2
  4071ee:	e7d2      	b.n	407196 <memchr+0x2e>
  4071f0:	4620      	mov	r0, r4
  4071f2:	e7e2      	b.n	4071ba <memchr+0x52>

004071f4 <memmove>:
  4071f4:	4288      	cmp	r0, r1
  4071f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4071f8:	d90d      	bls.n	407216 <memmove+0x22>
  4071fa:	188b      	adds	r3, r1, r2
  4071fc:	4298      	cmp	r0, r3
  4071fe:	d20a      	bcs.n	407216 <memmove+0x22>
  407200:	1884      	adds	r4, r0, r2
  407202:	2a00      	cmp	r2, #0
  407204:	d051      	beq.n	4072aa <memmove+0xb6>
  407206:	4622      	mov	r2, r4
  407208:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40720c:	4299      	cmp	r1, r3
  40720e:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407212:	d1f9      	bne.n	407208 <memmove+0x14>
  407214:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407216:	2a0f      	cmp	r2, #15
  407218:	d948      	bls.n	4072ac <memmove+0xb8>
  40721a:	ea41 0300 	orr.w	r3, r1, r0
  40721e:	079b      	lsls	r3, r3, #30
  407220:	d146      	bne.n	4072b0 <memmove+0xbc>
  407222:	4615      	mov	r5, r2
  407224:	f100 0410 	add.w	r4, r0, #16
  407228:	f101 0310 	add.w	r3, r1, #16
  40722c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407230:	3d10      	subs	r5, #16
  407232:	f844 6c10 	str.w	r6, [r4, #-16]
  407236:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40723a:	2d0f      	cmp	r5, #15
  40723c:	f844 6c0c 	str.w	r6, [r4, #-12]
  407240:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407244:	f104 0410 	add.w	r4, r4, #16
  407248:	f844 6c18 	str.w	r6, [r4, #-24]
  40724c:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407250:	f103 0310 	add.w	r3, r3, #16
  407254:	f844 6c14 	str.w	r6, [r4, #-20]
  407258:	d8e8      	bhi.n	40722c <memmove+0x38>
  40725a:	f1a2 0310 	sub.w	r3, r2, #16
  40725e:	f023 030f 	bic.w	r3, r3, #15
  407262:	f002 0e0f 	and.w	lr, r2, #15
  407266:	3310      	adds	r3, #16
  407268:	f1be 0f03 	cmp.w	lr, #3
  40726c:	4419      	add	r1, r3
  40726e:	4403      	add	r3, r0
  407270:	d921      	bls.n	4072b6 <memmove+0xc2>
  407272:	460e      	mov	r6, r1
  407274:	4674      	mov	r4, lr
  407276:	1f1d      	subs	r5, r3, #4
  407278:	f856 7b04 	ldr.w	r7, [r6], #4
  40727c:	3c04      	subs	r4, #4
  40727e:	2c03      	cmp	r4, #3
  407280:	f845 7f04 	str.w	r7, [r5, #4]!
  407284:	d8f8      	bhi.n	407278 <memmove+0x84>
  407286:	f1ae 0404 	sub.w	r4, lr, #4
  40728a:	f024 0403 	bic.w	r4, r4, #3
  40728e:	3404      	adds	r4, #4
  407290:	4421      	add	r1, r4
  407292:	4423      	add	r3, r4
  407294:	f002 0203 	and.w	r2, r2, #3
  407298:	b162      	cbz	r2, 4072b4 <memmove+0xc0>
  40729a:	3b01      	subs	r3, #1
  40729c:	440a      	add	r2, r1
  40729e:	f811 4b01 	ldrb.w	r4, [r1], #1
  4072a2:	428a      	cmp	r2, r1
  4072a4:	f803 4f01 	strb.w	r4, [r3, #1]!
  4072a8:	d1f9      	bne.n	40729e <memmove+0xaa>
  4072aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4072ac:	4603      	mov	r3, r0
  4072ae:	e7f3      	b.n	407298 <memmove+0xa4>
  4072b0:	4603      	mov	r3, r0
  4072b2:	e7f2      	b.n	40729a <memmove+0xa6>
  4072b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4072b6:	4672      	mov	r2, lr
  4072b8:	e7ee      	b.n	407298 <memmove+0xa4>
  4072ba:	bf00      	nop

004072bc <__malloc_lock>:
  4072bc:	4801      	ldr	r0, [pc, #4]	; (4072c4 <__malloc_lock+0x8>)
  4072be:	f7ff bc97 	b.w	406bf0 <__retarget_lock_acquire_recursive>
  4072c2:	bf00      	nop
  4072c4:	20002b58 	.word	0x20002b58

004072c8 <__malloc_unlock>:
  4072c8:	4801      	ldr	r0, [pc, #4]	; (4072d0 <__malloc_unlock+0x8>)
  4072ca:	f7ff bc93 	b.w	406bf4 <__retarget_lock_release_recursive>
  4072ce:	bf00      	nop
  4072d0:	20002b58 	.word	0x20002b58

004072d4 <_Balloc>:
  4072d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4072d6:	b570      	push	{r4, r5, r6, lr}
  4072d8:	4605      	mov	r5, r0
  4072da:	460c      	mov	r4, r1
  4072dc:	b14b      	cbz	r3, 4072f2 <_Balloc+0x1e>
  4072de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4072e2:	b180      	cbz	r0, 407306 <_Balloc+0x32>
  4072e4:	6802      	ldr	r2, [r0, #0]
  4072e6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4072ea:	2300      	movs	r3, #0
  4072ec:	6103      	str	r3, [r0, #16]
  4072ee:	60c3      	str	r3, [r0, #12]
  4072f0:	bd70      	pop	{r4, r5, r6, pc}
  4072f2:	2221      	movs	r2, #33	; 0x21
  4072f4:	2104      	movs	r1, #4
  4072f6:	f000 fd9d 	bl	407e34 <_calloc_r>
  4072fa:	64e8      	str	r0, [r5, #76]	; 0x4c
  4072fc:	4603      	mov	r3, r0
  4072fe:	2800      	cmp	r0, #0
  407300:	d1ed      	bne.n	4072de <_Balloc+0xa>
  407302:	2000      	movs	r0, #0
  407304:	bd70      	pop	{r4, r5, r6, pc}
  407306:	2101      	movs	r1, #1
  407308:	fa01 f604 	lsl.w	r6, r1, r4
  40730c:	1d72      	adds	r2, r6, #5
  40730e:	4628      	mov	r0, r5
  407310:	0092      	lsls	r2, r2, #2
  407312:	f000 fd8f 	bl	407e34 <_calloc_r>
  407316:	2800      	cmp	r0, #0
  407318:	d0f3      	beq.n	407302 <_Balloc+0x2e>
  40731a:	6044      	str	r4, [r0, #4]
  40731c:	6086      	str	r6, [r0, #8]
  40731e:	e7e4      	b.n	4072ea <_Balloc+0x16>

00407320 <_Bfree>:
  407320:	b131      	cbz	r1, 407330 <_Bfree+0x10>
  407322:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407324:	684a      	ldr	r2, [r1, #4]
  407326:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40732a:	6008      	str	r0, [r1, #0]
  40732c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407330:	4770      	bx	lr
  407332:	bf00      	nop

00407334 <__multadd>:
  407334:	b5f0      	push	{r4, r5, r6, r7, lr}
  407336:	460c      	mov	r4, r1
  407338:	4605      	mov	r5, r0
  40733a:	f04f 0e00 	mov.w	lr, #0
  40733e:	690e      	ldr	r6, [r1, #16]
  407340:	b083      	sub	sp, #12
  407342:	f101 0714 	add.w	r7, r1, #20
  407346:	6838      	ldr	r0, [r7, #0]
  407348:	f10e 0e01 	add.w	lr, lr, #1
  40734c:	b281      	uxth	r1, r0
  40734e:	fb02 3301 	mla	r3, r2, r1, r3
  407352:	0c01      	lsrs	r1, r0, #16
  407354:	0c18      	lsrs	r0, r3, #16
  407356:	fb02 0101 	mla	r1, r2, r1, r0
  40735a:	b29b      	uxth	r3, r3
  40735c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  407360:	4576      	cmp	r6, lr
  407362:	f847 3b04 	str.w	r3, [r7], #4
  407366:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40736a:	dcec      	bgt.n	407346 <__multadd+0x12>
  40736c:	b13b      	cbz	r3, 40737e <__multadd+0x4a>
  40736e:	68a2      	ldr	r2, [r4, #8]
  407370:	4296      	cmp	r6, r2
  407372:	da07      	bge.n	407384 <__multadd+0x50>
  407374:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  407378:	3601      	adds	r6, #1
  40737a:	6153      	str	r3, [r2, #20]
  40737c:	6126      	str	r6, [r4, #16]
  40737e:	4620      	mov	r0, r4
  407380:	b003      	add	sp, #12
  407382:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407384:	6861      	ldr	r1, [r4, #4]
  407386:	4628      	mov	r0, r5
  407388:	3101      	adds	r1, #1
  40738a:	9301      	str	r3, [sp, #4]
  40738c:	f7ff ffa2 	bl	4072d4 <_Balloc>
  407390:	4607      	mov	r7, r0
  407392:	6922      	ldr	r2, [r4, #16]
  407394:	f104 010c 	add.w	r1, r4, #12
  407398:	3202      	adds	r2, #2
  40739a:	0092      	lsls	r2, r2, #2
  40739c:	300c      	adds	r0, #12
  40739e:	f7fc fe83 	bl	4040a8 <memcpy>
  4073a2:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  4073a4:	6861      	ldr	r1, [r4, #4]
  4073a6:	9b01      	ldr	r3, [sp, #4]
  4073a8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4073ac:	6020      	str	r0, [r4, #0]
  4073ae:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  4073b2:	463c      	mov	r4, r7
  4073b4:	e7de      	b.n	407374 <__multadd+0x40>
  4073b6:	bf00      	nop

004073b8 <__hi0bits>:
  4073b8:	0c02      	lsrs	r2, r0, #16
  4073ba:	0412      	lsls	r2, r2, #16
  4073bc:	4603      	mov	r3, r0
  4073be:	b9b2      	cbnz	r2, 4073ee <__hi0bits+0x36>
  4073c0:	0403      	lsls	r3, r0, #16
  4073c2:	2010      	movs	r0, #16
  4073c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4073c8:	bf04      	itt	eq
  4073ca:	021b      	lsleq	r3, r3, #8
  4073cc:	3008      	addeq	r0, #8
  4073ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4073d2:	bf04      	itt	eq
  4073d4:	011b      	lsleq	r3, r3, #4
  4073d6:	3004      	addeq	r0, #4
  4073d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4073dc:	bf04      	itt	eq
  4073de:	009b      	lsleq	r3, r3, #2
  4073e0:	3002      	addeq	r0, #2
  4073e2:	2b00      	cmp	r3, #0
  4073e4:	db02      	blt.n	4073ec <__hi0bits+0x34>
  4073e6:	005b      	lsls	r3, r3, #1
  4073e8:	d403      	bmi.n	4073f2 <__hi0bits+0x3a>
  4073ea:	2020      	movs	r0, #32
  4073ec:	4770      	bx	lr
  4073ee:	2000      	movs	r0, #0
  4073f0:	e7e8      	b.n	4073c4 <__hi0bits+0xc>
  4073f2:	3001      	adds	r0, #1
  4073f4:	4770      	bx	lr
  4073f6:	bf00      	nop

004073f8 <__lo0bits>:
  4073f8:	6803      	ldr	r3, [r0, #0]
  4073fa:	4601      	mov	r1, r0
  4073fc:	f013 0207 	ands.w	r2, r3, #7
  407400:	d007      	beq.n	407412 <__lo0bits+0x1a>
  407402:	07da      	lsls	r2, r3, #31
  407404:	d421      	bmi.n	40744a <__lo0bits+0x52>
  407406:	0798      	lsls	r0, r3, #30
  407408:	d421      	bmi.n	40744e <__lo0bits+0x56>
  40740a:	089b      	lsrs	r3, r3, #2
  40740c:	600b      	str	r3, [r1, #0]
  40740e:	2002      	movs	r0, #2
  407410:	4770      	bx	lr
  407412:	b298      	uxth	r0, r3
  407414:	b198      	cbz	r0, 40743e <__lo0bits+0x46>
  407416:	4610      	mov	r0, r2
  407418:	f013 0fff 	tst.w	r3, #255	; 0xff
  40741c:	bf04      	itt	eq
  40741e:	0a1b      	lsreq	r3, r3, #8
  407420:	3008      	addeq	r0, #8
  407422:	071a      	lsls	r2, r3, #28
  407424:	bf04      	itt	eq
  407426:	091b      	lsreq	r3, r3, #4
  407428:	3004      	addeq	r0, #4
  40742a:	079a      	lsls	r2, r3, #30
  40742c:	bf04      	itt	eq
  40742e:	089b      	lsreq	r3, r3, #2
  407430:	3002      	addeq	r0, #2
  407432:	07da      	lsls	r2, r3, #31
  407434:	d407      	bmi.n	407446 <__lo0bits+0x4e>
  407436:	085b      	lsrs	r3, r3, #1
  407438:	d104      	bne.n	407444 <__lo0bits+0x4c>
  40743a:	2020      	movs	r0, #32
  40743c:	4770      	bx	lr
  40743e:	0c1b      	lsrs	r3, r3, #16
  407440:	2010      	movs	r0, #16
  407442:	e7e9      	b.n	407418 <__lo0bits+0x20>
  407444:	3001      	adds	r0, #1
  407446:	600b      	str	r3, [r1, #0]
  407448:	4770      	bx	lr
  40744a:	2000      	movs	r0, #0
  40744c:	4770      	bx	lr
  40744e:	085b      	lsrs	r3, r3, #1
  407450:	600b      	str	r3, [r1, #0]
  407452:	2001      	movs	r0, #1
  407454:	4770      	bx	lr
  407456:	bf00      	nop

00407458 <__i2b>:
  407458:	b510      	push	{r4, lr}
  40745a:	460c      	mov	r4, r1
  40745c:	2101      	movs	r1, #1
  40745e:	f7ff ff39 	bl	4072d4 <_Balloc>
  407462:	2201      	movs	r2, #1
  407464:	6144      	str	r4, [r0, #20]
  407466:	6102      	str	r2, [r0, #16]
  407468:	bd10      	pop	{r4, pc}
  40746a:	bf00      	nop

0040746c <__multiply>:
  40746c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407470:	690c      	ldr	r4, [r1, #16]
  407472:	6915      	ldr	r5, [r2, #16]
  407474:	b083      	sub	sp, #12
  407476:	42ac      	cmp	r4, r5
  407478:	468b      	mov	fp, r1
  40747a:	4616      	mov	r6, r2
  40747c:	da04      	bge.n	407488 <__multiply+0x1c>
  40747e:	4622      	mov	r2, r4
  407480:	46b3      	mov	fp, r6
  407482:	462c      	mov	r4, r5
  407484:	460e      	mov	r6, r1
  407486:	4615      	mov	r5, r2
  407488:	f8db 3008 	ldr.w	r3, [fp, #8]
  40748c:	eb04 0805 	add.w	r8, r4, r5
  407490:	f8db 1004 	ldr.w	r1, [fp, #4]
  407494:	4598      	cmp	r8, r3
  407496:	bfc8      	it	gt
  407498:	3101      	addgt	r1, #1
  40749a:	f7ff ff1b 	bl	4072d4 <_Balloc>
  40749e:	f100 0914 	add.w	r9, r0, #20
  4074a2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4074a6:	45d1      	cmp	r9, sl
  4074a8:	9000      	str	r0, [sp, #0]
  4074aa:	d205      	bcs.n	4074b8 <__multiply+0x4c>
  4074ac:	464b      	mov	r3, r9
  4074ae:	2100      	movs	r1, #0
  4074b0:	f843 1b04 	str.w	r1, [r3], #4
  4074b4:	459a      	cmp	sl, r3
  4074b6:	d8fb      	bhi.n	4074b0 <__multiply+0x44>
  4074b8:	f106 0c14 	add.w	ip, r6, #20
  4074bc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  4074c0:	f10b 0b14 	add.w	fp, fp, #20
  4074c4:	459c      	cmp	ip, r3
  4074c6:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  4074ca:	d24b      	bcs.n	407564 <__multiply+0xf8>
  4074cc:	f8cd a004 	str.w	sl, [sp, #4]
  4074d0:	469a      	mov	sl, r3
  4074d2:	f8dc 5000 	ldr.w	r5, [ip]
  4074d6:	b2af      	uxth	r7, r5
  4074d8:	b1e7      	cbz	r7, 407514 <__multiply+0xa8>
  4074da:	464d      	mov	r5, r9
  4074dc:	465e      	mov	r6, fp
  4074de:	2100      	movs	r1, #0
  4074e0:	f856 2b04 	ldr.w	r2, [r6], #4
  4074e4:	6828      	ldr	r0, [r5, #0]
  4074e6:	b293      	uxth	r3, r2
  4074e8:	b284      	uxth	r4, r0
  4074ea:	0c12      	lsrs	r2, r2, #16
  4074ec:	fb07 4303 	mla	r3, r7, r3, r4
  4074f0:	0c00      	lsrs	r0, r0, #16
  4074f2:	fb07 0202 	mla	r2, r7, r2, r0
  4074f6:	440b      	add	r3, r1
  4074f8:	eb02 4113 	add.w	r1, r2, r3, lsr #16
  4074fc:	b29b      	uxth	r3, r3
  4074fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407502:	45b6      	cmp	lr, r6
  407504:	f845 3b04 	str.w	r3, [r5], #4
  407508:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40750c:	d8e8      	bhi.n	4074e0 <__multiply+0x74>
  40750e:	6029      	str	r1, [r5, #0]
  407510:	f8dc 5000 	ldr.w	r5, [ip]
  407514:	0c2d      	lsrs	r5, r5, #16
  407516:	d01d      	beq.n	407554 <__multiply+0xe8>
  407518:	f8d9 3000 	ldr.w	r3, [r9]
  40751c:	4648      	mov	r0, r9
  40751e:	461c      	mov	r4, r3
  407520:	4659      	mov	r1, fp
  407522:	2200      	movs	r2, #0
  407524:	880e      	ldrh	r6, [r1, #0]
  407526:	0c24      	lsrs	r4, r4, #16
  407528:	fb05 4406 	mla	r4, r5, r6, r4
  40752c:	b29b      	uxth	r3, r3
  40752e:	4422      	add	r2, r4
  407530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407534:	f840 3b04 	str.w	r3, [r0], #4
  407538:	f851 3b04 	ldr.w	r3, [r1], #4
  40753c:	6804      	ldr	r4, [r0, #0]
  40753e:	0c1b      	lsrs	r3, r3, #16
  407540:	b2a6      	uxth	r6, r4
  407542:	fb05 6303 	mla	r3, r5, r3, r6
  407546:	458e      	cmp	lr, r1
  407548:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40754c:	ea4f 4213 	mov.w	r2, r3, lsr #16
  407550:	d8e8      	bhi.n	407524 <__multiply+0xb8>
  407552:	6003      	str	r3, [r0, #0]
  407554:	f10c 0c04 	add.w	ip, ip, #4
  407558:	45e2      	cmp	sl, ip
  40755a:	f109 0904 	add.w	r9, r9, #4
  40755e:	d8b8      	bhi.n	4074d2 <__multiply+0x66>
  407560:	f8dd a004 	ldr.w	sl, [sp, #4]
  407564:	f1b8 0f00 	cmp.w	r8, #0
  407568:	dd0b      	ble.n	407582 <__multiply+0x116>
  40756a:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40756e:	f1aa 0a04 	sub.w	sl, sl, #4
  407572:	b11b      	cbz	r3, 40757c <__multiply+0x110>
  407574:	e005      	b.n	407582 <__multiply+0x116>
  407576:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40757a:	b913      	cbnz	r3, 407582 <__multiply+0x116>
  40757c:	f1b8 0801 	subs.w	r8, r8, #1
  407580:	d1f9      	bne.n	407576 <__multiply+0x10a>
  407582:	9800      	ldr	r0, [sp, #0]
  407584:	f8c0 8010 	str.w	r8, [r0, #16]
  407588:	b003      	add	sp, #12
  40758a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40758e:	bf00      	nop

00407590 <__pow5mult>:
  407590:	f012 0303 	ands.w	r3, r2, #3
  407594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407598:	4614      	mov	r4, r2
  40759a:	4607      	mov	r7, r0
  40759c:	d12e      	bne.n	4075fc <__pow5mult+0x6c>
  40759e:	460d      	mov	r5, r1
  4075a0:	10a4      	asrs	r4, r4, #2
  4075a2:	d01c      	beq.n	4075de <__pow5mult+0x4e>
  4075a4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4075a6:	b396      	cbz	r6, 40760e <__pow5mult+0x7e>
  4075a8:	07e3      	lsls	r3, r4, #31
  4075aa:	f04f 0800 	mov.w	r8, #0
  4075ae:	d406      	bmi.n	4075be <__pow5mult+0x2e>
  4075b0:	1064      	asrs	r4, r4, #1
  4075b2:	d014      	beq.n	4075de <__pow5mult+0x4e>
  4075b4:	6830      	ldr	r0, [r6, #0]
  4075b6:	b1a8      	cbz	r0, 4075e4 <__pow5mult+0x54>
  4075b8:	4606      	mov	r6, r0
  4075ba:	07e3      	lsls	r3, r4, #31
  4075bc:	d5f8      	bpl.n	4075b0 <__pow5mult+0x20>
  4075be:	4632      	mov	r2, r6
  4075c0:	4629      	mov	r1, r5
  4075c2:	4638      	mov	r0, r7
  4075c4:	f7ff ff52 	bl	40746c <__multiply>
  4075c8:	b1b5      	cbz	r5, 4075f8 <__pow5mult+0x68>
  4075ca:	686a      	ldr	r2, [r5, #4]
  4075cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4075ce:	1064      	asrs	r4, r4, #1
  4075d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4075d4:	6029      	str	r1, [r5, #0]
  4075d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4075da:	4605      	mov	r5, r0
  4075dc:	d1ea      	bne.n	4075b4 <__pow5mult+0x24>
  4075de:	4628      	mov	r0, r5
  4075e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4075e4:	4632      	mov	r2, r6
  4075e6:	4631      	mov	r1, r6
  4075e8:	4638      	mov	r0, r7
  4075ea:	f7ff ff3f 	bl	40746c <__multiply>
  4075ee:	6030      	str	r0, [r6, #0]
  4075f0:	f8c0 8000 	str.w	r8, [r0]
  4075f4:	4606      	mov	r6, r0
  4075f6:	e7e0      	b.n	4075ba <__pow5mult+0x2a>
  4075f8:	4605      	mov	r5, r0
  4075fa:	e7d9      	b.n	4075b0 <__pow5mult+0x20>
  4075fc:	4a0b      	ldr	r2, [pc, #44]	; (40762c <__pow5mult+0x9c>)
  4075fe:	3b01      	subs	r3, #1
  407600:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  407604:	2300      	movs	r3, #0
  407606:	f7ff fe95 	bl	407334 <__multadd>
  40760a:	4605      	mov	r5, r0
  40760c:	e7c8      	b.n	4075a0 <__pow5mult+0x10>
  40760e:	2101      	movs	r1, #1
  407610:	4638      	mov	r0, r7
  407612:	f7ff fe5f 	bl	4072d4 <_Balloc>
  407616:	f240 2171 	movw	r1, #625	; 0x271
  40761a:	2201      	movs	r2, #1
  40761c:	2300      	movs	r3, #0
  40761e:	6141      	str	r1, [r0, #20]
  407620:	6102      	str	r2, [r0, #16]
  407622:	4606      	mov	r6, r0
  407624:	64b8      	str	r0, [r7, #72]	; 0x48
  407626:	6003      	str	r3, [r0, #0]
  407628:	e7be      	b.n	4075a8 <__pow5mult+0x18>
  40762a:	bf00      	nop
  40762c:	00408b58 	.word	0x00408b58

00407630 <__lshift>:
  407630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407634:	690b      	ldr	r3, [r1, #16]
  407636:	1154      	asrs	r4, r2, #5
  407638:	eb04 0803 	add.w	r8, r4, r3
  40763c:	688b      	ldr	r3, [r1, #8]
  40763e:	f108 0501 	add.w	r5, r8, #1
  407642:	429d      	cmp	r5, r3
  407644:	460e      	mov	r6, r1
  407646:	4691      	mov	r9, r2
  407648:	4607      	mov	r7, r0
  40764a:	6849      	ldr	r1, [r1, #4]
  40764c:	dd04      	ble.n	407658 <__lshift+0x28>
  40764e:	005b      	lsls	r3, r3, #1
  407650:	429d      	cmp	r5, r3
  407652:	f101 0101 	add.w	r1, r1, #1
  407656:	dcfa      	bgt.n	40764e <__lshift+0x1e>
  407658:	4638      	mov	r0, r7
  40765a:	f7ff fe3b 	bl	4072d4 <_Balloc>
  40765e:	2c00      	cmp	r4, #0
  407660:	f100 0314 	add.w	r3, r0, #20
  407664:	dd06      	ble.n	407674 <__lshift+0x44>
  407666:	2100      	movs	r1, #0
  407668:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40766c:	f843 1b04 	str.w	r1, [r3], #4
  407670:	429a      	cmp	r2, r3
  407672:	d1fb      	bne.n	40766c <__lshift+0x3c>
  407674:	6934      	ldr	r4, [r6, #16]
  407676:	f106 0114 	add.w	r1, r6, #20
  40767a:	f019 091f 	ands.w	r9, r9, #31
  40767e:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407682:	d01d      	beq.n	4076c0 <__lshift+0x90>
  407684:	2200      	movs	r2, #0
  407686:	f1c9 0c20 	rsb	ip, r9, #32
  40768a:	680c      	ldr	r4, [r1, #0]
  40768c:	fa04 f409 	lsl.w	r4, r4, r9
  407690:	4314      	orrs	r4, r2
  407692:	f843 4b04 	str.w	r4, [r3], #4
  407696:	f851 2b04 	ldr.w	r2, [r1], #4
  40769a:	458e      	cmp	lr, r1
  40769c:	fa22 f20c 	lsr.w	r2, r2, ip
  4076a0:	d8f3      	bhi.n	40768a <__lshift+0x5a>
  4076a2:	601a      	str	r2, [r3, #0]
  4076a4:	b10a      	cbz	r2, 4076aa <__lshift+0x7a>
  4076a6:	f108 0502 	add.w	r5, r8, #2
  4076aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4076ac:	6872      	ldr	r2, [r6, #4]
  4076ae:	3d01      	subs	r5, #1
  4076b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4076b4:	6105      	str	r5, [r0, #16]
  4076b6:	6031      	str	r1, [r6, #0]
  4076b8:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4076bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4076c0:	3b04      	subs	r3, #4
  4076c2:	f851 2b04 	ldr.w	r2, [r1], #4
  4076c6:	458e      	cmp	lr, r1
  4076c8:	f843 2f04 	str.w	r2, [r3, #4]!
  4076cc:	d8f9      	bhi.n	4076c2 <__lshift+0x92>
  4076ce:	e7ec      	b.n	4076aa <__lshift+0x7a>

004076d0 <__mcmp>:
  4076d0:	b430      	push	{r4, r5}
  4076d2:	690b      	ldr	r3, [r1, #16]
  4076d4:	4605      	mov	r5, r0
  4076d6:	6900      	ldr	r0, [r0, #16]
  4076d8:	1ac0      	subs	r0, r0, r3
  4076da:	d10f      	bne.n	4076fc <__mcmp+0x2c>
  4076dc:	009b      	lsls	r3, r3, #2
  4076de:	3514      	adds	r5, #20
  4076e0:	3114      	adds	r1, #20
  4076e2:	4419      	add	r1, r3
  4076e4:	442b      	add	r3, r5
  4076e6:	e001      	b.n	4076ec <__mcmp+0x1c>
  4076e8:	429d      	cmp	r5, r3
  4076ea:	d207      	bcs.n	4076fc <__mcmp+0x2c>
  4076ec:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4076f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4076f4:	4294      	cmp	r4, r2
  4076f6:	d0f7      	beq.n	4076e8 <__mcmp+0x18>
  4076f8:	d302      	bcc.n	407700 <__mcmp+0x30>
  4076fa:	2001      	movs	r0, #1
  4076fc:	bc30      	pop	{r4, r5}
  4076fe:	4770      	bx	lr
  407700:	f04f 30ff 	mov.w	r0, #4294967295
  407704:	e7fa      	b.n	4076fc <__mcmp+0x2c>
  407706:	bf00      	nop

00407708 <__mdiff>:
  407708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40770c:	690c      	ldr	r4, [r1, #16]
  40770e:	4689      	mov	r9, r1
  407710:	6911      	ldr	r1, [r2, #16]
  407712:	4692      	mov	sl, r2
  407714:	1a64      	subs	r4, r4, r1
  407716:	2c00      	cmp	r4, #0
  407718:	d117      	bne.n	40774a <__mdiff+0x42>
  40771a:	0089      	lsls	r1, r1, #2
  40771c:	f109 0714 	add.w	r7, r9, #20
  407720:	f102 0614 	add.w	r6, r2, #20
  407724:	187b      	adds	r3, r7, r1
  407726:	4431      	add	r1, r6
  407728:	e001      	b.n	40772e <__mdiff+0x26>
  40772a:	429f      	cmp	r7, r3
  40772c:	d265      	bcs.n	4077fa <__mdiff+0xf2>
  40772e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
  407732:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407736:	4295      	cmp	r5, r2
  407738:	d0f7      	beq.n	40772a <__mdiff+0x22>
  40773a:	d267      	bcs.n	40780c <__mdiff+0x104>
  40773c:	464b      	mov	r3, r9
  40773e:	46bb      	mov	fp, r7
  407740:	46d1      	mov	r9, sl
  407742:	4637      	mov	r7, r6
  407744:	469a      	mov	sl, r3
  407746:	2401      	movs	r4, #1
  407748:	e005      	b.n	407756 <__mdiff+0x4e>
  40774a:	db61      	blt.n	407810 <__mdiff+0x108>
  40774c:	2400      	movs	r4, #0
  40774e:	f109 0714 	add.w	r7, r9, #20
  407752:	f10a 0b14 	add.w	fp, sl, #20
  407756:	f8d9 1004 	ldr.w	r1, [r9, #4]
  40775a:	f7ff fdbb 	bl	4072d4 <_Balloc>
  40775e:	465d      	mov	r5, fp
  407760:	f04f 0800 	mov.w	r8, #0
  407764:	f8d9 e010 	ldr.w	lr, [r9, #16]
  407768:	f8da 3010 	ldr.w	r3, [sl, #16]
  40776c:	463e      	mov	r6, r7
  40776e:	60c4      	str	r4, [r0, #12]
  407770:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
  407774:	eb07 078e 	add.w	r7, r7, lr, lsl #2
  407778:	f100 0414 	add.w	r4, r0, #20
  40777c:	f856 9b04 	ldr.w	r9, [r6], #4
  407780:	f855 2b04 	ldr.w	r2, [r5], #4
  407784:	fa1f f389 	uxth.w	r3, r9
  407788:	4443      	add	r3, r8
  40778a:	fa1f f882 	uxth.w	r8, r2
  40778e:	0c12      	lsrs	r2, r2, #16
  407790:	eba3 0308 	sub.w	r3, r3, r8
  407794:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  407798:	eb02 4223 	add.w	r2, r2, r3, asr #16
  40779c:	b29b      	uxth	r3, r3
  40779e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4077a2:	45ac      	cmp	ip, r5
  4077a4:	f844 3b04 	str.w	r3, [r4], #4
  4077a8:	ea4f 4822 	mov.w	r8, r2, asr #16
  4077ac:	d8e6      	bhi.n	40777c <__mdiff+0x74>
  4077ae:	42b7      	cmp	r7, r6
  4077b0:	d917      	bls.n	4077e2 <__mdiff+0xda>
  4077b2:	46a4      	mov	ip, r4
  4077b4:	4635      	mov	r5, r6
  4077b6:	f855 3b04 	ldr.w	r3, [r5], #4
  4077ba:	b299      	uxth	r1, r3
  4077bc:	4441      	add	r1, r8
  4077be:	140a      	asrs	r2, r1, #16
  4077c0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
  4077c4:	b289      	uxth	r1, r1
  4077c6:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
  4077ca:	42af      	cmp	r7, r5
  4077cc:	f84c 3b04 	str.w	r3, [ip], #4
  4077d0:	ea4f 4822 	mov.w	r8, r2, asr #16
  4077d4:	d8ef      	bhi.n	4077b6 <__mdiff+0xae>
  4077d6:	43f6      	mvns	r6, r6
  4077d8:	4437      	add	r7, r6
  4077da:	f027 0703 	bic.w	r7, r7, #3
  4077de:	3704      	adds	r7, #4
  4077e0:	443c      	add	r4, r7
  4077e2:	3c04      	subs	r4, #4
  4077e4:	b92b      	cbnz	r3, 4077f2 <__mdiff+0xea>
  4077e6:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4077ea:	f10e 3eff 	add.w	lr, lr, #4294967295
  4077ee:	2b00      	cmp	r3, #0
  4077f0:	d0f9      	beq.n	4077e6 <__mdiff+0xde>
  4077f2:	f8c0 e010 	str.w	lr, [r0, #16]
  4077f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4077fa:	2100      	movs	r1, #0
  4077fc:	f7ff fd6a 	bl	4072d4 <_Balloc>
  407800:	2201      	movs	r2, #1
  407802:	2300      	movs	r3, #0
  407804:	6102      	str	r2, [r0, #16]
  407806:	6143      	str	r3, [r0, #20]
  407808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40780c:	46b3      	mov	fp, r6
  40780e:	e7a2      	b.n	407756 <__mdiff+0x4e>
  407810:	464b      	mov	r3, r9
  407812:	f109 0b14 	add.w	fp, r9, #20
  407816:	f102 0714 	add.w	r7, r2, #20
  40781a:	4691      	mov	r9, r2
  40781c:	2401      	movs	r4, #1
  40781e:	469a      	mov	sl, r3
  407820:	e799      	b.n	407756 <__mdiff+0x4e>
  407822:	bf00      	nop

00407824 <__d2b>:
  407824:	b5f0      	push	{r4, r5, r6, r7, lr}
  407826:	2101      	movs	r1, #1
  407828:	b083      	sub	sp, #12
  40782a:	461c      	mov	r4, r3
  40782c:	f3c3 550a 	ubfx	r5, r3, #20, #11
  407830:	4616      	mov	r6, r2
  407832:	f7ff fd4f 	bl	4072d4 <_Balloc>
  407836:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40783a:	4607      	mov	r7, r0
  40783c:	b10d      	cbz	r5, 407842 <__d2b+0x1e>
  40783e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407842:	9401      	str	r4, [sp, #4]
  407844:	b306      	cbz	r6, 407888 <__d2b+0x64>
  407846:	a802      	add	r0, sp, #8
  407848:	f840 6d08 	str.w	r6, [r0, #-8]!
  40784c:	f7ff fdd4 	bl	4073f8 <__lo0bits>
  407850:	2800      	cmp	r0, #0
  407852:	d130      	bne.n	4078b6 <__d2b+0x92>
  407854:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407858:	617a      	str	r2, [r7, #20]
  40785a:	2b00      	cmp	r3, #0
  40785c:	bf0c      	ite	eq
  40785e:	2101      	moveq	r1, #1
  407860:	2102      	movne	r1, #2
  407862:	61bb      	str	r3, [r7, #24]
  407864:	6139      	str	r1, [r7, #16]
  407866:	b9d5      	cbnz	r5, 40789e <__d2b+0x7a>
  407868:	9a08      	ldr	r2, [sp, #32]
  40786a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40786e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407872:	6010      	str	r0, [r2, #0]
  407874:	6918      	ldr	r0, [r3, #16]
  407876:	f7ff fd9f 	bl	4073b8 <__hi0bits>
  40787a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40787c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407880:	6018      	str	r0, [r3, #0]
  407882:	4638      	mov	r0, r7
  407884:	b003      	add	sp, #12
  407886:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407888:	a801      	add	r0, sp, #4
  40788a:	f7ff fdb5 	bl	4073f8 <__lo0bits>
  40788e:	2201      	movs	r2, #1
  407890:	9b01      	ldr	r3, [sp, #4]
  407892:	4611      	mov	r1, r2
  407894:	3020      	adds	r0, #32
  407896:	613a      	str	r2, [r7, #16]
  407898:	617b      	str	r3, [r7, #20]
  40789a:	2d00      	cmp	r5, #0
  40789c:	d0e4      	beq.n	407868 <__d2b+0x44>
  40789e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
  4078a2:	9a08      	ldr	r2, [sp, #32]
  4078a4:	4403      	add	r3, r0
  4078a6:	6013      	str	r3, [r2, #0]
  4078a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4078aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4078ae:	6018      	str	r0, [r3, #0]
  4078b0:	4638      	mov	r0, r7
  4078b2:	b003      	add	sp, #12
  4078b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4078b6:	9b01      	ldr	r3, [sp, #4]
  4078b8:	f1c0 0220 	rsb	r2, r0, #32
  4078bc:	9900      	ldr	r1, [sp, #0]
  4078be:	fa03 f202 	lsl.w	r2, r3, r2
  4078c2:	430a      	orrs	r2, r1
  4078c4:	40c3      	lsrs	r3, r0
  4078c6:	9301      	str	r3, [sp, #4]
  4078c8:	617a      	str	r2, [r7, #20]
  4078ca:	e7c6      	b.n	40785a <__d2b+0x36>

004078cc <_realloc_r>:
  4078cc:	2900      	cmp	r1, #0
  4078ce:	f000 8094 	beq.w	4079fa <_realloc_r+0x12e>
  4078d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4078d6:	460c      	mov	r4, r1
  4078d8:	4615      	mov	r5, r2
  4078da:	b083      	sub	sp, #12
  4078dc:	4680      	mov	r8, r0
  4078de:	f105 060b 	add.w	r6, r5, #11
  4078e2:	f7ff fceb 	bl	4072bc <__malloc_lock>
  4078e6:	f854 ec04 	ldr.w	lr, [r4, #-4]
  4078ea:	2e16      	cmp	r6, #22
  4078ec:	f02e 0703 	bic.w	r7, lr, #3
  4078f0:	f1a4 0908 	sub.w	r9, r4, #8
  4078f4:	d83c      	bhi.n	407970 <_realloc_r+0xa4>
  4078f6:	2210      	movs	r2, #16
  4078f8:	4616      	mov	r6, r2
  4078fa:	42b5      	cmp	r5, r6
  4078fc:	d83d      	bhi.n	40797a <_realloc_r+0xae>
  4078fe:	4297      	cmp	r7, r2
  407900:	da43      	bge.n	40798a <_realloc_r+0xbe>
  407902:	4bc6      	ldr	r3, [pc, #792]	; (407c1c <_realloc_r+0x350>)
  407904:	eb09 0007 	add.w	r0, r9, r7
  407908:	6899      	ldr	r1, [r3, #8]
  40790a:	4288      	cmp	r0, r1
  40790c:	f000 80c3 	beq.w	407a96 <_realloc_r+0x1ca>
  407910:	6843      	ldr	r3, [r0, #4]
  407912:	f023 0101 	bic.w	r1, r3, #1
  407916:	4401      	add	r1, r0
  407918:	6849      	ldr	r1, [r1, #4]
  40791a:	07c9      	lsls	r1, r1, #31
  40791c:	d54d      	bpl.n	4079ba <_realloc_r+0xee>
  40791e:	f01e 0f01 	tst.w	lr, #1
  407922:	f000 809b 	beq.w	407a5c <_realloc_r+0x190>
  407926:	4629      	mov	r1, r5
  407928:	4640      	mov	r0, r8
  40792a:	f7ff f965 	bl	406bf8 <_malloc_r>
  40792e:	4605      	mov	r5, r0
  407930:	2800      	cmp	r0, #0
  407932:	d03b      	beq.n	4079ac <_realloc_r+0xe0>
  407934:	f854 3c04 	ldr.w	r3, [r4, #-4]
  407938:	f1a0 0208 	sub.w	r2, r0, #8
  40793c:	f023 0301 	bic.w	r3, r3, #1
  407940:	444b      	add	r3, r9
  407942:	429a      	cmp	r2, r3
  407944:	f000 812b 	beq.w	407b9e <_realloc_r+0x2d2>
  407948:	1f3a      	subs	r2, r7, #4
  40794a:	2a24      	cmp	r2, #36	; 0x24
  40794c:	f200 8118 	bhi.w	407b80 <_realloc_r+0x2b4>
  407950:	2a13      	cmp	r2, #19
  407952:	f200 80eb 	bhi.w	407b2c <_realloc_r+0x260>
  407956:	4603      	mov	r3, r0
  407958:	4622      	mov	r2, r4
  40795a:	6811      	ldr	r1, [r2, #0]
  40795c:	6019      	str	r1, [r3, #0]
  40795e:	6851      	ldr	r1, [r2, #4]
  407960:	6059      	str	r1, [r3, #4]
  407962:	6892      	ldr	r2, [r2, #8]
  407964:	609a      	str	r2, [r3, #8]
  407966:	4621      	mov	r1, r4
  407968:	4640      	mov	r0, r8
  40796a:	f7ff f849 	bl	406a00 <_free_r>
  40796e:	e01d      	b.n	4079ac <_realloc_r+0xe0>
  407970:	f026 0607 	bic.w	r6, r6, #7
  407974:	2e00      	cmp	r6, #0
  407976:	4632      	mov	r2, r6
  407978:	dabf      	bge.n	4078fa <_realloc_r+0x2e>
  40797a:	2500      	movs	r5, #0
  40797c:	230c      	movs	r3, #12
  40797e:	4628      	mov	r0, r5
  407980:	f8c8 3000 	str.w	r3, [r8]
  407984:	b003      	add	sp, #12
  407986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40798a:	4625      	mov	r5, r4
  40798c:	1bbb      	subs	r3, r7, r6
  40798e:	2b0f      	cmp	r3, #15
  407990:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407994:	d81d      	bhi.n	4079d2 <_realloc_r+0x106>
  407996:	f002 0201 	and.w	r2, r2, #1
  40799a:	433a      	orrs	r2, r7
  40799c:	eb09 0107 	add.w	r1, r9, r7
  4079a0:	f8c9 2004 	str.w	r2, [r9, #4]
  4079a4:	684b      	ldr	r3, [r1, #4]
  4079a6:	f043 0301 	orr.w	r3, r3, #1
  4079aa:	604b      	str	r3, [r1, #4]
  4079ac:	4640      	mov	r0, r8
  4079ae:	f7ff fc8b 	bl	4072c8 <__malloc_unlock>
  4079b2:	4628      	mov	r0, r5
  4079b4:	b003      	add	sp, #12
  4079b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4079ba:	f023 0303 	bic.w	r3, r3, #3
  4079be:	18f9      	adds	r1, r7, r3
  4079c0:	4291      	cmp	r1, r2
  4079c2:	db1d      	blt.n	407a00 <_realloc_r+0x134>
  4079c4:	68c3      	ldr	r3, [r0, #12]
  4079c6:	6882      	ldr	r2, [r0, #8]
  4079c8:	4625      	mov	r5, r4
  4079ca:	60d3      	str	r3, [r2, #12]
  4079cc:	460f      	mov	r7, r1
  4079ce:	609a      	str	r2, [r3, #8]
  4079d0:	e7dc      	b.n	40798c <_realloc_r+0xc0>
  4079d2:	f002 0201 	and.w	r2, r2, #1
  4079d6:	eb09 0106 	add.w	r1, r9, r6
  4079da:	f043 0301 	orr.w	r3, r3, #1
  4079de:	4332      	orrs	r2, r6
  4079e0:	f8c9 2004 	str.w	r2, [r9, #4]
  4079e4:	444f      	add	r7, r9
  4079e6:	604b      	str	r3, [r1, #4]
  4079e8:	687b      	ldr	r3, [r7, #4]
  4079ea:	3108      	adds	r1, #8
  4079ec:	f043 0301 	orr.w	r3, r3, #1
  4079f0:	607b      	str	r3, [r7, #4]
  4079f2:	4640      	mov	r0, r8
  4079f4:	f7ff f804 	bl	406a00 <_free_r>
  4079f8:	e7d8      	b.n	4079ac <_realloc_r+0xe0>
  4079fa:	4611      	mov	r1, r2
  4079fc:	f7ff b8fc 	b.w	406bf8 <_malloc_r>
  407a00:	f01e 0f01 	tst.w	lr, #1
  407a04:	d18f      	bne.n	407926 <_realloc_r+0x5a>
  407a06:	f854 1c08 	ldr.w	r1, [r4, #-8]
  407a0a:	eba9 0a01 	sub.w	sl, r9, r1
  407a0e:	f8da 1004 	ldr.w	r1, [sl, #4]
  407a12:	f021 0103 	bic.w	r1, r1, #3
  407a16:	440b      	add	r3, r1
  407a18:	443b      	add	r3, r7
  407a1a:	4293      	cmp	r3, r2
  407a1c:	db26      	blt.n	407a6c <_realloc_r+0x1a0>
  407a1e:	4655      	mov	r5, sl
  407a20:	68c1      	ldr	r1, [r0, #12]
  407a22:	6880      	ldr	r0, [r0, #8]
  407a24:	1f3a      	subs	r2, r7, #4
  407a26:	60c1      	str	r1, [r0, #12]
  407a28:	6088      	str	r0, [r1, #8]
  407a2a:	f855 0f08 	ldr.w	r0, [r5, #8]!
  407a2e:	f8da 100c 	ldr.w	r1, [sl, #12]
  407a32:	2a24      	cmp	r2, #36	; 0x24
  407a34:	60c1      	str	r1, [r0, #12]
  407a36:	6088      	str	r0, [r1, #8]
  407a38:	d826      	bhi.n	407a88 <_realloc_r+0x1bc>
  407a3a:	2a13      	cmp	r2, #19
  407a3c:	f240 8081 	bls.w	407b42 <_realloc_r+0x276>
  407a40:	6821      	ldr	r1, [r4, #0]
  407a42:	2a1b      	cmp	r2, #27
  407a44:	f8ca 1008 	str.w	r1, [sl, #8]
  407a48:	6861      	ldr	r1, [r4, #4]
  407a4a:	f8ca 100c 	str.w	r1, [sl, #12]
  407a4e:	f200 80ad 	bhi.w	407bac <_realloc_r+0x2e0>
  407a52:	f104 0008 	add.w	r0, r4, #8
  407a56:	f10a 0210 	add.w	r2, sl, #16
  407a5a:	e074      	b.n	407b46 <_realloc_r+0x27a>
  407a5c:	f854 3c08 	ldr.w	r3, [r4, #-8]
  407a60:	eba9 0a03 	sub.w	sl, r9, r3
  407a64:	f8da 1004 	ldr.w	r1, [sl, #4]
  407a68:	f021 0103 	bic.w	r1, r1, #3
  407a6c:	187b      	adds	r3, r7, r1
  407a6e:	4293      	cmp	r3, r2
  407a70:	f6ff af59 	blt.w	407926 <_realloc_r+0x5a>
  407a74:	4655      	mov	r5, sl
  407a76:	f8da 100c 	ldr.w	r1, [sl, #12]
  407a7a:	f855 0f08 	ldr.w	r0, [r5, #8]!
  407a7e:	1f3a      	subs	r2, r7, #4
  407a80:	2a24      	cmp	r2, #36	; 0x24
  407a82:	60c1      	str	r1, [r0, #12]
  407a84:	6088      	str	r0, [r1, #8]
  407a86:	d9d8      	bls.n	407a3a <_realloc_r+0x16e>
  407a88:	4621      	mov	r1, r4
  407a8a:	4628      	mov	r0, r5
  407a8c:	461f      	mov	r7, r3
  407a8e:	46d1      	mov	r9, sl
  407a90:	f7ff fbb0 	bl	4071f4 <memmove>
  407a94:	e77a      	b.n	40798c <_realloc_r+0xc0>
  407a96:	6841      	ldr	r1, [r0, #4]
  407a98:	f106 0010 	add.w	r0, r6, #16
  407a9c:	f021 0b03 	bic.w	fp, r1, #3
  407aa0:	44bb      	add	fp, r7
  407aa2:	4583      	cmp	fp, r0
  407aa4:	da58      	bge.n	407b58 <_realloc_r+0x28c>
  407aa6:	f01e 0f01 	tst.w	lr, #1
  407aaa:	f47f af3c 	bne.w	407926 <_realloc_r+0x5a>
  407aae:	f854 1c08 	ldr.w	r1, [r4, #-8]
  407ab2:	eba9 0a01 	sub.w	sl, r9, r1
  407ab6:	f8da 1004 	ldr.w	r1, [sl, #4]
  407aba:	f021 0103 	bic.w	r1, r1, #3
  407abe:	448b      	add	fp, r1
  407ac0:	4558      	cmp	r0, fp
  407ac2:	dcd3      	bgt.n	407a6c <_realloc_r+0x1a0>
  407ac4:	4655      	mov	r5, sl
  407ac6:	f8da 100c 	ldr.w	r1, [sl, #12]
  407aca:	f855 0f08 	ldr.w	r0, [r5, #8]!
  407ace:	1f3a      	subs	r2, r7, #4
  407ad0:	2a24      	cmp	r2, #36	; 0x24
  407ad2:	60c1      	str	r1, [r0, #12]
  407ad4:	6088      	str	r0, [r1, #8]
  407ad6:	f200 808d 	bhi.w	407bf4 <_realloc_r+0x328>
  407ada:	2a13      	cmp	r2, #19
  407adc:	f240 8087 	bls.w	407bee <_realloc_r+0x322>
  407ae0:	6821      	ldr	r1, [r4, #0]
  407ae2:	2a1b      	cmp	r2, #27
  407ae4:	f8ca 1008 	str.w	r1, [sl, #8]
  407ae8:	6861      	ldr	r1, [r4, #4]
  407aea:	f8ca 100c 	str.w	r1, [sl, #12]
  407aee:	f200 8088 	bhi.w	407c02 <_realloc_r+0x336>
  407af2:	f104 0108 	add.w	r1, r4, #8
  407af6:	f10a 0210 	add.w	r2, sl, #16
  407afa:	6808      	ldr	r0, [r1, #0]
  407afc:	6010      	str	r0, [r2, #0]
  407afe:	6848      	ldr	r0, [r1, #4]
  407b00:	6050      	str	r0, [r2, #4]
  407b02:	6889      	ldr	r1, [r1, #8]
  407b04:	6091      	str	r1, [r2, #8]
  407b06:	ebab 0206 	sub.w	r2, fp, r6
  407b0a:	eb0a 0106 	add.w	r1, sl, r6
  407b0e:	f042 0201 	orr.w	r2, r2, #1
  407b12:	6099      	str	r1, [r3, #8]
  407b14:	604a      	str	r2, [r1, #4]
  407b16:	f8da 3004 	ldr.w	r3, [sl, #4]
  407b1a:	4640      	mov	r0, r8
  407b1c:	f003 0301 	and.w	r3, r3, #1
  407b20:	431e      	orrs	r6, r3
  407b22:	f8ca 6004 	str.w	r6, [sl, #4]
  407b26:	f7ff fbcf 	bl	4072c8 <__malloc_unlock>
  407b2a:	e742      	b.n	4079b2 <_realloc_r+0xe6>
  407b2c:	6823      	ldr	r3, [r4, #0]
  407b2e:	2a1b      	cmp	r2, #27
  407b30:	6003      	str	r3, [r0, #0]
  407b32:	6863      	ldr	r3, [r4, #4]
  407b34:	6043      	str	r3, [r0, #4]
  407b36:	d827      	bhi.n	407b88 <_realloc_r+0x2bc>
  407b38:	f100 0308 	add.w	r3, r0, #8
  407b3c:	f104 0208 	add.w	r2, r4, #8
  407b40:	e70b      	b.n	40795a <_realloc_r+0x8e>
  407b42:	4620      	mov	r0, r4
  407b44:	462a      	mov	r2, r5
  407b46:	6801      	ldr	r1, [r0, #0]
  407b48:	461f      	mov	r7, r3
  407b4a:	6011      	str	r1, [r2, #0]
  407b4c:	6841      	ldr	r1, [r0, #4]
  407b4e:	46d1      	mov	r9, sl
  407b50:	6051      	str	r1, [r2, #4]
  407b52:	6883      	ldr	r3, [r0, #8]
  407b54:	6093      	str	r3, [r2, #8]
  407b56:	e719      	b.n	40798c <_realloc_r+0xc0>
  407b58:	ebab 0b06 	sub.w	fp, fp, r6
  407b5c:	eb09 0106 	add.w	r1, r9, r6
  407b60:	f04b 0201 	orr.w	r2, fp, #1
  407b64:	6099      	str	r1, [r3, #8]
  407b66:	604a      	str	r2, [r1, #4]
  407b68:	f854 3c04 	ldr.w	r3, [r4, #-4]
  407b6c:	4640      	mov	r0, r8
  407b6e:	f003 0301 	and.w	r3, r3, #1
  407b72:	431e      	orrs	r6, r3
  407b74:	f844 6c04 	str.w	r6, [r4, #-4]
  407b78:	f7ff fba6 	bl	4072c8 <__malloc_unlock>
  407b7c:	4625      	mov	r5, r4
  407b7e:	e718      	b.n	4079b2 <_realloc_r+0xe6>
  407b80:	4621      	mov	r1, r4
  407b82:	f7ff fb37 	bl	4071f4 <memmove>
  407b86:	e6ee      	b.n	407966 <_realloc_r+0x9a>
  407b88:	68a3      	ldr	r3, [r4, #8]
  407b8a:	2a24      	cmp	r2, #36	; 0x24
  407b8c:	6083      	str	r3, [r0, #8]
  407b8e:	68e3      	ldr	r3, [r4, #12]
  407b90:	60c3      	str	r3, [r0, #12]
  407b92:	d018      	beq.n	407bc6 <_realloc_r+0x2fa>
  407b94:	f100 0310 	add.w	r3, r0, #16
  407b98:	f104 0210 	add.w	r2, r4, #16
  407b9c:	e6dd      	b.n	40795a <_realloc_r+0x8e>
  407b9e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407ba2:	4625      	mov	r5, r4
  407ba4:	f023 0303 	bic.w	r3, r3, #3
  407ba8:	441f      	add	r7, r3
  407baa:	e6ef      	b.n	40798c <_realloc_r+0xc0>
  407bac:	68a1      	ldr	r1, [r4, #8]
  407bae:	2a24      	cmp	r2, #36	; 0x24
  407bb0:	f8ca 1010 	str.w	r1, [sl, #16]
  407bb4:	68e1      	ldr	r1, [r4, #12]
  407bb6:	f8ca 1014 	str.w	r1, [sl, #20]
  407bba:	d00d      	beq.n	407bd8 <_realloc_r+0x30c>
  407bbc:	f104 0010 	add.w	r0, r4, #16
  407bc0:	f10a 0218 	add.w	r2, sl, #24
  407bc4:	e7bf      	b.n	407b46 <_realloc_r+0x27a>
  407bc6:	6922      	ldr	r2, [r4, #16]
  407bc8:	f100 0318 	add.w	r3, r0, #24
  407bcc:	6102      	str	r2, [r0, #16]
  407bce:	6961      	ldr	r1, [r4, #20]
  407bd0:	f104 0218 	add.w	r2, r4, #24
  407bd4:	6141      	str	r1, [r0, #20]
  407bd6:	e6c0      	b.n	40795a <_realloc_r+0x8e>
  407bd8:	6922      	ldr	r2, [r4, #16]
  407bda:	f104 0018 	add.w	r0, r4, #24
  407bde:	f8ca 2018 	str.w	r2, [sl, #24]
  407be2:	6961      	ldr	r1, [r4, #20]
  407be4:	f10a 0220 	add.w	r2, sl, #32
  407be8:	f8ca 101c 	str.w	r1, [sl, #28]
  407bec:	e7ab      	b.n	407b46 <_realloc_r+0x27a>
  407bee:	4621      	mov	r1, r4
  407bf0:	462a      	mov	r2, r5
  407bf2:	e782      	b.n	407afa <_realloc_r+0x22e>
  407bf4:	4621      	mov	r1, r4
  407bf6:	4628      	mov	r0, r5
  407bf8:	9301      	str	r3, [sp, #4]
  407bfa:	f7ff fafb 	bl	4071f4 <memmove>
  407bfe:	9b01      	ldr	r3, [sp, #4]
  407c00:	e781      	b.n	407b06 <_realloc_r+0x23a>
  407c02:	68a1      	ldr	r1, [r4, #8]
  407c04:	2a24      	cmp	r2, #36	; 0x24
  407c06:	f8ca 1010 	str.w	r1, [sl, #16]
  407c0a:	68e1      	ldr	r1, [r4, #12]
  407c0c:	f8ca 1014 	str.w	r1, [sl, #20]
  407c10:	d006      	beq.n	407c20 <_realloc_r+0x354>
  407c12:	f104 0110 	add.w	r1, r4, #16
  407c16:	f10a 0218 	add.w	r2, sl, #24
  407c1a:	e76e      	b.n	407afa <_realloc_r+0x22e>
  407c1c:	20000850 	.word	0x20000850
  407c20:	6922      	ldr	r2, [r4, #16]
  407c22:	f104 0118 	add.w	r1, r4, #24
  407c26:	f8ca 2018 	str.w	r2, [sl, #24]
  407c2a:	6960      	ldr	r0, [r4, #20]
  407c2c:	f10a 0220 	add.w	r2, sl, #32
  407c30:	f8ca 001c 	str.w	r0, [sl, #28]
  407c34:	e761      	b.n	407afa <_realloc_r+0x22e>
  407c36:	bf00      	nop

00407c38 <_sbrk_r>:
  407c38:	b538      	push	{r3, r4, r5, lr}
  407c3a:	2300      	movs	r3, #0
  407c3c:	4c06      	ldr	r4, [pc, #24]	; (407c58 <_sbrk_r+0x20>)
  407c3e:	4605      	mov	r5, r0
  407c40:	4608      	mov	r0, r1
  407c42:	6023      	str	r3, [r4, #0]
  407c44:	f7fb ff92 	bl	403b6c <_sbrk>
  407c48:	1c43      	adds	r3, r0, #1
  407c4a:	d000      	beq.n	407c4e <_sbrk_r+0x16>
  407c4c:	bd38      	pop	{r3, r4, r5, pc}
  407c4e:	6823      	ldr	r3, [r4, #0]
  407c50:	2b00      	cmp	r3, #0
  407c52:	d0fb      	beq.n	407c4c <_sbrk_r+0x14>
  407c54:	602b      	str	r3, [r5, #0]
  407c56:	bd38      	pop	{r3, r4, r5, pc}
  407c58:	20002b6c 	.word	0x20002b6c

00407c5c <__ssprint_r>:
  407c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407c60:	6893      	ldr	r3, [r2, #8]
  407c62:	b083      	sub	sp, #12
  407c64:	4690      	mov	r8, r2
  407c66:	2b00      	cmp	r3, #0
  407c68:	d070      	beq.n	407d4c <__ssprint_r+0xf0>
  407c6a:	4682      	mov	sl, r0
  407c6c:	460c      	mov	r4, r1
  407c6e:	6817      	ldr	r7, [r2, #0]
  407c70:	688d      	ldr	r5, [r1, #8]
  407c72:	6808      	ldr	r0, [r1, #0]
  407c74:	e042      	b.n	407cfc <__ssprint_r+0xa0>
  407c76:	89a3      	ldrh	r3, [r4, #12]
  407c78:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407c7c:	d02e      	beq.n	407cdc <__ssprint_r+0x80>
  407c7e:	6965      	ldr	r5, [r4, #20]
  407c80:	6921      	ldr	r1, [r4, #16]
  407c82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  407c86:	eba0 0b01 	sub.w	fp, r0, r1
  407c8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  407c8e:	f10b 0001 	add.w	r0, fp, #1
  407c92:	106d      	asrs	r5, r5, #1
  407c94:	4430      	add	r0, r6
  407c96:	42a8      	cmp	r0, r5
  407c98:	462a      	mov	r2, r5
  407c9a:	bf84      	itt	hi
  407c9c:	4605      	movhi	r5, r0
  407c9e:	462a      	movhi	r2, r5
  407ca0:	055b      	lsls	r3, r3, #21
  407ca2:	d538      	bpl.n	407d16 <__ssprint_r+0xba>
  407ca4:	4611      	mov	r1, r2
  407ca6:	4650      	mov	r0, sl
  407ca8:	f7fe ffa6 	bl	406bf8 <_malloc_r>
  407cac:	2800      	cmp	r0, #0
  407cae:	d03c      	beq.n	407d2a <__ssprint_r+0xce>
  407cb0:	465a      	mov	r2, fp
  407cb2:	6921      	ldr	r1, [r4, #16]
  407cb4:	9001      	str	r0, [sp, #4]
  407cb6:	f7fc f9f7 	bl	4040a8 <memcpy>
  407cba:	89a2      	ldrh	r2, [r4, #12]
  407cbc:	9b01      	ldr	r3, [sp, #4]
  407cbe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  407cc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  407cc6:	81a2      	strh	r2, [r4, #12]
  407cc8:	eba5 020b 	sub.w	r2, r5, fp
  407ccc:	eb03 000b 	add.w	r0, r3, fp
  407cd0:	6165      	str	r5, [r4, #20]
  407cd2:	46b3      	mov	fp, r6
  407cd4:	4635      	mov	r5, r6
  407cd6:	6123      	str	r3, [r4, #16]
  407cd8:	6020      	str	r0, [r4, #0]
  407cda:	60a2      	str	r2, [r4, #8]
  407cdc:	465a      	mov	r2, fp
  407cde:	4649      	mov	r1, r9
  407ce0:	f7ff fa88 	bl	4071f4 <memmove>
  407ce4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  407ce8:	68a2      	ldr	r2, [r4, #8]
  407cea:	6820      	ldr	r0, [r4, #0]
  407cec:	1b55      	subs	r5, r2, r5
  407cee:	4458      	add	r0, fp
  407cf0:	1b9e      	subs	r6, r3, r6
  407cf2:	60a5      	str	r5, [r4, #8]
  407cf4:	6020      	str	r0, [r4, #0]
  407cf6:	f8c8 6008 	str.w	r6, [r8, #8]
  407cfa:	b33e      	cbz	r6, 407d4c <__ssprint_r+0xf0>
  407cfc:	687e      	ldr	r6, [r7, #4]
  407cfe:	463b      	mov	r3, r7
  407d00:	3708      	adds	r7, #8
  407d02:	2e00      	cmp	r6, #0
  407d04:	d0fa      	beq.n	407cfc <__ssprint_r+0xa0>
  407d06:	42ae      	cmp	r6, r5
  407d08:	f8d3 9000 	ldr.w	r9, [r3]
  407d0c:	46ab      	mov	fp, r5
  407d0e:	d2b2      	bcs.n	407c76 <__ssprint_r+0x1a>
  407d10:	4635      	mov	r5, r6
  407d12:	46b3      	mov	fp, r6
  407d14:	e7e2      	b.n	407cdc <__ssprint_r+0x80>
  407d16:	4650      	mov	r0, sl
  407d18:	f7ff fdd8 	bl	4078cc <_realloc_r>
  407d1c:	4603      	mov	r3, r0
  407d1e:	2800      	cmp	r0, #0
  407d20:	d1d2      	bne.n	407cc8 <__ssprint_r+0x6c>
  407d22:	6921      	ldr	r1, [r4, #16]
  407d24:	4650      	mov	r0, sl
  407d26:	f7fe fe6b 	bl	406a00 <_free_r>
  407d2a:	230c      	movs	r3, #12
  407d2c:	2200      	movs	r2, #0
  407d2e:	f04f 30ff 	mov.w	r0, #4294967295
  407d32:	f8ca 3000 	str.w	r3, [sl]
  407d36:	89a3      	ldrh	r3, [r4, #12]
  407d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407d3c:	81a3      	strh	r3, [r4, #12]
  407d3e:	f8c8 2008 	str.w	r2, [r8, #8]
  407d42:	f8c8 2004 	str.w	r2, [r8, #4]
  407d46:	b003      	add	sp, #12
  407d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d4c:	2000      	movs	r0, #0
  407d4e:	f8c8 0004 	str.w	r0, [r8, #4]
  407d52:	b003      	add	sp, #12
  407d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407d58 <__ascii_wctomb>:
  407d58:	b119      	cbz	r1, 407d62 <__ascii_wctomb+0xa>
  407d5a:	2aff      	cmp	r2, #255	; 0xff
  407d5c:	d803      	bhi.n	407d66 <__ascii_wctomb+0xe>
  407d5e:	700a      	strb	r2, [r1, #0]
  407d60:	2101      	movs	r1, #1
  407d62:	4608      	mov	r0, r1
  407d64:	4770      	bx	lr
  407d66:	238a      	movs	r3, #138	; 0x8a
  407d68:	f04f 31ff 	mov.w	r1, #4294967295
  407d6c:	6003      	str	r3, [r0, #0]
  407d6e:	e7f8      	b.n	407d62 <__ascii_wctomb+0xa>

00407d70 <__register_exitproc>:
  407d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407d74:	4d2c      	ldr	r5, [pc, #176]	; (407e28 <__register_exitproc+0xb8>)
  407d76:	4606      	mov	r6, r0
  407d78:	6828      	ldr	r0, [r5, #0]
  407d7a:	4698      	mov	r8, r3
  407d7c:	460f      	mov	r7, r1
  407d7e:	4691      	mov	r9, r2
  407d80:	f7fe ff36 	bl	406bf0 <__retarget_lock_acquire_recursive>
  407d84:	4b29      	ldr	r3, [pc, #164]	; (407e2c <__register_exitproc+0xbc>)
  407d86:	681c      	ldr	r4, [r3, #0]
  407d88:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407d8c:	2b00      	cmp	r3, #0
  407d8e:	d03e      	beq.n	407e0e <__register_exitproc+0x9e>
  407d90:	685a      	ldr	r2, [r3, #4]
  407d92:	2a1f      	cmp	r2, #31
  407d94:	dc1c      	bgt.n	407dd0 <__register_exitproc+0x60>
  407d96:	f102 0e01 	add.w	lr, r2, #1
  407d9a:	b176      	cbz	r6, 407dba <__register_exitproc+0x4a>
  407d9c:	2101      	movs	r1, #1
  407d9e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
  407da2:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
  407da6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407daa:	4091      	lsls	r1, r2
  407dac:	4308      	orrs	r0, r1
  407dae:	2e02      	cmp	r6, #2
  407db0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  407db4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
  407db8:	d023      	beq.n	407e02 <__register_exitproc+0x92>
  407dba:	3202      	adds	r2, #2
  407dbc:	f8c3 e004 	str.w	lr, [r3, #4]
  407dc0:	6828      	ldr	r0, [r5, #0]
  407dc2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  407dc6:	f7fe ff15 	bl	406bf4 <__retarget_lock_release_recursive>
  407dca:	2000      	movs	r0, #0
  407dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407dd0:	4b17      	ldr	r3, [pc, #92]	; (407e30 <__register_exitproc+0xc0>)
  407dd2:	b30b      	cbz	r3, 407e18 <__register_exitproc+0xa8>
  407dd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407dd8:	f3af 8000 	nop.w
  407ddc:	4603      	mov	r3, r0
  407dde:	b1d8      	cbz	r0, 407e18 <__register_exitproc+0xa8>
  407de0:	2000      	movs	r0, #0
  407de2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  407de6:	f04f 0e01 	mov.w	lr, #1
  407dea:	6058      	str	r0, [r3, #4]
  407dec:	6019      	str	r1, [r3, #0]
  407dee:	4602      	mov	r2, r0
  407df0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  407df4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  407df8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
  407dfc:	2e00      	cmp	r6, #0
  407dfe:	d0dc      	beq.n	407dba <__register_exitproc+0x4a>
  407e00:	e7cc      	b.n	407d9c <__register_exitproc+0x2c>
  407e02:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
  407e06:	4301      	orrs	r1, r0
  407e08:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
  407e0c:	e7d5      	b.n	407dba <__register_exitproc+0x4a>
  407e0e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  407e12:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  407e16:	e7bb      	b.n	407d90 <__register_exitproc+0x20>
  407e18:	6828      	ldr	r0, [r5, #0]
  407e1a:	f7fe feeb 	bl	406bf4 <__retarget_lock_release_recursive>
  407e1e:	f04f 30ff 	mov.w	r0, #4294967295
  407e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407e26:	bf00      	nop
  407e28:	200006e0 	.word	0x200006e0
  407e2c:	004089e0 	.word	0x004089e0
  407e30:	00000000 	.word	0x00000000

00407e34 <_calloc_r>:
  407e34:	b510      	push	{r4, lr}
  407e36:	fb02 f101 	mul.w	r1, r2, r1
  407e3a:	f7fe fedd 	bl	406bf8 <_malloc_r>
  407e3e:	4604      	mov	r4, r0
  407e40:	b1d8      	cbz	r0, 407e7a <_calloc_r+0x46>
  407e42:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407e46:	f022 0203 	bic.w	r2, r2, #3
  407e4a:	3a04      	subs	r2, #4
  407e4c:	2a24      	cmp	r2, #36	; 0x24
  407e4e:	d818      	bhi.n	407e82 <_calloc_r+0x4e>
  407e50:	2a13      	cmp	r2, #19
  407e52:	d914      	bls.n	407e7e <_calloc_r+0x4a>
  407e54:	2300      	movs	r3, #0
  407e56:	2a1b      	cmp	r2, #27
  407e58:	6003      	str	r3, [r0, #0]
  407e5a:	6043      	str	r3, [r0, #4]
  407e5c:	d916      	bls.n	407e8c <_calloc_r+0x58>
  407e5e:	2a24      	cmp	r2, #36	; 0x24
  407e60:	6083      	str	r3, [r0, #8]
  407e62:	60c3      	str	r3, [r0, #12]
  407e64:	bf11      	iteee	ne
  407e66:	f100 0210 	addne.w	r2, r0, #16
  407e6a:	6103      	streq	r3, [r0, #16]
  407e6c:	6143      	streq	r3, [r0, #20]
  407e6e:	f100 0218 	addeq.w	r2, r0, #24
  407e72:	2300      	movs	r3, #0
  407e74:	6013      	str	r3, [r2, #0]
  407e76:	6053      	str	r3, [r2, #4]
  407e78:	6093      	str	r3, [r2, #8]
  407e7a:	4620      	mov	r0, r4
  407e7c:	bd10      	pop	{r4, pc}
  407e7e:	4602      	mov	r2, r0
  407e80:	e7f7      	b.n	407e72 <_calloc_r+0x3e>
  407e82:	2100      	movs	r1, #0
  407e84:	f7fc f986 	bl	404194 <memset>
  407e88:	4620      	mov	r0, r4
  407e8a:	bd10      	pop	{r4, pc}
  407e8c:	f100 0208 	add.w	r2, r0, #8
  407e90:	e7ef      	b.n	407e72 <_calloc_r+0x3e>
  407e92:	bf00      	nop

00407e94 <__aeabi_dmul>:
  407e94:	b570      	push	{r4, r5, r6, lr}
  407e96:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407e9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407e9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407ea2:	bf1d      	ittte	ne
  407ea4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407ea8:	ea94 0f0c 	teqne	r4, ip
  407eac:	ea95 0f0c 	teqne	r5, ip
  407eb0:	f000 f8de 	bleq	408070 <__aeabi_dmul+0x1dc>
  407eb4:	442c      	add	r4, r5
  407eb6:	ea81 0603 	eor.w	r6, r1, r3
  407eba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407ebe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407ec2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407ec6:	bf18      	it	ne
  407ec8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407ecc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407ed4:	d038      	beq.n	407f48 <__aeabi_dmul+0xb4>
  407ed6:	fba0 ce02 	umull	ip, lr, r0, r2
  407eda:	f04f 0500 	mov.w	r5, #0
  407ede:	fbe1 e502 	umlal	lr, r5, r1, r2
  407ee2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407ee6:	fbe0 e503 	umlal	lr, r5, r0, r3
  407eea:	f04f 0600 	mov.w	r6, #0
  407eee:	fbe1 5603 	umlal	r5, r6, r1, r3
  407ef2:	f09c 0f00 	teq	ip, #0
  407ef6:	bf18      	it	ne
  407ef8:	f04e 0e01 	orrne.w	lr, lr, #1
  407efc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407f00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407f04:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407f08:	d204      	bcs.n	407f14 <__aeabi_dmul+0x80>
  407f0a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407f0e:	416d      	adcs	r5, r5
  407f10:	eb46 0606 	adc.w	r6, r6, r6
  407f14:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407f18:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407f1c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407f20:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407f24:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407f28:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407f2c:	bf88      	it	hi
  407f2e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407f32:	d81e      	bhi.n	407f72 <__aeabi_dmul+0xde>
  407f34:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407f38:	bf08      	it	eq
  407f3a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407f3e:	f150 0000 	adcs.w	r0, r0, #0
  407f42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407f46:	bd70      	pop	{r4, r5, r6, pc}
  407f48:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407f4c:	ea46 0101 	orr.w	r1, r6, r1
  407f50:	ea40 0002 	orr.w	r0, r0, r2
  407f54:	ea81 0103 	eor.w	r1, r1, r3
  407f58:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407f5c:	bfc2      	ittt	gt
  407f5e:	ebd4 050c 	rsbsgt	r5, r4, ip
  407f62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407f66:	bd70      	popgt	{r4, r5, r6, pc}
  407f68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407f6c:	f04f 0e00 	mov.w	lr, #0
  407f70:	3c01      	subs	r4, #1
  407f72:	f300 80ab 	bgt.w	4080cc <__aeabi_dmul+0x238>
  407f76:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407f7a:	bfde      	ittt	le
  407f7c:	2000      	movle	r0, #0
  407f7e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407f82:	bd70      	pople	{r4, r5, r6, pc}
  407f84:	f1c4 0400 	rsb	r4, r4, #0
  407f88:	3c20      	subs	r4, #32
  407f8a:	da35      	bge.n	407ff8 <__aeabi_dmul+0x164>
  407f8c:	340c      	adds	r4, #12
  407f8e:	dc1b      	bgt.n	407fc8 <__aeabi_dmul+0x134>
  407f90:	f104 0414 	add.w	r4, r4, #20
  407f94:	f1c4 0520 	rsb	r5, r4, #32
  407f98:	fa00 f305 	lsl.w	r3, r0, r5
  407f9c:	fa20 f004 	lsr.w	r0, r0, r4
  407fa0:	fa01 f205 	lsl.w	r2, r1, r5
  407fa4:	ea40 0002 	orr.w	r0, r0, r2
  407fa8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407fac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407fb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407fb4:	fa21 f604 	lsr.w	r6, r1, r4
  407fb8:	eb42 0106 	adc.w	r1, r2, r6
  407fbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407fc0:	bf08      	it	eq
  407fc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407fc6:	bd70      	pop	{r4, r5, r6, pc}
  407fc8:	f1c4 040c 	rsb	r4, r4, #12
  407fcc:	f1c4 0520 	rsb	r5, r4, #32
  407fd0:	fa00 f304 	lsl.w	r3, r0, r4
  407fd4:	fa20 f005 	lsr.w	r0, r0, r5
  407fd8:	fa01 f204 	lsl.w	r2, r1, r4
  407fdc:	ea40 0002 	orr.w	r0, r0, r2
  407fe0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407fe4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407fe8:	f141 0100 	adc.w	r1, r1, #0
  407fec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407ff0:	bf08      	it	eq
  407ff2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407ff6:	bd70      	pop	{r4, r5, r6, pc}
  407ff8:	f1c4 0520 	rsb	r5, r4, #32
  407ffc:	fa00 f205 	lsl.w	r2, r0, r5
  408000:	ea4e 0e02 	orr.w	lr, lr, r2
  408004:	fa20 f304 	lsr.w	r3, r0, r4
  408008:	fa01 f205 	lsl.w	r2, r1, r5
  40800c:	ea43 0302 	orr.w	r3, r3, r2
  408010:	fa21 f004 	lsr.w	r0, r1, r4
  408014:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408018:	fa21 f204 	lsr.w	r2, r1, r4
  40801c:	ea20 0002 	bic.w	r0, r0, r2
  408020:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408024:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408028:	bf08      	it	eq
  40802a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40802e:	bd70      	pop	{r4, r5, r6, pc}
  408030:	f094 0f00 	teq	r4, #0
  408034:	d10f      	bne.n	408056 <__aeabi_dmul+0x1c2>
  408036:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40803a:	0040      	lsls	r0, r0, #1
  40803c:	eb41 0101 	adc.w	r1, r1, r1
  408040:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408044:	bf08      	it	eq
  408046:	3c01      	subeq	r4, #1
  408048:	d0f7      	beq.n	40803a <__aeabi_dmul+0x1a6>
  40804a:	ea41 0106 	orr.w	r1, r1, r6
  40804e:	f095 0f00 	teq	r5, #0
  408052:	bf18      	it	ne
  408054:	4770      	bxne	lr
  408056:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40805a:	0052      	lsls	r2, r2, #1
  40805c:	eb43 0303 	adc.w	r3, r3, r3
  408060:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408064:	bf08      	it	eq
  408066:	3d01      	subeq	r5, #1
  408068:	d0f7      	beq.n	40805a <__aeabi_dmul+0x1c6>
  40806a:	ea43 0306 	orr.w	r3, r3, r6
  40806e:	4770      	bx	lr
  408070:	ea94 0f0c 	teq	r4, ip
  408074:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408078:	bf18      	it	ne
  40807a:	ea95 0f0c 	teqne	r5, ip
  40807e:	d00c      	beq.n	40809a <__aeabi_dmul+0x206>
  408080:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408084:	bf18      	it	ne
  408086:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40808a:	d1d1      	bne.n	408030 <__aeabi_dmul+0x19c>
  40808c:	ea81 0103 	eor.w	r1, r1, r3
  408090:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408094:	f04f 0000 	mov.w	r0, #0
  408098:	bd70      	pop	{r4, r5, r6, pc}
  40809a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40809e:	bf06      	itte	eq
  4080a0:	4610      	moveq	r0, r2
  4080a2:	4619      	moveq	r1, r3
  4080a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4080a8:	d019      	beq.n	4080de <__aeabi_dmul+0x24a>
  4080aa:	ea94 0f0c 	teq	r4, ip
  4080ae:	d102      	bne.n	4080b6 <__aeabi_dmul+0x222>
  4080b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4080b4:	d113      	bne.n	4080de <__aeabi_dmul+0x24a>
  4080b6:	ea95 0f0c 	teq	r5, ip
  4080ba:	d105      	bne.n	4080c8 <__aeabi_dmul+0x234>
  4080bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4080c0:	bf1c      	itt	ne
  4080c2:	4610      	movne	r0, r2
  4080c4:	4619      	movne	r1, r3
  4080c6:	d10a      	bne.n	4080de <__aeabi_dmul+0x24a>
  4080c8:	ea81 0103 	eor.w	r1, r1, r3
  4080cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4080d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4080d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4080d8:	f04f 0000 	mov.w	r0, #0
  4080dc:	bd70      	pop	{r4, r5, r6, pc}
  4080de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4080e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4080e6:	bd70      	pop	{r4, r5, r6, pc}

004080e8 <__aeabi_ddiv>:
  4080e8:	b570      	push	{r4, r5, r6, lr}
  4080ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4080ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4080f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4080f6:	bf1d      	ittte	ne
  4080f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4080fc:	ea94 0f0c 	teqne	r4, ip
  408100:	ea95 0f0c 	teqne	r5, ip
  408104:	f000 f8a7 	bleq	408256 <__aeabi_ddiv+0x16e>
  408108:	eba4 0405 	sub.w	r4, r4, r5
  40810c:	ea81 0e03 	eor.w	lr, r1, r3
  408110:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408114:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408118:	f000 8088 	beq.w	40822c <__aeabi_ddiv+0x144>
  40811c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408120:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408124:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408128:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40812c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408130:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408134:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408138:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40813c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408140:	429d      	cmp	r5, r3
  408142:	bf08      	it	eq
  408144:	4296      	cmpeq	r6, r2
  408146:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40814a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40814e:	d202      	bcs.n	408156 <__aeabi_ddiv+0x6e>
  408150:	085b      	lsrs	r3, r3, #1
  408152:	ea4f 0232 	mov.w	r2, r2, rrx
  408156:	1ab6      	subs	r6, r6, r2
  408158:	eb65 0503 	sbc.w	r5, r5, r3
  40815c:	085b      	lsrs	r3, r3, #1
  40815e:	ea4f 0232 	mov.w	r2, r2, rrx
  408162:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408166:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40816a:	ebb6 0e02 	subs.w	lr, r6, r2
  40816e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408172:	bf22      	ittt	cs
  408174:	1ab6      	subcs	r6, r6, r2
  408176:	4675      	movcs	r5, lr
  408178:	ea40 000c 	orrcs.w	r0, r0, ip
  40817c:	085b      	lsrs	r3, r3, #1
  40817e:	ea4f 0232 	mov.w	r2, r2, rrx
  408182:	ebb6 0e02 	subs.w	lr, r6, r2
  408186:	eb75 0e03 	sbcs.w	lr, r5, r3
  40818a:	bf22      	ittt	cs
  40818c:	1ab6      	subcs	r6, r6, r2
  40818e:	4675      	movcs	r5, lr
  408190:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408194:	085b      	lsrs	r3, r3, #1
  408196:	ea4f 0232 	mov.w	r2, r2, rrx
  40819a:	ebb6 0e02 	subs.w	lr, r6, r2
  40819e:	eb75 0e03 	sbcs.w	lr, r5, r3
  4081a2:	bf22      	ittt	cs
  4081a4:	1ab6      	subcs	r6, r6, r2
  4081a6:	4675      	movcs	r5, lr
  4081a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4081ac:	085b      	lsrs	r3, r3, #1
  4081ae:	ea4f 0232 	mov.w	r2, r2, rrx
  4081b2:	ebb6 0e02 	subs.w	lr, r6, r2
  4081b6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4081ba:	bf22      	ittt	cs
  4081bc:	1ab6      	subcs	r6, r6, r2
  4081be:	4675      	movcs	r5, lr
  4081c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4081c4:	ea55 0e06 	orrs.w	lr, r5, r6
  4081c8:	d018      	beq.n	4081fc <__aeabi_ddiv+0x114>
  4081ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4081ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4081d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4081d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4081da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4081de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4081e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4081e6:	d1c0      	bne.n	40816a <__aeabi_ddiv+0x82>
  4081e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4081ec:	d10b      	bne.n	408206 <__aeabi_ddiv+0x11e>
  4081ee:	ea41 0100 	orr.w	r1, r1, r0
  4081f2:	f04f 0000 	mov.w	r0, #0
  4081f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4081fa:	e7b6      	b.n	40816a <__aeabi_ddiv+0x82>
  4081fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408200:	bf04      	itt	eq
  408202:	4301      	orreq	r1, r0
  408204:	2000      	moveq	r0, #0
  408206:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40820a:	bf88      	it	hi
  40820c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408210:	f63f aeaf 	bhi.w	407f72 <__aeabi_dmul+0xde>
  408214:	ebb5 0c03 	subs.w	ip, r5, r3
  408218:	bf04      	itt	eq
  40821a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40821e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408222:	f150 0000 	adcs.w	r0, r0, #0
  408226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40822a:	bd70      	pop	{r4, r5, r6, pc}
  40822c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408230:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408234:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408238:	bfc2      	ittt	gt
  40823a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40823e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408242:	bd70      	popgt	{r4, r5, r6, pc}
  408244:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408248:	f04f 0e00 	mov.w	lr, #0
  40824c:	3c01      	subs	r4, #1
  40824e:	e690      	b.n	407f72 <__aeabi_dmul+0xde>
  408250:	ea45 0e06 	orr.w	lr, r5, r6
  408254:	e68d      	b.n	407f72 <__aeabi_dmul+0xde>
  408256:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40825a:	ea94 0f0c 	teq	r4, ip
  40825e:	bf08      	it	eq
  408260:	ea95 0f0c 	teqeq	r5, ip
  408264:	f43f af3b 	beq.w	4080de <__aeabi_dmul+0x24a>
  408268:	ea94 0f0c 	teq	r4, ip
  40826c:	d10a      	bne.n	408284 <__aeabi_ddiv+0x19c>
  40826e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408272:	f47f af34 	bne.w	4080de <__aeabi_dmul+0x24a>
  408276:	ea95 0f0c 	teq	r5, ip
  40827a:	f47f af25 	bne.w	4080c8 <__aeabi_dmul+0x234>
  40827e:	4610      	mov	r0, r2
  408280:	4619      	mov	r1, r3
  408282:	e72c      	b.n	4080de <__aeabi_dmul+0x24a>
  408284:	ea95 0f0c 	teq	r5, ip
  408288:	d106      	bne.n	408298 <__aeabi_ddiv+0x1b0>
  40828a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40828e:	f43f aefd 	beq.w	40808c <__aeabi_dmul+0x1f8>
  408292:	4610      	mov	r0, r2
  408294:	4619      	mov	r1, r3
  408296:	e722      	b.n	4080de <__aeabi_dmul+0x24a>
  408298:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40829c:	bf18      	it	ne
  40829e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4082a2:	f47f aec5 	bne.w	408030 <__aeabi_dmul+0x19c>
  4082a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4082aa:	f47f af0d 	bne.w	4080c8 <__aeabi_dmul+0x234>
  4082ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4082b2:	f47f aeeb 	bne.w	40808c <__aeabi_dmul+0x1f8>
  4082b6:	e712      	b.n	4080de <__aeabi_dmul+0x24a>

004082b8 <__gedf2>:
  4082b8:	f04f 3cff 	mov.w	ip, #4294967295
  4082bc:	e006      	b.n	4082cc <__cmpdf2+0x4>
  4082be:	bf00      	nop

004082c0 <__ledf2>:
  4082c0:	f04f 0c01 	mov.w	ip, #1
  4082c4:	e002      	b.n	4082cc <__cmpdf2+0x4>
  4082c6:	bf00      	nop

004082c8 <__cmpdf2>:
  4082c8:	f04f 0c01 	mov.w	ip, #1
  4082cc:	f84d cd04 	str.w	ip, [sp, #-4]!
  4082d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4082d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4082d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4082dc:	bf18      	it	ne
  4082de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4082e2:	d01b      	beq.n	40831c <__cmpdf2+0x54>
  4082e4:	b001      	add	sp, #4
  4082e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4082ea:	bf0c      	ite	eq
  4082ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4082f0:	ea91 0f03 	teqne	r1, r3
  4082f4:	bf02      	ittt	eq
  4082f6:	ea90 0f02 	teqeq	r0, r2
  4082fa:	2000      	moveq	r0, #0
  4082fc:	4770      	bxeq	lr
  4082fe:	f110 0f00 	cmn.w	r0, #0
  408302:	ea91 0f03 	teq	r1, r3
  408306:	bf58      	it	pl
  408308:	4299      	cmppl	r1, r3
  40830a:	bf08      	it	eq
  40830c:	4290      	cmpeq	r0, r2
  40830e:	bf2c      	ite	cs
  408310:	17d8      	asrcs	r0, r3, #31
  408312:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408316:	f040 0001 	orr.w	r0, r0, #1
  40831a:	4770      	bx	lr
  40831c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408320:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408324:	d102      	bne.n	40832c <__cmpdf2+0x64>
  408326:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40832a:	d107      	bne.n	40833c <__cmpdf2+0x74>
  40832c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408330:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408334:	d1d6      	bne.n	4082e4 <__cmpdf2+0x1c>
  408336:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40833a:	d0d3      	beq.n	4082e4 <__cmpdf2+0x1c>
  40833c:	f85d 0b04 	ldr.w	r0, [sp], #4
  408340:	4770      	bx	lr
  408342:	bf00      	nop

00408344 <__aeabi_cdrcmple>:
  408344:	4684      	mov	ip, r0
  408346:	4610      	mov	r0, r2
  408348:	4662      	mov	r2, ip
  40834a:	468c      	mov	ip, r1
  40834c:	4619      	mov	r1, r3
  40834e:	4663      	mov	r3, ip
  408350:	e000      	b.n	408354 <__aeabi_cdcmpeq>
  408352:	bf00      	nop

00408354 <__aeabi_cdcmpeq>:
  408354:	b501      	push	{r0, lr}
  408356:	f7ff ffb7 	bl	4082c8 <__cmpdf2>
  40835a:	2800      	cmp	r0, #0
  40835c:	bf48      	it	mi
  40835e:	f110 0f00 	cmnmi.w	r0, #0
  408362:	bd01      	pop	{r0, pc}

00408364 <__aeabi_dcmpeq>:
  408364:	f84d ed08 	str.w	lr, [sp, #-8]!
  408368:	f7ff fff4 	bl	408354 <__aeabi_cdcmpeq>
  40836c:	bf0c      	ite	eq
  40836e:	2001      	moveq	r0, #1
  408370:	2000      	movne	r0, #0
  408372:	f85d fb08 	ldr.w	pc, [sp], #8
  408376:	bf00      	nop

00408378 <__aeabi_dcmplt>:
  408378:	f84d ed08 	str.w	lr, [sp, #-8]!
  40837c:	f7ff ffea 	bl	408354 <__aeabi_cdcmpeq>
  408380:	bf34      	ite	cc
  408382:	2001      	movcc	r0, #1
  408384:	2000      	movcs	r0, #0
  408386:	f85d fb08 	ldr.w	pc, [sp], #8
  40838a:	bf00      	nop

0040838c <__aeabi_dcmple>:
  40838c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408390:	f7ff ffe0 	bl	408354 <__aeabi_cdcmpeq>
  408394:	bf94      	ite	ls
  408396:	2001      	movls	r0, #1
  408398:	2000      	movhi	r0, #0
  40839a:	f85d fb08 	ldr.w	pc, [sp], #8
  40839e:	bf00      	nop

004083a0 <__aeabi_dcmpge>:
  4083a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4083a4:	f7ff ffce 	bl	408344 <__aeabi_cdrcmple>
  4083a8:	bf94      	ite	ls
  4083aa:	2001      	movls	r0, #1
  4083ac:	2000      	movhi	r0, #0
  4083ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4083b2:	bf00      	nop

004083b4 <__aeabi_dcmpgt>:
  4083b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4083b8:	f7ff ffc4 	bl	408344 <__aeabi_cdrcmple>
  4083bc:	bf34      	ite	cc
  4083be:	2001      	movcc	r0, #1
  4083c0:	2000      	movcs	r0, #0
  4083c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4083c6:	bf00      	nop

004083c8 <__aeabi_dcmpun>:
  4083c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4083cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4083d0:	d102      	bne.n	4083d8 <__aeabi_dcmpun+0x10>
  4083d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4083d6:	d10a      	bne.n	4083ee <__aeabi_dcmpun+0x26>
  4083d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4083dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4083e0:	d102      	bne.n	4083e8 <__aeabi_dcmpun+0x20>
  4083e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4083e6:	d102      	bne.n	4083ee <__aeabi_dcmpun+0x26>
  4083e8:	f04f 0000 	mov.w	r0, #0
  4083ec:	4770      	bx	lr
  4083ee:	f04f 0001 	mov.w	r0, #1
  4083f2:	4770      	bx	lr

004083f4 <__aeabi_d2iz>:
  4083f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4083f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4083fc:	d215      	bcs.n	40842a <__aeabi_d2iz+0x36>
  4083fe:	d511      	bpl.n	408424 <__aeabi_d2iz+0x30>
  408400:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408404:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408408:	d912      	bls.n	408430 <__aeabi_d2iz+0x3c>
  40840a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40840e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408412:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408416:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40841a:	fa23 f002 	lsr.w	r0, r3, r2
  40841e:	bf18      	it	ne
  408420:	4240      	negne	r0, r0
  408422:	4770      	bx	lr
  408424:	f04f 0000 	mov.w	r0, #0
  408428:	4770      	bx	lr
  40842a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40842e:	d105      	bne.n	40843c <__aeabi_d2iz+0x48>
  408430:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408434:	bf08      	it	eq
  408436:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40843a:	4770      	bx	lr
  40843c:	f04f 0000 	mov.w	r0, #0
  408440:	4770      	bx	lr
  408442:	bf00      	nop

00408444 <__aeabi_uldivmod>:
  408444:	b953      	cbnz	r3, 40845c <__aeabi_uldivmod+0x18>
  408446:	b94a      	cbnz	r2, 40845c <__aeabi_uldivmod+0x18>
  408448:	2900      	cmp	r1, #0
  40844a:	bf08      	it	eq
  40844c:	2800      	cmpeq	r0, #0
  40844e:	bf1c      	itt	ne
  408450:	f04f 31ff 	movne.w	r1, #4294967295
  408454:	f04f 30ff 	movne.w	r0, #4294967295
  408458:	f000 b97a 	b.w	408750 <__aeabi_idiv0>
  40845c:	f1ad 0c08 	sub.w	ip, sp, #8
  408460:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408464:	f000 f806 	bl	408474 <__udivmoddi4>
  408468:	f8dd e004 	ldr.w	lr, [sp, #4]
  40846c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408470:	b004      	add	sp, #16
  408472:	4770      	bx	lr

00408474 <__udivmoddi4>:
  408474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408478:	468c      	mov	ip, r1
  40847a:	460e      	mov	r6, r1
  40847c:	4604      	mov	r4, r0
  40847e:	9d08      	ldr	r5, [sp, #32]
  408480:	2b00      	cmp	r3, #0
  408482:	d150      	bne.n	408526 <__udivmoddi4+0xb2>
  408484:	428a      	cmp	r2, r1
  408486:	4617      	mov	r7, r2
  408488:	d96c      	bls.n	408564 <__udivmoddi4+0xf0>
  40848a:	fab2 fe82 	clz	lr, r2
  40848e:	f1be 0f00 	cmp.w	lr, #0
  408492:	d00b      	beq.n	4084ac <__udivmoddi4+0x38>
  408494:	f1ce 0c20 	rsb	ip, lr, #32
  408498:	fa01 f60e 	lsl.w	r6, r1, lr
  40849c:	fa20 fc0c 	lsr.w	ip, r0, ip
  4084a0:	fa02 f70e 	lsl.w	r7, r2, lr
  4084a4:	ea4c 0c06 	orr.w	ip, ip, r6
  4084a8:	fa00 f40e 	lsl.w	r4, r0, lr
  4084ac:	0c3a      	lsrs	r2, r7, #16
  4084ae:	fbbc f9f2 	udiv	r9, ip, r2
  4084b2:	b2bb      	uxth	r3, r7
  4084b4:	fb02 cc19 	mls	ip, r2, r9, ip
  4084b8:	fb09 fa03 	mul.w	sl, r9, r3
  4084bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4084c0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
  4084c4:	45b2      	cmp	sl, r6
  4084c6:	d90a      	bls.n	4084de <__udivmoddi4+0x6a>
  4084c8:	19f6      	adds	r6, r6, r7
  4084ca:	f109 31ff 	add.w	r1, r9, #4294967295
  4084ce:	f080 8125 	bcs.w	40871c <__udivmoddi4+0x2a8>
  4084d2:	45b2      	cmp	sl, r6
  4084d4:	f240 8122 	bls.w	40871c <__udivmoddi4+0x2a8>
  4084d8:	f1a9 0902 	sub.w	r9, r9, #2
  4084dc:	443e      	add	r6, r7
  4084de:	eba6 060a 	sub.w	r6, r6, sl
  4084e2:	fbb6 f0f2 	udiv	r0, r6, r2
  4084e6:	fb02 6610 	mls	r6, r2, r0, r6
  4084ea:	fb00 f303 	mul.w	r3, r0, r3
  4084ee:	b2a4      	uxth	r4, r4
  4084f0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  4084f4:	42a3      	cmp	r3, r4
  4084f6:	d909      	bls.n	40850c <__udivmoddi4+0x98>
  4084f8:	19e4      	adds	r4, r4, r7
  4084fa:	f100 32ff 	add.w	r2, r0, #4294967295
  4084fe:	f080 810b 	bcs.w	408718 <__udivmoddi4+0x2a4>
  408502:	42a3      	cmp	r3, r4
  408504:	f240 8108 	bls.w	408718 <__udivmoddi4+0x2a4>
  408508:	3802      	subs	r0, #2
  40850a:	443c      	add	r4, r7
  40850c:	2100      	movs	r1, #0
  40850e:	1ae4      	subs	r4, r4, r3
  408510:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408514:	2d00      	cmp	r5, #0
  408516:	d062      	beq.n	4085de <__udivmoddi4+0x16a>
  408518:	2300      	movs	r3, #0
  40851a:	fa24 f40e 	lsr.w	r4, r4, lr
  40851e:	602c      	str	r4, [r5, #0]
  408520:	606b      	str	r3, [r5, #4]
  408522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408526:	428b      	cmp	r3, r1
  408528:	d907      	bls.n	40853a <__udivmoddi4+0xc6>
  40852a:	2d00      	cmp	r5, #0
  40852c:	d055      	beq.n	4085da <__udivmoddi4+0x166>
  40852e:	2100      	movs	r1, #0
  408530:	e885 0041 	stmia.w	r5, {r0, r6}
  408534:	4608      	mov	r0, r1
  408536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40853a:	fab3 f183 	clz	r1, r3
  40853e:	2900      	cmp	r1, #0
  408540:	f040 808f 	bne.w	408662 <__udivmoddi4+0x1ee>
  408544:	42b3      	cmp	r3, r6
  408546:	d302      	bcc.n	40854e <__udivmoddi4+0xda>
  408548:	4282      	cmp	r2, r0
  40854a:	f200 80fc 	bhi.w	408746 <__udivmoddi4+0x2d2>
  40854e:	1a84      	subs	r4, r0, r2
  408550:	eb66 0603 	sbc.w	r6, r6, r3
  408554:	2001      	movs	r0, #1
  408556:	46b4      	mov	ip, r6
  408558:	2d00      	cmp	r5, #0
  40855a:	d040      	beq.n	4085de <__udivmoddi4+0x16a>
  40855c:	e885 1010 	stmia.w	r5, {r4, ip}
  408560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408564:	b912      	cbnz	r2, 40856c <__udivmoddi4+0xf8>
  408566:	2701      	movs	r7, #1
  408568:	fbb7 f7f2 	udiv	r7, r7, r2
  40856c:	fab7 fe87 	clz	lr, r7
  408570:	f1be 0f00 	cmp.w	lr, #0
  408574:	d135      	bne.n	4085e2 <__udivmoddi4+0x16e>
  408576:	2101      	movs	r1, #1
  408578:	1bf6      	subs	r6, r6, r7
  40857a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
  40857e:	fa1f f887 	uxth.w	r8, r7
  408582:	fbb6 f2fc 	udiv	r2, r6, ip
  408586:	fb0c 6612 	mls	r6, ip, r2, r6
  40858a:	fb08 f002 	mul.w	r0, r8, r2
  40858e:	0c23      	lsrs	r3, r4, #16
  408590:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
  408594:	42b0      	cmp	r0, r6
  408596:	d907      	bls.n	4085a8 <__udivmoddi4+0x134>
  408598:	19f6      	adds	r6, r6, r7
  40859a:	f102 33ff 	add.w	r3, r2, #4294967295
  40859e:	d202      	bcs.n	4085a6 <__udivmoddi4+0x132>
  4085a0:	42b0      	cmp	r0, r6
  4085a2:	f200 80d2 	bhi.w	40874a <__udivmoddi4+0x2d6>
  4085a6:	461a      	mov	r2, r3
  4085a8:	1a36      	subs	r6, r6, r0
  4085aa:	fbb6 f0fc 	udiv	r0, r6, ip
  4085ae:	fb0c 6610 	mls	r6, ip, r0, r6
  4085b2:	fb08 f800 	mul.w	r8, r8, r0
  4085b6:	b2a3      	uxth	r3, r4
  4085b8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
  4085bc:	45a0      	cmp	r8, r4
  4085be:	d907      	bls.n	4085d0 <__udivmoddi4+0x15c>
  4085c0:	19e4      	adds	r4, r4, r7
  4085c2:	f100 33ff 	add.w	r3, r0, #4294967295
  4085c6:	d202      	bcs.n	4085ce <__udivmoddi4+0x15a>
  4085c8:	45a0      	cmp	r8, r4
  4085ca:	f200 80b9 	bhi.w	408740 <__udivmoddi4+0x2cc>
  4085ce:	4618      	mov	r0, r3
  4085d0:	eba4 0408 	sub.w	r4, r4, r8
  4085d4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  4085d8:	e79c      	b.n	408514 <__udivmoddi4+0xa0>
  4085da:	4629      	mov	r1, r5
  4085dc:	4628      	mov	r0, r5
  4085de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4085e2:	fa07 f70e 	lsl.w	r7, r7, lr
  4085e6:	f1ce 0320 	rsb	r3, lr, #32
  4085ea:	fa26 f203 	lsr.w	r2, r6, r3
  4085ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
  4085f2:	fbb2 f1fc 	udiv	r1, r2, ip
  4085f6:	fa1f f887 	uxth.w	r8, r7
  4085fa:	fb0c 2211 	mls	r2, ip, r1, r2
  4085fe:	fa06 f60e 	lsl.w	r6, r6, lr
  408602:	fa20 f303 	lsr.w	r3, r0, r3
  408606:	fb01 f908 	mul.w	r9, r1, r8
  40860a:	4333      	orrs	r3, r6
  40860c:	0c1e      	lsrs	r6, r3, #16
  40860e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
  408612:	45b1      	cmp	r9, r6
  408614:	fa00 f40e 	lsl.w	r4, r0, lr
  408618:	d909      	bls.n	40862e <__udivmoddi4+0x1ba>
  40861a:	19f6      	adds	r6, r6, r7
  40861c:	f101 32ff 	add.w	r2, r1, #4294967295
  408620:	f080 808c 	bcs.w	40873c <__udivmoddi4+0x2c8>
  408624:	45b1      	cmp	r9, r6
  408626:	f240 8089 	bls.w	40873c <__udivmoddi4+0x2c8>
  40862a:	3902      	subs	r1, #2
  40862c:	443e      	add	r6, r7
  40862e:	eba6 0609 	sub.w	r6, r6, r9
  408632:	fbb6 f0fc 	udiv	r0, r6, ip
  408636:	fb0c 6210 	mls	r2, ip, r0, r6
  40863a:	fb00 f908 	mul.w	r9, r0, r8
  40863e:	b29e      	uxth	r6, r3
  408640:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
  408644:	45b1      	cmp	r9, r6
  408646:	d907      	bls.n	408658 <__udivmoddi4+0x1e4>
  408648:	19f6      	adds	r6, r6, r7
  40864a:	f100 33ff 	add.w	r3, r0, #4294967295
  40864e:	d271      	bcs.n	408734 <__udivmoddi4+0x2c0>
  408650:	45b1      	cmp	r9, r6
  408652:	d96f      	bls.n	408734 <__udivmoddi4+0x2c0>
  408654:	3802      	subs	r0, #2
  408656:	443e      	add	r6, r7
  408658:	eba6 0609 	sub.w	r6, r6, r9
  40865c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408660:	e78f      	b.n	408582 <__udivmoddi4+0x10e>
  408662:	f1c1 0720 	rsb	r7, r1, #32
  408666:	fa22 f807 	lsr.w	r8, r2, r7
  40866a:	408b      	lsls	r3, r1
  40866c:	ea48 0303 	orr.w	r3, r8, r3
  408670:	fa26 f407 	lsr.w	r4, r6, r7
  408674:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  408678:	fbb4 f9fe 	udiv	r9, r4, lr
  40867c:	fa1f fc83 	uxth.w	ip, r3
  408680:	fb0e 4419 	mls	r4, lr, r9, r4
  408684:	408e      	lsls	r6, r1
  408686:	fa20 f807 	lsr.w	r8, r0, r7
  40868a:	fb09 fa0c 	mul.w	sl, r9, ip
  40868e:	ea48 0806 	orr.w	r8, r8, r6
  408692:	ea4f 4618 	mov.w	r6, r8, lsr #16
  408696:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
  40869a:	45a2      	cmp	sl, r4
  40869c:	fa02 f201 	lsl.w	r2, r2, r1
  4086a0:	fa00 f601 	lsl.w	r6, r0, r1
  4086a4:	d908      	bls.n	4086b8 <__udivmoddi4+0x244>
  4086a6:	18e4      	adds	r4, r4, r3
  4086a8:	f109 30ff 	add.w	r0, r9, #4294967295
  4086ac:	d244      	bcs.n	408738 <__udivmoddi4+0x2c4>
  4086ae:	45a2      	cmp	sl, r4
  4086b0:	d942      	bls.n	408738 <__udivmoddi4+0x2c4>
  4086b2:	f1a9 0902 	sub.w	r9, r9, #2
  4086b6:	441c      	add	r4, r3
  4086b8:	eba4 040a 	sub.w	r4, r4, sl
  4086bc:	fbb4 f0fe 	udiv	r0, r4, lr
  4086c0:	fb0e 4410 	mls	r4, lr, r0, r4
  4086c4:	fb00 fc0c 	mul.w	ip, r0, ip
  4086c8:	fa1f f888 	uxth.w	r8, r8
  4086cc:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
  4086d0:	45a4      	cmp	ip, r4
  4086d2:	d907      	bls.n	4086e4 <__udivmoddi4+0x270>
  4086d4:	18e4      	adds	r4, r4, r3
  4086d6:	f100 3eff 	add.w	lr, r0, #4294967295
  4086da:	d229      	bcs.n	408730 <__udivmoddi4+0x2bc>
  4086dc:	45a4      	cmp	ip, r4
  4086de:	d927      	bls.n	408730 <__udivmoddi4+0x2bc>
  4086e0:	3802      	subs	r0, #2
  4086e2:	441c      	add	r4, r3
  4086e4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4086e8:	fba0 8902 	umull	r8, r9, r0, r2
  4086ec:	eba4 0c0c 	sub.w	ip, r4, ip
  4086f0:	45cc      	cmp	ip, r9
  4086f2:	46c2      	mov	sl, r8
  4086f4:	46ce      	mov	lr, r9
  4086f6:	d315      	bcc.n	408724 <__udivmoddi4+0x2b0>
  4086f8:	d012      	beq.n	408720 <__udivmoddi4+0x2ac>
  4086fa:	b155      	cbz	r5, 408712 <__udivmoddi4+0x29e>
  4086fc:	ebb6 030a 	subs.w	r3, r6, sl
  408700:	eb6c 060e 	sbc.w	r6, ip, lr
  408704:	fa06 f707 	lsl.w	r7, r6, r7
  408708:	40cb      	lsrs	r3, r1
  40870a:	431f      	orrs	r7, r3
  40870c:	40ce      	lsrs	r6, r1
  40870e:	602f      	str	r7, [r5, #0]
  408710:	606e      	str	r6, [r5, #4]
  408712:	2100      	movs	r1, #0
  408714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408718:	4610      	mov	r0, r2
  40871a:	e6f7      	b.n	40850c <__udivmoddi4+0x98>
  40871c:	4689      	mov	r9, r1
  40871e:	e6de      	b.n	4084de <__udivmoddi4+0x6a>
  408720:	4546      	cmp	r6, r8
  408722:	d2ea      	bcs.n	4086fa <__udivmoddi4+0x286>
  408724:	ebb8 0a02 	subs.w	sl, r8, r2
  408728:	eb69 0e03 	sbc.w	lr, r9, r3
  40872c:	3801      	subs	r0, #1
  40872e:	e7e4      	b.n	4086fa <__udivmoddi4+0x286>
  408730:	4670      	mov	r0, lr
  408732:	e7d7      	b.n	4086e4 <__udivmoddi4+0x270>
  408734:	4618      	mov	r0, r3
  408736:	e78f      	b.n	408658 <__udivmoddi4+0x1e4>
  408738:	4681      	mov	r9, r0
  40873a:	e7bd      	b.n	4086b8 <__udivmoddi4+0x244>
  40873c:	4611      	mov	r1, r2
  40873e:	e776      	b.n	40862e <__udivmoddi4+0x1ba>
  408740:	3802      	subs	r0, #2
  408742:	443c      	add	r4, r7
  408744:	e744      	b.n	4085d0 <__udivmoddi4+0x15c>
  408746:	4608      	mov	r0, r1
  408748:	e706      	b.n	408558 <__udivmoddi4+0xe4>
  40874a:	3a02      	subs	r2, #2
  40874c:	443e      	add	r6, r7
  40874e:	e72b      	b.n	4085a8 <__udivmoddi4+0x134>

00408750 <__aeabi_idiv0>:
  408750:	4770      	bx	lr
  408752:	bf00      	nop
  408754:	706d6153 	.word	0x706d6153
  408758:	7220656c 	.word	0x7220656c
  40875c:	20657461 	.word	0x20657461
  408760:	68206f74 	.word	0x68206f74
  408764:	21686769 	.word	0x21686769
  408768:	00000d0a 	.word	0x00000d0a
  40876c:	75254843 	.word	0x75254843
  408770:	2b25203a 	.word	0x2b25203a
  408774:	302e3620 	.word	0x302e3620
  408778:	2c566d66 	.word	0x2c566d66
  40877c:	00000020 	.word	0x00000020
  408780:	25207525 	.word	0x25207525
  408784:	75252075 	.word	0x75252075
  408788:	20752520 	.word	0x20752520
  40878c:	0d0a7525 	.word	0x0d0a7525
  408790:	00000000 	.word	0x00000000
  408794:	54554c24 	.word	0x54554c24
  408798:	6e656c20 	.word	0x6e656c20
  40879c:	20687467 	.word	0x20687467
  4087a0:	4420666f 	.word	0x4420666f
  4087a4:	63204341 	.word	0x63204341
  4087a8:	6e6e6168 	.word	0x6e6e6168
  4087ac:	25206c65 	.word	0x25206c65
  4087b0:	61772075 	.word	0x61772075
  4087b4:	65732073 	.word	0x65732073
  4087b8:	6f742074 	.word	0x6f742074
  4087bc:	0a752520 	.word	0x0a752520
  4087c0:	0000000d 	.word	0x0000000d
  4087c4:	2054554c 	.word	0x2054554c
  4087c8:	65706572 	.word	0x65706572
  4087cc:	20737461 	.word	0x20737461
  4087d0:	44206e6f 	.word	0x44206e6f
  4087d4:	63204341 	.word	0x63204341
  4087d8:	6e6e6168 	.word	0x6e6e6168
  4087dc:	25206c65 	.word	0x25206c65
  4087e0:	61772075 	.word	0x61772075
  4087e4:	65732073 	.word	0x65732073
  4087e8:	6f742074 	.word	0x6f742074
  4087ec:	0a752520 	.word	0x0a752520
  4087f0:	0000000d 	.word	0x0000000d
  4087f4:	00000024 	.word	0x00000024
  4087f8:	20434441 	.word	0x20434441
  4087fc:	6e616863 	.word	0x6e616863
  408800:	206c656e 	.word	0x206c656e
  408804:	67207525 	.word	0x67207525
  408808:	206e6961 	.word	0x206e6961
  40880c:	20746573 	.word	0x20746573
  408810:	25206f74 	.word	0x25206f74
  408814:	000d0a64 	.word	0x000d0a64
  408818:	20434441 	.word	0x20434441
  40881c:	6f736572 	.word	0x6f736572
  408820:	6974756c 	.word	0x6974756c
  408824:	73206e6f 	.word	0x73206e6f
  408828:	74207465 	.word	0x74207465
  40882c:	3031206f 	.word	0x3031206f
  408830:	74696220 	.word	0x74696220
  408834:	0d0a2e73 	.word	0x0d0a2e73
  408838:	00000000 	.word	0x00000000
  40883c:	20434441 	.word	0x20434441
  408840:	6f736572 	.word	0x6f736572
  408844:	6974756c 	.word	0x6974756c
  408848:	73206e6f 	.word	0x73206e6f
  40884c:	74207465 	.word	0x74207465
  408850:	3231206f 	.word	0x3231206f
  408854:	74696220 	.word	0x74696220
  408858:	0d0a2e73 	.word	0x0d0a2e73
  40885c:	00000000 	.word	0x00000000
  408860:	20514144 	.word	0x20514144
  408864:	6c6c6977 	.word	0x6c6c6977
  408868:	74746120 	.word	0x74746120
  40886c:	74706d65 	.word	0x74706d65
  408870:	206f7420 	.word	0x206f7420
  408874:	656b6174 	.word	0x656b6174
  408878:	20752520 	.word	0x20752520
  40887c:	706d6173 	.word	0x706d6173
  408880:	2073656c 	.word	0x2073656c
  408884:	20726570 	.word	0x20726570
  408888:	6e616863 	.word	0x6e616863
  40888c:	0a6c656e 	.word	0x0a6c656e
  408890:	0000000d 	.word	0x0000000d
  408894:	636f6c42 	.word	0x636f6c42
  408898:	6973206b 	.word	0x6973206b
  40889c:	7320657a 	.word	0x7320657a
  4088a0:	74207465 	.word	0x74207465
  4088a4:	7525206f 	.word	0x7525206f
  4088a8:	00000d0a 	.word	0x00000d0a
  4088ac:	20434144 	.word	0x20434144
  4088b0:	6e616863 	.word	0x6e616863
  4088b4:	206c656e 	.word	0x206c656e
  4088b8:	73207525 	.word	0x73207525
  4088bc:	74207465 	.word	0x74207465
  4088c0:	6425206f 	.word	0x6425206f
  4088c4:	0a566d20 	.word	0x0a566d20
  4088c8:	0000000d 	.word	0x0000000d
  4088cc:	20514144 	.word	0x20514144
  4088d0:	6c6c6977 	.word	0x6c6c6977
  4088d4:	6d617320 	.word	0x6d617320
  4088d8:	20656c70 	.word	0x20656c70
  4088dc:	206c6c61 	.word	0x206c6c61
  4088e0:	62616e65 	.word	0x62616e65
  4088e4:	2064656c 	.word	0x2064656c
  4088e8:	6e616863 	.word	0x6e616863
  4088ec:	736c656e 	.word	0x736c656e
  4088f0:	20752520 	.word	0x20752520
  4088f4:	656d6974 	.word	0x656d6974
  4088f8:	000d0a73 	.word	0x000d0a73
  4088fc:	75716341 	.word	0x75716341
  408900:	74697369 	.word	0x74697369
  408904:	206e6f69 	.word	0x206e6f69
  408908:	72617473 	.word	0x72617473
  40890c:	20646574 	.word	0x20646574
  408910:	41206e69 	.word	0x41206e69
  408914:	49494353 	.word	0x49494353
  408918:	00000d0a 	.word	0x00000d0a
  40891c:	75716341 	.word	0x75716341
  408920:	74697369 	.word	0x74697369
  408924:	206e6f69 	.word	0x206e6f69
  408928:	72617473 	.word	0x72617473
  40892c:	20646574 	.word	0x20646574
  408930:	62206e69 	.word	0x62206e69
  408934:	72616e69 	.word	0x72616e69
  408938:	000d0a79 	.word	0x000d0a79
  40893c:	706d6153 	.word	0x706d6153
  408940:	7020656c 	.word	0x7020656c
  408944:	6f697265 	.word	0x6f697265
  408948:	65732064 	.word	0x65732064
  40894c:	6f742074 	.word	0x6f742074
  408950:	20752520 	.word	0x20752520
  408954:	0d0a7375 	.word	0x0d0a7375
  408958:	00000000 	.word	0x00000000
  40895c:	75716553 	.word	0x75716553
  408960:	65636e65 	.word	0x65636e65
  408964:	74657320 	.word	0x74657320
  408968:	3a6f7420 	.word	0x3a6f7420
  40896c:	2c752520 	.word	0x2c752520
  408970:	2c752520 	.word	0x2c752520
  408974:	2c752520 	.word	0x2c752520
  408978:	0a752520 	.word	0x0a752520
  40897c:	0000000d 	.word	0x0000000d
  408980:	75716341 	.word	0x75716341
  408984:	74697369 	.word	0x74697369
  408988:	206e6f69 	.word	0x206e6f69
  40898c:	72617473 	.word	0x72617473
  408990:	0a646574 	.word	0x0a646574
  408994:	0000000d 	.word	0x0000000d
  408998:	75716341 	.word	0x75716341
  40899c:	74697369 	.word	0x74697369
  4089a0:	206e6f69 	.word	0x206e6f69
  4089a4:	706f7473 	.word	0x706f7473
  4089a8:	0a646570 	.word	0x0a646570
  4089ac:	0000000d 	.word	0x0000000d
  4089b0:	4f525245 	.word	0x4f525245
  4089b4:	65732052 	.word	0x65732052
  4089b8:	6e697474 	.word	0x6e697474
  4089bc:	6f632067 	.word	0x6f632067
  4089c0:	6e616d6d 	.word	0x6e616d6d
  4089c4:	000d0a64 	.word	0x000d0a64
  4089c8:	6d6d6f43 	.word	0x6d6d6f43
  4089cc:	20646e61 	.word	0x20646e61
  4089d0:	746e7973 	.word	0x746e7973
  4089d4:	45207861 	.word	0x45207861
  4089d8:	524f5252 	.word	0x524f5252
  4089dc:	00000d0a 	.word	0x00000d0a

004089e0 <_global_impure_ptr>:
  4089e0:	200002b8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  4089f0:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  408a00:	46454443 00000000 33323130 37363534     CDEF....01234567
  408a10:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  408a20:	0000296c 00000030                       l)..0...

00408a28 <blanks.7223>:
  408a28:	20202020 20202020 20202020 20202020                     

00408a38 <zeroes.7224>:
  408a38:	30303030 30303030 30303030 30303030     0000000000000000
  408a48:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  408a58:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00408a68 <__mprec_bigtens>:
  408a68:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  408a78:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408a88:	7f73bf3c 75154fdd                       <.s..O.u

00408a90 <__mprec_tens>:
  408a90:	00000000 3ff00000 00000000 40240000     .......?......$@
  408aa0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408ab0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408ac0:	00000000 412e8480 00000000 416312d0     .......A......cA
  408ad0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408ae0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408af0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408b00:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408b10:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408b20:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408b30:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408b40:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408b50:	79d99db4 44ea7843                       ...yCx.D

00408b58 <p05.6055>:
  408b58:	00000005 00000019 0000007d              ........}...

00408b64 <_ctype_>:
  408b64:	20202000 20202020 28282020 20282828     .         ((((( 
  408b74:	20202020 20202020 20202020 20202020                     
  408b84:	10108820 10101010 10101010 10101010      ...............
  408b94:	04040410 04040404 10040404 10101010     ................
  408ba4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408bb4:	01010101 01010101 01010101 10101010     ................
  408bc4:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408bd4:	02020202 02020202 02020202 10101010     ................
  408be4:	00000020 00000000 00000000 00000000      ...............
	...

00408c68 <_init>:
  408c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408c6a:	bf00      	nop
  408c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408c6e:	bc08      	pop	{r3}
  408c70:	469e      	mov	lr, r3
  408c72:	4770      	bx	lr

00408c74 <__init_array_start>:
  408c74:	004059a1 	.word	0x004059a1

00408c78 <__frame_dummy_init_array_entry>:
  408c78:	004000f5                                ..@.

00408c7c <_fini>:
  408c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408c7e:	bf00      	nop
  408c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408c82:	bc08      	pop	{r3}
  408c84:	469e      	mov	lr, r3
  408c86:	4770      	bx	lr

00408c88 <__fini_array_start>:
  408c88:	004000d1 	.word	0x004000d1

Disassembly of section .relocate:

20000000 <SystemInit>:
	EFC->EEFC_FMR = EEFC_FMR_FWS(3);
20000000:	f44f 7240 	mov.w	r2, #768	; 0x300
20000004:	4b1f      	ldr	r3, [pc, #124]	; (20000084 <SystemInit+0x84>)
20000006:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000008:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
2000000c:	6a1b      	ldr	r3, [r3, #32]
2000000e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20000012:	d107      	bne.n	20000024 <SystemInit+0x24>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000014:	4a1c      	ldr	r2, [pc, #112]	; (20000088 <SystemInit+0x88>)
20000016:	4b1d      	ldr	r3, [pc, #116]	; (2000008c <SystemInit+0x8c>)
20000018:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2000001a:	461a      	mov	r2, r3
2000001c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000001e:	f013 0f01 	tst.w	r3, #1
20000022:	d0fb      	beq.n	2000001c <SystemInit+0x1c>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000024:	4a1a      	ldr	r2, [pc, #104]	; (20000090 <SystemInit+0x90>)
20000026:	4b19      	ldr	r3, [pc, #100]	; (2000008c <SystemInit+0x8c>)
20000028:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2000002a:	461a      	mov	r2, r3
2000002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000002e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20000032:	d0fb      	beq.n	2000002c <SystemInit+0x2c>
		PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000034:	4a15      	ldr	r2, [pc, #84]	; (2000008c <SystemInit+0x8c>)
20000036:	6b13      	ldr	r3, [r2, #48]	; 0x30
20000038:	f023 0303 	bic.w	r3, r3, #3
2000003c:	f043 0301 	orr.w	r3, r3, #1
20000040:	6313      	str	r3, [r2, #48]	; 0x30
		while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000042:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000044:	f013 0f08 	tst.w	r3, #8
20000048:	d0fb      	beq.n	20000042 <SystemInit+0x42>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2000004a:	4a12      	ldr	r2, [pc, #72]	; (20000094 <SystemInit+0x94>)
2000004c:	4b0f      	ldr	r3, [pc, #60]	; (2000008c <SystemInit+0x8c>)
2000004e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000050:	461a      	mov	r2, r3
20000052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000054:	f013 0f02 	tst.w	r3, #2
20000058:	d0fb      	beq.n	20000052 <SystemInit+0x52>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2000005a:	2211      	movs	r2, #17
2000005c:	4b0b      	ldr	r3, [pc, #44]	; (2000008c <SystemInit+0x8c>)
2000005e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000060:	461a      	mov	r2, r3
20000062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000064:	f013 0f08 	tst.w	r3, #8
20000068:	d0fb      	beq.n	20000062 <SystemInit+0x62>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000006a:	2212      	movs	r2, #18
2000006c:	4b07      	ldr	r3, [pc, #28]	; (2000008c <SystemInit+0x8c>)
2000006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000070:	461a      	mov	r2, r3
20000072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000074:	f013 0f08 	tst.w	r3, #8
20000078:	d0fb      	beq.n	20000072 <SystemInit+0x72>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000007a:	4a07      	ldr	r2, [pc, #28]	; (20000098 <SystemInit+0x98>)
2000007c:	4b07      	ldr	r3, [pc, #28]	; (2000009c <SystemInit+0x9c>)
2000007e:	601a      	str	r2, [r3, #0]
20000080:	4770      	bx	lr
20000082:	bf00      	nop
20000084:	400e0a00 	.word	0x400e0a00
20000088:	00370809 	.word	0x00370809
2000008c:	400e0400 	.word	0x400e0400
20000090:	01370809 	.word	0x01370809
20000094:	201f3f03 	.word	0x201f3f03
20000098:	03d09000 	.word	0x03d09000
2000009c:	200002ac 	.word	0x200002ac

200000a0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000a0:	4b0c      	ldr	r3, [pc, #48]	; (200000d4 <system_init_flash+0x34>)
200000a2:	4298      	cmp	r0, r3
200000a4:	d90c      	bls.n	200000c0 <system_init_flash+0x20>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000a6:	4b0c      	ldr	r3, [pc, #48]	; (200000d8 <system_init_flash+0x38>)
200000a8:	4298      	cmp	r0, r3
200000aa:	d90d      	bls.n	200000c8 <system_init_flash+0x28>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000ac:	4b0b      	ldr	r3, [pc, #44]	; (200000dc <system_init_flash+0x3c>)
200000ae:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
200000b0:	bf94      	ite	ls
200000b2:	f44f 7200 	movls.w	r2, #512	; 0x200
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
200000b6:	f44f 7240 	movhi.w	r2, #768	; 0x300
200000ba:	4b09      	ldr	r3, [pc, #36]	; (200000e0 <system_init_flash+0x40>)
200000bc:	601a      	str	r2, [r3, #0]
200000be:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
200000c0:	2200      	movs	r2, #0
200000c2:	4b07      	ldr	r3, [pc, #28]	; (200000e0 <system_init_flash+0x40>)
200000c4:	601a      	str	r2, [r3, #0]
200000c6:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
200000c8:	f44f 7280 	mov.w	r2, #256	; 0x100
200000cc:	4b04      	ldr	r3, [pc, #16]	; (200000e0 <system_init_flash+0x40>)
200000ce:	601a      	str	r2, [r3, #0]
200000d0:	4770      	bx	lr
200000d2:	bf00      	nop
200000d4:	0103663f 	.word	0x0103663f
200000d8:	01c9c37f 	.word	0x01c9c37f
200000dc:	0337f97f 	.word	0x0337f97f
200000e0:	400e0a00 	.word	0x400e0a00

200000e4 <udi_api_cdc_comm>:
200000e4:	0040013d 00400189 004001bd 004001b9     =.@...@...@...@.
200000f4:	00000000                                ....

200000f8 <udi_api_cdc_data>:
200000f8:	00400531 00400199 004001b5 004001b9     1.@...@...@...@.
20000108:	00400391                                ..@.

2000010c <udc_string_desc_languageid>:
2000010c:	04090304                                ....

20000110 <comInterface>:
20000110:	0040269d 004026ad 004026bd 004026cd     .&@..&@..&@..&@.
20000120:	004026ed 00000000 00000000 00000000     .&@.............
	...

20000230 <syncBytes>:
20000230:	0000a39f                                ....

20000234 <udc_config>:
20000234:	2000028c 20000240 00000000              ... @.. ....

20000240 <udc_config_fs>:
20000240:	20000248 200002a0                       H.. ... 

20000248 <udc_desc_fs>:
20000248:	00430209 c0000102 00040932 02020100     ..C.....2.......
20000258:	24050001 04011000 05020224 01000624     ...$....$...$...
20000268:	03012405 83050701 10004003 00010409     .$.......@......
20000278:	00000a02 81050700 00004002 02020507     .........@......
20000288:	00000040                                @...

2000028c <udc_device_desc>:
2000028c:	02000112 40000002 240403eb 00000100     .......@...$....
2000029c:	00000100                                ....

200002a0 <udi_apis>:
200002a0:	200000e4 200000f8                       ... ... 

200002a8 <g_interrupt_enabled>:
200002a8:	00000001                                ....

200002ac <SystemCoreClock>:
200002ac:	003d0900                                ..=.

200002b0 <_impure_ptr>:
200002b0:	200002b8 00000000                       ... ....

200002b8 <impure_data>:
200002b8:	00000000 200005a4 2000060c 20000674     ....... ... t.. 
	...
20000360:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000370:	0005deec 0000000b 00000000 00000000     ................
	...

200006e0 <__atexit_recursive_mutex>:
200006e0:	20002b48                                H+. 

200006e4 <__global_locale>:
200006e4:	00000043 00000000 00000000 00000000     C...............
	...
20000704:	00000043 00000000 00000000 00000000     C...............
	...
20000724:	00000043 00000000 00000000 00000000     C...............
	...
20000744:	00000043 00000000 00000000 00000000     C...............
	...
20000764:	00000043 00000000 00000000 00000000     C...............
	...
20000784:	00000043 00000000 00000000 00000000     C...............
	...
200007a4:	00000043 00000000 00000000 00000000     C...............
	...
200007c4:	00407d59 0040713d 00000000 00408b64     Y}@.=q@.....d.@.
200007d4:	00408a64 00408838 00408838 00408838     d.@.8.@.8.@.8.@.
200007e4:	00408838 00408838 00408838 00408838     8.@.8.@.8.@.8.@.
200007f4:	00408838 00408838 ffffffff ffffffff     8.@.8.@.........
20000804:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
2000082c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000850 <__malloc_av_>:
	...
20000858:	20000850 20000850 20000858 20000858     P.. P.. X.. X.. 
20000868:	20000860 20000860 20000868 20000868     `.. `.. h.. h.. 
20000878:	20000870 20000870 20000878 20000878     p.. p.. x.. x.. 
20000888:	20000880 20000880 20000888 20000888     ... ... ... ... 
20000898:	20000890 20000890 20000898 20000898     ... ... ... ... 
200008a8:	200008a0 200008a0 200008a8 200008a8     ... ... ... ... 
200008b8:	200008b0 200008b0 200008b8 200008b8     ... ... ... ... 
200008c8:	200008c0 200008c0 200008c8 200008c8     ... ... ... ... 
200008d8:	200008d0 200008d0 200008d8 200008d8     ... ... ... ... 
200008e8:	200008e0 200008e0 200008e8 200008e8     ... ... ... ... 
200008f8:	200008f0 200008f0 200008f8 200008f8     ... ... ... ... 
20000908:	20000900 20000900 20000908 20000908     ... ... ... ... 
20000918:	20000910 20000910 20000918 20000918     ... ... ... ... 
20000928:	20000920 20000920 20000928 20000928      ..  .. (.. (.. 
20000938:	20000930 20000930 20000938 20000938     0.. 0.. 8.. 8.. 
20000948:	20000940 20000940 20000948 20000948     @.. @.. H.. H.. 
20000958:	20000950 20000950 20000958 20000958     P.. P.. X.. X.. 
20000968:	20000960 20000960 20000968 20000968     `.. `.. h.. h.. 
20000978:	20000970 20000970 20000978 20000978     p.. p.. x.. x.. 
20000988:	20000980 20000980 20000988 20000988     ... ... ... ... 
20000998:	20000990 20000990 20000998 20000998     ... ... ... ... 
200009a8:	200009a0 200009a0 200009a8 200009a8     ... ... ... ... 
200009b8:	200009b0 200009b0 200009b8 200009b8     ... ... ... ... 
200009c8:	200009c0 200009c0 200009c8 200009c8     ... ... ... ... 
200009d8:	200009d0 200009d0 200009d8 200009d8     ... ... ... ... 
200009e8:	200009e0 200009e0 200009e8 200009e8     ... ... ... ... 
200009f8:	200009f0 200009f0 200009f8 200009f8     ... ... ... ... 
20000a08:	20000a00 20000a00 20000a08 20000a08     ... ... ... ... 
20000a18:	20000a10 20000a10 20000a18 20000a18     ... ... ... ... 
20000a28:	20000a20 20000a20 20000a28 20000a28      ..  .. (.. (.. 
20000a38:	20000a30 20000a30 20000a38 20000a38     0.. 0.. 8.. 8.. 
20000a48:	20000a40 20000a40 20000a48 20000a48     @.. @.. H.. H.. 
20000a58:	20000a50 20000a50 20000a58 20000a58     P.. P.. X.. X.. 
20000a68:	20000a60 20000a60 20000a68 20000a68     `.. `.. h.. h.. 
20000a78:	20000a70 20000a70 20000a78 20000a78     p.. p.. x.. x.. 
20000a88:	20000a80 20000a80 20000a88 20000a88     ... ... ... ... 
20000a98:	20000a90 20000a90 20000a98 20000a98     ... ... ... ... 
20000aa8:	20000aa0 20000aa0 20000aa8 20000aa8     ... ... ... ... 
20000ab8:	20000ab0 20000ab0 20000ab8 20000ab8     ... ... ... ... 
20000ac8:	20000ac0 20000ac0 20000ac8 20000ac8     ... ... ... ... 
20000ad8:	20000ad0 20000ad0 20000ad8 20000ad8     ... ... ... ... 
20000ae8:	20000ae0 20000ae0 20000ae8 20000ae8     ... ... ... ... 
20000af8:	20000af0 20000af0 20000af8 20000af8     ... ... ... ... 
20000b08:	20000b00 20000b00 20000b08 20000b08     ... ... ... ... 
20000b18:	20000b10 20000b10 20000b18 20000b18     ... ... ... ... 
20000b28:	20000b20 20000b20 20000b28 20000b28      ..  .. (.. (.. 
20000b38:	20000b30 20000b30 20000b38 20000b38     0.. 0.. 8.. 8.. 
20000b48:	20000b40 20000b40 20000b48 20000b48     @.. @.. H.. H.. 
20000b58:	20000b50 20000b50 20000b58 20000b58     P.. P.. X.. X.. 
20000b68:	20000b60 20000b60 20000b68 20000b68     `.. `.. h.. h.. 
20000b78:	20000b70 20000b70 20000b78 20000b78     p.. p.. x.. x.. 
20000b88:	20000b80 20000b80 20000b88 20000b88     ... ... ... ... 
20000b98:	20000b90 20000b90 20000b98 20000b98     ... ... ... ... 
20000ba8:	20000ba0 20000ba0 20000ba8 20000ba8     ... ... ... ... 
20000bb8:	20000bb0 20000bb0 20000bb8 20000bb8     ... ... ... ... 
20000bc8:	20000bc0 20000bc0 20000bc8 20000bc8     ... ... ... ... 
20000bd8:	20000bd0 20000bd0 20000bd8 20000bd8     ... ... ... ... 
20000be8:	20000be0 20000be0 20000be8 20000be8     ... ... ... ... 
20000bf8:	20000bf0 20000bf0 20000bf8 20000bf8     ... ... ... ... 
20000c08:	20000c00 20000c00 20000c08 20000c08     ... ... ... ... 
20000c18:	20000c10 20000c10 20000c18 20000c18     ... ... ... ... 
20000c28:	20000c20 20000c20 20000c28 20000c28      ..  .. (.. (.. 
20000c38:	20000c30 20000c30 20000c38 20000c38     0.. 0.. 8.. 8.. 
20000c48:	20000c40 20000c40 20000c48 20000c48     @.. @.. H.. H.. 

20000c58 <__malloc_sbrk_base>:
20000c58:	ffffffff                                ....

20000c5c <__malloc_trim_threshold>:
20000c5c:	00020000                                ....
