
Daq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000096cc  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004096cc  004096cc  000196cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c48  20000000  004096d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000012fc  20000c48  0040a31c  00020c48  2**2
                  ALLOC
  4 .stack        00002004  20001f44  0040b618  00020c48  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020c48  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020c71  2**0
                  CONTENTS, READONLY
  7 .debug_info   000261c7  00000000  00000000  00020cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004d06  00000000  00000000  00046e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d98  00000000  00000000  0004bb97  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00017b08  00000000  00000000  0004c92f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00016c1d  00000000  00000000  00064437  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000531c2  00000000  00000000  0007b054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000c07c  00000000  00000000  000ce216  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002ce8  00000000  00000000  000da292  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000030b4  00000000  00000000  000dcf7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 3f 00 20 a1 44 40 00 9d 44 40 00 9d 44 40 00     H?. .D@..D@..D@.
  400010:	9d 44 40 00 9d 44 40 00 9d 44 40 00 00 00 00 00     .D@..D@..D@.....
	...
  40002c:	9d 44 40 00 9d 44 40 00 00 00 00 00 9d 44 40 00     .D@..D@......D@.
  40003c:	9d 44 40 00 9d 44 40 00 9d 44 40 00 9d 44 40 00     .D@..D@..D@..D@.
  40004c:	9d 44 40 00 9d 44 40 00 9d 44 40 00 9d 44 40 00     .D@..D@..D@..D@.
  40005c:	9d 44 40 00 9d 44 40 00 9d 44 40 00 9d 44 40 00     .D@..D@..D@..D@.
  40006c:	7d 13 40 00 65 14 40 00 9d 44 40 00 9d 44 40 00     }.@.e.@..D@..D@.
  40007c:	9d 44 40 00 9d 44 40 00 9d 44 40 00 9d 44 40 00     .D@..D@..D@..D@.
  40008c:	9d 44 40 00 9d 44 40 00 9d 44 40 00 9d 44 40 00     .D@..D@..D@..D@.
  40009c:	9d 44 40 00 9d 44 40 00 9d 44 40 00 9d 44 40 00     .D@..D@..D@..D@.
  4000ac:	9d 44 40 00 9d 44 40 00 51 33 40 00 9d 44 40 00     .D@..D@.Q3@..D@.
  4000bc:	9d 44 40 00 9d 44 40 00 9d 44 40 00 21 19 40 00     .D@..D@..D@.!.@.
  4000cc:	9d 44 40 00                                         .D@.

004000d0 <__do_global_dtors_aux>:
  4000d0:	b510      	push	{r4, lr}
  4000d2:	4c05      	ldr	r4, [pc, #20]	; (4000e8 <__do_global_dtors_aux+0x18>)
  4000d4:	7823      	ldrb	r3, [r4, #0]
  4000d6:	b933      	cbnz	r3, 4000e6 <__do_global_dtors_aux+0x16>
  4000d8:	4b04      	ldr	r3, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x1c>)
  4000da:	b113      	cbz	r3, 4000e2 <__do_global_dtors_aux+0x12>
  4000dc:	4804      	ldr	r0, [pc, #16]	; (4000f0 <__do_global_dtors_aux+0x20>)
  4000de:	f3af 8000 	nop.w
  4000e2:	2301      	movs	r3, #1
  4000e4:	7023      	strb	r3, [r4, #0]
  4000e6:	bd10      	pop	{r4, pc}
  4000e8:	20000c48 	.word	0x20000c48
  4000ec:	00000000 	.word	0x00000000
  4000f0:	004096d4 	.word	0x004096d4

004000f4 <frame_dummy>:
  4000f4:	4b0c      	ldr	r3, [pc, #48]	; (400128 <frame_dummy+0x34>)
  4000f6:	b143      	cbz	r3, 40010a <frame_dummy+0x16>
  4000f8:	480c      	ldr	r0, [pc, #48]	; (40012c <frame_dummy+0x38>)
  4000fa:	b510      	push	{r4, lr}
  4000fc:	490c      	ldr	r1, [pc, #48]	; (400130 <frame_dummy+0x3c>)
  4000fe:	f3af 8000 	nop.w
  400102:	480c      	ldr	r0, [pc, #48]	; (400134 <frame_dummy+0x40>)
  400104:	6803      	ldr	r3, [r0, #0]
  400106:	b923      	cbnz	r3, 400112 <frame_dummy+0x1e>
  400108:	bd10      	pop	{r4, pc}
  40010a:	480a      	ldr	r0, [pc, #40]	; (400134 <frame_dummy+0x40>)
  40010c:	6803      	ldr	r3, [r0, #0]
  40010e:	b933      	cbnz	r3, 40011e <frame_dummy+0x2a>
  400110:	4770      	bx	lr
  400112:	4b09      	ldr	r3, [pc, #36]	; (400138 <frame_dummy+0x44>)
  400114:	2b00      	cmp	r3, #0
  400116:	d0f7      	beq.n	400108 <frame_dummy+0x14>
  400118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40011c:	4718      	bx	r3
  40011e:	4b06      	ldr	r3, [pc, #24]	; (400138 <frame_dummy+0x44>)
  400120:	2b00      	cmp	r3, #0
  400122:	d0f5      	beq.n	400110 <frame_dummy+0x1c>
  400124:	4718      	bx	r3
  400126:	bf00      	nop
  400128:	00000000 	.word	0x00000000
  40012c:	004096d4 	.word	0x004096d4
  400130:	20000c4c 	.word	0x20000c4c
  400134:	004096d4 	.word	0x004096d4
  400138:	00000000 	.word	0x00000000

0040013c <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  40013c:	2300      	movs	r3, #0
{
  40013e:	b4f0      	push	{r4, r5, r6, r7}
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);

	uid_cdc_state_msg[port].header.bmRequestType =
  400140:	27a1      	movs	r7, #161	; 0xa1
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400142:	2620      	movs	r6, #32
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400144:	2502      	movs	r5, #2
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  400146:	2408      	movs	r4, #8
	udi_cdc_nb_comm_enabled = 0;
  400148:	480b      	ldr	r0, [pc, #44]	; (400178 <udi_cdc_comm_enable+0x3c>)
	udi_cdc_state[port] = CPU_TO_LE16(0);
  40014a:	4a0c      	ldr	r2, [pc, #48]	; (40017c <udi_cdc_comm_enable+0x40>)
	udi_cdc_nb_comm_enabled = 0;
  40014c:	7003      	strb	r3, [r0, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
  40014e:	8013      	strh	r3, [r2, #0]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  400150:	7801      	ldrb	r1, [r0, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
  400152:	4a0b      	ldr	r2, [pc, #44]	; (400180 <udi_cdc_comm_enable+0x44>)
	udi_cdc_nb_comm_enabled++;
  400154:	3101      	adds	r1, #1
  400156:	b2c9      	uxtb	r1, r1
  400158:	7001      	strb	r1, [r0, #0]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  40015a:	490a      	ldr	r1, [pc, #40]	; (400184 <udi_cdc_comm_enable+0x48>)
  40015c:	480a      	ldr	r0, [pc, #40]	; (400188 <udi_cdc_comm_enable+0x4c>)
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  40015e:	8053      	strh	r3, [r2, #2]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400160:	6008      	str	r0, [r1, #0]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  400162:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  400164:	8113      	strh	r3, [r2, #8]
	uid_cdc_state_msg[port].header.bmRequestType =
  400166:	7017      	strb	r7, [r2, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400168:	7056      	strb	r6, [r2, #1]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  40016a:	80d5      	strh	r5, [r2, #6]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  40016c:	710b      	strb	r3, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  40016e:	714b      	strb	r3, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  400170:	718c      	strb	r4, [r1, #6]
	return true;
}
  400172:	2001      	movs	r0, #1
  400174:	bcf0      	pop	{r4, r5, r6, r7}
  400176:	4770      	bx	lr
  400178:	20000c6f 	.word	0x20000c6f
  40017c:	20000f04 	.word	0x20000f04
  400180:	2000119c 	.word	0x2000119c
  400184:	20000c68 	.word	0x20000c68
  400188:	000f4240 	.word	0x000f4240

0040018c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  40018c:	4a02      	ldr	r2, [pc, #8]	; (400198 <udi_cdc_comm_disable+0xc>)
  40018e:	7813      	ldrb	r3, [r2, #0]
  400190:	3b01      	subs	r3, #1
  400192:	b2db      	uxtb	r3, r3
  400194:	7013      	strb	r3, [r2, #0]
  400196:	4770      	bx	lr
  400198:	20000c6f 	.word	0x20000c6f

0040019c <udi_cdc_data_disable>:

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
	port = udi_cdc_nb_data_enabled;
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  40019c:	2000      	movs	r0, #0
	udi_cdc_nb_data_enabled--;
  40019e:	4a04      	ldr	r2, [pc, #16]	; (4001b0 <udi_cdc_data_disable+0x14>)
	udi_cdc_data_running = false;
  4001a0:	4904      	ldr	r1, [pc, #16]	; (4001b4 <udi_cdc_data_disable+0x18>)
	udi_cdc_nb_data_enabled--;
  4001a2:	7813      	ldrb	r3, [r2, #0]
  4001a4:	3b01      	subs	r3, #1
  4001a6:	b2db      	uxtb	r3, r3
  4001a8:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  4001aa:	7813      	ldrb	r3, [r2, #0]
	udi_cdc_data_running = false;
  4001ac:	7008      	strb	r0, [r1, #0]
  4001ae:	4770      	bx	lr
  4001b0:	20000c70 	.word	0x20000c70
  4001b4:	20000c66 	.word	0x20000c66

004001b8 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  4001b8:	2000      	movs	r0, #0
  4001ba:	4770      	bx	lr

004001bc <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  4001bc:	2000      	movs	r0, #0
  4001be:	4770      	bx	lr

004001c0 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  4001c0:	4770      	bx	lr
  4001c2:	bf00      	nop

004001c4 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
  4001c4:	4a15      	ldr	r2, [pc, #84]	; (40021c <udi_cdc_comm_setup+0x58>)
  4001c6:	7813      	ldrb	r3, [r2, #0]
  4001c8:	f013 0f80 	tst.w	r3, #128	; 0x80
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
	if (Udd_setup_is_in()) {
  4001d0:	d103      	bne.n	4001da <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001d2:	2b20      	cmp	r3, #32
  4001d4:	d00e      	beq.n	4001f4 <udi_cdc_comm_setup+0x30>
					return false; // Error for USB host
  4001d6:	2000      	movs	r0, #0
}
  4001d8:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001da:	2b20      	cmp	r3, #32
  4001dc:	d1fb      	bne.n	4001d6 <udi_cdc_comm_setup+0x12>
			switch (udd_g_ctrlreq.req.bRequest) {
  4001de:	7853      	ldrb	r3, [r2, #1]
  4001e0:	2b21      	cmp	r3, #33	; 0x21
  4001e2:	d1f8      	bne.n	4001d6 <udi_cdc_comm_setup+0x12>
				if (sizeof(usb_cdc_line_coding_t) !=
  4001e4:	88d3      	ldrh	r3, [r2, #6]
  4001e6:	2b07      	cmp	r3, #7
  4001e8:	d1f5      	bne.n	4001d6 <udi_cdc_comm_setup+0x12>
				udd_g_ctrlreq.payload =
  4001ea:	490d      	ldr	r1, [pc, #52]	; (400220 <udi_cdc_comm_setup+0x5c>)
				udd_g_ctrlreq.payload_size =
  4001ec:	8193      	strh	r3, [r2, #12]
				udd_g_ctrlreq.payload =
  4001ee:	6091      	str	r1, [r2, #8]
				return true;
  4001f0:	2001      	movs	r0, #1
  4001f2:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4001f4:	7850      	ldrb	r0, [r2, #1]
  4001f6:	2820      	cmp	r0, #32
  4001f8:	d005      	beq.n	400206 <udi_cdc_comm_setup+0x42>
	return false;  // request Not supported
  4001fa:	f1a0 0022 	sub.w	r0, r0, #34	; 0x22
  4001fe:	fab0 f080 	clz	r0, r0
  400202:	0940      	lsrs	r0, r0, #5
  400204:	4770      	bx	lr
				if (sizeof(usb_cdc_line_coding_t) !=
  400206:	88d3      	ldrh	r3, [r2, #6]
  400208:	2b07      	cmp	r3, #7
  40020a:	d1e4      	bne.n	4001d6 <udi_cdc_comm_setup+0x12>
				udd_g_ctrlreq.callback =
  40020c:	4805      	ldr	r0, [pc, #20]	; (400224 <udi_cdc_comm_setup+0x60>)
				udd_g_ctrlreq.payload =
  40020e:	4904      	ldr	r1, [pc, #16]	; (400220 <udi_cdc_comm_setup+0x5c>)
				udd_g_ctrlreq.callback =
  400210:	6110      	str	r0, [r2, #16]
				udd_g_ctrlreq.payload_size =
  400212:	8193      	strh	r3, [r2, #12]
				udd_g_ctrlreq.payload =
  400214:	6091      	str	r1, [r2, #8]
				udd_g_ctrlreq.payload_size =
  400216:	2001      	movs	r0, #1
  400218:	4770      	bx	lr
  40021a:	bf00      	nop
  40021c:	200012c4 	.word	0x200012c4
  400220:	20000c68 	.word	0x20000c68
  400224:	004001c1 	.word	0x004001c1

00400228 <udi_cdc_tx_send.isra.2.part.3>:
	}
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
  400228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40022c:	b085      	sub	sp, #20
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40022e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400232:	fab3 f383 	clz	r3, r3
  400236:	095b      	lsrs	r3, r3, #5
  400238:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  40023a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40023c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400240:	2300      	movs	r3, #0
  400242:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40035c <udi_cdc_tx_send.isra.2.part.3+0x134>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  400246:	f8df a118 	ldr.w	sl, [pc, #280]	; 400360 <udi_cdc_tx_send.isra.2.part.3+0x138>
  40024a:	f888 3000 	strb.w	r3, [r8]
	return flags;
  40024e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  400252:	f89a 4000 	ldrb.w	r4, [sl]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400256:	4f36      	ldr	r7, [pc, #216]	; (400330 <udi_cdc_tx_send.isra.2.part.3+0x108>)
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  400258:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  40025a:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
  40025e:	4626      	mov	r6, r4
		sof_zlp_counter++;
  400260:	4d34      	ldr	r5, [pc, #208]	; (400334 <udi_cdc_tx_send.isra.2.part.3+0x10c>)
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400262:	2b00      	cmp	r3, #0
  400264:	d042      	beq.n	4002ec <udi_cdc_tx_send.isra.2.part.3+0xc4>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  400266:	2200      	movs	r2, #0

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400268:	4b33      	ldr	r3, [pc, #204]	; (400338 <udi_cdc_tx_send.isra.2.part.3+0x110>)
	sof_zlp_counter = 0;
  40026a:	802a      	strh	r2, [r5, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
  40026c:	781b      	ldrb	r3, [r3, #0]
  40026e:	b343      	cbz	r3, 4002c2 <udi_cdc_tx_send.isra.2.part.3+0x9a>
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  400270:	fab4 f684 	clz	r6, r4
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  400274:	2301      	movs	r3, #1
  400276:	4931      	ldr	r1, [pc, #196]	; (40033c <udi_cdc_tx_send.isra.2.part.3+0x114>)
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  400278:	0976      	lsrs	r6, r6, #5
	udi_cdc_tx_trans_ongoing[port] = true;
  40027a:	700b      	strb	r3, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40027c:	f1b9 0f00 	cmp.w	r9, #0
  400280:	d12a      	bne.n	4002d8 <udi_cdc_tx_send.isra.2.part.3+0xb0>
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  400282:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
  400286:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  40028a:	bf14      	ite	ne
  40028c:	2501      	movne	r5, #1
  40028e:	2500      	moveq	r5, #0
	if (b_short_packet) {
  400290:	d028      	beq.n	4002e4 <udi_cdc_tx_send.isra.2.part.3+0xbc>
		if (udd_is_high_speed()) {
  400292:	4b2b      	ldr	r3, [pc, #172]	; (400340 <udi_cdc_tx_send.isra.2.part.3+0x118>)
  400294:	4798      	blx	r3
  400296:	2800      	cmp	r0, #0
  400298:	d043      	beq.n	400322 <udi_cdc_tx_send.isra.2.part.3+0xfa>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  40029a:	4b2a      	ldr	r3, [pc, #168]	; (400344 <udi_cdc_tx_send.isra.2.part.3+0x11c>)
  40029c:	4798      	blx	r3
  40029e:	4a2a      	ldr	r2, [pc, #168]	; (400348 <udi_cdc_tx_send.isra.2.part.3+0x120>)
  4002a0:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
  4002a4:	8010      	strh	r0, [r2, #0]
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
  4002a6:	4c29      	ldr	r4, [pc, #164]	; (40034c <udi_cdc_tx_send.isra.2.part.3+0x124>)
	udd_ep_run( ep,
  4002a8:	4829      	ldr	r0, [pc, #164]	; (400350 <udi_cdc_tx_send.isra.2.part.3+0x128>)
			udi_cdc_tx_buf[port][buf_sel_trans],
  4002aa:	eb06 0686 	add.w	r6, r6, r6, lsl #2
	udd_ep_run( ep,
  4002ae:	eb04 1286 	add.w	r2, r4, r6, lsl #6
  4002b2:	9000      	str	r0, [sp, #0]
  4002b4:	4629      	mov	r1, r5
  4002b6:	2081      	movs	r0, #129	; 0x81
  4002b8:	4c26      	ldr	r4, [pc, #152]	; (400354 <udi_cdc_tx_send.isra.2.part.3+0x12c>)
  4002ba:	47a0      	blx	r4
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  4002bc:	b005      	add	sp, #20
  4002be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4002c2:	fab4 f484 	clz	r4, r4
	udi_cdc_tx_trans_ongoing[port] = true;
  4002c6:	2301      	movs	r3, #1
  4002c8:	491c      	ldr	r1, [pc, #112]	; (40033c <udi_cdc_tx_send.isra.2.part.3+0x114>)
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4002ca:	0964      	lsrs	r4, r4, #5
  4002cc:	f88a 4000 	strb.w	r4, [sl]
	udi_cdc_tx_trans_ongoing[port] = true;
  4002d0:	700b      	strb	r3, [r1, #0]
  4002d2:	f1b9 0f00 	cmp.w	r9, #0
  4002d6:	d0d4      	beq.n	400282 <udi_cdc_tx_send.isra.2.part.3+0x5a>
		cpu_irq_enable();
  4002d8:	f888 3000 	strb.w	r3, [r8]
  4002dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4002e0:	b662      	cpsie	i
  4002e2:	e7ce      	b.n	400282 <udi_cdc_tx_send.isra.2.part.3+0x5a>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  4002e4:	2100      	movs	r1, #0
  4002e6:	4a18      	ldr	r2, [pc, #96]	; (400348 <udi_cdc_tx_send.isra.2.part.3+0x120>)
  4002e8:	8011      	strh	r1, [r2, #0]
  4002ea:	e7dc      	b.n	4002a6 <udi_cdc_tx_send.isra.2.part.3+0x7e>
		sof_zlp_counter++;
  4002ec:	882b      	ldrh	r3, [r5, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4002ee:	f8df b050 	ldr.w	fp, [pc, #80]	; 400340 <udi_cdc_tx_send.isra.2.part.3+0x118>
		sof_zlp_counter++;
  4002f2:	3301      	adds	r3, #1
  4002f4:	802b      	strh	r3, [r5, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4002f6:	47d8      	blx	fp
  4002f8:	b910      	cbnz	r0, 400300 <udi_cdc_tx_send.isra.2.part.3+0xd8>
  4002fa:	882b      	ldrh	r3, [r5, #0]
  4002fc:	2b63      	cmp	r3, #99	; 0x63
  4002fe:	d906      	bls.n	40030e <udi_cdc_tx_send.isra.2.part.3+0xe6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  400300:	47d8      	blx	fp
  400302:	2800      	cmp	r0, #0
  400304:	d0af      	beq.n	400266 <udi_cdc_tx_send.isra.2.part.3+0x3e>
  400306:	882b      	ldrh	r3, [r5, #0]
  400308:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  40030c:	d2ab      	bcs.n	400266 <udi_cdc_tx_send.isra.2.part.3+0x3e>
	if (cpu_irq_is_enabled_flags(flags))
  40030e:	f1b9 0f00 	cmp.w	r9, #0
  400312:	d0d3      	beq.n	4002bc <udi_cdc_tx_send.isra.2.part.3+0x94>
		cpu_irq_enable();
  400314:	2301      	movs	r3, #1
  400316:	f888 3000 	strb.w	r3, [r8]
  40031a:	f3bf 8f5f 	dmb	sy
  40031e:	b662      	cpsie	i
  400320:	e7cc      	b.n	4002bc <udi_cdc_tx_send.isra.2.part.3+0x94>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400322:	4b0d      	ldr	r3, [pc, #52]	; (400358 <udi_cdc_tx_send.isra.2.part.3+0x130>)
  400324:	4798      	blx	r3
  400326:	4a08      	ldr	r2, [pc, #32]	; (400348 <udi_cdc_tx_send.isra.2.part.3+0x120>)
  400328:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
  40032c:	8010      	strh	r0, [r2, #0]
  40032e:	e7ba      	b.n	4002a6 <udi_cdc_tx_send.isra.2.part.3+0x7e>
  400330:	2000118c 	.word	0x2000118c
  400334:	20000c64 	.word	0x20000c64
  400338:	20000f08 	.word	0x20000f08
  40033c:	20001198 	.word	0x20001198
  400340:	004026dd 	.word	0x004026dd
  400344:	00402741 	.word	0x00402741
  400348:	20001194 	.word	0x20001194
  40034c:	20000f0c 	.word	0x20000f0c
  400350:	00400365 	.word	0x00400365
  400354:	00402a79 	.word	0x00402a79
  400358:	00402731 	.word	0x00402731
  40035c:	20000290 	.word	0x20000290
  400360:	20001190 	.word	0x20001190

00400364 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  400364:	b9e8      	cbnz	r0, 4003a2 <udi_cdc_data_sent+0x3e>
{
  400366:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  400368:	4a14      	ldr	r2, [pc, #80]	; (4003bc <udi_cdc_data_sent+0x58>)
  40036a:	4e15      	ldr	r6, [pc, #84]	; (4003c0 <udi_cdc_data_sent+0x5c>)
  40036c:	7812      	ldrb	r2, [r2, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40036e:	4d15      	ldr	r5, [pc, #84]	; (4003c4 <udi_cdc_data_sent+0x60>)
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  400370:	fab2 f282 	clz	r2, r2
	udi_cdc_tx_trans_ongoing[port] = false;
  400374:	4c14      	ldr	r4, [pc, #80]	; (4003c8 <udi_cdc_data_sent+0x64>)
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  400376:	0952      	lsrs	r2, r2, #5
	udi_cdc_tx_both_buf_to_send[port] = false;
  400378:	7028      	strb	r0, [r5, #0]
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  40037a:	f826 0012 	strh.w	r0, [r6, r2, lsl #1]
	udi_cdc_tx_trans_ongoing[port] = false;
  40037e:	7020      	strb	r0, [r4, #0]
	if (n != 0) {
  400380:	b981      	cbnz	r1, 4003a4 <udi_cdc_data_sent+0x40>
	if (udi_cdc_tx_trans_ongoing[port]) {
  400382:	7823      	ldrb	r3, [r4, #0]
  400384:	b103      	cbz	r3, 400388 <udi_cdc_data_sent+0x24>
  400386:	bd70      	pop	{r4, r5, r6, pc}
	if (udd_is_high_speed()) {
  400388:	4b10      	ldr	r3, [pc, #64]	; (4003cc <udi_cdc_data_sent+0x68>)
  40038a:	4798      	blx	r3
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  40038c:	4a10      	ldr	r2, [pc, #64]	; (4003d0 <udi_cdc_data_sent+0x6c>)
	if (udd_is_high_speed()) {
  40038e:	b978      	cbnz	r0, 4003b0 <udi_cdc_data_sent+0x4c>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  400390:	4b10      	ldr	r3, [pc, #64]	; (4003d4 <udi_cdc_data_sent+0x70>)
  400392:	8814      	ldrh	r4, [r2, #0]
  400394:	4798      	blx	r3
  400396:	4284      	cmp	r4, r0
  400398:	d0f5      	beq.n	400386 <udi_cdc_data_sent+0x22>
}
  40039a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  40039e:	4b0e      	ldr	r3, [pc, #56]	; (4003d8 <udi_cdc_data_sent+0x74>)
  4003a0:	4718      	bx	r3
  4003a2:	4770      	bx	lr
		UDI_CDC_TX_EMPTY_NOTIFY(port);
  4003a4:	4b0d      	ldr	r3, [pc, #52]	; (4003dc <udi_cdc_data_sent+0x78>)
  4003a6:	4798      	blx	r3
	if (udi_cdc_tx_trans_ongoing[port]) {
  4003a8:	7823      	ldrb	r3, [r4, #0]
  4003aa:	2b00      	cmp	r3, #0
  4003ac:	d1eb      	bne.n	400386 <udi_cdc_data_sent+0x22>
  4003ae:	e7eb      	b.n	400388 <udi_cdc_data_sent+0x24>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  4003b0:	4b0b      	ldr	r3, [pc, #44]	; (4003e0 <udi_cdc_data_sent+0x7c>)
  4003b2:	8814      	ldrh	r4, [r2, #0]
  4003b4:	4798      	blx	r3
  4003b6:	4284      	cmp	r4, r0
  4003b8:	d1ef      	bne.n	40039a <udi_cdc_data_sent+0x36>
  4003ba:	e7e4      	b.n	400386 <udi_cdc_data_sent+0x22>
  4003bc:	20001190 	.word	0x20001190
  4003c0:	2000118c 	.word	0x2000118c
  4003c4:	20000f08 	.word	0x20000f08
  4003c8:	20001198 	.word	0x20001198
  4003cc:	004026dd 	.word	0x004026dd
  4003d0:	20001194 	.word	0x20001194
  4003d4:	00402731 	.word	0x00402731
  4003d8:	00400229 	.word	0x00400229
  4003dc:	00402e71 	.word	0x00402e71
  4003e0:	00402741 	.word	0x00402741

004003e4 <udi_cdc_data_sof_notify>:
{
  4003e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (udi_cdc_tx_trans_ongoing[port]) {
  4003e8:	4d4e      	ldr	r5, [pc, #312]	; (400524 <udi_cdc_data_sof_notify+0x140>)
{
  4003ea:	b087      	sub	sp, #28
	if (udi_cdc_tx_trans_ongoing[port]) {
  4003ec:	782b      	ldrb	r3, [r5, #0]
  4003ee:	b113      	cbz	r3, 4003f6 <udi_cdc_data_sof_notify+0x12>
}
  4003f0:	b007      	add	sp, #28
  4003f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (udd_is_high_speed()) {
  4003f6:	4f4c      	ldr	r7, [pc, #304]	; (400528 <udi_cdc_data_sof_notify+0x144>)
  4003f8:	47b8      	blx	r7
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  4003fa:	f8df 814c 	ldr.w	r8, [pc, #332]	; 400548 <udi_cdc_data_sof_notify+0x164>
	if (udd_is_high_speed()) {
  4003fe:	2800      	cmp	r0, #0
  400400:	d14f      	bne.n	4004a2 <udi_cdc_data_sof_notify+0xbe>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  400402:	4b4a      	ldr	r3, [pc, #296]	; (40052c <udi_cdc_data_sof_notify+0x148>)
  400404:	f8b8 4000 	ldrh.w	r4, [r8]
  400408:	4798      	blx	r3
  40040a:	4284      	cmp	r4, r0
  40040c:	d0f0      	beq.n	4003f0 <udi_cdc_data_sof_notify+0xc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40040e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400412:	fab3 f383 	clz	r3, r3
  400416:	095b      	lsrs	r3, r3, #5
  400418:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  40041a:	b672      	cpsid	i
  40041c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400420:	2200      	movs	r2, #0
  400422:	4b43      	ldr	r3, [pc, #268]	; (400530 <udi_cdc_data_sof_notify+0x14c>)
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  400424:	f8df b124 	ldr.w	fp, [pc, #292]	; 40054c <udi_cdc_data_sof_notify+0x168>
  400428:	701a      	strb	r2, [r3, #0]
	return flags;
  40042a:	9905      	ldr	r1, [sp, #20]
  40042c:	f89b 4000 	ldrb.w	r4, [fp]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400430:	f8df 911c 	ldr.w	r9, [pc, #284]	; 400550 <udi_cdc_data_sof_notify+0x16c>
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  400434:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400436:	f839 2014 	ldrh.w	r2, [r9, r4, lsl #1]
  40043a:	4626      	mov	r6, r4
  40043c:	2a00      	cmp	r2, #0
  40043e:	d03f      	beq.n	4004c0 <udi_cdc_data_sof_notify+0xdc>
  400440:	f8df a110 	ldr.w	sl, [pc, #272]	; 400554 <udi_cdc_data_sof_notify+0x170>
	sof_zlp_counter = 0;
  400444:	2000      	movs	r0, #0
	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400446:	4a3b      	ldr	r2, [pc, #236]	; (400534 <udi_cdc_data_sof_notify+0x150>)
	sof_zlp_counter = 0;
  400448:	f8aa 0000 	strh.w	r0, [sl]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
  40044c:	7812      	ldrb	r2, [r2, #0]
  40044e:	2a00      	cmp	r2, #0
  400450:	d12e      	bne.n	4004b0 <udi_cdc_data_sof_notify+0xcc>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400452:	fab4 f484 	clz	r4, r4
  400456:	0964      	lsrs	r4, r4, #5
  400458:	f88b 4000 	strb.w	r4, [fp]
	udi_cdc_tx_trans_ongoing[port] = true;
  40045c:	2201      	movs	r2, #1
  40045e:	702a      	strb	r2, [r5, #0]
	if (cpu_irq_is_enabled_flags(flags))
  400460:	2900      	cmp	r1, #0
  400462:	d153      	bne.n	40050c <udi_cdc_data_sof_notify+0x128>
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  400464:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
  400468:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  40046c:	bf14      	ite	ne
  40046e:	2401      	movne	r4, #1
  400470:	2400      	moveq	r4, #0
	if (b_short_packet) {
  400472:	d021      	beq.n	4004b8 <udi_cdc_data_sof_notify+0xd4>
		if (udd_is_high_speed()) {
  400474:	47b8      	blx	r7
  400476:	2800      	cmp	r0, #0
  400478:	d04d      	beq.n	400516 <udi_cdc_data_sof_notify+0x132>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  40047a:	4b2f      	ldr	r3, [pc, #188]	; (400538 <udi_cdc_data_sof_notify+0x154>)
  40047c:	4798      	blx	r3
  40047e:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
  400482:	f8a8 0000 	strh.w	r0, [r8]
	udd_ep_run( ep,
  400486:	482d      	ldr	r0, [pc, #180]	; (40053c <udi_cdc_data_sof_notify+0x158>)
			udi_cdc_tx_buf[port][buf_sel_trans],
  400488:	4a2d      	ldr	r2, [pc, #180]	; (400540 <udi_cdc_data_sof_notify+0x15c>)
  40048a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
	udd_ep_run( ep,
  40048e:	4621      	mov	r1, r4
  400490:	9000      	str	r0, [sp, #0]
  400492:	eb02 1286 	add.w	r2, r2, r6, lsl #6
  400496:	4c2b      	ldr	r4, [pc, #172]	; (400544 <udi_cdc_data_sof_notify+0x160>)
  400498:	2081      	movs	r0, #129	; 0x81
  40049a:	47a0      	blx	r4
}
  40049c:	b007      	add	sp, #28
  40049e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  4004a2:	4b25      	ldr	r3, [pc, #148]	; (400538 <udi_cdc_data_sof_notify+0x154>)
  4004a4:	f8b8 4000 	ldrh.w	r4, [r8]
  4004a8:	4798      	blx	r3
  4004aa:	4284      	cmp	r4, r0
  4004ac:	d1af      	bne.n	40040e <udi_cdc_data_sof_notify+0x2a>
  4004ae:	e79f      	b.n	4003f0 <udi_cdc_data_sof_notify+0xc>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  4004b0:	fab4 f684 	clz	r6, r4
  4004b4:	0976      	lsrs	r6, r6, #5
  4004b6:	e7d1      	b.n	40045c <udi_cdc_data_sof_notify+0x78>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  4004b8:	2200      	movs	r2, #0
  4004ba:	f8a8 2000 	strh.w	r2, [r8]
  4004be:	e7e2      	b.n	400486 <udi_cdc_data_sof_notify+0xa2>
		sof_zlp_counter++;
  4004c0:	f8df a090 	ldr.w	sl, [pc, #144]	; 400554 <udi_cdc_data_sof_notify+0x170>
  4004c4:	9303      	str	r3, [sp, #12]
  4004c6:	f8ba 2000 	ldrh.w	r2, [sl]
  4004ca:	9102      	str	r1, [sp, #8]
  4004cc:	3201      	adds	r2, #1
  4004ce:	f8aa 2000 	strh.w	r2, [sl]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4004d2:	47b8      	blx	r7
  4004d4:	9902      	ldr	r1, [sp, #8]
  4004d6:	9b03      	ldr	r3, [sp, #12]
  4004d8:	b958      	cbnz	r0, 4004f2 <udi_cdc_data_sof_notify+0x10e>
  4004da:	f8ba 2000 	ldrh.w	r2, [sl]
  4004de:	2a63      	cmp	r2, #99	; 0x63
  4004e0:	d807      	bhi.n	4004f2 <udi_cdc_data_sof_notify+0x10e>
  4004e2:	2900      	cmp	r1, #0
  4004e4:	d084      	beq.n	4003f0 <udi_cdc_data_sof_notify+0xc>
		cpu_irq_enable();
  4004e6:	2201      	movs	r2, #1
  4004e8:	701a      	strb	r2, [r3, #0]
  4004ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004ee:	b662      	cpsie	i
  4004f0:	e77e      	b.n	4003f0 <udi_cdc_data_sof_notify+0xc>
  4004f2:	9303      	str	r3, [sp, #12]
  4004f4:	9102      	str	r1, [sp, #8]
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  4004f6:	47b8      	blx	r7
  4004f8:	9902      	ldr	r1, [sp, #8]
  4004fa:	9b03      	ldr	r3, [sp, #12]
  4004fc:	2800      	cmp	r0, #0
  4004fe:	d0a1      	beq.n	400444 <udi_cdc_data_sof_notify+0x60>
  400500:	f8ba 2000 	ldrh.w	r2, [sl]
  400504:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
  400508:	d3eb      	bcc.n	4004e2 <udi_cdc_data_sof_notify+0xfe>
  40050a:	e79b      	b.n	400444 <udi_cdc_data_sof_notify+0x60>
  40050c:	701a      	strb	r2, [r3, #0]
  40050e:	f3bf 8f5f 	dmb	sy
  400512:	b662      	cpsie	i
  400514:	e7a6      	b.n	400464 <udi_cdc_data_sof_notify+0x80>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400516:	4b05      	ldr	r3, [pc, #20]	; (40052c <udi_cdc_data_sof_notify+0x148>)
  400518:	4798      	blx	r3
  40051a:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
  40051e:	f8a8 0000 	strh.w	r0, [r8]
  400522:	e7b0      	b.n	400486 <udi_cdc_data_sof_notify+0xa2>
  400524:	20001198 	.word	0x20001198
  400528:	004026dd 	.word	0x004026dd
  40052c:	00402731 	.word	0x00402731
  400530:	20000290 	.word	0x20000290
  400534:	20000f08 	.word	0x20000f08
  400538:	00402741 	.word	0x00402741
  40053c:	00400365 	.word	0x00400365
  400540:	20000f0c 	.word	0x20000f0c
  400544:	00402a79 	.word	0x00402a79
  400548:	20001194 	.word	0x20001194
  40054c:	20001190 	.word	0x20001190
  400550:	2000118c 	.word	0x2000118c
  400554:	20000c64 	.word	0x20000c64

00400558 <udi_cdc_data_enable>:
	udi_cdc_nb_data_enabled = 0;
  400558:	2300      	movs	r3, #0
{
  40055a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udi_cdc_tx_trans_ongoing[port] = false;
  40055e:	4a53      	ldr	r2, [pc, #332]	; (4006ac <udi_cdc_data_enable+0x154>)
	udi_cdc_tx_buf_sel[port] = 0;
  400560:	4953      	ldr	r1, [pc, #332]	; (4006b0 <udi_cdc_data_enable+0x158>)
	udi_cdc_nb_data_enabled = 0;
  400562:	4d54      	ldr	r5, [pc, #336]	; (4006b4 <udi_cdc_data_enable+0x15c>)
	udi_cdc_tx_both_buf_to_send[port] = false;
  400564:	4854      	ldr	r0, [pc, #336]	; (4006b8 <udi_cdc_data_enable+0x160>)
	udi_cdc_nb_data_enabled = 0;
  400566:	702b      	strb	r3, [r5, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  400568:	7013      	strb	r3, [r2, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40056a:	7003      	strb	r3, [r0, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  40056c:	700b      	strb	r3, [r1, #0]
	if (udi_cdc_tx_trans_ongoing[port]) {
  40056e:	7811      	ldrb	r1, [r2, #0]
	udi_cdc_tx_sof_num[port] = 0;
  400570:	4c52      	ldr	r4, [pc, #328]	; (4006bc <udi_cdc_data_enable+0x164>)
	udi_cdc_tx_buf_nb[port][0] = 0;
  400572:	4a53      	ldr	r2, [pc, #332]	; (4006c0 <udi_cdc_data_enable+0x168>)
{
  400574:	b084      	sub	sp, #16
	udi_cdc_tx_buf_nb[port][0] = 0;
  400576:	8013      	strh	r3, [r2, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400578:	8053      	strh	r3, [r2, #2]
	udi_cdc_tx_sof_num[port] = 0;
  40057a:	8023      	strh	r3, [r4, #0]
	if (udi_cdc_tx_trans_ongoing[port]) {
  40057c:	2900      	cmp	r1, #0
  40057e:	d06e      	beq.n	40065e <udi_cdc_data_enable+0x106>
	udi_cdc_rx_trans_ongoing[port] = false;
  400580:	2300      	movs	r3, #0
	udi_cdc_rx_buf_nb[port][0] = 0;
  400582:	4950      	ldr	r1, [pc, #320]	; (4006c4 <udi_cdc_data_enable+0x16c>)
	udi_cdc_rx_trans_ongoing[port] = false;
  400584:	4e50      	ldr	r6, [pc, #320]	; (4006c8 <udi_cdc_data_enable+0x170>)
	udi_cdc_rx_buf_sel[port] = 0;
  400586:	4851      	ldr	r0, [pc, #324]	; (4006cc <udi_cdc_data_enable+0x174>)
	udi_cdc_rx_pos[port] = 0;
  400588:	4f51      	ldr	r7, [pc, #324]	; (4006d0 <udi_cdc_data_enable+0x178>)
	udi_cdc_rx_trans_ongoing[port] = false;
  40058a:	7033      	strb	r3, [r6, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  40058c:	7003      	strb	r3, [r0, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  40058e:	800b      	strh	r3, [r1, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  400590:	804b      	strh	r3, [r1, #2]
	udi_cdc_rx_pos[port] = 0;
  400592:	803b      	strh	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400594:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400598:	fab2 f282 	clz	r2, r2
  40059c:	0952      	lsrs	r2, r2, #5
  40059e:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  4005a0:	b672      	cpsid	i
  4005a2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4005a6:	4a4b      	ldr	r2, [pc, #300]	; (4006d4 <udi_cdc_data_enable+0x17c>)
  4005a8:	7013      	strb	r3, [r2, #0]
	return flags;
  4005aa:	f8dd e008 	ldr.w	lr, [sp, #8]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  4005ae:	7804      	ldrb	r4, [r0, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  4005b0:	7833      	ldrb	r3, [r6, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  4005b2:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
  4005b4:	f003 08ff 	and.w	r8, r3, #255	; 0xff
  4005b8:	b943      	cbnz	r3, 4005cc <udi_cdc_data_enable+0x74>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  4005ba:	f8b7 c000 	ldrh.w	ip, [r7]
  4005be:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
  4005c2:	fa1f fc8c 	uxth.w	ip, ip
  4005c6:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
  4005c8:	459c      	cmp	ip, r3
  4005ca:	d206      	bcs.n	4005da <udi_cdc_data_enable+0x82>
	if (cpu_irq_is_enabled_flags(flags))
  4005cc:	f1be 0f00 	cmp.w	lr, #0
  4005d0:	d150      	bne.n	400674 <udi_cdc_data_enable+0x11c>
		return false;
  4005d2:	2000      	movs	r0, #0
}
  4005d4:	b004      	add	sp, #16
  4005d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4005da:	fab4 f384 	clz	r3, r4
	udi_cdc_rx_trans_ongoing[port] = true;
  4005de:	f04f 0c01 	mov.w	ip, #1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4005e2:	095b      	lsrs	r3, r3, #5
	udi_cdc_rx_pos[port] = 0;
  4005e4:	f8a7 8000 	strh.w	r8, [r7]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4005e8:	7003      	strb	r3, [r0, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  4005ea:	f886 c000 	strb.w	ip, [r6]
  4005ee:	f1be 0f00 	cmp.w	lr, #0
  4005f2:	d155      	bne.n	4006a0 <udi_cdc_data_enable+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4005f4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4005f8:	fab3 f383 	clz	r3, r3
  4005fc:	095b      	lsrs	r3, r3, #5
  4005fe:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400600:	b672      	cpsid	i
  400602:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400606:	2300      	movs	r3, #0
  400608:	7013      	strb	r3, [r2, #0]
	return flags;
  40060a:	f8dd e00c 	ldr.w	lr, [sp, #12]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  40060e:	883b      	ldrh	r3, [r7, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400610:	7806      	ldrb	r6, [r0, #0]
	pos = udi_cdc_rx_pos[port];
  400612:	b298      	uxth	r0, r3
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400614:	b2f3      	uxtb	r3, r6
  400616:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  40061a:	b29b      	uxth	r3, r3
	if (cpu_irq_is_enabled_flags(flags))
  40061c:	f1be 0f00 	cmp.w	lr, #0
  400620:	d134      	bne.n	40068c <udi_cdc_data_enable+0x134>
	if (udi_cdc_multi_is_rx_ready(port)) {
  400622:	4298      	cmp	r0, r3
  400624:	d138      	bne.n	400698 <udi_cdc_data_enable+0x140>
	return udd_ep_run(ep,
  400626:	4b2c      	ldr	r3, [pc, #176]	; (4006d8 <udi_cdc_data_enable+0x180>)
			udi_cdc_rx_buf[port][buf_sel_trans],
  400628:	4a2c      	ldr	r2, [pc, #176]	; (4006dc <udi_cdc_data_enable+0x184>)
  40062a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	return udd_ep_run(ep,
  40062e:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400632:	9300      	str	r3, [sp, #0]
  400634:	2101      	movs	r1, #1
  400636:	f44f 73a0 	mov.w	r3, #320	; 0x140
  40063a:	2002      	movs	r0, #2
  40063c:	4c28      	ldr	r4, [pc, #160]	; (4006e0 <udi_cdc_data_enable+0x188>)
  40063e:	47a0      	blx	r4
	if (!udi_cdc_rx_start(port)) {
  400640:	2800      	cmp	r0, #0
  400642:	d0c6      	beq.n	4005d2 <udi_cdc_data_enable+0x7a>
	udi_cdc_nb_data_enabled++;
  400644:	782b      	ldrb	r3, [r5, #0]
  400646:	3301      	adds	r3, #1
  400648:	b2db      	uxtb	r3, r3
  40064a:	702b      	strb	r3, [r5, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  40064c:	782b      	ldrb	r3, [r5, #0]
  40064e:	b2db      	uxtb	r3, r3
  400650:	2b01      	cmp	r3, #1
		udi_cdc_data_running = true;
  400652:	bf04      	itt	eq
  400654:	4a23      	ldreq	r2, [pc, #140]	; (4006e4 <udi_cdc_data_enable+0x18c>)
  400656:	7013      	strbeq	r3, [r2, #0]
}
  400658:	b004      	add	sp, #16
  40065a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (udd_is_high_speed()) {
  40065e:	4b22      	ldr	r3, [pc, #136]	; (4006e8 <udi_cdc_data_enable+0x190>)
  400660:	4798      	blx	r3
  400662:	b968      	cbnz	r0, 400680 <udi_cdc_data_enable+0x128>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  400664:	4b21      	ldr	r3, [pc, #132]	; (4006ec <udi_cdc_data_enable+0x194>)
  400666:	8824      	ldrh	r4, [r4, #0]
  400668:	4798      	blx	r3
  40066a:	4284      	cmp	r4, r0
  40066c:	d088      	beq.n	400580 <udi_cdc_data_enable+0x28>
  40066e:	4b20      	ldr	r3, [pc, #128]	; (4006f0 <udi_cdc_data_enable+0x198>)
  400670:	4798      	blx	r3
  400672:	e785      	b.n	400580 <udi_cdc_data_enable+0x28>
		cpu_irq_enable();
  400674:	2301      	movs	r3, #1
  400676:	7013      	strb	r3, [r2, #0]
  400678:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40067c:	b662      	cpsie	i
  40067e:	e7a8      	b.n	4005d2 <udi_cdc_data_enable+0x7a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400680:	4b1c      	ldr	r3, [pc, #112]	; (4006f4 <udi_cdc_data_enable+0x19c>)
  400682:	8824      	ldrh	r4, [r4, #0]
  400684:	4798      	blx	r3
  400686:	4284      	cmp	r4, r0
  400688:	d1f1      	bne.n	40066e <udi_cdc_data_enable+0x116>
  40068a:	e779      	b.n	400580 <udi_cdc_data_enable+0x28>
  40068c:	2101      	movs	r1, #1
  40068e:	7011      	strb	r1, [r2, #0]
  400690:	f3bf 8f5f 	dmb	sy
  400694:	b662      	cpsie	i
  400696:	e7c4      	b.n	400622 <udi_cdc_data_enable+0xca>
		UDI_CDC_RX_NOTIFY(port);
  400698:	2000      	movs	r0, #0
  40069a:	4b17      	ldr	r3, [pc, #92]	; (4006f8 <udi_cdc_data_enable+0x1a0>)
  40069c:	4798      	blx	r3
  40069e:	e7c2      	b.n	400626 <udi_cdc_data_enable+0xce>
  4006a0:	f882 c000 	strb.w	ip, [r2]
  4006a4:	f3bf 8f5f 	dmb	sy
  4006a8:	b662      	cpsie	i
  4006aa:	e7a3      	b.n	4005f4 <udi_cdc_data_enable+0x9c>
  4006ac:	20001198 	.word	0x20001198
  4006b0:	20001190 	.word	0x20001190
  4006b4:	20000c70 	.word	0x20000c70
  4006b8:	20000f08 	.word	0x20000f08
  4006bc:	20001194 	.word	0x20001194
  4006c0:	2000118c 	.word	0x2000118c
  4006c4:	20000ef4 	.word	0x20000ef4
  4006c8:	20000f00 	.word	0x20000f00
  4006cc:	20000ef8 	.word	0x20000ef8
  4006d0:	20000efc 	.word	0x20000efc
  4006d4:	20000290 	.word	0x20000290
  4006d8:	004006fd 	.word	0x004006fd
  4006dc:	20000c74 	.word	0x20000c74
  4006e0:	00402a79 	.word	0x00402a79
  4006e4:	20000c66 	.word	0x20000c66
  4006e8:	004026dd 	.word	0x004026dd
  4006ec:	00402731 	.word	0x00402731
  4006f0:	00400229 	.word	0x00400229
  4006f4:	00402741 	.word	0x00402741
  4006f8:	00402e61 	.word	0x00402e61

004006fc <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  4006fc:	2800      	cmp	r0, #0
  4006fe:	d176      	bne.n	4007ee <udi_cdc_data_received+0xf2>
{
  400700:	b5f0      	push	{r4, r5, r6, r7, lr}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  400702:	4c40      	ldr	r4, [pc, #256]	; (400804 <udi_cdc_data_received+0x108>)
{
  400704:	b085      	sub	sp, #20
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  400706:	7823      	ldrb	r3, [r4, #0]
  400708:	fab3 f383 	clz	r3, r3
  40070c:	095b      	lsrs	r3, r3, #5
	if (!n) {
  40070e:	2900      	cmp	r1, #0
  400710:	d056      	beq.n	4007c0 <udi_cdc_data_received+0xc4>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  400712:	4f3d      	ldr	r7, [pc, #244]	; (400808 <udi_cdc_data_received+0x10c>)
	udi_cdc_rx_trans_ongoing[port] = false;
  400714:	4e3d      	ldr	r6, [pc, #244]	; (40080c <udi_cdc_data_received+0x110>)
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  400716:	b289      	uxth	r1, r1
  400718:	f827 1013 	strh.w	r1, [r7, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  40071c:	7030      	strb	r0, [r6, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40071e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400722:	fab3 f383 	clz	r3, r3
  400726:	095b      	lsrs	r3, r3, #5
  400728:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  40072a:	b672      	cpsid	i
  40072c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400730:	4937      	ldr	r1, [pc, #220]	; (400810 <udi_cdc_data_received+0x114>)
  400732:	7008      	strb	r0, [r1, #0]
	return flags;
  400734:	9802      	ldr	r0, [sp, #8]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400736:	7825      	ldrb	r5, [r4, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  400738:	7833      	ldrb	r3, [r6, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  40073a:	b2ed      	uxtb	r5, r5
	if (udi_cdc_rx_trans_ongoing[port] ||
  40073c:	f003 0cff 	and.w	ip, r3, #255	; 0xff
  400740:	2b00      	cmp	r3, #0
  400742:	d14c      	bne.n	4007de <udi_cdc_data_received+0xe2>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400744:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 400824 <udi_cdc_data_received+0x128>
  400748:	f8be 2000 	ldrh.w	r2, [lr]
  40074c:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
  400750:	b292      	uxth	r2, r2
  400752:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
  400754:	429a      	cmp	r2, r3
  400756:	d342      	bcc.n	4007de <udi_cdc_data_received+0xe2>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400758:	fab5 f385 	clz	r3, r5
	udi_cdc_rx_trans_ongoing[port] = true;
  40075c:	2201      	movs	r2, #1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  40075e:	095b      	lsrs	r3, r3, #5
	udi_cdc_rx_pos[port] = 0;
  400760:	f8ae c000 	strh.w	ip, [lr]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400764:	7023      	strb	r3, [r4, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  400766:	7032      	strb	r2, [r6, #0]
	if (cpu_irq_is_enabled_flags(flags))
  400768:	2800      	cmp	r0, #0
  40076a:	d141      	bne.n	4007f0 <udi_cdc_data_received+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40076c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400770:	fab3 f383 	clz	r3, r3
  400774:	095b      	lsrs	r3, r3, #5
  400776:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400778:	b672      	cpsid	i
  40077a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40077e:	2300      	movs	r3, #0
  400780:	700b      	strb	r3, [r1, #0]
	return flags;
  400782:	9803      	ldr	r0, [sp, #12]
	pos = udi_cdc_rx_pos[port];
  400784:	f8be 2000 	ldrh.w	r2, [lr]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400788:	7823      	ldrb	r3, [r4, #0]
	pos = udi_cdc_rx_pos[port];
  40078a:	b292      	uxth	r2, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  40078c:	b2db      	uxtb	r3, r3
  40078e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
  400792:	b29b      	uxth	r3, r3
	if (cpu_irq_is_enabled_flags(flags))
  400794:	b120      	cbz	r0, 4007a0 <udi_cdc_data_received+0xa4>
		cpu_irq_enable();
  400796:	2001      	movs	r0, #1
  400798:	7008      	strb	r0, [r1, #0]
  40079a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40079e:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  4007a0:	429a      	cmp	r2, r3
  4007a2:	d12a      	bne.n	4007fa <udi_cdc_data_received+0xfe>
	return udd_ep_run(ep,
  4007a4:	4b1b      	ldr	r3, [pc, #108]	; (400814 <udi_cdc_data_received+0x118>)
			udi_cdc_rx_buf[port][buf_sel_trans],
  4007a6:	4a1c      	ldr	r2, [pc, #112]	; (400818 <udi_cdc_data_received+0x11c>)
  4007a8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
	return udd_ep_run(ep,
  4007ac:	9300      	str	r3, [sp, #0]
  4007ae:	eb02 1285 	add.w	r2, r2, r5, lsl #6
  4007b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4007b6:	2101      	movs	r1, #1
  4007b8:	4c18      	ldr	r4, [pc, #96]	; (40081c <udi_cdc_data_received+0x120>)
  4007ba:	2002      	movs	r0, #2
  4007bc:	47a0      	blx	r4
  4007be:	e00c      	b.n	4007da <udi_cdc_data_received+0xde>
				udi_cdc_rx_buf[port][buf_sel_trans],
  4007c0:	0099      	lsls	r1, r3, #2
		udd_ep_run( ep,
  4007c2:	4c14      	ldr	r4, [pc, #80]	; (400814 <udi_cdc_data_received+0x118>)
				udi_cdc_rx_buf[port][buf_sel_trans],
  4007c4:	4d14      	ldr	r5, [pc, #80]	; (400818 <udi_cdc_data_received+0x11c>)
  4007c6:	440b      	add	r3, r1
		udd_ep_run( ep,
  4007c8:	4610      	mov	r0, r2
  4007ca:	9400      	str	r4, [sp, #0]
  4007cc:	eb05 1283 	add.w	r2, r5, r3, lsl #6
  4007d0:	2101      	movs	r1, #1
  4007d2:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4007d6:	4c11      	ldr	r4, [pc, #68]	; (40081c <udi_cdc_data_received+0x120>)
  4007d8:	47a0      	blx	r4
}
  4007da:	b005      	add	sp, #20
  4007dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cpu_irq_is_enabled_flags(flags))
  4007de:	2800      	cmp	r0, #0
  4007e0:	d0fb      	beq.n	4007da <udi_cdc_data_received+0xde>
		cpu_irq_enable();
  4007e2:	2301      	movs	r3, #1
  4007e4:	700b      	strb	r3, [r1, #0]
  4007e6:	f3bf 8f5f 	dmb	sy
  4007ea:	b662      	cpsie	i
  4007ec:	e7f5      	b.n	4007da <udi_cdc_data_received+0xde>
  4007ee:	4770      	bx	lr
  4007f0:	700a      	strb	r2, [r1, #0]
  4007f2:	f3bf 8f5f 	dmb	sy
  4007f6:	b662      	cpsie	i
  4007f8:	e7b8      	b.n	40076c <udi_cdc_data_received+0x70>
		UDI_CDC_RX_NOTIFY(port);
  4007fa:	2000      	movs	r0, #0
  4007fc:	4b08      	ldr	r3, [pc, #32]	; (400820 <udi_cdc_data_received+0x124>)
  4007fe:	4798      	blx	r3
  400800:	e7d0      	b.n	4007a4 <udi_cdc_data_received+0xa8>
  400802:	bf00      	nop
  400804:	20000ef8 	.word	0x20000ef8
  400808:	20000ef4 	.word	0x20000ef4
  40080c:	20000f00 	.word	0x20000f00
  400810:	20000290 	.word	0x20000290
  400814:	004006fd 	.word	0x004006fd
  400818:	20000c74 	.word	0x20000c74
  40081c:	00402a79 	.word	0x00402a79
  400820:	00402e61 	.word	0x00402e61
  400824:	20000efc 	.word	0x20000efc

00400828 <udi_cdc_get_nb_received_data>:
	cpu_irq_restore(flags);
	return nb_received;
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
  400828:	b410      	push	{r4}
  40082a:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40082c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400830:	fab3 f383 	clz	r3, r3
  400834:	095b      	lsrs	r3, r3, #5
  400836:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400838:	b672      	cpsid	i
  40083a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40083e:	2000      	movs	r0, #0
  400840:	490b      	ldr	r1, [pc, #44]	; (400870 <udi_cdc_get_nb_received_data+0x48>)
	pos = udi_cdc_rx_pos[port];
  400842:	4b0c      	ldr	r3, [pc, #48]	; (400874 <udi_cdc_get_nb_received_data+0x4c>)
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400844:	4a0c      	ldr	r2, [pc, #48]	; (400878 <udi_cdc_get_nb_received_data+0x50>)
  400846:	7008      	strb	r0, [r1, #0]
	return flags;
  400848:	9c01      	ldr	r4, [sp, #4]
	pos = udi_cdc_rx_pos[port];
  40084a:	881b      	ldrh	r3, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  40084c:	7812      	ldrb	r2, [r2, #0]
  40084e:	480b      	ldr	r0, [pc, #44]	; (40087c <udi_cdc_get_nb_received_data+0x54>)
  400850:	b2d2      	uxtb	r2, r2
  400852:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
	pos = udi_cdc_rx_pos[port];
  400856:	b29b      	uxth	r3, r3
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400858:	b280      	uxth	r0, r0
  40085a:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
  40085c:	b124      	cbz	r4, 400868 <udi_cdc_get_nb_received_data+0x40>
		cpu_irq_enable();
  40085e:	2301      	movs	r3, #1
  400860:	700b      	strb	r3, [r1, #0]
  400862:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400866:	b662      	cpsie	i
	return udi_cdc_multi_get_nb_received_data(0);
}
  400868:	b003      	add	sp, #12
  40086a:	bc10      	pop	{r4}
  40086c:	4770      	bx	lr
  40086e:	bf00      	nop
  400870:	20000290 	.word	0x20000290
  400874:	20000efc 	.word	0x20000efc
  400878:	20000ef8 	.word	0x20000ef8
  40087c:	20000ef4 	.word	0x20000ef4

00400880 <udi_cdc_getc>:
	}
	return rx_data;
}

int udi_cdc_getc(void)
{
  400880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400884:	4b54      	ldr	r3, [pc, #336]	; (4009d8 <udi_cdc_getc+0x158>)
	int rx_data = 0;
  400886:	2400      	movs	r4, #0
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400888:	f893 9006 	ldrb.w	r9, [r3, #6]
  40088c:	4d53      	ldr	r5, [pc, #332]	; (4009dc <udi_cdc_getc+0x15c>)
  40088e:	f1a9 0909 	sub.w	r9, r9, #9
  400892:	fab9 f989 	clz	r9, r9
  400896:	4e52      	ldr	r6, [pc, #328]	; (4009e0 <udi_cdc_getc+0x160>)
  400898:	4f52      	ldr	r7, [pc, #328]	; (4009e4 <udi_cdc_getc+0x164>)
  40089a:	f8df 815c 	ldr.w	r8, [pc, #348]	; 4009f8 <udi_cdc_getc+0x178>
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  40089e:	f8df a15c 	ldr.w	sl, [pc, #348]	; 4009fc <udi_cdc_getc+0x17c>
{
  4008a2:	b087      	sub	sp, #28
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  4008a4:	ea4f 1959 	mov.w	r9, r9, lsr #5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4008a8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4008ac:	fab3 f383 	clz	r3, r3
  4008b0:	095b      	lsrs	r3, r3, #5
  4008b2:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  4008b4:	b672      	cpsid	i
  4008b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4008ba:	2300      	movs	r3, #0
  4008bc:	702b      	strb	r3, [r5, #0]
	return flags;
  4008be:	9803      	ldr	r0, [sp, #12]
	pos = udi_cdc_rx_pos[port];
  4008c0:	8833      	ldrh	r3, [r6, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
  4008c2:	783a      	ldrb	r2, [r7, #0]
	pos = udi_cdc_rx_pos[port];
  4008c4:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  4008c6:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
  4008c8:	f838 1012 	ldrh.w	r1, [r8, r2, lsl #1]
  4008cc:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
  4008ce:	2800      	cmp	r0, #0
  4008d0:	d16b      	bne.n	4009aa <udi_cdc_getc+0x12a>
	while (again) {
  4008d2:	428b      	cmp	r3, r1
  4008d4:	d30a      	bcc.n	4008ec <udi_cdc_getc+0x6c>
		if (!udi_cdc_data_running) {
  4008d6:	4b44      	ldr	r3, [pc, #272]	; (4009e8 <udi_cdc_getc+0x168>)
  4008d8:	781b      	ldrb	r3, [r3, #0]
  4008da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  4008de:	2b00      	cmp	r3, #0
  4008e0:	d1e2      	bne.n	4008a8 <udi_cdc_getc+0x28>
			return 0;
  4008e2:	4614      	mov	r4, r2
	return udi_cdc_multi_getc(0);
}
  4008e4:	4620      	mov	r0, r4
  4008e6:	b007      	add	sp, #28
  4008e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  4008ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4008f0:	eb0a 1282 	add.w	r2, sl, r2, lsl #6
  4008f4:	5cd2      	ldrb	r2, [r2, r3]
	udi_cdc_rx_pos[port] = pos+1;
  4008f6:	3301      	adds	r3, #1
  4008f8:	b29b      	uxth	r3, r3
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  4008fa:	4314      	orrs	r4, r2
	udi_cdc_rx_pos[port] = pos+1;
  4008fc:	8033      	strh	r3, [r6, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4008fe:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400902:	fab3 f383 	clz	r3, r3
  400906:	095b      	lsrs	r3, r3, #5
  400908:	9304      	str	r3, [sp, #16]
  __ASM volatile ("cpsid i" : : : "memory");
  40090a:	b672      	cpsid	i
  40090c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400910:	2300      	movs	r3, #0
  400912:	702b      	strb	r3, [r5, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  400914:	4b35      	ldr	r3, [pc, #212]	; (4009ec <udi_cdc_getc+0x16c>)
	return flags;
  400916:	9904      	ldr	r1, [sp, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400918:	f897 b000 	ldrb.w	fp, [r7]
	if (udi_cdc_rx_trans_ongoing[port] ||
  40091c:	781b      	ldrb	r3, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  40091e:	fa5f fb8b 	uxtb.w	fp, fp
	if (udi_cdc_rx_trans_ongoing[port] ||
  400922:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  400926:	2b00      	cmp	r3, #0
  400928:	d145      	bne.n	4009b6 <udi_cdc_getc+0x136>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  40092a:	8832      	ldrh	r2, [r6, #0]
  40092c:	f838 301b 	ldrh.w	r3, [r8, fp, lsl #1]
  400930:	b292      	uxth	r2, r2
  400932:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
  400934:	429a      	cmp	r2, r3
  400936:	d33e      	bcc.n	4009b6 <udi_cdc_getc+0x136>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400938:	fabb f38b 	clz	r3, fp
	udi_cdc_rx_trans_ongoing[port] = true;
  40093c:	2201      	movs	r2, #1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  40093e:	095b      	lsrs	r3, r3, #5
	udi_cdc_rx_pos[port] = 0;
  400940:	8030      	strh	r0, [r6, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400942:	703b      	strb	r3, [r7, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  400944:	4b29      	ldr	r3, [pc, #164]	; (4009ec <udi_cdc_getc+0x16c>)
  400946:	701a      	strb	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
  400948:	2900      	cmp	r1, #0
  40094a:	d13c      	bne.n	4009c6 <udi_cdc_getc+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40094c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400950:	fab3 f383 	clz	r3, r3
  400954:	095b      	lsrs	r3, r3, #5
  400956:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  400958:	b672      	cpsid	i
  40095a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40095e:	2300      	movs	r3, #0
  400960:	702b      	strb	r3, [r5, #0]
	return flags;
  400962:	9905      	ldr	r1, [sp, #20]
	pos = udi_cdc_rx_pos[port];
  400964:	8832      	ldrh	r2, [r6, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400966:	783b      	ldrb	r3, [r7, #0]
	pos = udi_cdc_rx_pos[port];
  400968:	b292      	uxth	r2, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  40096a:	b2db      	uxtb	r3, r3
  40096c:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
  400970:	b29b      	uxth	r3, r3
	if (cpu_irq_is_enabled_flags(flags))
  400972:	b121      	cbz	r1, 40097e <udi_cdc_getc+0xfe>
		cpu_irq_enable();
  400974:	2101      	movs	r1, #1
  400976:	7029      	strb	r1, [r5, #0]
  400978:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40097c:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  40097e:	429a      	cmp	r2, r3
  400980:	d126      	bne.n	4009d0 <udi_cdc_getc+0x150>
	return udd_ep_run(ep,
  400982:	4b1b      	ldr	r3, [pc, #108]	; (4009f0 <udi_cdc_getc+0x170>)
			udi_cdc_rx_buf[port][buf_sel_trans],
  400984:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
	return udd_ep_run(ep,
  400988:	eb0a 128b 	add.w	r2, sl, fp, lsl #6
  40098c:	9300      	str	r3, [sp, #0]
  40098e:	2101      	movs	r1, #1
  400990:	f44f 73a0 	mov.w	r3, #320	; 0x140
  400994:	2002      	movs	r0, #2
  400996:	f8df b068 	ldr.w	fp, [pc, #104]	; 400a00 <udi_cdc_getc+0x180>
  40099a:	47d8      	blx	fp
	if (b_databit_9) {
  40099c:	f1b9 0f00 	cmp.w	r9, #0
  4009a0:	d0a0      	beq.n	4008e4 <udi_cdc_getc+0x64>
		rx_data = rx_data << 8;
  4009a2:	0224      	lsls	r4, r4, #8
		b_databit_9 = false;
  4009a4:	f04f 0900 	mov.w	r9, #0
  4009a8:	e77e      	b.n	4008a8 <udi_cdc_getc+0x28>
  4009aa:	2001      	movs	r0, #1
  4009ac:	7028      	strb	r0, [r5, #0]
  4009ae:	f3bf 8f5f 	dmb	sy
  4009b2:	b662      	cpsie	i
  4009b4:	e78d      	b.n	4008d2 <udi_cdc_getc+0x52>
	if (cpu_irq_is_enabled_flags(flags))
  4009b6:	2900      	cmp	r1, #0
  4009b8:	d0f0      	beq.n	40099c <udi_cdc_getc+0x11c>
		cpu_irq_enable();
  4009ba:	2301      	movs	r3, #1
  4009bc:	702b      	strb	r3, [r5, #0]
  4009be:	f3bf 8f5f 	dmb	sy
  4009c2:	b662      	cpsie	i
  4009c4:	e7ea      	b.n	40099c <udi_cdc_getc+0x11c>
  4009c6:	702a      	strb	r2, [r5, #0]
  4009c8:	f3bf 8f5f 	dmb	sy
  4009cc:	b662      	cpsie	i
  4009ce:	e7bd      	b.n	40094c <udi_cdc_getc+0xcc>
		UDI_CDC_RX_NOTIFY(port);
  4009d0:	2000      	movs	r0, #0
  4009d2:	4b08      	ldr	r3, [pc, #32]	; (4009f4 <udi_cdc_getc+0x174>)
  4009d4:	4798      	blx	r3
  4009d6:	e7d4      	b.n	400982 <udi_cdc_getc+0x102>
  4009d8:	20000c68 	.word	0x20000c68
  4009dc:	20000290 	.word	0x20000290
  4009e0:	20000efc 	.word	0x20000efc
  4009e4:	20000ef8 	.word	0x20000ef8
  4009e8:	20000c66 	.word	0x20000c66
  4009ec:	20000f00 	.word	0x20000f00
  4009f0:	004006fd 	.word	0x004006fd
  4009f4:	00402e61 	.word	0x00402e61
  4009f8:	20000ef4 	.word	0x20000ef4
  4009fc:	20000c74 	.word	0x20000c74
  400a00:	00402a79 	.word	0x00402a79

00400a04 <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
  400a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a08:	468a      	mov	sl, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
  400a0a:	4b3e      	ldr	r3, [pc, #248]	; (400b04 <udi_cdc_multi_write_buf+0x100>)
  400a0c:	4f3e      	ldr	r7, [pc, #248]	; (400b08 <udi_cdc_multi_write_buf+0x104>)
  400a0e:	799b      	ldrb	r3, [r3, #6]
  400a10:	f8df b10c 	ldr.w	fp, [pc, #268]	; 400b20 <udi_cdc_multi_write_buf+0x11c>
  400a14:	2b09      	cmp	r3, #9
  400a16:	f8df 910c 	ldr.w	r9, [pc, #268]	; 400b24 <udi_cdc_multi_write_buf+0x120>
{
  400a1a:	4690      	mov	r8, r2
  400a1c:	b085      	sub	sp, #20
		size *=2;
  400a1e:	bf08      	it	eq
  400a20:	ea4f 0842 	moveq.w	r8, r2, lsl #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400a24:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400a28:	fab3 f383 	clz	r3, r3
  400a2c:	095b      	lsrs	r3, r3, #5
  400a2e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400a30:	b672      	cpsid	i
  400a32:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400a36:	2300      	movs	r3, #0
  400a38:	703b      	strb	r3, [r7, #0]
	return flags;
  400a3a:	9a03      	ldr	r2, [sp, #12]
	buf_sel = udi_cdc_tx_buf_sel[port];
  400a3c:	f89b 3000 	ldrb.w	r3, [fp]
  400a40:	b2db      	uxtb	r3, r3
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  400a42:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
  400a46:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
  400a4a:	d033      	beq.n	400ab4 <udi_cdc_multi_write_buf+0xb0>
	if (cpu_irq_is_enabled_flags(flags))
  400a4c:	b122      	cbz	r2, 400a58 <udi_cdc_multi_write_buf+0x54>
		cpu_irq_enable();
  400a4e:	2301      	movs	r3, #1
  400a50:	703b      	strb	r3, [r7, #0]
  400a52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400a56:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400a58:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400a5c:	fab3 f383 	clz	r3, r3
  400a60:	095b      	lsrs	r3, r3, #5
  400a62:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  400a64:	b672      	cpsid	i
  400a66:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400a6a:	2300      	movs	r3, #0
  400a6c:	703b      	strb	r3, [r7, #0]
	return flags;
  400a6e:	9b02      	ldr	r3, [sp, #8]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400a70:	f89b 5000 	ldrb.w	r5, [fp]
  400a74:	9301      	str	r3, [sp, #4]
  400a76:	b2ed      	uxtb	r5, r5
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400a78:	f839 6015 	ldrh.w	r6, [r9, r5, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
  400a7c:	4b23      	ldr	r3, [pc, #140]	; (400b0c <udi_cdc_multi_write_buf+0x108>)
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
  400a7e:	f5c6 74a0 	rsb	r4, r6, #320	; 0x140
  400a82:	4544      	cmp	r4, r8
  400a84:	bf28      	it	cs
  400a86:	4644      	movcs	r4, r8
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
  400a88:	eb05 0085 	add.w	r0, r5, r5, lsl #2
  400a8c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
  400a90:	4418      	add	r0, r3
  400a92:	4651      	mov	r1, sl
  400a94:	4b1e      	ldr	r3, [pc, #120]	; (400b10 <udi_cdc_multi_write_buf+0x10c>)
  400a96:	4622      	mov	r2, r4
  400a98:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  400a9a:	9b01      	ldr	r3, [sp, #4]
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
  400a9c:	4426      	add	r6, r4
  400a9e:	f829 6015 	strh.w	r6, [r9, r5, lsl #1]
  400aa2:	bb4b      	cbnz	r3, 400af8 <udi_cdc_multi_write_buf+0xf4>

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
	size -= copy_nb;

	if (size) {
  400aa4:	ebb8 0804 	subs.w	r8, r8, r4
	ptr_buf = ptr_buf + copy_nb;
  400aa8:	44a2      	add	sl, r4
	if (size) {
  400aaa:	d1bb      	bne.n	400a24 <udi_cdc_multi_write_buf+0x20>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
  400aac:	4640      	mov	r0, r8
  400aae:	b005      	add	sp, #20
  400ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((!udi_cdc_tx_trans_ongoing[port])
  400ab4:	4917      	ldr	r1, [pc, #92]	; (400b14 <udi_cdc_multi_write_buf+0x110>)
  400ab6:	7809      	ldrb	r1, [r1, #0]
  400ab8:	b981      	cbnz	r1, 400adc <udi_cdc_multi_write_buf+0xd8>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  400aba:	4917      	ldr	r1, [pc, #92]	; (400b18 <udi_cdc_multi_write_buf+0x114>)
  400abc:	7808      	ldrb	r0, [r1, #0]
  400abe:	b968      	cbnz	r0, 400adc <udi_cdc_multi_write_buf+0xd8>
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400ac0:	fab3 f383 	clz	r3, r3
			udi_cdc_tx_both_buf_to_send[port] = true;
  400ac4:	2001      	movs	r0, #1
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400ac6:	095b      	lsrs	r3, r3, #5
			udi_cdc_tx_both_buf_to_send[port] = true;
  400ac8:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400aca:	f88b 3000 	strb.w	r3, [fp]
  400ace:	2a00      	cmp	r2, #0
  400ad0:	d0c2      	beq.n	400a58 <udi_cdc_multi_write_buf+0x54>
		cpu_irq_enable();
  400ad2:	7038      	strb	r0, [r7, #0]
  400ad4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400ad8:	b662      	cpsie	i
  400ada:	e7bd      	b.n	400a58 <udi_cdc_multi_write_buf+0x54>
	if (cpu_irq_is_enabled_flags(flags))
  400adc:	b122      	cbz	r2, 400ae8 <udi_cdc_multi_write_buf+0xe4>
		cpu_irq_enable();
  400ade:	2301      	movs	r3, #1
  400ae0:	703b      	strb	r3, [r7, #0]
  400ae2:	f3bf 8f5f 	dmb	sy
  400ae6:	b662      	cpsie	i
		if (!udi_cdc_data_running) {
  400ae8:	4b0c      	ldr	r3, [pc, #48]	; (400b1c <udi_cdc_multi_write_buf+0x118>)
  400aea:	781b      	ldrb	r3, [r3, #0]
  400aec:	2b00      	cmp	r3, #0
  400aee:	d199      	bne.n	400a24 <udi_cdc_multi_write_buf+0x20>
}
  400af0:	4640      	mov	r0, r8
  400af2:	b005      	add	sp, #20
  400af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400af8:	2301      	movs	r3, #1
  400afa:	703b      	strb	r3, [r7, #0]
  400afc:	f3bf 8f5f 	dmb	sy
  400b00:	b662      	cpsie	i
  400b02:	e7cf      	b.n	400aa4 <udi_cdc_multi_write_buf+0xa0>
  400b04:	20000c68 	.word	0x20000c68
  400b08:	20000290 	.word	0x20000290
  400b0c:	20000f0c 	.word	0x20000f0c
  400b10:	00404b61 	.word	0x00404b61
  400b14:	20001198 	.word	0x20001198
  400b18:	20000f08 	.word	0x20000f08
  400b1c:	20000c66 	.word	0x20000c66
  400b20:	20001190 	.word	0x20001190
  400b24:	2000118c 	.word	0x2000118c

00400b28 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
	return udi_cdc_multi_write_buf(0, buf, size);
  400b28:	460a      	mov	r2, r1
  400b2a:	4b02      	ldr	r3, [pc, #8]	; (400b34 <udi_cdc_write_buf+0xc>)
  400b2c:	4601      	mov	r1, r0
  400b2e:	2000      	movs	r0, #0
  400b30:	4718      	bx	r3
  400b32:	bf00      	nop
  400b34:	00400a05 	.word	0x00400a05

00400b38 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400b38:	4a02      	ldr	r2, [pc, #8]	; (400b44 <udc_valid_address+0xc>)
  400b3a:	4b03      	ldr	r3, [pc, #12]	; (400b48 <udc_valid_address+0x10>)
  400b3c:	7890      	ldrb	r0, [r2, #2]
  400b3e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400b42:	4718      	bx	r3
  400b44:	200012c4 	.word	0x200012c4
  400b48:	004026e1 	.word	0x004026e1

00400b4c <udc_update_iface_desc.part.0>:
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400b4c:	4b13      	ldr	r3, [pc, #76]	; (400b9c <udc_update_iface_desc.part.0+0x50>)
  400b4e:	681b      	ldr	r3, [r3, #0]
  400b50:	681b      	ldr	r3, [r3, #0]
  400b52:	791a      	ldrb	r2, [r3, #4]
  400b54:	4282      	cmp	r2, r0
  400b56:	d91d      	bls.n	400b94 <udc_update_iface_desc.part.0+0x48>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
  400b58:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400b5a:	4e11      	ldr	r6, [pc, #68]	; (400ba0 <udc_update_iface_desc.part.0+0x54>)
  400b5c:	6033      	str	r3, [r6, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400b5e:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400b60:	441c      	add	r4, r3
	while (ptr_end_desc >
  400b62:	42a3      	cmp	r3, r4
  400b64:	d213      	bcs.n	400b8e <udc_update_iface_desc.part.0+0x42>
  400b66:	2500      	movs	r5, #0
  400b68:	e004      	b.n	400b74 <udc_update_iface_desc.part.0+0x28>
				udc_ptr_iface->bLength);
  400b6a:	781a      	ldrb	r2, [r3, #0]
  400b6c:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400b6e:	4413      	add	r3, r2
	while (ptr_end_desc >
  400b70:	429c      	cmp	r4, r3
  400b72:	d90b      	bls.n	400b8c <udc_update_iface_desc.part.0+0x40>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400b74:	785a      	ldrb	r2, [r3, #1]
  400b76:	2a04      	cmp	r2, #4
  400b78:	d1f7      	bne.n	400b6a <udc_update_iface_desc.part.0+0x1e>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400b7a:	789a      	ldrb	r2, [r3, #2]
  400b7c:	4282      	cmp	r2, r0
  400b7e:	d1f4      	bne.n	400b6a <udc_update_iface_desc.part.0+0x1e>
  400b80:	78da      	ldrb	r2, [r3, #3]
  400b82:	428a      	cmp	r2, r1
  400b84:	d1f1      	bne.n	400b6a <udc_update_iface_desc.part.0+0x1e>
  400b86:	b93d      	cbnz	r5, 400b98 <udc_update_iface_desc.part.0+0x4c>
				return true; // Interface found
  400b88:	2001      	movs	r0, #1
  400b8a:	e001      	b.n	400b90 <udc_update_iface_desc.part.0+0x44>
  400b8c:	6033      	str	r3, [r6, #0]
		return false;
  400b8e:	2000      	movs	r0, #0
}
  400b90:	bc70      	pop	{r4, r5, r6}
  400b92:	4770      	bx	lr
		return false;
  400b94:	2000      	movs	r0, #0
}
  400b96:	4770      	bx	lr
  400b98:	6033      	str	r3, [r6, #0]
  400b9a:	e7f5      	b.n	400b88 <udc_update_iface_desc.part.0+0x3c>
  400b9c:	200011b4 	.word	0x200011b4
  400ba0:	200011b8 	.word	0x200011b8

00400ba4 <udc_iface_disable.part.1>:
static bool udc_iface_disable(uint8_t iface_num)
  400ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400ba6:	4f24      	ldr	r7, [pc, #144]	; (400c38 <udc_iface_disable.part.1+0x94>)
static bool udc_iface_disable(uint8_t iface_num)
  400ba8:	4606      	mov	r6, r0
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400baa:	683b      	ldr	r3, [r7, #0]
  400bac:	685b      	ldr	r3, [r3, #4]
  400bae:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400bb2:	68eb      	ldr	r3, [r5, #12]
  400bb4:	4798      	blx	r3
	if (0 == udc_num_configuration) {
  400bb6:	4b21      	ldr	r3, [pc, #132]	; (400c3c <udc_iface_disable.part.1+0x98>)
  400bb8:	781b      	ldrb	r3, [r3, #0]
  400bba:	b90b      	cbnz	r3, 400bc0 <udc_iface_disable.part.1+0x1c>
		return false;
  400bbc:	2000      	movs	r0, #0
  400bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400bc0:	683b      	ldr	r3, [r7, #0]
  400bc2:	681b      	ldr	r3, [r3, #0]
  400bc4:	791a      	ldrb	r2, [r3, #4]
  400bc6:	42b2      	cmp	r2, r6
  400bc8:	d9f8      	bls.n	400bbc <udc_iface_disable.part.1+0x18>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400bca:	f8df e078 	ldr.w	lr, [pc, #120]	; 400c44 <udc_iface_disable.part.1+0xa0>
  400bce:	f8ce 3000 	str.w	r3, [lr]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400bd2:	885a      	ldrh	r2, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400bd4:	441a      	add	r2, r3
	while (ptr_end_desc >
  400bd6:	4293      	cmp	r3, r2
  400bd8:	d2f0      	bcs.n	400bbc <udc_iface_disable.part.1+0x18>
  400bda:	461c      	mov	r4, r3
  400bdc:	2100      	movs	r1, #0
  400bde:	e004      	b.n	400bea <udc_iface_disable.part.1+0x46>
				udc_ptr_iface->bLength);
  400be0:	7823      	ldrb	r3, [r4, #0]
  400be2:	2101      	movs	r1, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400be4:	441c      	add	r4, r3
	while (ptr_end_desc >
  400be6:	42a2      	cmp	r2, r4
  400be8:	d918      	bls.n	400c1c <udc_iface_disable.part.1+0x78>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400bea:	7863      	ldrb	r3, [r4, #1]
  400bec:	2b04      	cmp	r3, #4
  400bee:	d1f7      	bne.n	400be0 <udc_iface_disable.part.1+0x3c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400bf0:	78a3      	ldrb	r3, [r4, #2]
  400bf2:	42b3      	cmp	r3, r6
  400bf4:	d1f4      	bne.n	400be0 <udc_iface_disable.part.1+0x3c>
  400bf6:	78e3      	ldrb	r3, [r4, #3]
  400bf8:	4283      	cmp	r3, r0
  400bfa:	d1f1      	bne.n	400be0 <udc_iface_disable.part.1+0x3c>
  400bfc:	b9c9      	cbnz	r1, 400c32 <udc_iface_disable.part.1+0x8e>
			udd_ep_free(ep_desc->bEndpointAddress);
  400bfe:	4e10      	ldr	r6, [pc, #64]	; (400c40 <udc_iface_disable.part.1+0x9c>)
  400c00:	e004      	b.n	400c0c <udc_iface_disable.part.1+0x68>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400c02:	7863      	ldrb	r3, [r4, #1]
  400c04:	2b04      	cmp	r3, #4
  400c06:	d005      	beq.n	400c14 <udc_iface_disable.part.1+0x70>
		if (desc_id == desc->bDescriptorType) {
  400c08:	2b05      	cmp	r3, #5
  400c0a:	d00b      	beq.n	400c24 <udc_iface_disable.part.1+0x80>
			desc->bLength);
  400c0c:	7823      	ldrb	r3, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400c0e:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
  400c10:	42a2      	cmp	r2, r4
  400c12:	d8f6      	bhi.n	400c02 <udc_iface_disable.part.1+0x5e>
	udi_api->disable();
  400c14:	686b      	ldr	r3, [r5, #4]
  400c16:	4798      	blx	r3
	return true;
  400c18:	2001      	movs	r0, #1
}
  400c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c1c:	f8ce 4000 	str.w	r4, [lr]
		return false;
  400c20:	2000      	movs	r0, #0
  400c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			udd_ep_free(ep_desc->bEndpointAddress);
  400c24:	78a0      	ldrb	r0, [r4, #2]
  400c26:	47b0      	blx	r6
  400c28:	683b      	ldr	r3, [r7, #0]
  400c2a:	681b      	ldr	r3, [r3, #0]
  400c2c:	885a      	ldrh	r2, [r3, #2]
  400c2e:	441a      	add	r2, r3
  400c30:	e7ec      	b.n	400c0c <udc_iface_disable.part.1+0x68>
  400c32:	f8ce 4000 	str.w	r4, [lr]
  400c36:	e7e2      	b.n	400bfe <udc_iface_disable.part.1+0x5a>
  400c38:	200011b4 	.word	0x200011b4
  400c3c:	200011b0 	.word	0x200011b0
  400c40:	00402829 	.word	0x00402829
  400c44:	200011b8 	.word	0x200011b8

00400c48 <udc_start>:
	udd_enable();
  400c48:	4b00      	ldr	r3, [pc, #0]	; (400c4c <udc_start+0x4>)
  400c4a:	4718      	bx	r3
  400c4c:	00402601 	.word	0x00402601

00400c50 <udc_reset>:
{
  400c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udc_num_configuration) {
  400c52:	4e20      	ldr	r6, [pc, #128]	; (400cd4 <udc_reset+0x84>)
  400c54:	7832      	ldrb	r2, [r6, #0]
  400c56:	2a00      	cmp	r2, #0
  400c58:	d02e      	beq.n	400cb8 <udc_reset+0x68>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c5a:	4f1f      	ldr	r7, [pc, #124]	; (400cd8 <udc_reset+0x88>)
  400c5c:	683b      	ldr	r3, [r7, #0]
  400c5e:	681b      	ldr	r3, [r3, #0]
  400c60:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
  400c62:	b349      	cbz	r1, 400cb8 <udc_reset+0x68>
  400c64:	2400      	movs	r4, #0
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400c66:	4d1d      	ldr	r5, [pc, #116]	; (400cdc <udc_reset+0x8c>)
	if (0 == udc_num_configuration) {
  400c68:	b932      	cbnz	r2, 400c78 <udc_reset+0x28>
				iface_num++) {
  400c6a:	3401      	adds	r4, #1
  400c6c:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
  400c6e:	428c      	cmp	r4, r1
  400c70:	d222      	bcs.n	400cb8 <udc_reset+0x68>
  400c72:	7832      	ldrb	r2, [r6, #0]
	if (0 == udc_num_configuration) {
  400c74:	2a00      	cmp	r2, #0
  400c76:	d0f8      	beq.n	400c6a <udc_reset+0x1a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400c78:	602b      	str	r3, [r5, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400c7a:	8859      	ldrh	r1, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400c7c:	4419      	add	r1, r3
	while (ptr_end_desc >
  400c7e:	4299      	cmp	r1, r3
  400c80:	d913      	bls.n	400caa <udc_reset+0x5a>
  400c82:	2000      	movs	r0, #0
  400c84:	e004      	b.n	400c90 <udc_reset+0x40>
				udc_ptr_iface->bLength);
  400c86:	781a      	ldrb	r2, [r3, #0]
  400c88:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400c8a:	4413      	add	r3, r2
	while (ptr_end_desc >
  400c8c:	4299      	cmp	r1, r3
  400c8e:	d919      	bls.n	400cc4 <udc_reset+0x74>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400c90:	785a      	ldrb	r2, [r3, #1]
  400c92:	2a04      	cmp	r2, #4
  400c94:	d1f7      	bne.n	400c86 <udc_reset+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400c96:	789a      	ldrb	r2, [r3, #2]
  400c98:	42a2      	cmp	r2, r4
  400c9a:	d1f4      	bne.n	400c86 <udc_reset+0x36>
  400c9c:	78da      	ldrb	r2, [r3, #3]
  400c9e:	2a00      	cmp	r2, #0
  400ca0:	d1f1      	bne.n	400c86 <udc_reset+0x36>
  400ca2:	b9a0      	cbnz	r0, 400cce <udc_reset+0x7e>
  400ca4:	4620      	mov	r0, r4
  400ca6:	4b0e      	ldr	r3, [pc, #56]	; (400ce0 <udc_reset+0x90>)
  400ca8:	4798      	blx	r3
  400caa:	683b      	ldr	r3, [r7, #0]
				iface_num++) {
  400cac:	3401      	adds	r4, #1
  400cae:	681b      	ldr	r3, [r3, #0]
  400cb0:	b2e4      	uxtb	r4, r4
  400cb2:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
  400cb4:	428c      	cmp	r4, r1
  400cb6:	d3dc      	bcc.n	400c72 <udc_reset+0x22>
	udc_num_configuration = 0;
  400cb8:	2100      	movs	r1, #0
	udc_device_status =
  400cba:	2201      	movs	r2, #1
  400cbc:	4b09      	ldr	r3, [pc, #36]	; (400ce4 <udc_reset+0x94>)
	udc_num_configuration = 0;
  400cbe:	7031      	strb	r1, [r6, #0]
	udc_device_status =
  400cc0:	801a      	strh	r2, [r3, #0]
}
  400cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400cc4:	683a      	ldr	r2, [r7, #0]
  400cc6:	602b      	str	r3, [r5, #0]
  400cc8:	6813      	ldr	r3, [r2, #0]
  400cca:	7919      	ldrb	r1, [r3, #4]
  400ccc:	e7cd      	b.n	400c6a <udc_reset+0x1a>
  400cce:	602b      	str	r3, [r5, #0]
  400cd0:	e7e8      	b.n	400ca4 <udc_reset+0x54>
  400cd2:	bf00      	nop
  400cd4:	200011b0 	.word	0x200011b0
  400cd8:	200011b4 	.word	0x200011b4
  400cdc:	200011b8 	.word	0x200011b8
  400ce0:	00400ba5 	.word	0x00400ba5
  400ce4:	200011a6 	.word	0x200011a6

00400ce8 <udc_sof_notify>:
{
  400ce8:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  400cea:	4b0b      	ldr	r3, [pc, #44]	; (400d18 <udc_sof_notify+0x30>)
  400cec:	781b      	ldrb	r3, [r3, #0]
  400cee:	b193      	cbz	r3, 400d16 <udc_sof_notify+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cf0:	4d0a      	ldr	r5, [pc, #40]	; (400d1c <udc_sof_notify+0x34>)
  400cf2:	682a      	ldr	r2, [r5, #0]
  400cf4:	6813      	ldr	r3, [r2, #0]
  400cf6:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
  400cf8:	b169      	cbz	r1, 400d16 <udc_sof_notify+0x2e>
  400cfa:	2400      	movs	r4, #0
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  400cfc:	6853      	ldr	r3, [r2, #4]
  400cfe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400d02:	691b      	ldr	r3, [r3, #16]
  400d04:	b11b      	cbz	r3, 400d0e <udc_sof_notify+0x26>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400d06:	4798      	blx	r3
  400d08:	682a      	ldr	r2, [r5, #0]
  400d0a:	6813      	ldr	r3, [r2, #0]
  400d0c:	7919      	ldrb	r1, [r3, #4]
				iface_num++) {
  400d0e:	3401      	adds	r4, #1
  400d10:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
  400d12:	428c      	cmp	r4, r1
  400d14:	d3f2      	bcc.n	400cfc <udc_sof_notify+0x14>
  400d16:	bd38      	pop	{r3, r4, r5, pc}
  400d18:	200011b0 	.word	0x200011b0
  400d1c:	200011b4 	.word	0x200011b4

00400d20 <udc_process_setup>:
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400d20:	2200      	movs	r2, #0
{
  400d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_g_ctrlreq.payload_size = 0;
  400d26:	4e9d      	ldr	r6, [pc, #628]	; (400f9c <udc_process_setup+0x27c>)
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
  400d28:	7833      	ldrb	r3, [r6, #0]
	udd_g_ctrlreq.payload_size = 0;
  400d2a:	81b2      	strh	r2, [r6, #12]
	udd_g_ctrlreq.callback = NULL;
  400d2c:	6132      	str	r2, [r6, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400d2e:	6172      	str	r2, [r6, #20]
	if (Udd_setup_is_in()) {
  400d30:	061a      	lsls	r2, r3, #24
  400d32:	d40d      	bmi.n	400d50 <udc_process_setup+0x30>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400d34:	f013 0f60 	tst.w	r3, #96	; 0x60
  400d38:	d06a      	beq.n	400e10 <udc_process_setup+0xf0>
  400d3a:	f003 031f 	and.w	r3, r3, #31
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  400d3e:	2b01      	cmp	r3, #1
  400d40:	f000 8082 	beq.w	400e48 <udc_process_setup+0x128>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400d44:	2b02      	cmp	r3, #2
  400d46:	d01e      	beq.n	400d86 <udc_process_setup+0x66>
			return false; // Error from USB host
  400d48:	2400      	movs	r4, #0
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
  400d4a:	4620      	mov	r0, r4
  400d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  400d50:	88f4      	ldrh	r4, [r6, #6]
  400d52:	2c00      	cmp	r4, #0
  400d54:	d0f8      	beq.n	400d48 <udc_process_setup+0x28>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400d56:	f013 0160 	ands.w	r1, r3, #96	; 0x60
  400d5a:	d1ee      	bne.n	400d3a <udc_process_setup+0x1a>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400d5c:	f013 031f 	ands.w	r3, r3, #31
  400d60:	f040 80ee 	bne.w	400f40 <udc_process_setup+0x220>
			switch (udd_g_ctrlreq.req.bRequest) {
  400d64:	7873      	ldrb	r3, [r6, #1]
  400d66:	2b06      	cmp	r3, #6
  400d68:	f000 822f 	beq.w	4011ca <udc_process_setup+0x4aa>
  400d6c:	2b08      	cmp	r3, #8
  400d6e:	f000 8224 	beq.w	4011ba <udc_process_setup+0x49a>
  400d72:	2b00      	cmp	r3, #0
  400d74:	d1e8      	bne.n	400d48 <udc_process_setup+0x28>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400d76:	2c02      	cmp	r4, #2
  400d78:	d1e6      	bne.n	400d48 <udc_process_setup+0x28>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400d7a:	4621      	mov	r1, r4
  400d7c:	4888      	ldr	r0, [pc, #544]	; (400fa0 <udc_process_setup+0x280>)
  400d7e:	4b89      	ldr	r3, [pc, #548]	; (400fa4 <udc_process_setup+0x284>)
  400d80:	4798      	blx	r3
			return true;
  400d82:	2401      	movs	r4, #1
  400d84:	e7e1      	b.n	400d4a <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  400d86:	4d88      	ldr	r5, [pc, #544]	; (400fa8 <udc_process_setup+0x288>)
  400d88:	782b      	ldrb	r3, [r5, #0]
  400d8a:	2b00      	cmp	r3, #0
  400d8c:	d0dc      	beq.n	400d48 <udc_process_setup+0x28>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400d8e:	4c87      	ldr	r4, [pc, #540]	; (400fac <udc_process_setup+0x28c>)
  400d90:	6823      	ldr	r3, [r4, #0]
  400d92:	681a      	ldr	r2, [r3, #0]
  400d94:	7912      	ldrb	r2, [r2, #4]
  400d96:	2a00      	cmp	r2, #0
  400d98:	d0d6      	beq.n	400d48 <udc_process_setup+0x28>
  400d9a:	2700      	movs	r7, #0
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400d9c:	4e84      	ldr	r6, [pc, #528]	; (400fb0 <udc_process_setup+0x290>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400d9e:	685b      	ldr	r3, [r3, #4]
  400da0:	f853 8027 	ldr.w	r8, [r3, r7, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400da4:	f8d8 300c 	ldr.w	r3, [r8, #12]
  400da8:	4798      	blx	r3
	if (0 == udc_num_configuration) {
  400daa:	782b      	ldrb	r3, [r5, #0]
  400dac:	2b00      	cmp	r3, #0
  400dae:	d0cb      	beq.n	400d48 <udc_process_setup+0x28>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400db0:	6823      	ldr	r3, [r4, #0]
  400db2:	681b      	ldr	r3, [r3, #0]
  400db4:	791a      	ldrb	r2, [r3, #4]
  400db6:	42ba      	cmp	r2, r7
  400db8:	d9c6      	bls.n	400d48 <udc_process_setup+0x28>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400dba:	6033      	str	r3, [r6, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400dbc:	8859      	ldrh	r1, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400dbe:	4419      	add	r1, r3
	while (ptr_end_desc >
  400dc0:	428b      	cmp	r3, r1
  400dc2:	d2c1      	bcs.n	400d48 <udc_process_setup+0x28>
  400dc4:	f04f 0e00 	mov.w	lr, #0
  400dc8:	e005      	b.n	400dd6 <udc_process_setup+0xb6>
				udc_ptr_iface->bLength);
  400dca:	781a      	ldrb	r2, [r3, #0]
  400dcc:	f04f 0e01 	mov.w	lr, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400dd0:	4413      	add	r3, r2
	while (ptr_end_desc >
  400dd2:	4299      	cmp	r1, r3
  400dd4:	d91a      	bls.n	400e0c <udc_process_setup+0xec>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400dd6:	785a      	ldrb	r2, [r3, #1]
  400dd8:	2a04      	cmp	r2, #4
  400dda:	d1f6      	bne.n	400dca <udc_process_setup+0xaa>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400ddc:	789a      	ldrb	r2, [r3, #2]
  400dde:	42ba      	cmp	r2, r7
  400de0:	d1f3      	bne.n	400dca <udc_process_setup+0xaa>
  400de2:	78da      	ldrb	r2, [r3, #3]
  400de4:	4282      	cmp	r2, r0
  400de6:	d1f0      	bne.n	400dca <udc_process_setup+0xaa>
  400de8:	f1be 0f00 	cmp.w	lr, #0
  400dec:	f040 826b 	bne.w	4012c6 <udc_process_setup+0x5a6>
		if (udi_api->setup()) {
  400df0:	f8d8 3008 	ldr.w	r3, [r8, #8]
  400df4:	4798      	blx	r3
  400df6:	2800      	cmp	r0, #0
  400df8:	f040 80a0 	bne.w	400f3c <udc_process_setup+0x21c>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400dfc:	6823      	ldr	r3, [r4, #0]
			iface_num++) {
  400dfe:	3701      	adds	r7, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400e00:	681a      	ldr	r2, [r3, #0]
			iface_num++) {
  400e02:	b2ff      	uxtb	r7, r7
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400e04:	7912      	ldrb	r2, [r2, #4]
  400e06:	42ba      	cmp	r2, r7
  400e08:	d8c9      	bhi.n	400d9e <udc_process_setup+0x7e>
  400e0a:	e79d      	b.n	400d48 <udc_process_setup+0x28>
  400e0c:	6033      	str	r3, [r6, #0]
  400e0e:	e79b      	b.n	400d48 <udc_process_setup+0x28>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400e10:	f013 031f 	ands.w	r3, r3, #31
  400e14:	d150      	bne.n	400eb8 <udc_process_setup+0x198>
			switch (udd_g_ctrlreq.req.bRequest) {
  400e16:	7872      	ldrb	r2, [r6, #1]
  400e18:	3a01      	subs	r2, #1
  400e1a:	2a08      	cmp	r2, #8
  400e1c:	d894      	bhi.n	400d48 <udc_process_setup+0x28>
  400e1e:	a101      	add	r1, pc, #4	; (adr r1, 400e24 <udc_process_setup+0x104>)
  400e20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
  400e24:	00400f81 	.word	0x00400f81
  400e28:	00400d49 	.word	0x00400d49
  400e2c:	00400d45 	.word	0x00400d45
  400e30:	00400d49 	.word	0x00400d49
  400e34:	00400f71 	.word	0x00400f71
  400e38:	00400d49 	.word	0x00400d49
  400e3c:	00400d49 	.word	0x00400d49
  400e40:	00400d49 	.word	0x00400d49
  400e44:	00400fc9 	.word	0x00400fc9
  400e48:	4d57      	ldr	r5, [pc, #348]	; (400fa8 <udc_process_setup+0x288>)
  400e4a:	782b      	ldrb	r3, [r5, #0]
	if (0 == udc_num_configuration) {
  400e4c:	2b00      	cmp	r3, #0
  400e4e:	f43f af7b 	beq.w	400d48 <udc_process_setup+0x28>
  400e52:	4c56      	ldr	r4, [pc, #344]	; (400fac <udc_process_setup+0x28c>)
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400e54:	f8d4 e000 	ldr.w	lr, [r4]
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400e58:	7937      	ldrb	r7, [r6, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400e5a:	f8de 3000 	ldr.w	r3, [lr]
  400e5e:	791a      	ldrb	r2, [r3, #4]
  400e60:	42ba      	cmp	r2, r7
  400e62:	f67f af71 	bls.w	400d48 <udc_process_setup+0x28>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400e66:	f8df 9148 	ldr.w	r9, [pc, #328]	; 400fb0 <udc_process_setup+0x290>
  400e6a:	f8c9 3000 	str.w	r3, [r9]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400e6e:	8859      	ldrh	r1, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400e70:	4419      	add	r1, r3
	while (ptr_end_desc >
  400e72:	428b      	cmp	r3, r1
  400e74:	d21c      	bcs.n	400eb0 <udc_process_setup+0x190>
  400e76:	2000      	movs	r0, #0
  400e78:	e005      	b.n	400e86 <udc_process_setup+0x166>
				udc_ptr_iface->bLength);
  400e7a:	781a      	ldrb	r2, [r3, #0]
  400e7c:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400e7e:	4413      	add	r3, r2
	while (ptr_end_desc >
  400e80:	4299      	cmp	r1, r3
  400e82:	f240 8161 	bls.w	401148 <udc_process_setup+0x428>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400e86:	785a      	ldrb	r2, [r3, #1]
  400e88:	2a04      	cmp	r2, #4
  400e8a:	d1f6      	bne.n	400e7a <udc_process_setup+0x15a>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400e8c:	789a      	ldrb	r2, [r3, #2]
  400e8e:	42ba      	cmp	r2, r7
  400e90:	d1f3      	bne.n	400e7a <udc_process_setup+0x15a>
  400e92:	78da      	ldrb	r2, [r3, #3]
  400e94:	2a00      	cmp	r2, #0
  400e96:	d1f0      	bne.n	400e7a <udc_process_setup+0x15a>
  400e98:	2800      	cmp	r0, #0
  400e9a:	f040 8211 	bne.w	4012c0 <udc_process_setup+0x5a0>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400e9e:	f8de 3004 	ldr.w	r3, [lr, #4]
  400ea2:	f853 8027 	ldr.w	r8, [r3, r7, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400ea6:	f8d8 300c 	ldr.w	r3, [r8, #12]
  400eaa:	4798      	blx	r3
	if (0 == udc_num_configuration) {
  400eac:	782b      	ldrb	r3, [r5, #0]
  400eae:	bb0b      	cbnz	r3, 400ef4 <udc_process_setup+0x1d4>
  400eb0:	7833      	ldrb	r3, [r6, #0]
  400eb2:	f003 031f 	and.w	r3, r3, #31
  400eb6:	e745      	b.n	400d44 <udc_process_setup+0x24>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400eb8:	2b01      	cmp	r3, #1
  400eba:	f000 8100 	beq.w	4010be <udc_process_setup+0x39e>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400ebe:	2b02      	cmp	r3, #2
  400ec0:	f47f af42 	bne.w	400d48 <udc_process_setup+0x28>
			switch (udd_g_ctrlreq.req.bRequest) {
  400ec4:	7873      	ldrb	r3, [r6, #1]
  400ec6:	2b01      	cmp	r3, #1
  400ec8:	f000 8141 	beq.w	40114e <udc_process_setup+0x42e>
  400ecc:	2b03      	cmp	r3, #3
  400ece:	f47f af5a 	bne.w	400d86 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength) {
  400ed2:	88f3      	ldrh	r3, [r6, #6]
  400ed4:	2b00      	cmp	r3, #0
  400ed6:	f47f af56 	bne.w	400d86 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400eda:	8873      	ldrh	r3, [r6, #2]
  400edc:	2b00      	cmp	r3, #0
  400ede:	f47f af52 	bne.w	400d86 <udc_process_setup+0x66>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400ee2:	7930      	ldrb	r0, [r6, #4]
  400ee4:	4b33      	ldr	r3, [pc, #204]	; (400fb4 <udc_process_setup+0x294>)
  400ee6:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400ee8:	7930      	ldrb	r0, [r6, #4]
  400eea:	4b33      	ldr	r3, [pc, #204]	; (400fb8 <udc_process_setup+0x298>)
  400eec:	4798      	blx	r3
		if (udc_reqstd()) {
  400eee:	bb28      	cbnz	r0, 400f3c <udc_process_setup+0x21c>
  400ef0:	7833      	ldrb	r3, [r6, #0]
  400ef2:	e722      	b.n	400d3a <udc_process_setup+0x1a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400ef4:	6823      	ldr	r3, [r4, #0]
  400ef6:	681b      	ldr	r3, [r3, #0]
  400ef8:	791a      	ldrb	r2, [r3, #4]
  400efa:	42ba      	cmp	r2, r7
  400efc:	d9d8      	bls.n	400eb0 <udc_process_setup+0x190>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400efe:	f8c9 3000 	str.w	r3, [r9]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400f02:	885a      	ldrh	r2, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400f04:	441a      	add	r2, r3
	while (ptr_end_desc >
  400f06:	4293      	cmp	r3, r2
  400f08:	d2d2      	bcs.n	400eb0 <udc_process_setup+0x190>
  400f0a:	2400      	movs	r4, #0
  400f0c:	e005      	b.n	400f1a <udc_process_setup+0x1fa>
				udc_ptr_iface->bLength);
  400f0e:	7819      	ldrb	r1, [r3, #0]
  400f10:	2401      	movs	r4, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400f12:	440b      	add	r3, r1
	while (ptr_end_desc >
  400f14:	429a      	cmp	r2, r3
  400f16:	f240 8117 	bls.w	401148 <udc_process_setup+0x428>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400f1a:	7859      	ldrb	r1, [r3, #1]
  400f1c:	2904      	cmp	r1, #4
  400f1e:	d1f6      	bne.n	400f0e <udc_process_setup+0x1ee>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400f20:	7899      	ldrb	r1, [r3, #2]
  400f22:	42b9      	cmp	r1, r7
  400f24:	d1f3      	bne.n	400f0e <udc_process_setup+0x1ee>
  400f26:	78d9      	ldrb	r1, [r3, #3]
  400f28:	4281      	cmp	r1, r0
  400f2a:	d1f0      	bne.n	400f0e <udc_process_setup+0x1ee>
  400f2c:	2c00      	cmp	r4, #0
  400f2e:	f040 81cc 	bne.w	4012ca <udc_process_setup+0x5aa>
	return udi_api->setup();
  400f32:	f8d8 3008 	ldr.w	r3, [r8, #8]
  400f36:	4798      	blx	r3
		if (udc_req_iface()) {
  400f38:	2800      	cmp	r0, #0
  400f3a:	d0b9      	beq.n	400eb0 <udc_process_setup+0x190>
			return true;
  400f3c:	2401      	movs	r4, #1
  400f3e:	e704      	b.n	400d4a <udc_process_setup+0x2a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400f40:	2b01      	cmp	r3, #1
  400f42:	f000 8110 	beq.w	401166 <udc_process_setup+0x446>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400f46:	2b02      	cmp	r3, #2
  400f48:	f47f aefe 	bne.w	400d48 <udc_process_setup+0x28>
			switch (udd_g_ctrlreq.req.bRequest) {
  400f4c:	7873      	ldrb	r3, [r6, #1]
  400f4e:	2b00      	cmp	r3, #0
  400f50:	f47f af19 	bne.w	400d86 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400f54:	2c02      	cmp	r4, #2
  400f56:	f47f af16 	bne.w	400d86 <udc_process_setup+0x66>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400f5a:	4b18      	ldr	r3, [pc, #96]	; (400fbc <udc_process_setup+0x29c>)
  400f5c:	7930      	ldrb	r0, [r6, #4]
  400f5e:	4798      	blx	r3
  400f60:	4b17      	ldr	r3, [pc, #92]	; (400fc0 <udc_process_setup+0x2a0>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400f62:	4621      	mov	r1, r4
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  400f64:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400f66:	4a0f      	ldr	r2, [pc, #60]	; (400fa4 <udc_process_setup+0x284>)
  400f68:	4618      	mov	r0, r3
  400f6a:	4790      	blx	r2
			return true;
  400f6c:	2401      	movs	r4, #1
  400f6e:	e6ec      	b.n	400d4a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
  400f70:	88f3      	ldrh	r3, [r6, #6]
  400f72:	2b00      	cmp	r3, #0
  400f74:	f47f aee8 	bne.w	400d48 <udc_process_setup+0x28>
	udd_g_ctrlreq.callback = udc_valid_address;
  400f78:	4b12      	ldr	r3, [pc, #72]	; (400fc4 <udc_process_setup+0x2a4>)
			return true;
  400f7a:	2401      	movs	r4, #1
	udd_g_ctrlreq.callback = udc_valid_address;
  400f7c:	6133      	str	r3, [r6, #16]
  400f7e:	e6e4      	b.n	400d4a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
  400f80:	88f3      	ldrh	r3, [r6, #6]
  400f82:	2b00      	cmp	r3, #0
  400f84:	f47f aee0 	bne.w	400d48 <udc_process_setup+0x28>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  400f88:	8874      	ldrh	r4, [r6, #2]
  400f8a:	2c01      	cmp	r4, #1
  400f8c:	f47f aedc 	bne.w	400d48 <udc_process_setup+0x28>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  400f90:	4a03      	ldr	r2, [pc, #12]	; (400fa0 <udc_process_setup+0x280>)
  400f92:	8813      	ldrh	r3, [r2, #0]
  400f94:	f023 0302 	bic.w	r3, r3, #2
  400f98:	8013      	strh	r3, [r2, #0]
  400f9a:	e6d6      	b.n	400d4a <udc_process_setup+0x2a>
  400f9c:	200012c4 	.word	0x200012c4
  400fa0:	200011a6 	.word	0x200011a6
  400fa4:	00402745 	.word	0x00402745
  400fa8:	200011b0 	.word	0x200011b0
  400fac:	200011b4 	.word	0x200011b4
  400fb0:	200011b8 	.word	0x200011b8
  400fb4:	00402bc5 	.word	0x00402bc5
  400fb8:	004028f1 	.word	0x004028f1
  400fbc:	004028b1 	.word	0x004028b1
  400fc0:	200011a8 	.word	0x200011a8
  400fc4:	00400b39 	.word	0x00400b39
	if (udd_g_ctrlreq.req.wLength) {
  400fc8:	88f7      	ldrh	r7, [r6, #6]
  400fca:	2f00      	cmp	r7, #0
  400fcc:	f47f aebc 	bne.w	400d48 <udc_process_setup+0x28>
	if (!udd_getaddress()) {
  400fd0:	4bae      	ldr	r3, [pc, #696]	; (40128c <udc_process_setup+0x56c>)
  400fd2:	4798      	blx	r3
  400fd4:	2800      	cmp	r0, #0
  400fd6:	d08b      	beq.n	400ef0 <udc_process_setup+0x1d0>
				udc_config.confdev_lsfs->bNumConfigurations) {
  400fd8:	4cad      	ldr	r4, [pc, #692]	; (401290 <udc_process_setup+0x570>)
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400fda:	78b2      	ldrb	r2, [r6, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400fdc:	6823      	ldr	r3, [r4, #0]
  400fde:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400fe0:	429a      	cmp	r2, r3
  400fe2:	dc85      	bgt.n	400ef0 <udc_process_setup+0x1d0>
	udc_reset();
  400fe4:	4bab      	ldr	r3, [pc, #684]	; (401294 <udc_process_setup+0x574>)
  400fe6:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400fe8:	4dab      	ldr	r5, [pc, #684]	; (401298 <udc_process_setup+0x578>)
  400fea:	78b3      	ldrb	r3, [r6, #2]
  400fec:	702b      	strb	r3, [r5, #0]
	if (udc_num_configuration == 0) {
  400fee:	2b00      	cmp	r3, #0
  400ff0:	d0a4      	beq.n	400f3c <udc_process_setup+0x21c>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400ff2:	6861      	ldr	r1, [r4, #4]
  400ff4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400ff8:	3b01      	subs	r3, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400ffa:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400ffe:	4ca7      	ldr	r4, [pc, #668]	; (40129c <udc_process_setup+0x57c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401000:	7902      	ldrb	r2, [r0, #4]
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  401002:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  401006:	6021      	str	r1, [r4, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401008:	2a00      	cmp	r2, #0
  40100a:	d097      	beq.n	400f3c <udc_process_setup+0x21c>
  40100c:	46b8      	mov	r8, r7
  40100e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 4012a8 <udc_process_setup+0x588>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  401012:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 4012bc <udc_process_setup+0x59c>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  401016:	f8c9 0000 	str.w	r0, [r9]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  40101a:	8842      	ldrh	r2, [r0, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  40101c:	eb00 0c02 	add.w	ip, r0, r2
	while (ptr_end_desc >
  401020:	4584      	cmp	ip, r0
  401022:	f67f af65 	bls.w	400ef0 <udc_process_setup+0x1d0>
  401026:	4603      	mov	r3, r0
  401028:	f04f 0e00 	mov.w	lr, #0
  40102c:	e006      	b.n	40103c <udc_process_setup+0x31c>
				udc_ptr_iface->bLength);
  40102e:	781f      	ldrb	r7, [r3, #0]
  401030:	f04f 0e01 	mov.w	lr, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  401034:	443b      	add	r3, r7
	while (ptr_end_desc >
  401036:	459c      	cmp	ip, r3
  401038:	f240 8124 	bls.w	401284 <udc_process_setup+0x564>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  40103c:	785f      	ldrb	r7, [r3, #1]
  40103e:	2f04      	cmp	r7, #4
  401040:	d1f5      	bne.n	40102e <udc_process_setup+0x30e>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  401042:	789f      	ldrb	r7, [r3, #2]
  401044:	4547      	cmp	r7, r8
  401046:	d1f2      	bne.n	40102e <udc_process_setup+0x30e>
  401048:	78df      	ldrb	r7, [r3, #3]
  40104a:	2f00      	cmp	r7, #0
  40104c:	d1ef      	bne.n	40102e <udc_process_setup+0x30e>
  40104e:	f1be 0f00 	cmp.w	lr, #0
  401052:	d002      	beq.n	40105a <udc_process_setup+0x33a>
  401054:	f8c9 3000 	str.w	r3, [r9]
  401058:	8842      	ldrh	r2, [r0, #2]
	while (ptr_end_desc >
  40105a:	461f      	mov	r7, r3
			desc->bLength);
  40105c:	783b      	ldrb	r3, [r7, #0]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  40105e:	4402      	add	r2, r0
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401060:	441f      	add	r7, r3
	while (ptr_eof_desc > desc) {
  401062:	42ba      	cmp	r2, r7
  401064:	d806      	bhi.n	401074 <udc_process_setup+0x354>
  401066:	e008      	b.n	40107a <udc_process_setup+0x35a>
		if (desc_id == desc->bDescriptorType) {
  401068:	2b05      	cmp	r3, #5
  40106a:	d01d      	beq.n	4010a8 <udc_process_setup+0x388>
				desc->bLength);
  40106c:	783b      	ldrb	r3, [r7, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  40106e:	441f      	add	r7, r3
	while (ptr_eof_desc > desc) {
  401070:	42ba      	cmp	r2, r7
  401072:	d902      	bls.n	40107a <udc_process_setup+0x35a>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  401074:	787b      	ldrb	r3, [r7, #1]
  401076:	2b04      	cmp	r3, #4
  401078:	d1f6      	bne.n	401068 <udc_process_setup+0x348>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40107a:	684b      	ldr	r3, [r1, #4]
  40107c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  401080:	681b      	ldr	r3, [r3, #0]
  401082:	4798      	blx	r3
		if (!udc_iface_enable(iface_num, 0)) {
  401084:	2800      	cmp	r0, #0
  401086:	f43f af33 	beq.w	400ef0 <udc_process_setup+0x1d0>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40108a:	6821      	ldr	r1, [r4, #0]
			iface_num++) {
  40108c:	f108 0801 	add.w	r8, r8, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401090:	6808      	ldr	r0, [r1, #0]
			iface_num++) {
  401092:	fa5f f888 	uxtb.w	r8, r8
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401096:	7903      	ldrb	r3, [r0, #4]
  401098:	4543      	cmp	r3, r8
  40109a:	f67f af4f 	bls.w	400f3c <udc_process_setup+0x21c>
	if (0 == udc_num_configuration) {
  40109e:	782b      	ldrb	r3, [r5, #0]
  4010a0:	2b00      	cmp	r3, #0
  4010a2:	f43f af25 	beq.w	400ef0 <udc_process_setup+0x1d0>
  4010a6:	e7b6      	b.n	401016 <udc_process_setup+0x2f6>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  4010a8:	88ba      	ldrh	r2, [r7, #4]
  4010aa:	78f9      	ldrb	r1, [r7, #3]
  4010ac:	78b8      	ldrb	r0, [r7, #2]
  4010ae:	47d0      	blx	sl
  4010b0:	2800      	cmp	r0, #0
  4010b2:	f43f af1d 	beq.w	400ef0 <udc_process_setup+0x1d0>
  4010b6:	6821      	ldr	r1, [r4, #0]
  4010b8:	6808      	ldr	r0, [r1, #0]
  4010ba:	8842      	ldrh	r2, [r0, #2]
  4010bc:	e7ce      	b.n	40105c <udc_process_setup+0x33c>
			switch (udd_g_ctrlreq.req.bRequest) {
  4010be:	7873      	ldrb	r3, [r6, #1]
  4010c0:	2b0b      	cmp	r3, #11
  4010c2:	f47f af15 	bne.w	400ef0 <udc_process_setup+0x1d0>
	if (udd_g_ctrlreq.req.wLength) {
  4010c6:	88f1      	ldrh	r1, [r6, #6]
  4010c8:	2900      	cmp	r1, #0
  4010ca:	f47f aebd 	bne.w	400e48 <udc_process_setup+0x128>
	if (!udc_num_configuration) {
  4010ce:	4d72      	ldr	r5, [pc, #456]	; (401298 <udc_process_setup+0x578>)
  4010d0:	782b      	ldrb	r3, [r5, #0]
  4010d2:	2b00      	cmp	r3, #0
  4010d4:	f43f ae38 	beq.w	400d48 <udc_process_setup+0x28>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4010d8:	7937      	ldrb	r7, [r6, #4]
  4010da:	4c71      	ldr	r4, [pc, #452]	; (4012a0 <udc_process_setup+0x580>)
  4010dc:	4638      	mov	r0, r7
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  4010de:	f8b6 8002 	ldrh.w	r8, [r6, #2]
  4010e2:	47a0      	blx	r4
	if (!udc_update_iface_desc(iface_num, 0)) {
  4010e4:	2800      	cmp	r0, #0
  4010e6:	f43f af03 	beq.w	400ef0 <udc_process_setup+0x1d0>
  4010ea:	4638      	mov	r0, r7
  4010ec:	4b6d      	ldr	r3, [pc, #436]	; (4012a4 <udc_process_setup+0x584>)
  4010ee:	4798      	blx	r3
	if (!udc_iface_disable(iface_num)) {
  4010f0:	2800      	cmp	r0, #0
  4010f2:	f43f aefd 	beq.w	400ef0 <udc_process_setup+0x1d0>
	if (0 == udc_num_configuration) {
  4010f6:	782b      	ldrb	r3, [r5, #0]
  4010f8:	2b00      	cmp	r3, #0
  4010fa:	f43f aef9 	beq.w	400ef0 <udc_process_setup+0x1d0>
  4010fe:	fa5f f188 	uxtb.w	r1, r8
  401102:	4638      	mov	r0, r7
  401104:	47a0      	blx	r4
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  401106:	2800      	cmp	r0, #0
  401108:	f43f aef2 	beq.w	400ef0 <udc_process_setup+0x1d0>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  40110c:	4b66      	ldr	r3, [pc, #408]	; (4012a8 <udc_process_setup+0x588>)
  40110e:	4c63      	ldr	r4, [pc, #396]	; (40129c <udc_process_setup+0x57c>)
  401110:	681d      	ldr	r5, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  401112:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 4012bc <udc_process_setup+0x59c>
			udc_ptr_conf->desc +
  401116:	6821      	ldr	r1, [r4, #0]
			desc->bLength);
  401118:	782b      	ldrb	r3, [r5, #0]
			udc_ptr_conf->desc +
  40111a:	680a      	ldr	r2, [r1, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  40111c:	441d      	add	r5, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  40111e:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  401120:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
  401122:	42aa      	cmp	r2, r5
  401124:	d807      	bhi.n	401136 <udc_process_setup+0x416>
  401126:	e009      	b.n	40113c <udc_process_setup+0x41c>
		if (desc_id == desc->bDescriptorType) {
  401128:	2b05      	cmp	r3, #5
  40112a:	f000 80a3 	beq.w	401274 <udc_process_setup+0x554>
				desc->bLength);
  40112e:	782b      	ldrb	r3, [r5, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401130:	441d      	add	r5, r3
	while (ptr_eof_desc > desc) {
  401132:	42aa      	cmp	r2, r5
  401134:	d902      	bls.n	40113c <udc_process_setup+0x41c>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  401136:	786b      	ldrb	r3, [r5, #1]
  401138:	2b04      	cmp	r3, #4
  40113a:	d1f5      	bne.n	401128 <udc_process_setup+0x408>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40113c:	684b      	ldr	r3, [r1, #4]
  40113e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
  401142:	681b      	ldr	r3, [r3, #0]
  401144:	4798      	blx	r3
  401146:	e6d2      	b.n	400eee <udc_process_setup+0x1ce>
  401148:	f8c9 3000 	str.w	r3, [r9]
  40114c:	e6b0      	b.n	400eb0 <udc_process_setup+0x190>
	if (udd_g_ctrlreq.req.wLength) {
  40114e:	88f3      	ldrh	r3, [r6, #6]
  401150:	2b00      	cmp	r3, #0
  401152:	f47f ae18 	bne.w	400d86 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401156:	8873      	ldrh	r3, [r6, #2]
  401158:	2b00      	cmp	r3, #0
  40115a:	f47f ae14 	bne.w	400d86 <udc_process_setup+0x66>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  40115e:	7930      	ldrb	r0, [r6, #4]
  401160:	4b52      	ldr	r3, [pc, #328]	; (4012ac <udc_process_setup+0x58c>)
  401162:	4798      	blx	r3
  401164:	e6c3      	b.n	400eee <udc_process_setup+0x1ce>
			switch (udd_g_ctrlreq.req.bRequest) {
  401166:	7873      	ldrb	r3, [r6, #1]
  401168:	2b0a      	cmp	r3, #10
  40116a:	f47f aec1 	bne.w	400ef0 <udc_process_setup+0x1d0>
	if (udd_g_ctrlreq.req.wLength != 1) {
  40116e:	2c01      	cmp	r4, #1
  401170:	f47f ae6a 	bne.w	400e48 <udc_process_setup+0x128>
	if (!udc_num_configuration) {
  401174:	4d48      	ldr	r5, [pc, #288]	; (401298 <udc_process_setup+0x578>)
  401176:	782b      	ldrb	r3, [r5, #0]
  401178:	2b00      	cmp	r3, #0
  40117a:	f43f ade5 	beq.w	400d48 <udc_process_setup+0x28>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40117e:	4c47      	ldr	r4, [pc, #284]	; (40129c <udc_process_setup+0x57c>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401180:	7937      	ldrb	r7, [r6, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401182:	f8d4 8000 	ldr.w	r8, [r4]
  401186:	f8d8 3000 	ldr.w	r3, [r8]
  40118a:	791b      	ldrb	r3, [r3, #4]
  40118c:	42bb      	cmp	r3, r7
  40118e:	f67f ae61 	bls.w	400e54 <udc_process_setup+0x134>
  401192:	4638      	mov	r0, r7
  401194:	4b42      	ldr	r3, [pc, #264]	; (4012a0 <udc_process_setup+0x580>)
  401196:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
  401198:	4604      	mov	r4, r0
  40119a:	2800      	cmp	r0, #0
  40119c:	f43f aea8 	beq.w	400ef0 <udc_process_setup+0x1d0>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4011a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	udc_iface_setting = udi_api->getsetting();
  4011a4:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
  4011a8:	68db      	ldr	r3, [r3, #12]
  4011aa:	4798      	blx	r3
  4011ac:	4b40      	ldr	r3, [pc, #256]	; (4012b0 <udc_process_setup+0x590>)
	udd_set_setup_payload(&udc_iface_setting,1);
  4011ae:	2101      	movs	r1, #1
	udc_iface_setting = udi_api->getsetting();
  4011b0:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  4011b2:	4a40      	ldr	r2, [pc, #256]	; (4012b4 <udc_process_setup+0x594>)
  4011b4:	4618      	mov	r0, r3
  4011b6:	4790      	blx	r2
  4011b8:	e5c7      	b.n	400d4a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != 1) {
  4011ba:	2c01      	cmp	r4, #1
  4011bc:	f47f adc4 	bne.w	400d48 <udc_process_setup+0x28>
	udd_set_setup_payload(&udc_num_configuration,1);
  4011c0:	4621      	mov	r1, r4
  4011c2:	4835      	ldr	r0, [pc, #212]	; (401298 <udc_process_setup+0x578>)
  4011c4:	4b3b      	ldr	r3, [pc, #236]	; (4012b4 <udc_process_setup+0x594>)
  4011c6:	4798      	blx	r3
  4011c8:	e5bf      	b.n	400d4a <udc_process_setup+0x2a>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4011ca:	8873      	ldrh	r3, [r6, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4011cc:	0a1a      	lsrs	r2, r3, #8
  4011ce:	3a01      	subs	r2, #1
  4011d0:	2a0e      	cmp	r2, #14
  4011d2:	f63f adb9 	bhi.w	400d48 <udc_process_setup+0x28>
  4011d6:	a101      	add	r1, pc, #4	; (adr r1, 4011dc <udc_process_setup+0x4bc>)
  4011d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
  4011dc:	00401269 	.word	0x00401269
  4011e0:	00401247 	.word	0x00401247
  4011e4:	00401235 	.word	0x00401235
  4011e8:	00400d49 	.word	0x00400d49
  4011ec:	00400d49 	.word	0x00400d49
  4011f0:	00400d49 	.word	0x00400d49
  4011f4:	00400d49 	.word	0x00400d49
  4011f8:	00400d49 	.word	0x00400d49
  4011fc:	00400d49 	.word	0x00400d49
  401200:	00400d49 	.word	0x00400d49
  401204:	00400d49 	.word	0x00400d49
  401208:	00400d49 	.word	0x00400d49
  40120c:	00400d49 	.word	0x00400d49
  401210:	00400d49 	.word	0x00400d49
  401214:	00401219 	.word	0x00401219
		if (udc_config.conf_bos == NULL) {
  401218:	4b1d      	ldr	r3, [pc, #116]	; (401290 <udc_process_setup+0x570>)
  40121a:	6898      	ldr	r0, [r3, #8]
  40121c:	2800      	cmp	r0, #0
  40121e:	f43f ad93 	beq.w	400d48 <udc_process_setup+0x28>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  401222:	8841      	ldrh	r1, [r0, #2]
  401224:	4b23      	ldr	r3, [pc, #140]	; (4012b4 <udc_process_setup+0x594>)
  401226:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  401228:	88f3      	ldrh	r3, [r6, #6]
  40122a:	89b2      	ldrh	r2, [r6, #12]
  40122c:	429a      	cmp	r2, r3
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  40122e:	bf88      	it	hi
  401230:	81b3      	strhhi	r3, [r6, #12]
  401232:	e683      	b.n	400f3c <udc_process_setup+0x21c>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  401234:	f013 0fff 	tst.w	r3, #255	; 0xff
  401238:	f47f ae5a 	bne.w	400ef0 <udc_process_setup+0x1d0>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  40123c:	2104      	movs	r1, #4
  40123e:	481e      	ldr	r0, [pc, #120]	; (4012b8 <udc_process_setup+0x598>)
  401240:	4b1c      	ldr	r3, [pc, #112]	; (4012b4 <udc_process_setup+0x594>)
  401242:	4798      	blx	r3
  401244:	e7f0      	b.n	401228 <udc_process_setup+0x508>
			if (conf_num >= udc_config.confdev_lsfs->
  401246:	4a12      	ldr	r2, [pc, #72]	; (401290 <udc_process_setup+0x570>)
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  401248:	b2db      	uxtb	r3, r3
			if (conf_num >= udc_config.confdev_lsfs->
  40124a:	6811      	ldr	r1, [r2, #0]
  40124c:	7c49      	ldrb	r1, [r1, #17]
  40124e:	4299      	cmp	r1, r3
  401250:	f67f ad7a 	bls.w	400d48 <udc_process_setup+0x28>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  401254:	6851      	ldr	r1, [r2, #4]
			udd_set_setup_payload(
  401256:	4a17      	ldr	r2, [pc, #92]	; (4012b4 <udc_process_setup+0x594>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  401258:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
			udd_set_setup_payload(
  40125c:	8841      	ldrh	r1, [r0, #2]
  40125e:	4790      	blx	r2
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  401260:	2202      	movs	r2, #2
  401262:	68b3      	ldr	r3, [r6, #8]
  401264:	705a      	strb	r2, [r3, #1]
  401266:	e7df      	b.n	401228 <udc_process_setup+0x508>
				(uint8_t *) udc_config.confdev_lsfs,
  401268:	4a09      	ldr	r2, [pc, #36]	; (401290 <udc_process_setup+0x570>)
			udd_set_setup_payload(
  40126a:	4b12      	ldr	r3, [pc, #72]	; (4012b4 <udc_process_setup+0x594>)
				(uint8_t *) udc_config.confdev_lsfs,
  40126c:	6810      	ldr	r0, [r2, #0]
			udd_set_setup_payload(
  40126e:	7801      	ldrb	r1, [r0, #0]
  401270:	4798      	blx	r3
  401272:	e7d9      	b.n	401228 <udc_process_setup+0x508>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  401274:	88aa      	ldrh	r2, [r5, #4]
  401276:	78e9      	ldrb	r1, [r5, #3]
  401278:	78a8      	ldrb	r0, [r5, #2]
  40127a:	47c0      	blx	r8
  40127c:	2800      	cmp	r0, #0
  40127e:	f47f af4a 	bne.w	401116 <udc_process_setup+0x3f6>
  401282:	e635      	b.n	400ef0 <udc_process_setup+0x1d0>
  401284:	f8c9 3000 	str.w	r3, [r9]
  401288:	e632      	b.n	400ef0 <udc_process_setup+0x1d0>
  40128a:	bf00      	nop
  40128c:	00402719 	.word	0x00402719
  401290:	2000021c 	.word	0x2000021c
  401294:	00400c51 	.word	0x00400c51
  401298:	200011b0 	.word	0x200011b0
  40129c:	200011b4 	.word	0x200011b4
  4012a0:	00400b4d 	.word	0x00400b4d
  4012a4:	00400ba5 	.word	0x00400ba5
  4012a8:	200011b8 	.word	0x200011b8
  4012ac:	004029bd 	.word	0x004029bd
  4012b0:	200011ac 	.word	0x200011ac
  4012b4:	00402745 	.word	0x00402745
  4012b8:	200000f4 	.word	0x200000f4
  4012bc:	00402751 	.word	0x00402751
  4012c0:	f8c9 3000 	str.w	r3, [r9]
  4012c4:	e5eb      	b.n	400e9e <udc_process_setup+0x17e>
  4012c6:	6033      	str	r3, [r6, #0]
  4012c8:	e592      	b.n	400df0 <udc_process_setup+0xd0>
  4012ca:	f8c9 3000 	str.w	r3, [r9]
  4012ce:	e630      	b.n	400f32 <udc_process_setup+0x212>

004012d0 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  4012d0:	b470      	push	{r4, r5, r6}
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  4012d2:	0052      	lsls	r2, r2, #1
{
  4012d4:	4604      	mov	r4, r0
	p_adc->ADC_CR = ADC_CR_SWRST;
  4012d6:	2601      	movs	r6, #1
	p_adc->ADC_MR = 0;
  4012d8:	2000      	movs	r0, #0
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  4012da:	f240 2502 	movw	r5, #514	; 0x202
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  4012de:	fbb1 f2f2 	udiv	r2, r1, r2
	p_adc->ADC_CR = ADC_CR_SWRST;
  4012e2:	6026      	str	r6, [r4, #0]
	p_adc->ADC_MR = 0;
  4012e4:	6060      	str	r0, [r4, #4]
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  4012e6:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  4012ea:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  4012ee:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  4012f2:	6861      	ldr	r1, [r4, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  4012f4:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  4012f6:	0212      	lsls	r2, r2, #8
  4012f8:	b292      	uxth	r2, r2
  4012fa:	430b      	orrs	r3, r1
  4012fc:	4313      	orrs	r3, r2
  4012fe:	6063      	str	r3, [r4, #4]
	return 0;
}
  401300:	bc70      	pop	{r4, r5, r6}
  401302:	4770      	bx	lr

00401304 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
  401304:	6843      	ldr	r3, [r0, #4]
  401306:	f023 0310 	bic.w	r3, r3, #16
  40130a:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
  40130c:	6843      	ldr	r3, [r0, #4]
  40130e:	4319      	orrs	r1, r3
  401310:	6041      	str	r1, [r0, #4]
  401312:	4770      	bx	lr

00401314 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  401314:	6843      	ldr	r3, [r0, #4]
  401316:	01d2      	lsls	r2, r2, #7
  401318:	b2d2      	uxtb	r2, r2
  40131a:	4319      	orrs	r1, r3
  40131c:	430a      	orrs	r2, r1
  40131e:	6042      	str	r2, [r0, #4]
  401320:	4770      	bx	lr
  401322:	bf00      	nop

00401324 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  401324:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
			| settling | ADC_MR_TRACKTIM(uc_tracking);
  401326:	0609      	lsls	r1, r1, #24
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  401328:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
  40132a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  40132e:	4321      	orrs	r1, r4
  401330:	071b      	lsls	r3, r3, #28
  401332:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  401336:	4311      	orrs	r1, r2
  401338:	4319      	orrs	r1, r3
  40133a:	6041      	str	r1, [r0, #4]
}
  40133c:	bc10      	pop	{r4}
  40133e:	4770      	bx	lr

00401340 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  401340:	2301      	movs	r3, #1
  401342:	fa03 f101 	lsl.w	r1, r3, r1
  401346:	6101      	str	r1, [r0, #16]
  401348:	4770      	bx	lr
  40134a:	bf00      	nop

0040134c <adc_disable_all_channel>:
 * \param p_adc Pointer to an ADC instance.
 */
void adc_disable_all_channel(Adc *p_adc)
{
#if SAM3S || SAM4S || SAM3N || SAM3XA
	p_adc->ADC_CHDR = 0xFFFF;
  40134c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401350:	6143      	str	r3, [r0, #20]
  401352:	4770      	bx	lr

00401354 <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
  401354:	6241      	str	r1, [r0, #36]	; 0x24
  401356:	4770      	bx	lr

00401358 <adc_disable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be disabled.
 */
void adc_disable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IDR = ul_source;
  401358:	6281      	str	r1, [r0, #40]	; 0x28
  40135a:	4770      	bx	lr

0040135c <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
  40135c:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  40135e:	4770      	bx	lr

00401360 <adc_set_bias_current>:
 * \param p_adc Pointer to an ADC instance.
 * \param ibctl ADC Bias current control.
 */
void adc_set_bias_current(Adc *p_adc, const uint8_t uc_ibctl)
{
	p_adc->ADC_ACR |= ADC_ACR_IBCTL(uc_ibctl);
  401360:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
  401364:	0209      	lsls	r1, r1, #8
  401366:	f401 7140 	and.w	r1, r1, #768	; 0x300
  40136a:	4319      	orrs	r1, r3
  40136c:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  401370:	4770      	bx	lr
  401372:	bf00      	nop

00401374 <adc_get_pdc_base>:
 */
Pdc *adc_get_pdc_base(const Adc *p_adc)
{
	UNUSED(p_adc);
	return PDC_ADC;
}
  401374:	4800      	ldr	r0, [pc, #0]	; (401378 <adc_get_pdc_base+0x4>)
  401376:	4770      	bx	lr
  401378:	40038100 	.word	0x40038100

0040137c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40137c:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  40137e:	4b33      	ldr	r3, [pc, #204]	; (40144c <PIOA_Handler+0xd0>)
  401380:	4833      	ldr	r0, [pc, #204]	; (401450 <PIOA_Handler+0xd4>)
  401382:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
  401384:	4b33      	ldr	r3, [pc, #204]	; (401454 <PIOA_Handler+0xd8>)
	status = pio_get_interrupt_status(p_pio);
  401386:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401388:	4831      	ldr	r0, [pc, #196]	; (401450 <PIOA_Handler+0xd4>)
  40138a:	4798      	blx	r3
	if (status != 0) {
  40138c:	4005      	ands	r5, r0
  40138e:	d015      	beq.n	4013bc <PIOA_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401390:	4c31      	ldr	r4, [pc, #196]	; (401458 <PIOA_Handler+0xdc>)
  401392:	6820      	ldr	r0, [r4, #0]
  401394:	280b      	cmp	r0, #11
  401396:	d01d      	beq.n	4013d4 <PIOA_Handler+0x58>
  401398:	6920      	ldr	r0, [r4, #16]
  40139a:	280b      	cmp	r0, #11
  40139c:	d029      	beq.n	4013f2 <PIOA_Handler+0x76>
  40139e:	6a20      	ldr	r0, [r4, #32]
  4013a0:	280b      	cmp	r0, #11
  4013a2:	d02f      	beq.n	401404 <PIOA_Handler+0x88>
  4013a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4013a6:	280b      	cmp	r0, #11
  4013a8:	d035      	beq.n	401416 <PIOA_Handler+0x9a>
  4013aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
  4013ac:	280b      	cmp	r0, #11
  4013ae:	d03b      	beq.n	401428 <PIOA_Handler+0xac>
  4013b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
  4013b2:	280b      	cmp	r0, #11
  4013b4:	d041      	beq.n	40143a <PIOA_Handler+0xbe>
  4013b6:	6e20      	ldr	r0, [r4, #96]	; 0x60
  4013b8:	280b      	cmp	r0, #11
  4013ba:	d014      	beq.n	4013e6 <PIOA_Handler+0x6a>
	if (pio_capture_enable_flag) {
  4013bc:	4b27      	ldr	r3, [pc, #156]	; (40145c <PIOA_Handler+0xe0>)
  4013be:	681b      	ldr	r3, [r3, #0]
  4013c0:	b13b      	cbz	r3, 4013d2 <PIOA_Handler+0x56>
		if (pio_capture_handler) {
  4013c2:	4b27      	ldr	r3, [pc, #156]	; (401460 <PIOA_Handler+0xe4>)
  4013c4:	681b      	ldr	r3, [r3, #0]
  4013c6:	b11b      	cbz	r3, 4013d0 <PIOA_Handler+0x54>
	pio_handler_process(PIOA, ID_PIOA);
}
  4013c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			pio_capture_handler(p_pio);
  4013cc:	4820      	ldr	r0, [pc, #128]	; (401450 <PIOA_Handler+0xd4>)
  4013ce:	4718      	bx	r3
  4013d0:	bd70      	pop	{r4, r5, r6, pc}
  4013d2:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4013d4:	6861      	ldr	r1, [r4, #4]
  4013d6:	420d      	tst	r5, r1
  4013d8:	d0de      	beq.n	401398 <PIOA_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4013da:	68e3      	ldr	r3, [r4, #12]
  4013dc:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4013de:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  4013e0:	439d      	bics	r5, r3
  4013e2:	d0eb      	beq.n	4013bc <PIOA_Handler+0x40>
  4013e4:	e7d8      	b.n	401398 <PIOA_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4013e6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4013e8:	4229      	tst	r1, r5
  4013ea:	d0e7      	beq.n	4013bc <PIOA_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4013ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4013ee:	4798      	blx	r3
  4013f0:	e7e4      	b.n	4013bc <PIOA_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4013f2:	6961      	ldr	r1, [r4, #20]
  4013f4:	4229      	tst	r1, r5
  4013f6:	d0d2      	beq.n	40139e <PIOA_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4013f8:	69e3      	ldr	r3, [r4, #28]
  4013fa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4013fc:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  4013fe:	439d      	bics	r5, r3
  401400:	d0dc      	beq.n	4013bc <PIOA_Handler+0x40>
  401402:	e7cc      	b.n	40139e <PIOA_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401404:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401406:	4229      	tst	r1, r5
  401408:	d0cc      	beq.n	4013a4 <PIOA_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40140a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40140c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40140e:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  401410:	439d      	bics	r5, r3
  401412:	d0d3      	beq.n	4013bc <PIOA_Handler+0x40>
  401414:	e7c6      	b.n	4013a4 <PIOA_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401416:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401418:	4229      	tst	r1, r5
  40141a:	d0c6      	beq.n	4013aa <PIOA_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40141c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40141e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401420:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  401422:	439d      	bics	r5, r3
  401424:	d0ca      	beq.n	4013bc <PIOA_Handler+0x40>
  401426:	e7c0      	b.n	4013aa <PIOA_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401428:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40142a:	4229      	tst	r1, r5
  40142c:	d0c0      	beq.n	4013b0 <PIOA_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40142e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401430:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401432:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  401434:	439d      	bics	r5, r3
  401436:	d0c1      	beq.n	4013bc <PIOA_Handler+0x40>
  401438:	e7ba      	b.n	4013b0 <PIOA_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40143a:	6d61      	ldr	r1, [r4, #84]	; 0x54
  40143c:	4229      	tst	r1, r5
  40143e:	d0ba      	beq.n	4013b6 <PIOA_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401440:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401442:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401444:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  401446:	439d      	bics	r5, r3
  401448:	d0b8      	beq.n	4013bc <PIOA_Handler+0x40>
  40144a:	e7b4      	b.n	4013b6 <PIOA_Handler+0x3a>
  40144c:	00404229 	.word	0x00404229
  401450:	400e0e00 	.word	0x400e0e00
  401454:	0040422d 	.word	0x0040422d
  401458:	200011bc 	.word	0x200011bc
  40145c:	20001ef4 	.word	0x20001ef4
  401460:	2000122c 	.word	0x2000122c

00401464 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401464:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  401466:	4b33      	ldr	r3, [pc, #204]	; (401534 <PIOB_Handler+0xd0>)
  401468:	4833      	ldr	r0, [pc, #204]	; (401538 <PIOB_Handler+0xd4>)
  40146a:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
  40146c:	4b33      	ldr	r3, [pc, #204]	; (40153c <PIOB_Handler+0xd8>)
	status = pio_get_interrupt_status(p_pio);
  40146e:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401470:	4831      	ldr	r0, [pc, #196]	; (401538 <PIOB_Handler+0xd4>)
  401472:	4798      	blx	r3
	if (status != 0) {
  401474:	4005      	ands	r5, r0
  401476:	d015      	beq.n	4014a4 <PIOB_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401478:	4c31      	ldr	r4, [pc, #196]	; (401540 <PIOB_Handler+0xdc>)
  40147a:	6820      	ldr	r0, [r4, #0]
  40147c:	280c      	cmp	r0, #12
  40147e:	d01d      	beq.n	4014bc <PIOB_Handler+0x58>
  401480:	6920      	ldr	r0, [r4, #16]
  401482:	280c      	cmp	r0, #12
  401484:	d029      	beq.n	4014da <PIOB_Handler+0x76>
  401486:	6a20      	ldr	r0, [r4, #32]
  401488:	280c      	cmp	r0, #12
  40148a:	d02f      	beq.n	4014ec <PIOB_Handler+0x88>
  40148c:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40148e:	280c      	cmp	r0, #12
  401490:	d035      	beq.n	4014fe <PIOB_Handler+0x9a>
  401492:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401494:	280c      	cmp	r0, #12
  401496:	d03b      	beq.n	401510 <PIOB_Handler+0xac>
  401498:	6d20      	ldr	r0, [r4, #80]	; 0x50
  40149a:	280c      	cmp	r0, #12
  40149c:	d041      	beq.n	401522 <PIOB_Handler+0xbe>
  40149e:	6e20      	ldr	r0, [r4, #96]	; 0x60
  4014a0:	280c      	cmp	r0, #12
  4014a2:	d014      	beq.n	4014ce <PIOB_Handler+0x6a>
	if (pio_capture_enable_flag) {
  4014a4:	4b27      	ldr	r3, [pc, #156]	; (401544 <PIOB_Handler+0xe0>)
  4014a6:	681b      	ldr	r3, [r3, #0]
  4014a8:	b13b      	cbz	r3, 4014ba <PIOB_Handler+0x56>
		if (pio_capture_handler) {
  4014aa:	4b27      	ldr	r3, [pc, #156]	; (401548 <PIOB_Handler+0xe4>)
  4014ac:	681b      	ldr	r3, [r3, #0]
  4014ae:	b11b      	cbz	r3, 4014b8 <PIOB_Handler+0x54>
    pio_handler_process(PIOB, ID_PIOB);
}
  4014b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			pio_capture_handler(p_pio);
  4014b4:	4820      	ldr	r0, [pc, #128]	; (401538 <PIOB_Handler+0xd4>)
  4014b6:	4718      	bx	r3
  4014b8:	bd70      	pop	{r4, r5, r6, pc}
  4014ba:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4014bc:	6861      	ldr	r1, [r4, #4]
  4014be:	420d      	tst	r5, r1
  4014c0:	d0de      	beq.n	401480 <PIOB_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4014c2:	68e3      	ldr	r3, [r4, #12]
  4014c4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4014c6:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  4014c8:	439d      	bics	r5, r3
  4014ca:	d0eb      	beq.n	4014a4 <PIOB_Handler+0x40>
  4014cc:	e7d8      	b.n	401480 <PIOB_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4014ce:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4014d0:	4229      	tst	r1, r5
  4014d2:	d0e7      	beq.n	4014a4 <PIOB_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4014d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4014d6:	4798      	blx	r3
  4014d8:	e7e4      	b.n	4014a4 <PIOB_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4014da:	6961      	ldr	r1, [r4, #20]
  4014dc:	4229      	tst	r1, r5
  4014de:	d0d2      	beq.n	401486 <PIOB_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4014e0:	69e3      	ldr	r3, [r4, #28]
  4014e2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4014e4:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  4014e6:	439d      	bics	r5, r3
  4014e8:	d0dc      	beq.n	4014a4 <PIOB_Handler+0x40>
  4014ea:	e7cc      	b.n	401486 <PIOB_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4014ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
  4014ee:	4229      	tst	r1, r5
  4014f0:	d0cc      	beq.n	40148c <PIOB_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4014f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4014f4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4014f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  4014f8:	439d      	bics	r5, r3
  4014fa:	d0d3      	beq.n	4014a4 <PIOB_Handler+0x40>
  4014fc:	e7c6      	b.n	40148c <PIOB_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4014fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401500:	4229      	tst	r1, r5
  401502:	d0c6      	beq.n	401492 <PIOB_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401504:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401506:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401508:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  40150a:	439d      	bics	r5, r3
  40150c:	d0ca      	beq.n	4014a4 <PIOB_Handler+0x40>
  40150e:	e7c0      	b.n	401492 <PIOB_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401510:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401512:	4229      	tst	r1, r5
  401514:	d0c0      	beq.n	401498 <PIOB_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401516:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401518:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40151a:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  40151c:	439d      	bics	r5, r3
  40151e:	d0c1      	beq.n	4014a4 <PIOB_Handler+0x40>
  401520:	e7ba      	b.n	401498 <PIOB_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401522:	6d61      	ldr	r1, [r4, #84]	; 0x54
  401524:	4229      	tst	r1, r5
  401526:	d0ba      	beq.n	40149e <PIOB_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401528:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  40152a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40152c:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  40152e:	439d      	bics	r5, r3
  401530:	d0b8      	beq.n	4014a4 <PIOB_Handler+0x40>
  401532:	e7b4      	b.n	40149e <PIOB_Handler+0x3a>
  401534:	00404229 	.word	0x00404229
  401538:	400e1000 	.word	0x400e1000
  40153c:	0040422d 	.word	0x0040422d
  401540:	200011bc 	.word	0x200011bc
  401544:	20001ef4 	.word	0x20001ef4
  401548:	2000122c 	.word	0x2000122c

0040154c <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  40154c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401550:	f100 3eff 	add.w	lr, r0, #4294967295

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401554:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
  401558:	4f6b      	ldr	r7, [pc, #428]	; (401708 <udd_ep_in_sent+0x1bc>)
  40155a:	eb0c 030e 	add.w	r3, ip, lr
  40155e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  401562:	f893 8011 	ldrb.w	r8, [r3, #17]
{
  401566:	b082      	sub	sp, #8
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401568:	f3c8 0881 	ubfx	r8, r8, #2, #2
  40156c:	2800      	cmp	r0, #0
  40156e:	f000 80c4 	beq.w	4016fa <udd_ep_in_sent+0x1ae>
  401572:	2803      	cmp	r0, #3
  401574:	bf14      	ite	ne
  401576:	2302      	movne	r3, #2
  401578:	2301      	moveq	r3, #1
  40157a:	4543      	cmp	r3, r8
  40157c:	f340 80b9 	ble.w	4016f2 <udd_ep_in_sent+0x1a6>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  401580:	eb0c 030e 	add.w	r3, ip, lr
  401584:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  401588:	68da      	ldr	r2, [r3, #12]
  40158a:	689c      	ldr	r4, [r3, #8]
  40158c:	42a2      	cmp	r2, r4
  40158e:	d304      	bcc.n	40159a <udd_ep_in_sent+0x4e>
  401590:	7c5b      	ldrb	r3, [r3, #17]
  401592:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  401596:	f000 80b2 	beq.w	4016fe <udd_ep_in_sent+0x1b2>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  40159a:	eb0c 030e 	add.w	r3, ip, lr
  40159e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	uint32_t pkt_size = ptr_job->size;
  4015a2:	8a1e      	ldrh	r6, [r3, #16]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4015a4:	1aa4      	subs	r4, r4, r2
	uint32_t pkt_size = ptr_job->size;
  4015a6:	f3c6 0609 	ubfx	r6, r6, #0, #10
	if (nb_remain < pkt_size) {
  4015aa:	42b4      	cmp	r4, r6
  4015ac:	bf38      	it	cc
  4015ae:	4626      	movcc	r6, r4
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  4015b0:	685b      	ldr	r3, [r3, #4]
		is_short_pkt = true;
  4015b2:	bf38      	it	cc
  4015b4:	f04f 0a01 	movcc.w	sl, #1
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  4015b8:	eb03 0902 	add.w	r9, r3, r2
	ptr_job->buf_cnt += pkt_size;
  4015bc:	eb0c 030e 	add.w	r3, ip, lr
	bool is_short_pkt = false;
  4015c0:	bf28      	it	cs
  4015c2:	f04f 0a00 	movcs.w	sl, #0
	ptr_job->buf_cnt += pkt_size;
  4015c6:	4432      	add	r2, r6
  4015c8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	for (; pkt_size >= 8; pkt_size -= 8) {
  4015cc:	2e07      	cmp	r6, #7
	ptr_job->buf_cnt += pkt_size;
  4015ce:	60da      	str	r2, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  4015d0:	d92c      	bls.n	40162c <udd_ep_in_sent+0xe0>
  4015d2:	4634      	mov	r4, r6
  4015d4:	0082      	lsls	r2, r0, #2
  4015d6:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4015da:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
  4015de:	f109 0308 	add.w	r3, r9, #8
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015e2:	f813 5c08 	ldrb.w	r5, [r3, #-8]
	for (; pkt_size >= 8; pkt_size -= 8) {
  4015e6:	3c08      	subs	r4, #8
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015e8:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015ea:	f813 5c07 	ldrb.w	r5, [r3, #-7]
	for (; pkt_size >= 8; pkt_size -= 8) {
  4015ee:	2c07      	cmp	r4, #7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015f0:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015f2:	f813 5c06 	ldrb.w	r5, [r3, #-6]
  4015f6:	f103 0308 	add.w	r3, r3, #8
  4015fa:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015fc:	f813 5c0d 	ldrb.w	r5, [r3, #-13]
  401600:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401602:	f813 5c0c 	ldrb.w	r5, [r3, #-12]
  401606:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401608:	f813 5c0b 	ldrb.w	r5, [r3, #-11]
  40160c:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40160e:	f813 5c0a 	ldrb.w	r5, [r3, #-10]
  401612:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401614:	f813 5c09 	ldrb.w	r5, [r3, #-9]
  401618:	6515      	str	r5, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  40161a:	d8e2      	bhi.n	4015e2 <udd_ep_in_sent+0x96>
  40161c:	f1a6 0308 	sub.w	r3, r6, #8
  401620:	f023 0307 	bic.w	r3, r3, #7
  401624:	3308      	adds	r3, #8
  401626:	4499      	add	r9, r3
  401628:	f006 0607 	and.w	r6, r6, #7
	for (; pkt_size; pkt_size--) {
  40162c:	b32e      	cbz	r6, 40167a <udd_ep_in_sent+0x12e>
  40162e:	0083      	lsls	r3, r0, #2
  401630:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401634:	f899 2000 	ldrb.w	r2, [r9]
  401638:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	for (; pkt_size; pkt_size--) {
  40163c:	2e01      	cmp	r6, #1
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40163e:	651a      	str	r2, [r3, #80]	; 0x50
	for (; pkt_size; pkt_size--) {
  401640:	d01b      	beq.n	40167a <udd_ep_in_sent+0x12e>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401642:	f899 2001 	ldrb.w	r2, [r9, #1]
	for (; pkt_size; pkt_size--) {
  401646:	2e02      	cmp	r6, #2
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401648:	651a      	str	r2, [r3, #80]	; 0x50
	for (; pkt_size; pkt_size--) {
  40164a:	d016      	beq.n	40167a <udd_ep_in_sent+0x12e>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40164c:	f899 2002 	ldrb.w	r2, [r9, #2]
	for (; pkt_size; pkt_size--) {
  401650:	2e03      	cmp	r6, #3
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401652:	651a      	str	r2, [r3, #80]	; 0x50
	for (; pkt_size; pkt_size--) {
  401654:	d011      	beq.n	40167a <udd_ep_in_sent+0x12e>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401656:	f899 2003 	ldrb.w	r2, [r9, #3]
	for (; pkt_size; pkt_size--) {
  40165a:	2e04      	cmp	r6, #4
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40165c:	651a      	str	r2, [r3, #80]	; 0x50
	for (; pkt_size; pkt_size--) {
  40165e:	d00c      	beq.n	40167a <udd_ep_in_sent+0x12e>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401660:	f899 2004 	ldrb.w	r2, [r9, #4]
	for (; pkt_size; pkt_size--) {
  401664:	2e05      	cmp	r6, #5
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401666:	651a      	str	r2, [r3, #80]	; 0x50
	for (; pkt_size; pkt_size--) {
  401668:	d007      	beq.n	40167a <udd_ep_in_sent+0x12e>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40166a:	f899 2005 	ldrb.w	r2, [r9, #5]
	for (; pkt_size; pkt_size--) {
  40166e:	2e06      	cmp	r6, #6
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401670:	651a      	str	r2, [r3, #80]	; 0x50
	for (; pkt_size; pkt_size--) {
  401672:	d002      	beq.n	40167a <udd_ep_in_sent+0x12e>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401674:	f899 2006 	ldrb.w	r2, [r9, #6]
  401678:	651a      	str	r2, [r3, #80]	; 0x50
	ptr_job->bank++;
  40167a:	eb0c 030e 	add.w	r3, ip, lr
  40167e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  401682:	7c5a      	ldrb	r2, [r3, #17]
  401684:	f108 0801 	add.w	r8, r8, #1
  401688:	f368 0283 	bfi	r2, r8, #2, #2
  40168c:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  40168e:	b199      	cbz	r1, 4016b8 <udd_ep_in_sent+0x16c>
  401690:	0080      	lsls	r0, r0, #2
  401692:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  401696:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  40169a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40169c:	9301      	str	r3, [sp, #4]
  40169e:	9b01      	ldr	r3, [sp, #4]
  4016a0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016a4:	9301      	str	r3, [sp, #4]
  4016a6:	9b01      	ldr	r3, [sp, #4]
  4016a8:	f043 0310 	orr.w	r3, r3, #16
  4016ac:	9301      	str	r3, [sp, #4]
  4016ae:	9b01      	ldr	r3, [sp, #4]
  4016b0:	6303      	str	r3, [r0, #48]	; 0x30
  4016b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4016b4:	06db      	lsls	r3, r3, #27
  4016b6:	d5fc      	bpl.n	4016b2 <udd_ep_in_sent+0x166>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  4016b8:	f1ba 0f00 	cmp.w	sl, #0
  4016bc:	d007      	beq.n	4016ce <udd_ep_in_sent+0x182>
		ptr_job->b_shortpacket = false;
  4016be:	eb0c 030e 	add.w	r3, ip, lr
  4016c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4016c6:	7c5a      	ldrb	r2, [r3, #17]
  4016c8:	f36f 1286 	bfc	r2, #6, #1
  4016cc:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  4016ce:	44e6      	add	lr, ip
  4016d0:	eb07 078e 	add.w	r7, r7, lr, lsl #2
  4016d4:	68fa      	ldr	r2, [r7, #12]
  4016d6:	68bb      	ldr	r3, [r7, #8]
  4016d8:	429a      	cmp	r2, r3
  4016da:	d30a      	bcc.n	4016f2 <udd_ep_in_sent+0x1a6>
			&& (!ptr_job->b_shortpacket)) {
  4016dc:	7c78      	ldrb	r0, [r7, #17]
  4016de:	f010 0040 	ands.w	r0, r0, #64	; 0x40
  4016e2:	d106      	bne.n	4016f2 <udd_ep_in_sent+0x1a6>
		ptr_job->b_buf_end = true;
  4016e4:	7c7b      	ldrb	r3, [r7, #17]
  4016e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4016ea:	747b      	strb	r3, [r7, #17]
		return false;
	}
	return true; // Pending
}
  4016ec:	b002      	add	sp, #8
  4016ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true; // Data pending
  4016f2:	2001      	movs	r0, #1
}
  4016f4:	b002      	add	sp, #8
  4016f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4016fa:	2301      	movs	r3, #1
  4016fc:	e73d      	b.n	40157a <udd_ep_in_sent+0x2e>
		return false;
  4016fe:	4618      	mov	r0, r3
}
  401700:	b002      	add	sp, #8
  401702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401706:	bf00      	nop
  401708:	20001238 	.word	0x20001238

0040170c <cpu_irq_restore.part.0>:
  40170c:	2201      	movs	r2, #1
  40170e:	4b03      	ldr	r3, [pc, #12]	; (40171c <cpu_irq_restore.part.0+0x10>)
  401710:	701a      	strb	r2, [r3, #0]
  401712:	f3bf 8f5f 	dmb	sy
  401716:	b662      	cpsie	i
  401718:	4770      	bx	lr
  40171a:	bf00      	nop
  40171c:	20000290 	.word	0x20000290

00401720 <udd_ep_finish_job.part.1>:
static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
  401720:	b430      	push	{r4, r5}
	ptr_job->busy = false;
  401722:	7c43      	ldrb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  401724:	6804      	ldr	r4, [r0, #0]
	ptr_job->busy = false;
  401726:	f36f 1304 	bfc	r3, #4, #1
  40172a:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  40172c:	b194      	cbz	r4, 401754 <udd_ep_finish_job.part.1+0x34>
  40172e:	460d      	mov	r5, r1
	if (Is_udd_endpoint_type_in(ep_num)) {
  401730:	4b09      	ldr	r3, [pc, #36]	; (401758 <udd_ep_finish_job.part.1+0x38>)
  401732:	f102 010c 	add.w	r1, r2, #12
  401736:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  40173a:	6881      	ldr	r1, [r0, #8]
  40173c:	f1a5 0001 	sub.w	r0, r5, #1
  401740:	fab0 f080 	clz	r0, r0
	if (Is_udd_endpoint_type_in(ep_num)) {
  401744:	055b      	lsls	r3, r3, #21
		ep_num |= USB_EP_DIR_IN;
  401746:	bf48      	it	mi
  401748:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  40174c:	4623      	mov	r3, r4
}
  40174e:	bc30      	pop	{r4, r5}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401750:	0940      	lsrs	r0, r0, #5
  401752:	4718      	bx	r3
}
  401754:	bc30      	pop	{r4, r5}
  401756:	4770      	bx	lr
  401758:	40034000 	.word	0x40034000

0040175c <udd_ctrl_in_sent>:
{
  40175c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401760:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 40191c <udd_ctrl_in_sent+0x1c0>
{
  401764:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401766:	f898 3000 	ldrb.w	r3, [r8]
  40176a:	2b03      	cmp	r3, #3
  40176c:	d07a      	beq.n	401864 <udd_ctrl_in_sent+0x108>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  40176e:	4e65      	ldr	r6, [pc, #404]	; (401904 <udd_ctrl_in_sent+0x1a8>)
  401770:	4d65      	ldr	r5, [pc, #404]	; (401908 <udd_ctrl_in_sent+0x1ac>)
  401772:	8832      	ldrh	r2, [r6, #0]
  401774:	89ac      	ldrh	r4, [r5, #12]
  401776:	1aa4      	subs	r4, r4, r2
  401778:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  40177a:	2c00      	cmp	r4, #0
  40177c:	d04d      	beq.n	40181a <udd_ctrl_in_sent+0xbe>
  40177e:	4f63      	ldr	r7, [pc, #396]	; (40190c <udd_ctrl_in_sent+0x1b0>)
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  401780:	2c3f      	cmp	r4, #63	; 0x3f
  401782:	f240 80ac 	bls.w	4018de <udd_ctrl_in_sent+0x182>
		b_shortpacket = false;
  401786:	2300      	movs	r3, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  401788:	2440      	movs	r4, #64	; 0x40
  40178a:	703b      	strb	r3, [r7, #0]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40178c:	68ad      	ldr	r5, [r5, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40178e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401792:	fab3 f383 	clz	r3, r3
  401796:	095b      	lsrs	r3, r3, #5
  401798:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  40179a:	b672      	cpsid	i
  40179c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4017a0:	2300      	movs	r3, #0
  4017a2:	4f5b      	ldr	r7, [pc, #364]	; (401910 <udd_ctrl_in_sent+0x1b4>)
	if (Is_udd_bank0_received(0)) {
  4017a4:	485b      	ldr	r0, [pc, #364]	; (401914 <udd_ctrl_in_sent+0x1b8>)
  4017a6:	703b      	strb	r3, [r7, #0]
	return flags;
  4017a8:	f8dd e014 	ldr.w	lr, [sp, #20]
  4017ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4017ae:	079b      	lsls	r3, r3, #30
  4017b0:	d476      	bmi.n	4018a0 <udd_ctrl_in_sent+0x144>
	for (i = 0; i < nb_remain; i++) {
  4017b2:	b144      	cbz	r4, 4017c6 <udd_ctrl_in_sent+0x6a>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4017b4:	4415      	add	r5, r2
  4017b6:	462a      	mov	r2, r5
		udd_endpoint_fifo_write(0, *ptr_src++);
  4017b8:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < nb_remain; i++) {
  4017bc:	1b53      	subs	r3, r2, r5
  4017be:	b2db      	uxtb	r3, r3
  4017c0:	42a3      	cmp	r3, r4
		udd_endpoint_fifo_write(0, *ptr_src++);
  4017c2:	6501      	str	r1, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  4017c4:	d3f8      	bcc.n	4017b8 <udd_ctrl_in_sent+0x5c>
	udd_ctrl_payload_nb_trans += nb_remain;
  4017c6:	8832      	ldrh	r2, [r6, #0]
	udd_set_transmit_ready(0);
  4017c8:	4b52      	ldr	r3, [pc, #328]	; (401914 <udd_ctrl_in_sent+0x1b8>)
	udd_ctrl_payload_nb_trans += nb_remain;
  4017ca:	4414      	add	r4, r2
	udd_set_transmit_ready(0);
  4017cc:	461a      	mov	r2, r3
	udd_ctrl_payload_nb_trans += nb_remain;
  4017ce:	8034      	strh	r4, [r6, #0]
	udd_set_transmit_ready(0);
  4017d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4017d2:	9103      	str	r1, [sp, #12]
  4017d4:	9903      	ldr	r1, [sp, #12]
  4017d6:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  4017da:	9103      	str	r1, [sp, #12]
  4017dc:	9903      	ldr	r1, [sp, #12]
  4017de:	f041 0110 	orr.w	r1, r1, #16
  4017e2:	9103      	str	r1, [sp, #12]
  4017e4:	9903      	ldr	r1, [sp, #12]
  4017e6:	6319      	str	r1, [r3, #48]	; 0x30
  4017e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017ea:	06d9      	lsls	r1, r3, #27
  4017ec:	d5fc      	bpl.n	4017e8 <udd_ctrl_in_sent+0x8c>
	udd_ack_in_sent(0);
  4017ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017f0:	4948      	ldr	r1, [pc, #288]	; (401914 <udd_ctrl_in_sent+0x1b8>)
  4017f2:	9304      	str	r3, [sp, #16]
  4017f4:	9b04      	ldr	r3, [sp, #16]
  4017f6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4017fa:	9304      	str	r3, [sp, #16]
  4017fc:	9b04      	ldr	r3, [sp, #16]
  4017fe:	f023 0301 	bic.w	r3, r3, #1
  401802:	9304      	str	r3, [sp, #16]
  401804:	9b04      	ldr	r3, [sp, #16]
  401806:	6313      	str	r3, [r2, #48]	; 0x30
  401808:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40180a:	07db      	lsls	r3, r3, #31
  40180c:	d4fc      	bmi.n	401808 <udd_ctrl_in_sent+0xac>
	if (cpu_irq_is_enabled_flags(flags))
  40180e:	f1be 0f00 	cmp.w	lr, #0
  401812:	d166      	bne.n	4018e2 <udd_ctrl_in_sent+0x186>
}
  401814:	b007      	add	sp, #28
  401816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  40181a:	493f      	ldr	r1, [pc, #252]	; (401918 <udd_ctrl_in_sent+0x1bc>)
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  40181c:	88e8      	ldrh	r0, [r5, #6]
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  40181e:	880b      	ldrh	r3, [r1, #0]
  401820:	4413      	add	r3, r2
  401822:	b29b      	uxth	r3, r3
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  401824:	4298      	cmp	r0, r3
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401826:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  401828:	d005      	beq.n	401836 <udd_ctrl_in_sent+0xda>
				|| b_shortpacket) {
  40182a:	4f38      	ldr	r7, [pc, #224]	; (40190c <udd_ctrl_in_sent+0x1b0>)
  40182c:	f897 9000 	ldrb.w	r9, [r7]
  401830:	f1b9 0f00 	cmp.w	r9, #0
  401834:	d04e      	beq.n	4018d4 <udd_ctrl_in_sent+0x178>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401836:	2204      	movs	r2, #4
			udd_ack_in_sent(0);
  401838:	4b36      	ldr	r3, [pc, #216]	; (401914 <udd_ctrl_in_sent+0x1b8>)
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  40183a:	f888 2000 	strb.w	r2, [r8]
			udd_ack_in_sent(0);
  40183e:	461a      	mov	r2, r3
  401840:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401842:	9101      	str	r1, [sp, #4]
  401844:	9901      	ldr	r1, [sp, #4]
  401846:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  40184a:	9101      	str	r1, [sp, #4]
  40184c:	9901      	ldr	r1, [sp, #4]
  40184e:	f021 0101 	bic.w	r1, r1, #1
  401852:	9101      	str	r1, [sp, #4]
  401854:	9901      	ldr	r1, [sp, #4]
  401856:	6319      	str	r1, [r3, #48]	; 0x30
  401858:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40185a:	07d9      	lsls	r1, r3, #31
  40185c:	d4fc      	bmi.n	401858 <udd_ctrl_in_sent+0xfc>
}
  40185e:	b007      	add	sp, #28
  401860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		udd_ack_in_sent(0);
  401864:	4b2b      	ldr	r3, [pc, #172]	; (401914 <udd_ctrl_in_sent+0x1b8>)
  401866:	461a      	mov	r2, r3
  401868:	6b19      	ldr	r1, [r3, #48]	; 0x30
  40186a:	9100      	str	r1, [sp, #0]
  40186c:	9900      	ldr	r1, [sp, #0]
  40186e:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401872:	9100      	str	r1, [sp, #0]
  401874:	9900      	ldr	r1, [sp, #0]
  401876:	f021 0101 	bic.w	r1, r1, #1
  40187a:	9100      	str	r1, [sp, #0]
  40187c:	9900      	ldr	r1, [sp, #0]
  40187e:	6319      	str	r1, [r3, #48]	; 0x30
  401880:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401882:	07d8      	lsls	r0, r3, #31
  401884:	d4fc      	bmi.n	401880 <udd_ctrl_in_sent+0x124>
	if (udd_g_ctrlreq.callback) {
  401886:	4d20      	ldr	r5, [pc, #128]	; (401908 <udd_ctrl_in_sent+0x1ac>)
  401888:	692b      	ldr	r3, [r5, #16]
  40188a:	b103      	cbz	r3, 40188e <udd_ctrl_in_sent+0x132>
		udd_g_ctrlreq.callback();
  40188c:	4798      	blx	r3
	udd_g_ctrlreq.callback = NULL;
  40188e:	2300      	movs	r3, #0
  401890:	612b      	str	r3, [r5, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401892:	616b      	str	r3, [r5, #20]
	udd_g_ctrlreq.payload_size = 0;
  401894:	81ab      	strh	r3, [r5, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  401896:	f888 3000 	strb.w	r3, [r8]
}
  40189a:	b007      	add	sp, #28
  40189c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4018a0:	f1be 0f00 	cmp.w	lr, #0
  4018a4:	d123      	bne.n	4018ee <udd_ctrl_in_sent+0x192>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4018a6:	2204      	movs	r2, #4
		udd_ack_in_sent(0);
  4018a8:	4b1a      	ldr	r3, [pc, #104]	; (401914 <udd_ctrl_in_sent+0x1b8>)
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4018aa:	f888 2000 	strb.w	r2, [r8]
		udd_ack_in_sent(0);
  4018ae:	461a      	mov	r2, r3
  4018b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4018b2:	9102      	str	r1, [sp, #8]
  4018b4:	9902      	ldr	r1, [sp, #8]
  4018b6:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  4018ba:	9102      	str	r1, [sp, #8]
  4018bc:	9902      	ldr	r1, [sp, #8]
  4018be:	f021 0101 	bic.w	r1, r1, #1
  4018c2:	9102      	str	r1, [sp, #8]
  4018c4:	9902      	ldr	r1, [sp, #8]
  4018c6:	6319      	str	r1, [r3, #48]	; 0x30
  4018c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018ca:	07d8      	lsls	r0, r3, #31
  4018cc:	d4fc      	bmi.n	4018c8 <udd_ctrl_in_sent+0x16c>
}
  4018ce:	b007      	add	sp, #28
  4018d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  4018d4:	696b      	ldr	r3, [r5, #20]
  4018d6:	b113      	cbz	r3, 4018de <udd_ctrl_in_sent+0x182>
				|| (!udd_g_ctrlreq.over_under_run())) {
  4018d8:	4798      	blx	r3
  4018da:	b970      	cbnz	r0, 4018fa <udd_ctrl_in_sent+0x19e>
  4018dc:	8832      	ldrh	r2, [r6, #0]
		b_shortpacket = true;
  4018de:	2301      	movs	r3, #1
  4018e0:	e753      	b.n	40178a <udd_ctrl_in_sent+0x2e>
		cpu_irq_enable();
  4018e2:	2301      	movs	r3, #1
  4018e4:	703b      	strb	r3, [r7, #0]
  4018e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4018ea:	b662      	cpsie	i
  4018ec:	e792      	b.n	401814 <udd_ctrl_in_sent+0xb8>
  4018ee:	2301      	movs	r3, #1
  4018f0:	703b      	strb	r3, [r7, #0]
  4018f2:	f3bf 8f5f 	dmb	sy
  4018f6:	b662      	cpsie	i
  4018f8:	e7d5      	b.n	4018a6 <udd_ctrl_in_sent+0x14a>
			udd_ctrl_payload_nb_trans = 0;
  4018fa:	8034      	strh	r4, [r6, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  4018fc:	464a      	mov	r2, r9
  4018fe:	89ac      	ldrh	r4, [r5, #12]
  401900:	e73e      	b.n	401780 <udd_ctrl_in_sent+0x24>
  401902:	bf00      	nop
  401904:	20001232 	.word	0x20001232
  401908:	200012c4 	.word	0x200012c4
  40190c:	20001230 	.word	0x20001230
  401910:	20000290 	.word	0x20000290
  401914:	40034000 	.word	0x40034000
  401918:	20001234 	.word	0x20001234
  40191c:	20001236 	.word	0x20001236

00401920 <UDP_Handler>:
{
  401920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401924:	4b65      	ldr	r3, [pc, #404]	; (401abc <UDP_Handler+0x19c>)
{
  401926:	b0a7      	sub	sp, #156	; 0x9c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401928:	4798      	blx	r3
  40192a:	b920      	cbnz	r0, 401936 <UDP_Handler+0x16>
  40192c:	4b64      	ldr	r3, [pc, #400]	; (401ac0 <UDP_Handler+0x1a0>)
  40192e:	69db      	ldr	r3, [r3, #28]
  401930:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  401934:	d030      	beq.n	401998 <UDP_Handler+0x78>
	udd_enable_periph_ck();
  401936:	4b63      	ldr	r3, [pc, #396]	; (401ac4 <UDP_Handler+0x1a4>)
  401938:	2022      	movs	r0, #34	; 0x22
  40193a:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  40193c:	4b60      	ldr	r3, [pc, #384]	; (401ac0 <UDP_Handler+0x1a0>)
  40193e:	699a      	ldr	r2, [r3, #24]
  401940:	0512      	lsls	r2, r2, #20
  401942:	d503      	bpl.n	40194c <UDP_Handler+0x2c>
  401944:	69da      	ldr	r2, [r3, #28]
  401946:	0517      	lsls	r7, r2, #20
  401948:	f100 808a 	bmi.w	401a60 <UDP_Handler+0x140>
	if (!Is_udd_endpoint_interrupt(0))
  40194c:	4b5c      	ldr	r3, [pc, #368]	; (401ac0 <UDP_Handler+0x1a0>)
  40194e:	69da      	ldr	r2, [r3, #28]
  401950:	07d6      	lsls	r6, r2, #31
  401952:	d529      	bpl.n	4019a8 <UDP_Handler+0x88>
	if (Is_udd_setup_received(0)) {
  401954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401956:	0755      	lsls	r5, r2, #29
  401958:	f100 8137 	bmi.w	401bca <UDP_Handler+0x2aa>
	if (Is_udd_in_sent(0)) {
  40195c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40195e:	07d5      	lsls	r5, r2, #31
  401960:	f100 8169 	bmi.w	401c36 <UDP_Handler+0x316>
	if (Is_udd_bank0_received(0)) {
  401964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401966:	0794      	lsls	r4, r2, #30
  401968:	f100 8168 	bmi.w	401c3c <UDP_Handler+0x31c>
	if (Is_udd_stall(0)) {
  40196c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40196e:	0717      	lsls	r7, r2, #28
  401970:	d51a      	bpl.n	4019a8 <UDP_Handler+0x88>
		udd_ack_stall(0);
  401972:	461a      	mov	r2, r3
  401974:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401976:	9100      	str	r1, [sp, #0]
  401978:	9900      	ldr	r1, [sp, #0]
  40197a:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  40197e:	9100      	str	r1, [sp, #0]
  401980:	9900      	ldr	r1, [sp, #0]
  401982:	f021 0108 	bic.w	r1, r1, #8
  401986:	9100      	str	r1, [sp, #0]
  401988:	9900      	ldr	r1, [sp, #0]
  40198a:	6319      	str	r1, [r3, #48]	; 0x30
  40198c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40198e:	071e      	lsls	r6, r3, #28
  401990:	d4fc      	bmi.n	40198c <UDP_Handler+0x6c>
}
  401992:	b027      	add	sp, #156	; 0x9c
  401994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("cpsid i" : : : "memory");
  401998:	b672      	cpsid	i
  40199a:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  40199e:	4a4a      	ldr	r2, [pc, #296]	; (401ac8 <UDP_Handler+0x1a8>)
  4019a0:	7013      	strb	r3, [r2, #0]
}
  4019a2:	b027      	add	sp, #156	; 0x9c
  4019a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4019a8:	4b45      	ldr	r3, [pc, #276]	; (401ac0 <UDP_Handler+0x1a0>)
  4019aa:	699b      	ldr	r3, [r3, #24]
  4019ac:	079d      	lsls	r5, r3, #30
  4019ae:	d50d      	bpl.n	4019cc <UDP_Handler+0xac>

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  4019b0:	4a46      	ldr	r2, [pc, #280]	; (401acc <UDP_Handler+0x1ac>)
  4019b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4019b4:	f013 0342 	ands.w	r3, r3, #66	; 0x42
  4019b8:	f040 83d2 	bne.w	402160 <UDP_Handler+0x840>
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  4019bc:	6b11      	ldr	r1, [r2, #48]	; 0x30
  4019be:	07cc      	lsls	r4, r1, #31
  4019c0:	f100 8581 	bmi.w	4024c6 <UDP_Handler+0xba6>
				udd_ack_in_sent(ep);
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  4019c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4019c6:	0718      	lsls	r0, r3, #28
  4019c8:	f100 857b 	bmi.w	4024c2 <UDP_Handler+0xba2>
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4019cc:	4b3c      	ldr	r3, [pc, #240]	; (401ac0 <UDP_Handler+0x1a0>)
  4019ce:	699b      	ldr	r3, [r3, #24]
  4019d0:	0759      	lsls	r1, r3, #29
  4019d2:	d50d      	bpl.n	4019f0 <UDP_Handler+0xd0>
		if (Is_udd_any_bank_received(ep)) {
  4019d4:	4b3e      	ldr	r3, [pc, #248]	; (401ad0 <UDP_Handler+0x1b0>)
  4019d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4019d8:	f012 0f42 	tst.w	r2, #66	; 0x42
  4019dc:	f040 85a8 	bne.w	402530 <UDP_Handler+0xc10>
		if (Is_udd_in_sent(ep)) {
  4019e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4019e2:	07d2      	lsls	r2, r2, #31
  4019e4:	f100 8581 	bmi.w	4024ea <UDP_Handler+0xbca>
		if (Is_udd_stall(ep)) {
  4019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4019ea:	071f      	lsls	r7, r3, #28
  4019ec:	f100 8264 	bmi.w	401eb8 <UDP_Handler+0x598>
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4019f0:	4b33      	ldr	r3, [pc, #204]	; (401ac0 <UDP_Handler+0x1a0>)
  4019f2:	699b      	ldr	r3, [r3, #24]
  4019f4:	071e      	lsls	r6, r3, #28
  4019f6:	d50f      	bpl.n	401a18 <UDP_Handler+0xf8>
		if (Is_udd_any_bank_received(ep)) {
  4019f8:	4b36      	ldr	r3, [pc, #216]	; (401ad4 <UDP_Handler+0x1b4>)
  4019fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4019fc:	f012 0f42 	tst.w	r2, #66	; 0x42
  401a00:	f040 856a 	bne.w	4024d8 <UDP_Handler+0xbb8>
		if (Is_udd_in_sent(ep)) {
  401a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a06:	07d6      	lsls	r6, r2, #31
  401a08:	f100 82c0 	bmi.w	401f8c <UDP_Handler+0x66c>
		if (Is_udd_stall(ep)) {
  401a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401a0e:	071f      	lsls	r7, r3, #28
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401a10:	bf48      	it	mi
  401a12:	2303      	movmi	r3, #3
		if (Is_udd_stall(ep)) {
  401a14:	f100 8251 	bmi.w	401eba <UDP_Handler+0x59a>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401a18:	4b29      	ldr	r3, [pc, #164]	; (401ac0 <UDP_Handler+0x1a0>)
  401a1a:	699a      	ldr	r2, [r3, #24]
  401a1c:	0495      	lsls	r5, r2, #18
  401a1e:	d41b      	bmi.n	401a58 <UDP_Handler+0x138>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401a20:	4b27      	ldr	r3, [pc, #156]	; (401ac0 <UDP_Handler+0x1a0>)
  401a22:	699a      	ldr	r2, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401a24:	0590      	lsls	r0, r2, #22
  401a26:	d523      	bpl.n	401a70 <UDP_Handler+0x150>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401a28:	69db      	ldr	r3, [r3, #28]
  401a2a:	0599      	lsls	r1, r3, #22
  401a2c:	d520      	bpl.n	401a70 <UDP_Handler+0x150>
		udd_ack_wakeups();
  401a2e:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  401a32:	4b23      	ldr	r3, [pc, #140]	; (401ac0 <UDP_Handler+0x1a0>)
	if (b_idle && !udd_b_idle) {
  401a34:	4c28      	ldr	r4, [pc, #160]	; (401ad8 <UDP_Handler+0x1b8>)
		udd_ack_wakeups();
  401a36:	621a      	str	r2, [r3, #32]
		udd_disable_wakeups();
  401a38:	615a      	str	r2, [r3, #20]
	if (b_idle && !udd_b_idle) {
  401a3a:	7820      	ldrb	r0, [r4, #0]
  401a3c:	2800      	cmp	r0, #0
  401a3e:	f000 818f 	beq.w	401d60 <UDP_Handler+0x440>
		udd_ack_suspend();
  401a42:	f44f 7280 	mov.w	r2, #256	; 0x100
	udd_b_idle = b_idle;
  401a46:	2001      	movs	r0, #1
		udd_enable_sof_interrupt();
  401a48:	f44f 6100 	mov.w	r1, #2048	; 0x800
		udd_ack_suspend();
  401a4c:	4b1c      	ldr	r3, [pc, #112]	; (401ac0 <UDP_Handler+0x1a0>)
	udd_b_idle = b_idle;
  401a4e:	7020      	strb	r0, [r4, #0]
		udd_ack_suspend();
  401a50:	621a      	str	r2, [r3, #32]
		udd_enable_suspend_interrupt();
  401a52:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401a54:	6119      	str	r1, [r3, #16]
		goto udd_interrupt_end;
  401a56:	e7a4      	b.n	4019a2 <UDP_Handler+0x82>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401a58:	69db      	ldr	r3, [r3, #28]
  401a5a:	049c      	lsls	r4, r3, #18
  401a5c:	d4e7      	bmi.n	401a2e <UDP_Handler+0x10e>
  401a5e:	e7df      	b.n	401a20 <UDP_Handler+0x100>
		udd_ack_sof();
  401a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
		udc_sof_notify();
  401a64:	4a1d      	ldr	r2, [pc, #116]	; (401adc <UDP_Handler+0x1bc>)
		udd_ack_sof();
  401a66:	6219      	str	r1, [r3, #32]
		udc_sof_notify();
  401a68:	4790      	blx	r2
}
  401a6a:	b027      	add	sp, #156	; 0x9c
  401a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401a70:	4b13      	ldr	r3, [pc, #76]	; (401ac0 <UDP_Handler+0x1a0>)
  401a72:	699a      	ldr	r2, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401a74:	0552      	lsls	r2, r2, #21
  401a76:	d502      	bpl.n	401a7e <UDP_Handler+0x15e>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401a78:	69db      	ldr	r3, [r3, #28]
  401a7a:	055b      	lsls	r3, r3, #21
  401a7c:	d4d7      	bmi.n	401a2e <UDP_Handler+0x10e>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401a7e:	4b10      	ldr	r3, [pc, #64]	; (401ac0 <UDP_Handler+0x1a0>)
  401a80:	699a      	ldr	r2, [r3, #24]
  401a82:	05d7      	lsls	r7, r2, #23
  401a84:	d52e      	bpl.n	401ae4 <UDP_Handler+0x1c4>
  401a86:	69da      	ldr	r2, [r3, #28]
  401a88:	05d6      	lsls	r6, r2, #23
  401a8a:	d52b      	bpl.n	401ae4 <UDP_Handler+0x1c4>
		udd_ack_suspend();
  401a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
		udd_enable_ext_resume_interrupt();
  401a90:	f44f 6180 	mov.w	r1, #1024	; 0x400
		udd_enable_wake_up_interrupt();
  401a94:	f44f 5600 	mov.w	r6, #8192	; 0x2000
		udd_enable_resume_interrupt();
  401a98:	f44f 7500 	mov.w	r5, #512	; 0x200
	if (!b_idle && udd_b_idle) {
  401a9c:	4c0e      	ldr	r4, [pc, #56]	; (401ad8 <UDP_Handler+0x1b8>)
		udd_ack_suspend();
  401a9e:	621a      	str	r2, [r3, #32]
		udd_disable_periph_ck();
  401aa0:	2022      	movs	r0, #34	; 0x22
		udd_disable_suspend_interrupt();
  401aa2:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  401aa4:	611e      	str	r6, [r3, #16]
		udd_disable_periph_ck();
  401aa6:	4a0e      	ldr	r2, [pc, #56]	; (401ae0 <UDP_Handler+0x1c0>)
		udd_enable_resume_interrupt();
  401aa8:	611d      	str	r5, [r3, #16]
		udd_enable_ext_resume_interrupt();
  401aaa:	6119      	str	r1, [r3, #16]
		udd_disable_periph_ck();
  401aac:	4790      	blx	r2
	if (!b_idle && udd_b_idle) {
  401aae:	7823      	ldrb	r3, [r4, #0]
  401ab0:	2b00      	cmp	r3, #0
  401ab2:	f040 83fd 	bne.w	4022b0 <UDP_Handler+0x990>
	udd_b_idle = b_idle;
  401ab6:	2300      	movs	r3, #0
  401ab8:	7023      	strb	r3, [r4, #0]
  401aba:	e772      	b.n	4019a2 <UDP_Handler+0x82>
  401abc:	00404489 	.word	0x00404489
  401ac0:	40034000 	.word	0x40034000
  401ac4:	00404325 	.word	0x00404325
  401ac8:	20000290 	.word	0x20000290
  401acc:	40034004 	.word	0x40034004
  401ad0:	40034008 	.word	0x40034008
  401ad4:	4003400c 	.word	0x4003400c
  401ad8:	20001231 	.word	0x20001231
  401adc:	00400ce9 	.word	0x00400ce9
  401ae0:	00404369 	.word	0x00404369
	if (Is_udd_reset()) {
  401ae4:	4a96      	ldr	r2, [pc, #600]	; (401d40 <UDP_Handler+0x420>)
  401ae6:	69d3      	ldr	r3, [r2, #28]
  401ae8:	04dd      	lsls	r5, r3, #19
  401aea:	f57f af5a 	bpl.w	4019a2 <UDP_Handler+0x82>
		udd_ack_reset();
  401aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (ptr_job->busy == false) {
  401af2:	4f94      	ldr	r7, [pc, #592]	; (401d44 <UDP_Handler+0x424>)
		udd_ack_reset();
  401af4:	6213      	str	r3, [r2, #32]
	if (ptr_job->busy == false) {
  401af6:	7c7b      	ldrb	r3, [r7, #17]
  401af8:	06dc      	lsls	r4, r3, #27
  401afa:	f100 81cc 	bmi.w	401e96 <UDP_Handler+0x576>
  401afe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
  401b02:	06d8      	lsls	r0, r3, #27
  401b04:	f100 821a 	bmi.w	401f3c <UDP_Handler+0x61c>
  401b08:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
  401b0c:	06d9      	lsls	r1, r3, #27
  401b0e:	f100 81af 	bmi.w	401e70 <UDP_Handler+0x550>
		udc_reset();
  401b12:	4b8d      	ldr	r3, [pc, #564]	; (401d48 <UDP_Handler+0x428>)
  401b14:	4798      	blx	r3
		udd_disable_address_state();
  401b16:	4b8a      	ldr	r3, [pc, #552]	; (401d40 <UDP_Handler+0x420>)
  401b18:	685a      	ldr	r2, [r3, #4]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  401b1a:	4619      	mov	r1, r3
		udd_disable_address_state();
  401b1c:	f022 0201 	bic.w	r2, r2, #1
  401b20:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  401b22:	685a      	ldr	r2, [r3, #4]
  401b24:	f022 0202 	bic.w	r2, r2, #2
  401b28:	605a      	str	r2, [r3, #4]
	udd_enable_address();
  401b2a:	689a      	ldr	r2, [r3, #8]
  401b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  401b30:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  401b32:	689a      	ldr	r2, [r3, #8]
  401b34:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  401b38:	609a      	str	r2, [r3, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  401b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401b3c:	9224      	str	r2, [sp, #144]	; 0x90
  401b3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  401b40:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401b44:	9224      	str	r2, [sp, #144]	; 0x90
  401b46:	9a24      	ldr	r2, [sp, #144]	; 0x90
  401b48:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  401b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  401b50:	9224      	str	r2, [sp, #144]	; 0x90
  401b52:	9a24      	ldr	r2, [sp, #144]	; 0x90
  401b54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  401b58:	9224      	str	r2, [sp, #144]	; 0x90
  401b5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  401b5c:	631a      	str	r2, [r3, #48]	; 0x30
  401b5e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401b60:	041a      	lsls	r2, r3, #16
  401b62:	d5fc      	bpl.n	401b5e <UDP_Handler+0x23e>
	udd_enable_endpoint(0);
  401b64:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401b66:	4a76      	ldr	r2, [pc, #472]	; (401d40 <UDP_Handler+0x420>)
  401b68:	9325      	str	r3, [sp, #148]	; 0x94
  401b6a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  401b6c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b70:	9325      	str	r3, [sp, #148]	; 0x94
  401b72:	9b25      	ldr	r3, [sp, #148]	; 0x94
  401b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401b78:	9325      	str	r3, [sp, #148]	; 0x94
  401b7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  401b7c:	630b      	str	r3, [r1, #48]	; 0x30
  401b7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b80:	041b      	lsls	r3, r3, #16
  401b82:	d5fc      	bpl.n	401b7e <UDP_Handler+0x25e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401b84:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401b88:	fab3 f383 	clz	r3, r3
  401b8c:	095b      	lsrs	r3, r3, #5
  401b8e:	9323      	str	r3, [sp, #140]	; 0x8c
  __ASM volatile ("cpsid i" : : : "memory");
  401b90:	b672      	cpsid	i
  401b92:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401b96:	2000      	movs	r0, #0
	udd_enable_endpoint_interrupt(0);
  401b98:	2101      	movs	r1, #1
  401b9a:	4b6c      	ldr	r3, [pc, #432]	; (401d4c <UDP_Handler+0x42c>)
  401b9c:	7018      	strb	r0, [r3, #0]
	return flags;
  401b9e:	9823      	ldr	r0, [sp, #140]	; 0x8c
  401ba0:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401ba2:	b118      	cbz	r0, 401bac <UDP_Handler+0x28c>
		cpu_irq_enable();
  401ba4:	7019      	strb	r1, [r3, #0]
  401ba6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401baa:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
  401bac:	2300      	movs	r3, #0
		udd_enable_suspend_interrupt();
  401bae:	f44f 7480 	mov.w	r4, #256	; 0x100
		udd_enable_sof_interrupt();
  401bb2:	f44f 6000 	mov.w	r0, #2048	; 0x800
	udd_g_ctrlreq.callback = NULL;
  401bb6:	4a66      	ldr	r2, [pc, #408]	; (401d50 <UDP_Handler+0x430>)
		udd_enable_suspend_interrupt();
  401bb8:	4961      	ldr	r1, [pc, #388]	; (401d40 <UDP_Handler+0x420>)
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  401bba:	4d66      	ldr	r5, [pc, #408]	; (401d54 <UDP_Handler+0x434>)
	udd_g_ctrlreq.callback = NULL;
  401bbc:	6113      	str	r3, [r2, #16]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  401bbe:	702b      	strb	r3, [r5, #0]
		udd_enable_suspend_interrupt();
  401bc0:	610c      	str	r4, [r1, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401bc2:	6153      	str	r3, [r2, #20]
		udd_enable_sof_interrupt();
  401bc4:	6108      	str	r0, [r1, #16]
	udd_g_ctrlreq.payload_size = 0;
  401bc6:	8193      	strh	r3, [r2, #12]
		goto udd_interrupt_end;
  401bc8:	e6eb      	b.n	4019a2 <UDP_Handler+0x82>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  401bca:	4e62      	ldr	r6, [pc, #392]	; (401d54 <UDP_Handler+0x434>)
  401bcc:	7833      	ldrb	r3, [r6, #0]
  401bce:	b143      	cbz	r3, 401be2 <UDP_Handler+0x2c2>
	if (udd_g_ctrlreq.callback) {
  401bd0:	4c5f      	ldr	r4, [pc, #380]	; (401d50 <UDP_Handler+0x430>)
  401bd2:	6923      	ldr	r3, [r4, #16]
  401bd4:	b103      	cbz	r3, 401bd8 <UDP_Handler+0x2b8>
		udd_g_ctrlreq.callback();
  401bd6:	4798      	blx	r3
	udd_g_ctrlreq.callback = NULL;
  401bd8:	2300      	movs	r3, #0
  401bda:	6123      	str	r3, [r4, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401bdc:	6163      	str	r3, [r4, #20]
	udd_g_ctrlreq.payload_size = 0;
  401bde:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  401be0:	7033      	strb	r3, [r6, #0]
	if (8 != udd_byte_count(0)) {
  401be2:	4d57      	ldr	r5, [pc, #348]	; (401d40 <UDP_Handler+0x420>)
  401be4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401be6:	f3c3 430a 	ubfx	r3, r3, #16, #11
  401bea:	2b08      	cmp	r3, #8
  401bec:	f000 80dc 	beq.w	401da8 <UDP_Handler+0x488>
		udd_ack_setup_received(0);
  401bf0:	4629      	mov	r1, r5
  401bf2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401bf4:	9304      	str	r3, [sp, #16]
  401bf6:	9b04      	ldr	r3, [sp, #16]
  401bf8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401bfc:	9304      	str	r3, [sp, #16]
  401bfe:	9b04      	ldr	r3, [sp, #16]
  401c00:	f023 0304 	bic.w	r3, r3, #4
  401c04:	9304      	str	r3, [sp, #16]
  401c06:	9b04      	ldr	r3, [sp, #16]
  401c08:	632b      	str	r3, [r5, #48]	; 0x30
  401c0a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c0c:	075c      	lsls	r4, r3, #29
  401c0e:	d4fc      	bmi.n	401c0a <UDP_Handler+0x2ea>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  401c10:	2305      	movs	r3, #5
  401c12:	7033      	strb	r3, [r6, #0]
	udd_enable_stall_handshake(0);
  401c14:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c16:	4a4a      	ldr	r2, [pc, #296]	; (401d40 <UDP_Handler+0x420>)
  401c18:	9303      	str	r3, [sp, #12]
  401c1a:	9b03      	ldr	r3, [sp, #12]
  401c1c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c20:	9303      	str	r3, [sp, #12]
  401c22:	9b03      	ldr	r3, [sp, #12]
  401c24:	f043 0320 	orr.w	r3, r3, #32
  401c28:	9303      	str	r3, [sp, #12]
  401c2a:	9b03      	ldr	r3, [sp, #12]
  401c2c:	630b      	str	r3, [r1, #48]	; 0x30
  401c2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c30:	0698      	lsls	r0, r3, #26
  401c32:	d5fc      	bpl.n	401c2e <UDP_Handler+0x30e>
  401c34:	e6b5      	b.n	4019a2 <UDP_Handler+0x82>
		udd_ctrl_in_sent();
  401c36:	4b48      	ldr	r3, [pc, #288]	; (401d58 <UDP_Handler+0x438>)
  401c38:	4798      	blx	r3
  401c3a:	e6b2      	b.n	4019a2 <UDP_Handler+0x82>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  401c3c:	4e45      	ldr	r6, [pc, #276]	; (401d54 <UDP_Handler+0x434>)
  401c3e:	7832      	ldrb	r2, [r6, #0]
  401c40:	2a01      	cmp	r2, #1
  401c42:	d02d      	beq.n	401ca0 <UDP_Handler+0x380>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401c44:	2a02      	cmp	r2, #2
  401c46:	f000 80a8 	beq.w	401d9a <UDP_Handler+0x47a>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  401c4a:	2a04      	cmp	r2, #4
  401c4c:	f000 80a5 	beq.w	401d9a <UDP_Handler+0x47a>
	udd_enable_stall_handshake(0);
  401c50:	4619      	mov	r1, r3
  401c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401c54:	920d      	str	r2, [sp, #52]	; 0x34
  401c56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401c58:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401c5c:	920d      	str	r2, [sp, #52]	; 0x34
  401c5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401c60:	f042 0220 	orr.w	r2, r2, #32
  401c64:	920d      	str	r2, [sp, #52]	; 0x34
  401c66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401c68:	631a      	str	r2, [r3, #48]	; 0x30
  401c6a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c6c:	0698      	lsls	r0, r3, #26
  401c6e:	d5fc      	bpl.n	401c6a <UDP_Handler+0x34a>
  401c70:	4c37      	ldr	r4, [pc, #220]	; (401d50 <UDP_Handler+0x430>)
		udd_ack_bank0_received(0);
  401c72:	4b33      	ldr	r3, [pc, #204]	; (401d40 <UDP_Handler+0x420>)
  401c74:	461a      	mov	r2, r3
  401c76:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401c78:	910e      	str	r1, [sp, #56]	; 0x38
  401c7a:	990e      	ldr	r1, [sp, #56]	; 0x38
  401c7c:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401c80:	910e      	str	r1, [sp, #56]	; 0x38
  401c82:	990e      	ldr	r1, [sp, #56]	; 0x38
  401c84:	f021 0102 	bic.w	r1, r1, #2
  401c88:	910e      	str	r1, [sp, #56]	; 0x38
  401c8a:	990e      	ldr	r1, [sp, #56]	; 0x38
  401c8c:	6319      	str	r1, [r3, #48]	; 0x30
  401c8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c90:	f013 0302 	ands.w	r3, r3, #2
  401c94:	d1fb      	bne.n	401c8e <UDP_Handler+0x36e>
	udd_g_ctrlreq.callback = NULL;
  401c96:	6123      	str	r3, [r4, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401c98:	6163      	str	r3, [r4, #20]
	udd_g_ctrlreq.payload_size = 0;
  401c9a:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  401c9c:	7033      	strb	r3, [r6, #0]
  401c9e:	e680      	b.n	4019a2 <UDP_Handler+0x82>
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  401ca0:	4f2e      	ldr	r7, [pc, #184]	; (401d5c <UDP_Handler+0x43c>)
	nb_data = udd_byte_count(0);
  401ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  401ca4:	4c2a      	ldr	r4, [pc, #168]	; (401d50 <UDP_Handler+0x430>)
  401ca6:	883b      	ldrh	r3, [r7, #0]
	nb_data = udd_byte_count(0);
  401ca8:	f3c2 420a 	ubfx	r2, r2, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  401cac:	89a1      	ldrh	r1, [r4, #12]
  401cae:	1898      	adds	r0, r3, r2
  401cb0:	4281      	cmp	r1, r0
		nb_data = udd_g_ctrlreq.payload_size -
  401cb2:	bfb8      	it	lt
  401cb4:	1aca      	sublt	r2, r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401cb6:	68a1      	ldr	r1, [r4, #8]
		nb_data = udd_g_ctrlreq.payload_size -
  401cb8:	bfb8      	it	lt
  401cba:	b292      	uxthlt	r2, r2
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401cbc:	4419      	add	r1, r3
	for (i = 0; i < nb_data; i++) {
  401cbe:	b18a      	cbz	r2, 401ce4 <UDP_Handler+0x3c4>
  401cc0:	4608      	mov	r0, r1
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  401cc2:	4d1f      	ldr	r5, [pc, #124]	; (401d40 <UDP_Handler+0x420>)
  401cc4:	f8d5 e050 	ldr.w	lr, [r5, #80]	; 0x50
  401cc8:	f800 eb01 	strb.w	lr, [r0], #1
	for (i = 0; i < nb_data; i++) {
  401ccc:	eba0 0e01 	sub.w	lr, r0, r1
  401cd0:	fa5f fe8e 	uxtb.w	lr, lr
  401cd4:	4596      	cmp	lr, r2
  401cd6:	d3f5      	bcc.n	401cc4 <UDP_Handler+0x3a4>
	udd_ctrl_payload_nb_trans += nb_data;
  401cd8:	4413      	add	r3, r2
  401cda:	b29b      	uxth	r3, r3
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401cdc:	2a40      	cmp	r2, #64	; 0x40
	udd_ctrl_payload_nb_trans += nb_data;
  401cde:	803b      	strh	r3, [r7, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401ce0:	f000 837a 	beq.w	4023d8 <UDP_Handler+0xab8>
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401ce4:	6962      	ldr	r2, [r4, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401ce6:	81a3      	strh	r3, [r4, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401ce8:	2a00      	cmp	r2, #0
  401cea:	f000 8103 	beq.w	401ef4 <UDP_Handler+0x5d4>
			if (!udd_g_ctrlreq.over_under_run()) {
  401cee:	4790      	blx	r2
  401cf0:	2800      	cmp	r0, #0
  401cf2:	f040 80ff 	bne.w	401ef4 <UDP_Handler+0x5d4>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  401cf6:	2205      	movs	r2, #5
	udd_enable_stall_handshake(0);
  401cf8:	4b11      	ldr	r3, [pc, #68]	; (401d40 <UDP_Handler+0x420>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  401cfa:	7032      	strb	r2, [r6, #0]
	udd_enable_stall_handshake(0);
  401cfc:	4619      	mov	r1, r3
  401cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401d00:	920c      	str	r2, [sp, #48]	; 0x30
  401d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  401d04:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401d08:	920c      	str	r2, [sp, #48]	; 0x30
  401d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  401d0c:	f042 0220 	orr.w	r2, r2, #32
  401d10:	920c      	str	r2, [sp, #48]	; 0x30
  401d12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  401d14:	631a      	str	r2, [r3, #48]	; 0x30
  401d16:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401d18:	069a      	lsls	r2, r3, #26
  401d1a:	d5fc      	bpl.n	401d16 <UDP_Handler+0x3f6>
				udd_ack_bank0_received(0);
  401d1c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401d1e:	4a08      	ldr	r2, [pc, #32]	; (401d40 <UDP_Handler+0x420>)
  401d20:	930f      	str	r3, [sp, #60]	; 0x3c
  401d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401d24:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401d28:	930f      	str	r3, [sp, #60]	; 0x3c
  401d2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401d2c:	f023 0302 	bic.w	r3, r3, #2
  401d30:	930f      	str	r3, [sp, #60]	; 0x3c
  401d32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401d34:	630b      	str	r3, [r1, #48]	; 0x30
  401d36:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401d38:	079b      	lsls	r3, r3, #30
  401d3a:	d4fc      	bmi.n	401d36 <UDP_Handler+0x416>
  401d3c:	e631      	b.n	4019a2 <UDP_Handler+0x82>
  401d3e:	bf00      	nop
  401d40:	40034000 	.word	0x40034000
  401d44:	20001238 	.word	0x20001238
  401d48:	00400c51 	.word	0x00400c51
  401d4c:	20000290 	.word	0x20000290
  401d50:	200012c4 	.word	0x200012c4
  401d54:	20001236 	.word	0x20001236
  401d58:	0040175d 	.word	0x0040175d
  401d5c:	20001232 	.word	0x20001232
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  401d60:	4a83      	ldr	r2, [pc, #524]	; (401f70 <UDP_Handler+0x650>)
  401d62:	7893      	ldrb	r3, [r2, #2]
  401d64:	2bff      	cmp	r3, #255	; 0xff
  401d66:	d017      	beq.n	401d98 <UDP_Handler+0x478>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401d68:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401d6c:	fab3 f383 	clz	r3, r3
  401d70:	095b      	lsrs	r3, r3, #5
  401d72:	9321      	str	r3, [sp, #132]	; 0x84
  __ASM volatile ("cpsid i" : : : "memory");
  401d74:	b672      	cpsid	i
  401d76:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401d7a:	497e      	ldr	r1, [pc, #504]	; (401f74 <UDP_Handler+0x654>)
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  401d7c:	7893      	ldrb	r3, [r2, #2]
  401d7e:	7008      	strb	r0, [r1, #0]
	return flags;
  401d80:	9821      	ldr	r0, [sp, #132]	; 0x84
  401d82:	3301      	adds	r3, #1
  401d84:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  401d86:	2800      	cmp	r0, #0
  401d88:	f43f ae5b 	beq.w	401a42 <UDP_Handler+0x122>
		cpu_irq_enable();
  401d8c:	2301      	movs	r3, #1
  401d8e:	700b      	strb	r3, [r1, #0]
  401d90:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401d94:	b662      	cpsie	i
  401d96:	e654      	b.n	401a42 <UDP_Handler+0x122>
  401d98:	e7fe      	b.n	401d98 <UDP_Handler+0x478>
	if (udd_g_ctrlreq.callback) {
  401d9a:	4c77      	ldr	r4, [pc, #476]	; (401f78 <UDP_Handler+0x658>)
  401d9c:	6923      	ldr	r3, [r4, #16]
  401d9e:	2b00      	cmp	r3, #0
  401da0:	f43f af67 	beq.w	401c72 <UDP_Handler+0x352>
		udd_g_ctrlreq.callback();
  401da4:	4798      	blx	r3
  401da6:	e764      	b.n	401c72 <UDP_Handler+0x352>
			udd_endpoint_fifo_read(0);
  401da8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401daa:	4c73      	ldr	r4, [pc, #460]	; (401f78 <UDP_Handler+0x658>)
	if (udc_process_setup() == false) {
  401dac:	4b73      	ldr	r3, [pc, #460]	; (401f7c <UDP_Handler+0x65c>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401dae:	7022      	strb	r2, [r4, #0]
			udd_endpoint_fifo_read(0);
  401db0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401db2:	7062      	strb	r2, [r4, #1]
			udd_endpoint_fifo_read(0);
  401db4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401db6:	70a2      	strb	r2, [r4, #2]
			udd_endpoint_fifo_read(0);
  401db8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401dba:	70e2      	strb	r2, [r4, #3]
			udd_endpoint_fifo_read(0);
  401dbc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401dbe:	7122      	strb	r2, [r4, #4]
			udd_endpoint_fifo_read(0);
  401dc0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401dc2:	7162      	strb	r2, [r4, #5]
			udd_endpoint_fifo_read(0);
  401dc4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401dc6:	71a2      	strb	r2, [r4, #6]
			udd_endpoint_fifo_read(0);
  401dc8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401dca:	71e2      	strb	r2, [r4, #7]
	if (udc_process_setup() == false) {
  401dcc:	4798      	blx	r3
  401dce:	bb10      	cbnz	r0, 401e16 <UDP_Handler+0x4f6>
		udd_ack_setup_received(0);
  401dd0:	462a      	mov	r2, r5
  401dd2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401dd4:	9305      	str	r3, [sp, #20]
  401dd6:	9b05      	ldr	r3, [sp, #20]
  401dd8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ddc:	9305      	str	r3, [sp, #20]
  401dde:	9b05      	ldr	r3, [sp, #20]
  401de0:	f023 0304 	bic.w	r3, r3, #4
  401de4:	9305      	str	r3, [sp, #20]
  401de6:	9b05      	ldr	r3, [sp, #20]
  401de8:	632b      	str	r3, [r5, #48]	; 0x30
  401dea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401dec:	0759      	lsls	r1, r3, #29
  401dee:	d4fc      	bmi.n	401dea <UDP_Handler+0x4ca>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  401df0:	2305      	movs	r3, #5
  401df2:	7033      	strb	r3, [r6, #0]
	udd_enable_stall_handshake(0);
  401df4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401df6:	4962      	ldr	r1, [pc, #392]	; (401f80 <UDP_Handler+0x660>)
  401df8:	9302      	str	r3, [sp, #8]
  401dfa:	9b02      	ldr	r3, [sp, #8]
  401dfc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e00:	9302      	str	r3, [sp, #8]
  401e02:	9b02      	ldr	r3, [sp, #8]
  401e04:	f043 0320 	orr.w	r3, r3, #32
  401e08:	9302      	str	r3, [sp, #8]
  401e0a:	9b02      	ldr	r3, [sp, #8]
  401e0c:	6313      	str	r3, [r2, #48]	; 0x30
  401e0e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401e10:	069b      	lsls	r3, r3, #26
  401e12:	d5fc      	bpl.n	401e0e <UDP_Handler+0x4ee>
  401e14:	e5c5      	b.n	4019a2 <UDP_Handler+0x82>
	if (Udd_setup_is_in()) {
  401e16:	f994 3000 	ldrsb.w	r3, [r4]
		udd_set_endpoint_direction_in(0);
  401e1a:	462a      	mov	r2, r5
	if (Udd_setup_is_in()) {
  401e1c:	2b00      	cmp	r3, #0
		udd_set_endpoint_direction_in(0);
  401e1e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	if (Udd_setup_is_in()) {
  401e20:	f2c0 82b1 	blt.w	402386 <UDP_Handler+0xa66>
		udd_ack_setup_received(0);
  401e24:	9308      	str	r3, [sp, #32]
  401e26:	9b08      	ldr	r3, [sp, #32]
  401e28:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e2c:	9308      	str	r3, [sp, #32]
  401e2e:	9b08      	ldr	r3, [sp, #32]
  401e30:	f023 0304 	bic.w	r3, r3, #4
  401e34:	9308      	str	r3, [sp, #32]
  401e36:	9b08      	ldr	r3, [sp, #32]
  401e38:	632b      	str	r3, [r5, #48]	; 0x30
  401e3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e3c:	f013 0304 	ands.w	r3, r3, #4
  401e40:	d1fb      	bne.n	401e3a <UDP_Handler+0x51a>
		if (0 == udd_g_ctrlreq.req.wLength) {
  401e42:	88e1      	ldrh	r1, [r4, #6]
  401e44:	2900      	cmp	r1, #0
  401e46:	f040 808c 	bne.w	401f62 <UDP_Handler+0x642>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  401e4a:	2303      	movs	r3, #3
  401e4c:	7033      	strb	r3, [r6, #0]
	udd_set_transmit_ready(0);
  401e4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e50:	494b      	ldr	r1, [pc, #300]	; (401f80 <UDP_Handler+0x660>)
  401e52:	9301      	str	r3, [sp, #4]
  401e54:	9b01      	ldr	r3, [sp, #4]
  401e56:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e5a:	9301      	str	r3, [sp, #4]
  401e5c:	9b01      	ldr	r3, [sp, #4]
  401e5e:	f043 0310 	orr.w	r3, r3, #16
  401e62:	9301      	str	r3, [sp, #4]
  401e64:	9b01      	ldr	r3, [sp, #4]
  401e66:	6313      	str	r3, [r2, #48]	; 0x30
  401e68:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401e6a:	06de      	lsls	r6, r3, #27
  401e6c:	d5fc      	bpl.n	401e68 <UDP_Handler+0x548>
  401e6e:	e598      	b.n	4019a2 <UDP_Handler+0x82>
	if (NULL == ptr_job->call_trans) {
  401e70:	6abc      	ldr	r4, [r7, #40]	; 0x28
	ptr_job->busy = false;
  401e72:	f36f 1304 	bfc	r3, #4, #1
  401e76:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (NULL == ptr_job->call_trans) {
  401e7a:	2c00      	cmp	r4, #0
  401e7c:	f43f ae49 	beq.w	401b12 <UDP_Handler+0x1f2>
	if (Is_udd_endpoint_type_in(ep_num)) {
  401e80:	4b3f      	ldr	r3, [pc, #252]	; (401f80 <UDP_Handler+0x660>)
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
	if (Is_udd_endpoint_type_in(ep_num)) {
  401e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401e86:	2001      	movs	r0, #1
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  401e88:	f413 6f80 	tst.w	r3, #1024	; 0x400
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401e8c:	bf14      	ite	ne
  401e8e:	2283      	movne	r2, #131	; 0x83
  401e90:	2203      	moveq	r2, #3
  401e92:	47a0      	blx	r4
  401e94:	e63d      	b.n	401b12 <UDP_Handler+0x1f2>
	if (NULL == ptr_job->call_trans) {
  401e96:	683c      	ldr	r4, [r7, #0]
	ptr_job->busy = false;
  401e98:	f36f 1304 	bfc	r3, #4, #1
  401e9c:	747b      	strb	r3, [r7, #17]
	if (NULL == ptr_job->call_trans) {
  401e9e:	2c00      	cmp	r4, #0
  401ea0:	f43f ae2d 	beq.w	401afe <UDP_Handler+0x1de>
	if (Is_udd_endpoint_type_in(ep_num)) {
  401ea4:	6b53      	ldr	r3, [r2, #52]	; 0x34
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401ea6:	68b9      	ldr	r1, [r7, #8]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  401ea8:	f413 6f80 	tst.w	r3, #1024	; 0x400
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401eac:	bf14      	ite	ne
  401eae:	2281      	movne	r2, #129	; 0x81
  401eb0:	2201      	moveq	r2, #1
  401eb2:	2001      	movs	r0, #1
  401eb4:	47a0      	blx	r4
  401eb6:	e622      	b.n	401afe <UDP_Handler+0x1de>
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401eb8:	2302      	movs	r3, #2
  401eba:	009b      	lsls	r3, r3, #2
  401ebc:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401ec0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
			udd_ack_stall(ep);
  401ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ec6:	921e      	str	r2, [sp, #120]	; 0x78
  401ec8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  401eca:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401ece:	921e      	str	r2, [sp, #120]	; 0x78
  401ed0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  401ed2:	f022 0208 	bic.w	r2, r2, #8
  401ed6:	921e      	str	r2, [sp, #120]	; 0x78
  401ed8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  401eda:	631a      	str	r2, [r3, #48]	; 0x30
  401edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ede:	0716      	lsls	r6, r2, #28
  401ee0:	d4fc      	bmi.n	401edc <UDP_Handler+0x5bc>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  401ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ee4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  401ee8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  401eec:	f43f ad59 	beq.w	4019a2 <UDP_Handler+0x82>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  401ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ef2:	e556      	b.n	4019a2 <UDP_Handler+0x82>
		udd_ack_bank0_received(0);
  401ef4:	4b22      	ldr	r3, [pc, #136]	; (401f80 <UDP_Handler+0x660>)
  401ef6:	4619      	mov	r1, r3
  401ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401efa:	9210      	str	r2, [sp, #64]	; 0x40
  401efc:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401efe:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401f02:	9210      	str	r2, [sp, #64]	; 0x40
  401f04:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401f06:	f022 0202 	bic.w	r2, r2, #2
  401f0a:	9210      	str	r2, [sp, #64]	; 0x40
  401f0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401f0e:	631a      	str	r2, [r3, #48]	; 0x30
  401f10:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401f12:	079f      	lsls	r7, r3, #30
  401f14:	d4fc      	bmi.n	401f10 <UDP_Handler+0x5f0>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  401f16:	2303      	movs	r3, #3
  401f18:	7033      	strb	r3, [r6, #0]
	udd_set_transmit_ready(0);
  401f1a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401f1c:	4a18      	ldr	r2, [pc, #96]	; (401f80 <UDP_Handler+0x660>)
  401f1e:	930b      	str	r3, [sp, #44]	; 0x2c
  401f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401f22:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401f26:	930b      	str	r3, [sp, #44]	; 0x2c
  401f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401f2a:	f043 0310 	orr.w	r3, r3, #16
  401f2e:	930b      	str	r3, [sp, #44]	; 0x2c
  401f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401f32:	630b      	str	r3, [r1, #48]	; 0x30
  401f34:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f36:	06dd      	lsls	r5, r3, #27
  401f38:	d5fc      	bpl.n	401f34 <UDP_Handler+0x614>
  401f3a:	e532      	b.n	4019a2 <UDP_Handler+0x82>
	if (NULL == ptr_job->call_trans) {
  401f3c:	697c      	ldr	r4, [r7, #20]
	ptr_job->busy = false;
  401f3e:	f36f 1304 	bfc	r3, #4, #1
  401f42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if (NULL == ptr_job->call_trans) {
  401f46:	2c00      	cmp	r4, #0
  401f48:	f43f adde 	beq.w	401b08 <UDP_Handler+0x1e8>
	if (Is_udd_endpoint_type_in(ep_num)) {
  401f4c:	4b0c      	ldr	r3, [pc, #48]	; (401f80 <UDP_Handler+0x660>)
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401f4e:	69f9      	ldr	r1, [r7, #28]
	if (Is_udd_endpoint_type_in(ep_num)) {
  401f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401f52:	2001      	movs	r0, #1
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  401f54:	f413 6f80 	tst.w	r3, #1024	; 0x400
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401f58:	bf14      	ite	ne
  401f5a:	2282      	movne	r2, #130	; 0x82
  401f5c:	2202      	moveq	r2, #2
  401f5e:	47a0      	blx	r4
  401f60:	e5d2      	b.n	401b08 <UDP_Handler+0x1e8>
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401f62:	2001      	movs	r0, #1
		udd_ctrl_prev_payload_nb_trans = 0;
  401f64:	4907      	ldr	r1, [pc, #28]	; (401f84 <UDP_Handler+0x664>)
		udd_ctrl_payload_nb_trans = 0;
  401f66:	4a08      	ldr	r2, [pc, #32]	; (401f88 <UDP_Handler+0x668>)
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401f68:	7030      	strb	r0, [r6, #0]
		udd_ctrl_prev_payload_nb_trans = 0;
  401f6a:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  401f6c:	8013      	strh	r3, [r2, #0]
  401f6e:	e518      	b.n	4019a2 <UDP_Handler+0x82>
  401f70:	200012bc 	.word	0x200012bc
  401f74:	20000290 	.word	0x20000290
  401f78:	200012c4 	.word	0x200012c4
  401f7c:	00400d21 	.word	0x00400d21
  401f80:	40034000 	.word	0x40034000
  401f84:	20001234 	.word	0x20001234
  401f88:	20001232 	.word	0x20001232
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  401f8c:	f04f 0803 	mov.w	r8, #3
		ptr_job = &udd_ep_job[ep - 1];
  401f90:	2502      	movs	r5, #2
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401f92:	4644      	mov	r4, r8
  401f94:	f04f 0908 	mov.w	r9, #8
		ptr_job = &udd_ep_job[ep - 1];
  401f98:	4e8c      	ldr	r6, [pc, #560]	; (4021cc <UDP_Handler+0x8ac>)
  401f9a:	f1a6 0728 	sub.w	r7, r6, #40	; 0x28
			ptr_job->bank--;
  401f9e:	ea4f 0a85 	mov.w	sl, r5, lsl #2
  401fa2:	eb0a 0305 	add.w	r3, sl, r5
  401fa6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  401faa:	f103 0010 	add.w	r0, r3, #16
  401fae:	7842      	ldrb	r2, [r0, #1]
  401fb0:	4611      	mov	r1, r2
  401fb2:	f3c2 0281 	ubfx	r2, r2, #2, #2
  401fb6:	3203      	adds	r2, #3
  401fb8:	f362 0183 	bfi	r1, r2, #2, #2
			if (ptr_job->b_stall_requested) {
  401fbc:	b2ca      	uxtb	r2, r1
			ptr_job->bank--;
  401fbe:	7041      	strb	r1, [r0, #1]
			if (ptr_job->b_stall_requested) {
  401fc0:	f012 0120 	ands.w	r1, r2, #32
  401fc4:	d04c      	beq.n	402060 <UDP_Handler+0x740>
  401fc6:	00a3      	lsls	r3, r4, #2
  401fc8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401fcc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				if (ptr_job->bank) {
  401fd0:	f012 0f0c 	tst.w	r2, #12
					udd_set_transmit_ready(ep);
  401fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
				if (ptr_job->bank) {
  401fd6:	d01d      	beq.n	402014 <UDP_Handler+0x6f4>
					udd_set_transmit_ready(ep);
  401fd8:	9214      	str	r2, [sp, #80]	; 0x50
  401fda:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401fdc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401fe0:	9214      	str	r2, [sp, #80]	; 0x50
  401fe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401fe4:	f042 0210 	orr.w	r2, r2, #16
  401fe8:	9214      	str	r2, [sp, #80]	; 0x50
  401fea:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401fec:	631a      	str	r2, [r3, #48]	; 0x30
  401fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ff0:	06d5      	lsls	r5, r2, #27
  401ff2:	d5fc      	bpl.n	401fee <UDP_Handler+0x6ce>
					udd_ack_in_sent(ep);
  401ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ff6:	9215      	str	r2, [sp, #84]	; 0x54
  401ff8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  401ffa:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401ffe:	9215      	str	r2, [sp, #84]	; 0x54
  402000:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402002:	f022 0201 	bic.w	r2, r2, #1
  402006:	9215      	str	r2, [sp, #84]	; 0x54
  402008:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40200a:	631a      	str	r2, [r3, #48]	; 0x30
  40200c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40200e:	07d4      	lsls	r4, r2, #31
  402010:	d4fc      	bmi.n	40200c <UDP_Handler+0x6ec>
  402012:	e4c6      	b.n	4019a2 <UDP_Handler+0x82>
					udd_ack_in_sent(ep);
  402014:	9216      	str	r2, [sp, #88]	; 0x58
  402016:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402018:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40201c:	9216      	str	r2, [sp, #88]	; 0x58
  40201e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402020:	f022 0201 	bic.w	r2, r2, #1
  402024:	9216      	str	r2, [sp, #88]	; 0x58
  402026:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402028:	631a      	str	r2, [r3, #48]	; 0x30
  40202a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40202c:	07d0      	lsls	r0, r2, #31
  40202e:	d4fc      	bmi.n	40202a <UDP_Handler+0x70a>
					udd_enable_stall_handshake(ep);
  402030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402032:	9217      	str	r2, [sp, #92]	; 0x5c
  402034:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  402036:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40203a:	9217      	str	r2, [sp, #92]	; 0x5c
  40203c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40203e:	f042 0220 	orr.w	r2, r2, #32
  402042:	9217      	str	r2, [sp, #92]	; 0x5c
  402044:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  402046:	631a      	str	r2, [r3, #48]	; 0x30
  402048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40204a:	0691      	lsls	r1, r2, #26
  40204c:	d5fc      	bpl.n	402048 <UDP_Handler+0x728>
					ptr_job->b_stall_requested = false;
  40204e:	eb0a 0305 	add.w	r3, sl, r5
  402052:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402056:	7c5a      	ldrb	r2, [r3, #17]
  402058:	f36f 1245 	bfc	r2, #5, #1
  40205c:	745a      	strb	r2, [r3, #17]
  40205e:	e4a0      	b.n	4019a2 <UDP_Handler+0x82>
			if (ptr_job->b_buf_end) {
  402060:	0612      	lsls	r2, r2, #24
  402062:	d46a      	bmi.n	40213a <UDP_Handler+0x81a>
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  402064:	eb0a 0305 	add.w	r3, sl, r5
  402068:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40206c:	68d9      	ldr	r1, [r3, #12]
  40206e:	689a      	ldr	r2, [r3, #8]
  402070:	4291      	cmp	r1, r2
  402072:	d32a      	bcc.n	4020ca <UDP_Handler+0x7aa>
					!ptr_job->b_shortpacket &&
  402074:	7c5b      	ldrb	r3, [r3, #17]
  402076:	f013 024c 	ands.w	r2, r3, #76	; 0x4c
  40207a:	d126      	bne.n	4020ca <UDP_Handler+0x7aa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40207c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402080:	fab3 f383 	clz	r3, r3
  402084:	095b      	lsrs	r3, r3, #5
  402086:	9318      	str	r3, [sp, #96]	; 0x60
  __ASM volatile ("cpsid i" : : : "memory");
  402088:	b672      	cpsid	i
  40208a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40208e:	4b50      	ldr	r3, [pc, #320]	; (4021d0 <UDP_Handler+0x8b0>)
				udd_disable_endpoint_interrupt(ep);
  402090:	4950      	ldr	r1, [pc, #320]	; (4021d4 <UDP_Handler+0x8b4>)
  402092:	701a      	strb	r2, [r3, #0]
	return flags;
  402094:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402096:	f8c1 9014 	str.w	r9, [r1, #20]
	if (cpu_irq_is_enabled_flags(flags))
  40209a:	b10b      	cbz	r3, 4020a0 <UDP_Handler+0x780>
  40209c:	4b4e      	ldr	r3, [pc, #312]	; (4021d8 <UDP_Handler+0x8b8>)
  40209e:	4798      	blx	r3
  4020a0:	00a3      	lsls	r3, r4, #2
  4020a2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4020a6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				udd_ack_in_sent(ep);
  4020aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4020ac:	9219      	str	r2, [sp, #100]	; 0x64
  4020ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4020b0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4020b4:	9219      	str	r2, [sp, #100]	; 0x64
  4020b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4020b8:	f022 0201 	bic.w	r2, r2, #1
  4020bc:	9219      	str	r2, [sp, #100]	; 0x64
  4020be:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4020c0:	631a      	str	r2, [r3, #48]	; 0x30
  4020c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4020c4:	07d0      	lsls	r0, r2, #31
  4020c6:	d4fc      	bmi.n	4020c2 <UDP_Handler+0x7a2>
  4020c8:	e46b      	b.n	4019a2 <UDP_Handler+0x82>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  4020ca:	f1b8 0f03 	cmp.w	r8, #3
  4020ce:	f000 8143 	beq.w	402358 <UDP_Handler+0xa38>
					&& ptr_job->bank > 0) {
  4020d2:	eb0a 0305 	add.w	r3, sl, r5
  4020d6:	eb07 0783 	add.w	r7, r7, r3, lsl #2
  4020da:	f107 0a10 	add.w	sl, r7, #16
  4020de:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4020e2:	f013 0f0c 	tst.w	r3, #12
  4020e6:	f000 8106 	beq.w	4022f6 <UDP_Handler+0x9d6>
  4020ea:	00a3      	lsls	r3, r4, #2
  4020ec:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4020f0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				udd_set_transmit_ready(ep);
  4020f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4020f6:	921a      	str	r2, [sp, #104]	; 0x68
  4020f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4020fa:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4020fe:	921a      	str	r2, [sp, #104]	; 0x68
  402100:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  402102:	f042 0210 	orr.w	r2, r2, #16
  402106:	921a      	str	r2, [sp, #104]	; 0x68
  402108:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40210a:	631a      	str	r2, [r3, #48]	; 0x30
  40210c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40210e:	06d1      	lsls	r1, r2, #27
  402110:	d5fc      	bpl.n	40210c <UDP_Handler+0x7ec>
				udd_ack_in_sent(ep);
  402112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402114:	921b      	str	r2, [sp, #108]	; 0x6c
  402116:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  402118:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40211c:	921b      	str	r2, [sp, #108]	; 0x6c
  40211e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  402120:	f022 0201 	bic.w	r2, r2, #1
  402124:	921b      	str	r2, [sp, #108]	; 0x6c
  402126:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  402128:	631a      	str	r2, [r3, #48]	; 0x30
  40212a:	6b19      	ldr	r1, [r3, #48]	; 0x30
  40212c:	f011 0101 	ands.w	r1, r1, #1
  402130:	d1fb      	bne.n	40212a <UDP_Handler+0x80a>
				udd_ep_in_sent(ep, false);
  402132:	4640      	mov	r0, r8
  402134:	4b29      	ldr	r3, [pc, #164]	; (4021dc <UDP_Handler+0x8bc>)
  402136:	4798      	blx	r3
  402138:	e433      	b.n	4019a2 <UDP_Handler+0x82>
				ptr_job->b_buf_end = false;
  40213a:	f890 e001 	ldrb.w	lr, [r0, #1]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40213e:	68da      	ldr	r2, [r3, #12]
				ptr_job->b_buf_end = false;
  402140:	f361 1ec7 	bfi	lr, r1, #7, #1
  402144:	f880 e001 	strb.w	lr, [r0, #1]
                udd_disable_endpoint_interrupt(ep);
  402148:	4822      	ldr	r0, [pc, #136]	; (4021d4 <UDP_Handler+0x8b4>)
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40214a:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  40214c:	f8c0 9014 	str.w	r9, [r0, #20]
	if (ptr_job->busy == false) {
  402150:	7c5b      	ldrb	r3, [r3, #17]
  402152:	06db      	lsls	r3, r3, #27
  402154:	d586      	bpl.n	402064 <UDP_Handler+0x744>
  402156:	4642      	mov	r2, r8
  402158:	4630      	mov	r0, r6
  40215a:	4b21      	ldr	r3, [pc, #132]	; (4021e0 <UDP_Handler+0x8c0>)
  40215c:	4798      	blx	r3
  40215e:	e781      	b.n	402064 <UDP_Handler+0x744>
		if (Is_udd_any_bank_received(ep)) {
  402160:	2201      	movs	r2, #1
		ptr_job = &udd_ep_job[ep - 1];
  402162:	4f20      	ldr	r7, [pc, #128]	; (4021e4 <UDP_Handler+0x8c4>)
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402164:	4613      	mov	r3, r2
		ptr_job = &udd_ep_job[ep - 1];
  402166:	4638      	mov	r0, r7
  402168:	2400      	movs	r4, #0
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  40216a:	f04f 0802 	mov.w	r8, #2
  40216e:	009b      	lsls	r3, r3, #2
  402170:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
	uint32_t pkt_size = ptr_job->size;
  402174:	00a6      	lsls	r6, r4, #2
  402176:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
  40217a:	1935      	adds	r5, r6, r4
	nb_data = udd_byte_count(ep);
  40217c:	6b19      	ldr	r1, [r3, #48]	; 0x30
	uint32_t pkt_size = ptr_job->size;
  40217e:	eb07 0585 	add.w	r5, r7, r5, lsl #2
  402182:	f8b5 c010 	ldrh.w	ip, [r5, #16]
	nb_data = udd_byte_count(ep);
  402186:	f3c1 410a 	ubfx	r1, r1, #16, #11
	uint32_t pkt_size = ptr_job->size;
  40218a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
	if (nb_data > 0) {
  40218e:	b359      	cbz	r1, 4021e8 <UDP_Handler+0x8c8>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  402190:	f8d5 9008 	ldr.w	r9, [r5, #8]
  402194:	f8d5 e00c 	ldr.w	lr, [r5, #12]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  402198:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40219c:	eba9 0a0e 	sub.w	sl, r9, lr
		if (nb_data >= nb_remain) {
  4021a0:	458a      	cmp	sl, r1
  4021a2:	f200 80a0 	bhi.w	4022e6 <UDP_Handler+0x9c6>
		ptr_job->buf_cnt += nb_data;
  4021a6:	f8c5 900c 	str.w	r9, [r5, #12]
			b_full = true;
  4021aa:	f04f 0901 	mov.w	r9, #1
		for (i = 0; i < nb_data; i++) {
  4021ae:	f1ba 0f00 	cmp.w	sl, #0
  4021b2:	d01a      	beq.n	4021ea <UDP_Handler+0x8ca>
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4021b4:	44de      	add	lr, fp
  4021b6:	4675      	mov	r5, lr
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  4021b8:	f8d3 b050 	ldr.w	fp, [r3, #80]	; 0x50
  4021bc:	f805 bb01 	strb.w	fp, [r5], #1
		for (i = 0; i < nb_data; i++) {
  4021c0:	eba5 0b0e 	sub.w	fp, r5, lr
  4021c4:	45da      	cmp	sl, fp
  4021c6:	d8f7      	bhi.n	4021b8 <UDP_Handler+0x898>
  4021c8:	e00f      	b.n	4021ea <UDP_Handler+0x8ca>
  4021ca:	bf00      	nop
  4021cc:	20001260 	.word	0x20001260
  4021d0:	20000290 	.word	0x20000290
  4021d4:	40034000 	.word	0x40034000
  4021d8:	0040170d 	.word	0x0040170d
  4021dc:	0040154d 	.word	0x0040154d
  4021e0:	00401721 	.word	0x00401721
  4021e4:	20001238 	.word	0x20001238
	bool b_full = false, b_short;
  4021e8:	4689      	mov	r9, r1
	bank0_received = Is_udd_bank0_received(ep);
  4021ea:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  4021ee:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	if (bank0_received && bank1_received) {
  4021f0:	f01e 0f02 	tst.w	lr, #2
  4021f4:	d049      	beq.n	40228a <UDP_Handler+0x96a>
  4021f6:	f015 0e40 	ands.w	lr, r5, #64	; 0x40
  4021fa:	d108      	bne.n	40220e <UDP_Handler+0x8ee>
		ptr_job->bank = 1;
  4021fc:	1935      	adds	r5, r6, r4
  4021fe:	eb07 0585 	add.w	r5, r7, r5, lsl #2
  402202:	f895 a011 	ldrb.w	sl, [r5, #17]
  402206:	f36e 0a83 	bfi	sl, lr, #2, #2
  40220a:	f885 a011 	strb.w	sl, [r5, #17]
	if (ptr_job->bank == 0) {
  40220e:	1935      	adds	r5, r6, r4
  402210:	eb07 0585 	add.w	r5, r7, r5, lsl #2
  402214:	7c6d      	ldrb	r5, [r5, #17]
  402216:	f015 0f0c 	tst.w	r5, #12
		udd_ack_bank0_received(ep);
  40221a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	if (ptr_job->bank == 0) {
  40221c:	d138      	bne.n	402290 <UDP_Handler+0x970>
		udd_ack_bank0_received(ep);
  40221e:	951f      	str	r5, [sp, #124]	; 0x7c
  402220:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  402222:	f045 054f 	orr.w	r5, r5, #79	; 0x4f
  402226:	951f      	str	r5, [sp, #124]	; 0x7c
  402228:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40222a:	f025 0502 	bic.w	r5, r5, #2
  40222e:	951f      	str	r5, [sp, #124]	; 0x7c
  402230:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  402232:	631d      	str	r5, [r3, #48]	; 0x30
  402234:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  402236:	07ad      	lsls	r5, r5, #30
  402238:	d4fc      	bmi.n	402234 <UDP_Handler+0x914>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  40223a:	2a03      	cmp	r2, #3
  40223c:	d00a      	beq.n	402254 <UDP_Handler+0x934>
			ptr_job->bank = 1;
  40223e:	f04f 0e01 	mov.w	lr, #1
		ptr_job->bank = 0;
  402242:	1935      	adds	r5, r6, r4
  402244:	eb07 0585 	add.w	r5, r7, r5, lsl #2
  402248:	f895 a011 	ldrb.w	sl, [r5, #17]
  40224c:	f36e 0a83 	bfi	sl, lr, #2, #2
  402250:	f885 a011 	strb.w	sl, [r5, #17]
	if ((b_full || b_short) &&
  402254:	f1b9 0f00 	cmp.w	r9, #0
  402258:	d102      	bne.n	402260 <UDP_Handler+0x940>
  40225a:	458c      	cmp	ip, r1
  40225c:	f67f aba1 	bls.w	4019a2 <UDP_Handler+0x82>
			!Is_udd_endpoint_stall_requested(ep)) {
  402260:	6b19      	ldr	r1, [r3, #48]	; 0x30
	if ((b_full || b_short) &&
  402262:	f011 0120 	ands.w	r1, r1, #32
  402266:	f47f ab9c 	bne.w	4019a2 <UDP_Handler+0x82>
		udd_disable_endpoint_interrupt(ep);
  40226a:	4ba5      	ldr	r3, [pc, #660]	; (402500 <UDP_Handler+0xbe0>)
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40226c:	4434      	add	r4, r6
  40226e:	eb07 0784 	add.w	r7, r7, r4, lsl #2
		udd_disable_endpoint_interrupt(ep);
  402272:	f8c3 8014 	str.w	r8, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  402276:	68fc      	ldr	r4, [r7, #12]
	if (ptr_job->busy == false) {
  402278:	7c7b      	ldrb	r3, [r7, #17]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40227a:	60bc      	str	r4, [r7, #8]
	if (ptr_job->busy == false) {
  40227c:	06df      	lsls	r7, r3, #27
  40227e:	f57f ab90 	bpl.w	4019a2 <UDP_Handler+0x82>
  402282:	4ba0      	ldr	r3, [pc, #640]	; (402504 <UDP_Handler+0xbe4>)
  402284:	4798      	blx	r3
  402286:	f7ff bb8c 	b.w	4019a2 <UDP_Handler+0x82>
		ptr_job->bank = 1;
  40228a:	f04f 0e01 	mov.w	lr, #1
  40228e:	e7b5      	b.n	4021fc <UDP_Handler+0x8dc>
		udd_ack_bank1_received(ep);
  402290:	9520      	str	r5, [sp, #128]	; 0x80
  402292:	9d20      	ldr	r5, [sp, #128]	; 0x80
  402294:	f045 054f 	orr.w	r5, r5, #79	; 0x4f
  402298:	9520      	str	r5, [sp, #128]	; 0x80
  40229a:	9d20      	ldr	r5, [sp, #128]	; 0x80
  40229c:	f025 0540 	bic.w	r5, r5, #64	; 0x40
  4022a0:	9520      	str	r5, [sp, #128]	; 0x80
  4022a2:	9d20      	ldr	r5, [sp, #128]	; 0x80
  4022a4:	631d      	str	r5, [r3, #48]	; 0x30
  4022a6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  4022a8:	f015 0e40 	ands.w	lr, r5, #64	; 0x40
  4022ac:	d1fb      	bne.n	4022a6 <UDP_Handler+0x986>
  4022ae:	e7c8      	b.n	402242 <UDP_Handler+0x922>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  4022b0:	4a95      	ldr	r2, [pc, #596]	; (402508 <UDP_Handler+0xbe8>)
  4022b2:	7893      	ldrb	r3, [r2, #2]
  4022b4:	b1b3      	cbz	r3, 4022e4 <UDP_Handler+0x9c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4022b6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4022ba:	fab3 f383 	clz	r3, r3
  4022be:	095b      	lsrs	r3, r3, #5
  4022c0:	9322      	str	r3, [sp, #136]	; 0x88
  __ASM volatile ("cpsid i" : : : "memory");
  4022c2:	b672      	cpsid	i
  4022c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4022c8:	2000      	movs	r0, #0
  4022ca:	4990      	ldr	r1, [pc, #576]	; (40250c <UDP_Handler+0xbec>)
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  4022cc:	7893      	ldrb	r3, [r2, #2]
  4022ce:	7008      	strb	r0, [r1, #0]
	return flags;
  4022d0:	9922      	ldr	r1, [sp, #136]	; 0x88
  4022d2:	3b01      	subs	r3, #1
  4022d4:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  4022d6:	2900      	cmp	r1, #0
  4022d8:	f43f abed 	beq.w	401ab6 <UDP_Handler+0x196>
  4022dc:	4b8c      	ldr	r3, [pc, #560]	; (402510 <UDP_Handler+0xbf0>)
  4022de:	4798      	blx	r3
  4022e0:	f7ff bbe9 	b.w	401ab6 <UDP_Handler+0x196>
  4022e4:	e7fe      	b.n	4022e4 <UDP_Handler+0x9c4>
		ptr_job->buf_cnt += nb_data;
  4022e6:	eb0e 0901 	add.w	r9, lr, r1
  4022ea:	f8c5 900c 	str.w	r9, [r5, #12]
  4022ee:	468a      	mov	sl, r1
	bool b_full = false, b_short;
  4022f0:	f04f 0900 	mov.w	r9, #0
  4022f4:	e75e      	b.n	4021b4 <UDP_Handler+0x894>
				if (!udd_ep_in_sent(ep, true)) {
  4022f6:	2101      	movs	r1, #1
  4022f8:	4640      	mov	r0, r8
  4022fa:	4d86      	ldr	r5, [pc, #536]	; (402514 <UDP_Handler+0xbf4>)
  4022fc:	47a8      	blx	r5
  4022fe:	4601      	mov	r1, r0
  402300:	b988      	cbnz	r0, 402326 <UDP_Handler+0xa06>
					ptr_job->b_buf_end = false;
  402302:	f89a 2001 	ldrb.w	r2, [sl, #1]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  402306:	68fb      	ldr	r3, [r7, #12]
					ptr_job->b_buf_end = false;
  402308:	f360 12c7 	bfi	r2, r0, #7, #1
  40230c:	f88a 2001 	strb.w	r2, [sl, #1]
                    udd_disable_endpoint_interrupt(ep);
  402310:	4a7b      	ldr	r2, [pc, #492]	; (402500 <UDP_Handler+0xbe0>)
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  402312:	60bb      	str	r3, [r7, #8]
                    udd_disable_endpoint_interrupt(ep);
  402314:	f8c2 9014 	str.w	r9, [r2, #20]
	if (ptr_job->busy == false) {
  402318:	7c7b      	ldrb	r3, [r7, #17]
  40231a:	06da      	lsls	r2, r3, #27
  40231c:	d503      	bpl.n	402326 <UDP_Handler+0xa06>
  40231e:	4630      	mov	r0, r6
  402320:	4642      	mov	r2, r8
  402322:	4b78      	ldr	r3, [pc, #480]	; (402504 <UDP_Handler+0xbe4>)
  402324:	4798      	blx	r3
  402326:	00a3      	lsls	r3, r4, #2
  402328:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40232c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				udd_ack_in_sent(ep);
  402330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402332:	921c      	str	r2, [sp, #112]	; 0x70
  402334:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  402336:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40233a:	921c      	str	r2, [sp, #112]	; 0x70
  40233c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  40233e:	f022 0201 	bic.w	r2, r2, #1
  402342:	921c      	str	r2, [sp, #112]	; 0x70
  402344:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  402346:	631a      	str	r2, [r3, #48]	; 0x30
  402348:	6b19      	ldr	r1, [r3, #48]	; 0x30
  40234a:	f011 0101 	ands.w	r1, r1, #1
  40234e:	d1fb      	bne.n	402348 <UDP_Handler+0xa28>
				udd_ep_in_sent(ep, false);
  402350:	4640      	mov	r0, r8
  402352:	47a8      	blx	r5
  402354:	f7ff bb25 	b.w	4019a2 <UDP_Handler+0x82>
				udd_ep_in_sent(ep, true);
  402358:	2101      	movs	r1, #1
  40235a:	4b6e      	ldr	r3, [pc, #440]	; (402514 <UDP_Handler+0xbf4>)
  40235c:	4640      	mov	r0, r8
  40235e:	4798      	blx	r3
				udd_ack_in_sent(ep);
  402360:	4b67      	ldr	r3, [pc, #412]	; (402500 <UDP_Handler+0xbe0>)
  402362:	4619      	mov	r1, r3
  402364:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  402366:	921d      	str	r2, [sp, #116]	; 0x74
  402368:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  40236a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40236e:	921d      	str	r2, [sp, #116]	; 0x74
  402370:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  402372:	f022 0201 	bic.w	r2, r2, #1
  402376:	921d      	str	r2, [sp, #116]	; 0x74
  402378:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  40237a:	63da      	str	r2, [r3, #60]	; 0x3c
  40237c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  40237e:	07db      	lsls	r3, r3, #31
  402380:	d4fc      	bmi.n	40237c <UDP_Handler+0xa5c>
  402382:	f7ff bb0e 	b.w	4019a2 <UDP_Handler+0x82>
		udd_set_endpoint_direction_in(0);
  402386:	9306      	str	r3, [sp, #24]
  402388:	9b06      	ldr	r3, [sp, #24]
  40238a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40238e:	9306      	str	r3, [sp, #24]
  402390:	9b06      	ldr	r3, [sp, #24]
  402392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402396:	9306      	str	r3, [sp, #24]
  402398:	9b06      	ldr	r3, [sp, #24]
  40239a:	632b      	str	r3, [r5, #48]	; 0x30
  40239c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40239e:	061f      	lsls	r7, r3, #24
  4023a0:	d5fc      	bpl.n	40239c <UDP_Handler+0xa7c>
		udd_ack_setup_received(0);
  4023a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4023a4:	4956      	ldr	r1, [pc, #344]	; (402500 <UDP_Handler+0xbe0>)
  4023a6:	9307      	str	r3, [sp, #28]
  4023a8:	9b07      	ldr	r3, [sp, #28]
  4023aa:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4023ae:	9307      	str	r3, [sp, #28]
  4023b0:	9b07      	ldr	r3, [sp, #28]
  4023b2:	f023 0304 	bic.w	r3, r3, #4
  4023b6:	9307      	str	r3, [sp, #28]
  4023b8:	9b07      	ldr	r3, [sp, #28]
  4023ba:	6313      	str	r3, [r2, #48]	; 0x30
  4023bc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4023be:	f013 0304 	ands.w	r3, r3, #4
  4023c2:	d1fb      	bne.n	4023bc <UDP_Handler+0xa9c>
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  4023c4:	2402      	movs	r4, #2
		udd_ctrl_prev_payload_nb_trans = 0;
  4023c6:	4854      	ldr	r0, [pc, #336]	; (402518 <UDP_Handler+0xbf8>)
		udd_ctrl_payload_nb_trans = 0;
  4023c8:	4954      	ldr	r1, [pc, #336]	; (40251c <UDP_Handler+0xbfc>)
		udd_ctrl_in_sent(); // Send first data transfer
  4023ca:	4a55      	ldr	r2, [pc, #340]	; (402520 <UDP_Handler+0xc00>)
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  4023cc:	7034      	strb	r4, [r6, #0]
		udd_ctrl_prev_payload_nb_trans = 0;
  4023ce:	8003      	strh	r3, [r0, #0]
		udd_ctrl_payload_nb_trans = 0;
  4023d0:	800b      	strh	r3, [r1, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  4023d2:	4790      	blx	r2
  4023d4:	f7ff bae5 	b.w	4019a2 <UDP_Handler+0x82>
			(udd_ctrl_prev_payload_nb_trans +
  4023d8:	f8df 813c 	ldr.w	r8, [pc, #316]	; 402518 <UDP_Handler+0xbf8>
			|| (udd_g_ctrlreq.req.wLength <=
  4023dc:	88e1      	ldrh	r1, [r4, #6]
			(udd_ctrl_prev_payload_nb_trans +
  4023de:	f8b8 2000 	ldrh.w	r2, [r8]
  4023e2:	441a      	add	r2, r3
			|| (udd_g_ctrlreq.req.wLength <=
  4023e4:	4291      	cmp	r1, r2
  4023e6:	f77f ac7d 	ble.w	401ce4 <UDP_Handler+0x3c4>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  4023ea:	89a2      	ldrh	r2, [r4, #12]
  4023ec:	429a      	cmp	r2, r3
  4023ee:	d012      	beq.n	402416 <UDP_Handler+0xaf6>
	udd_ack_bank0_received(0);
  4023f0:	4b43      	ldr	r3, [pc, #268]	; (402500 <UDP_Handler+0xbe0>)
  4023f2:	4619      	mov	r1, r3
  4023f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023f6:	9213      	str	r2, [sp, #76]	; 0x4c
  4023f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4023fa:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4023fe:	9213      	str	r2, [sp, #76]	; 0x4c
  402400:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402402:	f022 0202 	bic.w	r2, r2, #2
  402406:	9213      	str	r2, [sp, #76]	; 0x4c
  402408:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40240a:	631a      	str	r2, [r3, #48]	; 0x30
  40240c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40240e:	079b      	lsls	r3, r3, #30
  402410:	d4fc      	bmi.n	40240c <UDP_Handler+0xaec>
  402412:	f7ff bac6 	b.w	4019a2 <UDP_Handler+0x82>
		if (!udd_g_ctrlreq.over_under_run) {
  402416:	6963      	ldr	r3, [r4, #20]
  402418:	2b00      	cmp	r3, #0
  40241a:	d02e      	beq.n	40247a <UDP_Handler+0xb5a>
		if (!udd_g_ctrlreq.over_under_run()) {
  40241c:	4798      	blx	r3
  40241e:	bb18      	cbnz	r0, 402468 <UDP_Handler+0xb48>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  402420:	2305      	movs	r3, #5
  402422:	7033      	strb	r3, [r6, #0]
	udd_enable_stall_handshake(0);
  402424:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402426:	4a36      	ldr	r2, [pc, #216]	; (402500 <UDP_Handler+0xbe0>)
  402428:	9309      	str	r3, [sp, #36]	; 0x24
  40242a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40242c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402430:	9309      	str	r3, [sp, #36]	; 0x24
  402432:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402434:	f043 0320 	orr.w	r3, r3, #32
  402438:	9309      	str	r3, [sp, #36]	; 0x24
  40243a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40243c:	632b      	str	r3, [r5, #48]	; 0x30
  40243e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402440:	0699      	lsls	r1, r3, #26
  402442:	d5fc      	bpl.n	40243e <UDP_Handler+0xb1e>
			udd_ack_bank0_received(0);
  402444:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402446:	492e      	ldr	r1, [pc, #184]	; (402500 <UDP_Handler+0xbe0>)
  402448:	9312      	str	r3, [sp, #72]	; 0x48
  40244a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40244c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402450:	9312      	str	r3, [sp, #72]	; 0x48
  402452:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402454:	f023 0302 	bic.w	r3, r3, #2
  402458:	9312      	str	r3, [sp, #72]	; 0x48
  40245a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40245c:	6313      	str	r3, [r2, #48]	; 0x30
  40245e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402460:	079a      	lsls	r2, r3, #30
  402462:	d4fc      	bmi.n	40245e <UDP_Handler+0xb3e>
  402464:	f7ff ba9d 	b.w	4019a2 <UDP_Handler+0x82>
		udd_ctrl_payload_nb_trans = 0;
  402468:	2100      	movs	r1, #0
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  40246a:	f8b8 3000 	ldrh.w	r3, [r8]
  40246e:	883a      	ldrh	r2, [r7, #0]
		udd_ctrl_payload_nb_trans = 0;
  402470:	8039      	strh	r1, [r7, #0]
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  402472:	4413      	add	r3, r2
  402474:	f8a8 3000 	strh.w	r3, [r8]
  402478:	e7ba      	b.n	4023f0 <UDP_Handler+0xad0>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  40247a:	2305      	movs	r3, #5
  40247c:	7033      	strb	r3, [r6, #0]
	udd_enable_stall_handshake(0);
  40247e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402480:	4a1f      	ldr	r2, [pc, #124]	; (402500 <UDP_Handler+0xbe0>)
  402482:	930a      	str	r3, [sp, #40]	; 0x28
  402484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402486:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40248a:	930a      	str	r3, [sp, #40]	; 0x28
  40248c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40248e:	f043 0320 	orr.w	r3, r3, #32
  402492:	930a      	str	r3, [sp, #40]	; 0x28
  402494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402496:	632b      	str	r3, [r5, #48]	; 0x30
  402498:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40249a:	069c      	lsls	r4, r3, #26
  40249c:	d5fc      	bpl.n	402498 <UDP_Handler+0xb78>
			udd_ack_bank0_received(0);
  40249e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4024a0:	4917      	ldr	r1, [pc, #92]	; (402500 <UDP_Handler+0xbe0>)
  4024a2:	9311      	str	r3, [sp, #68]	; 0x44
  4024a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4024a6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4024aa:	9311      	str	r3, [sp, #68]	; 0x44
  4024ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4024ae:	f023 0302 	bic.w	r3, r3, #2
  4024b2:	9311      	str	r3, [sp, #68]	; 0x44
  4024b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4024b6:	6313      	str	r3, [r2, #48]	; 0x30
  4024b8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4024ba:	0798      	lsls	r0, r3, #30
  4024bc:	d4fc      	bmi.n	4024b8 <UDP_Handler+0xb98>
  4024be:	f7ff ba70 	b.w	4019a2 <UDP_Handler+0x82>
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4024c2:	2301      	movs	r3, #1
  4024c4:	e4f9      	b.n	401eba <UDP_Handler+0x59a>
		if (Is_udd_in_sent(ep)) {
  4024c6:	f04f 0801 	mov.w	r8, #1
		ptr_job = &udd_ep_job[ep - 1];
  4024ca:	4f16      	ldr	r7, [pc, #88]	; (402524 <UDP_Handler+0xc04>)
  4024cc:	461d      	mov	r5, r3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4024ce:	4644      	mov	r4, r8
		ptr_job = &udd_ep_job[ep - 1];
  4024d0:	463e      	mov	r6, r7
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4024d2:	f04f 0902 	mov.w	r9, #2
  4024d6:	e562      	b.n	401f9e <UDP_Handler+0x67e>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4024d8:	2203      	movs	r2, #3
		ptr_job = &udd_ep_job[ep - 1];
  4024da:	4813      	ldr	r0, [pc, #76]	; (402528 <UDP_Handler+0xc08>)
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4024dc:	4613      	mov	r3, r2
  4024de:	f1a0 0728 	sub.w	r7, r0, #40	; 0x28
		ptr_job = &udd_ep_job[ep - 1];
  4024e2:	2402      	movs	r4, #2
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4024e4:	f04f 0808 	mov.w	r8, #8
  4024e8:	e641      	b.n	40216e <UDP_Handler+0x84e>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4024ea:	f04f 0802 	mov.w	r8, #2
		ptr_job = &udd_ep_job[ep - 1];
  4024ee:	4e0f      	ldr	r6, [pc, #60]	; (40252c <UDP_Handler+0xc0c>)
  4024f0:	2501      	movs	r5, #1
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4024f2:	4644      	mov	r4, r8
  4024f4:	f04f 0904 	mov.w	r9, #4
  4024f8:	f1a6 0714 	sub.w	r7, r6, #20
  4024fc:	e54f      	b.n	401f9e <UDP_Handler+0x67e>
  4024fe:	bf00      	nop
  402500:	40034000 	.word	0x40034000
  402504:	00401721 	.word	0x00401721
  402508:	200012bc 	.word	0x200012bc
  40250c:	20000290 	.word	0x20000290
  402510:	0040170d 	.word	0x0040170d
  402514:	0040154d 	.word	0x0040154d
  402518:	20001234 	.word	0x20001234
  40251c:	20001232 	.word	0x20001232
  402520:	0040175d 	.word	0x0040175d
  402524:	20001238 	.word	0x20001238
  402528:	20001260 	.word	0x20001260
  40252c:	2000124c 	.word	0x2000124c
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  402530:	2202      	movs	r2, #2
		ptr_job = &udd_ep_job[ep - 1];
  402532:	4804      	ldr	r0, [pc, #16]	; (402544 <UDP_Handler+0xc24>)
  402534:	2401      	movs	r4, #1
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402536:	4613      	mov	r3, r2
  402538:	f04f 0804 	mov.w	r8, #4
  40253c:	f1a0 0714 	sub.w	r7, r0, #20
  402540:	e615      	b.n	40216e <UDP_Handler+0x84e>
  402542:	bf00      	nop
  402544:	2000124c 	.word	0x2000124c

00402548 <udd_attach>:
{
  402548:	b5f0      	push	{r4, r5, r6, r7, lr}
  40254a:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40254c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402550:	fab3 f383 	clz	r3, r3
  402554:	095b      	lsrs	r3, r3, #5
  402556:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402558:	b672      	cpsid	i
  40255a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40255e:	2300      	movs	r3, #0
	if (b_idle && !udd_b_idle) {
  402560:	4922      	ldr	r1, [pc, #136]	; (4025ec <udd_attach+0xa4>)
  402562:	4c23      	ldr	r4, [pc, #140]	; (4025f0 <udd_attach+0xa8>)
  402564:	7808      	ldrb	r0, [r1, #0]
  402566:	7023      	strb	r3, [r4, #0]
	return flags;
  402568:	9d00      	ldr	r5, [sp, #0]
  40256a:	b320      	cbz	r0, 4025b6 <udd_attach+0x6e>
	udd_b_idle = b_idle;
  40256c:	2601      	movs	r6, #1
	udd_enable_periph_ck();
  40256e:	4b21      	ldr	r3, [pc, #132]	; (4025f4 <udd_attach+0xac>)
	udd_enable_resume_interrupt();
  402570:	f44f 7700 	mov.w	r7, #512	; 0x200
	udd_enable_periph_ck();
  402574:	2022      	movs	r0, #34	; 0x22
	udd_b_idle = b_idle;
  402576:	700e      	strb	r6, [r1, #0]
	udd_enable_periph_ck();
  402578:	4798      	blx	r3
	udd_enable_suspend_interrupt();
  40257a:	f44f 7c80 	mov.w	ip, #256	; 0x100
	udd_enable_wake_up_interrupt();
  40257e:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
	udd_enable_ext_resume_interrupt();
  402582:	f44f 6080 	mov.w	r0, #1024	; 0x400
	udd_enable_sof_interrupt();
  402586:	f44f 6100 	mov.w	r1, #2048	; 0x800
	udd_enable_transceiver();
  40258a:	4b1b      	ldr	r3, [pc, #108]	; (4025f8 <udd_attach+0xb0>)
  40258c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40258e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402592:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  402594:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402596:	433a      	orrs	r2, r7
  402598:	675a      	str	r2, [r3, #116]	; 0x74
	udd_enable_suspend_interrupt();
  40259a:	f8c3 c010 	str.w	ip, [r3, #16]
	udd_enable_wake_up_interrupt();
  40259e:	f8c3 e010 	str.w	lr, [r3, #16]
	udd_enable_resume_interrupt();
  4025a2:	611f      	str	r7, [r3, #16]
	udd_enable_ext_resume_interrupt();
  4025a4:	6118      	str	r0, [r3, #16]
	udd_enable_sof_interrupt();
  4025a6:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  4025a8:	b11d      	cbz	r5, 4025b2 <udd_attach+0x6a>
		cpu_irq_enable();
  4025aa:	7026      	strb	r6, [r4, #0]
  4025ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4025b0:	b662      	cpsie	i
}
  4025b2:	b003      	add	sp, #12
  4025b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(sleepmgr_locks[mode] >= 0xff) {
  4025b6:	4a11      	ldr	r2, [pc, #68]	; (4025fc <udd_attach+0xb4>)
  4025b8:	7893      	ldrb	r3, [r2, #2]
  4025ba:	2bff      	cmp	r3, #255	; 0xff
  4025bc:	d015      	beq.n	4025ea <udd_attach+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4025be:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4025c2:	fab3 f383 	clz	r3, r3
  4025c6:	095b      	lsrs	r3, r3, #5
  4025c8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4025ca:	b672      	cpsid	i
  4025cc:	f3bf 8f5f 	dmb	sy
	++sleepmgr_locks[mode];
  4025d0:	7893      	ldrb	r3, [r2, #2]
	cpu_irq_disable();
  4025d2:	7020      	strb	r0, [r4, #0]
	return flags;
  4025d4:	9801      	ldr	r0, [sp, #4]
  4025d6:	3301      	adds	r3, #1
  4025d8:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  4025da:	2800      	cmp	r0, #0
  4025dc:	d0c6      	beq.n	40256c <udd_attach+0x24>
		cpu_irq_enable();
  4025de:	2301      	movs	r3, #1
  4025e0:	7023      	strb	r3, [r4, #0]
  4025e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4025e6:	b662      	cpsie	i
  4025e8:	e7c0      	b.n	40256c <udd_attach+0x24>
  4025ea:	e7fe      	b.n	4025ea <udd_attach+0xa2>
  4025ec:	20001231 	.word	0x20001231
  4025f0:	20000290 	.word	0x20000290
  4025f4:	00404325 	.word	0x00404325
  4025f8:	40034000 	.word	0x40034000
  4025fc:	200012bc 	.word	0x200012bc

00402600 <udd_enable>:
{
  402600:	b5f0      	push	{r4, r5, r6, r7, lr}
  402602:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402604:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402608:	fab3 f383 	clz	r3, r3
  40260c:	095b      	lsrs	r3, r3, #5
  40260e:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402610:	b672      	cpsid	i
  402612:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402616:	2400      	movs	r4, #0
  402618:	4d27      	ldr	r5, [pc, #156]	; (4026b8 <udd_enable+0xb8>)
	udd_enable_periph_ck();
  40261a:	4b28      	ldr	r3, [pc, #160]	; (4026bc <udd_enable+0xbc>)
  40261c:	702c      	strb	r4, [r5, #0]
  40261e:	2022      	movs	r0, #34	; 0x22
	return flags;
  402620:	9e00      	ldr	r6, [sp, #0]
  402622:	4798      	blx	r3
	sysclk_enable_usb();
  402624:	4b26      	ldr	r3, [pc, #152]	; (4026c0 <udd_enable+0xc0>)
  402626:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402628:	2250      	movs	r2, #80	; 0x50
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  40262a:	f04f 0e04 	mov.w	lr, #4
		udd_ep_job[i].bank = 0;
  40262e:	4b25      	ldr	r3, [pc, #148]	; (4026c4 <udd_enable+0xc4>)
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402630:	4825      	ldr	r0, [pc, #148]	; (4026c8 <udd_enable+0xc8>)
  402632:	7c5f      	ldrb	r7, [r3, #17]
  402634:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
  402638:	f880 2322 	strb.w	r2, [r0, #802]	; 0x322
  40263c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
		udd_ep_job[i].b_buf_end = false;
  402640:	f007 0783 	and.w	r7, r7, #131	; 0x83
  402644:	f001 0183 	and.w	r1, r1, #131	; 0x83
  402648:	f002 0283 	and.w	r2, r2, #131	; 0x83
  40264c:	f364 11c7 	bfi	r1, r4, #7, #1
  402650:	f364 12c7 	bfi	r2, r4, #7, #1
  402654:	f364 17c7 	bfi	r7, r4, #7, #1
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  402658:	f8c0 e004 	str.w	lr, [r0, #4]
  40265c:	745f      	strb	r7, [r3, #17]
  40265e:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  402662:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  402666:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  40266a:	4f18      	ldr	r7, [pc, #96]	; (4026cc <udd_enable+0xcc>)
  40266c:	47b8      	blx	r7
	if(sleepmgr_locks[mode] >= 0xff) {
  40266e:	4a18      	ldr	r2, [pc, #96]	; (4026d0 <udd_enable+0xd0>)
	udd_b_idle = false;
  402670:	4918      	ldr	r1, [pc, #96]	; (4026d4 <udd_enable+0xd4>)
  402672:	7813      	ldrb	r3, [r2, #0]
  402674:	700c      	strb	r4, [r1, #0]
  402676:	2bff      	cmp	r3, #255	; 0xff
  402678:	d01d      	beq.n	4026b6 <udd_enable+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40267a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40267e:	fab3 f383 	clz	r3, r3
  402682:	095b      	lsrs	r3, r3, #5
  402684:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402686:	b672      	cpsid	i
  402688:	f3bf 8f5f 	dmb	sy
	++sleepmgr_locks[mode];
  40268c:	7813      	ldrb	r3, [r2, #0]
	cpu_irq_disable();
  40268e:	702c      	strb	r4, [r5, #0]
	return flags;
  402690:	9901      	ldr	r1, [sp, #4]
  402692:	3301      	adds	r3, #1
  402694:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  402696:	b121      	cbz	r1, 4026a2 <udd_enable+0xa2>
		cpu_irq_enable();
  402698:	2301      	movs	r3, #1
  40269a:	702b      	strb	r3, [r5, #0]
  40269c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4026a0:	b662      	cpsie	i
	udd_attach();
  4026a2:	4b0d      	ldr	r3, [pc, #52]	; (4026d8 <udd_enable+0xd8>)
  4026a4:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  4026a6:	b126      	cbz	r6, 4026b2 <udd_enable+0xb2>
		cpu_irq_enable();
  4026a8:	2301      	movs	r3, #1
  4026aa:	702b      	strb	r3, [r5, #0]
  4026ac:	f3bf 8f5f 	dmb	sy
  4026b0:	b662      	cpsie	i
}
  4026b2:	b003      	add	sp, #12
  4026b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4026b6:	e7fe      	b.n	4026b6 <udd_enable+0xb6>
  4026b8:	20000290 	.word	0x20000290
  4026bc:	00404325 	.word	0x00404325
  4026c0:	004040b1 	.word	0x004040b1
  4026c4:	20001238 	.word	0x20001238
  4026c8:	e000e100 	.word	0xe000e100
  4026cc:	004043cd 	.word	0x004043cd
  4026d0:	200012bc 	.word	0x200012bc
  4026d4:	20001231 	.word	0x20001231
  4026d8:	00402549 	.word	0x00402549

004026dc <udd_is_high_speed>:
}
  4026dc:	2000      	movs	r0, #0
  4026de:	4770      	bx	lr

004026e0 <udd_set_address>:
	udd_disable_address_state();
  4026e0:	4b0c      	ldr	r3, [pc, #48]	; (402714 <udd_set_address+0x34>)
  4026e2:	685a      	ldr	r2, [r3, #4]
  4026e4:	f022 0201 	bic.w	r2, r2, #1
  4026e8:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  4026ea:	689a      	ldr	r2, [r3, #8]
  4026ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  4026f0:	609a      	str	r2, [r3, #8]
	if (address) {
  4026f2:	b170      	cbz	r0, 402712 <udd_set_address+0x32>
		udd_configure_address(address);
  4026f4:	689a      	ldr	r2, [r3, #8]
  4026f6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4026fa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4026fe:	4310      	orrs	r0, r2
  402700:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  402702:	689a      	ldr	r2, [r3, #8]
  402704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402708:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  40270a:	685a      	ldr	r2, [r3, #4]
  40270c:	f042 0201 	orr.w	r2, r2, #1
  402710:	605a      	str	r2, [r3, #4]
  402712:	4770      	bx	lr
  402714:	40034000 	.word	0x40034000

00402718 <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  402718:	4b04      	ldr	r3, [pc, #16]	; (40272c <udd_getaddress+0x14>)
  40271a:	6858      	ldr	r0, [r3, #4]
  40271c:	f010 0001 	ands.w	r0, r0, #1
		return udd_get_configured_address();
  402720:	bf1c      	itt	ne
  402722:	6898      	ldrne	r0, [r3, #8]
  402724:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
}
  402728:	4770      	bx	lr
  40272a:	bf00      	nop
  40272c:	40034000 	.word	0x40034000

00402730 <udd_get_frame_number>:
	return udd_frame_number();
  402730:	4b02      	ldr	r3, [pc, #8]	; (40273c <udd_get_frame_number+0xc>)
  402732:	6818      	ldr	r0, [r3, #0]
}
  402734:	f3c0 000a 	ubfx	r0, r0, #0, #11
  402738:	4770      	bx	lr
  40273a:	bf00      	nop
  40273c:	40034000 	.word	0x40034000

00402740 <udd_get_micro_frame_number>:
}
  402740:	2000      	movs	r0, #0
  402742:	4770      	bx	lr

00402744 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  402744:	4b01      	ldr	r3, [pc, #4]	; (40274c <udd_set_setup_payload+0x8>)
  402746:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  402748:	8199      	strh	r1, [r3, #12]
  40274a:	4770      	bx	lr
  40274c:	200012c4 	.word	0x200012c4

00402750 <udd_ep_alloc>:
{
  402750:	b470      	push	{r4, r5, r6}
	ep = ep & USB_EP_ADDR_MASK;
  402752:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  402756:	2c03      	cmp	r4, #3
{
  402758:	b083      	sub	sp, #12
	if (ep > USB_DEVICE_MAX_EP) {
  40275a:	d858      	bhi.n	40280e <udd_ep_alloc+0xbe>
  40275c:	00a3      	lsls	r3, r4, #2
  40275e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402762:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_enabled(ep)) {
  402766:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  402768:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
  40276c:	d14f      	bne.n	40280e <udd_ep_alloc+0xbe>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  40276e:	f001 0603 	and.w	r6, r1, #3
  402772:	2e01      	cmp	r6, #1
  402774:	d048      	beq.n	402808 <udd_ep_alloc+0xb8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  402776:	2a40      	cmp	r2, #64	; 0x40
  402778:	dc49      	bgt.n	40280e <udd_ep_alloc+0xbe>
	ptr_job->size = MaxEndpointSize;
  40277a:	4e29      	ldr	r6, [pc, #164]	; (402820 <udd_ep_alloc+0xd0>)
	ptr_job = &udd_ep_job[ep - 1];
  40277c:	1e65      	subs	r5, r4, #1
	ptr_job->size = MaxEndpointSize;
  40277e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402782:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  402786:	8a2e      	ldrh	r6, [r5, #16]
  402788:	b240      	sxtb	r0, r0
  40278a:	f362 0609 	bfi	r6, r2, #0, #10
  40278e:	822e      	strh	r6, [r5, #16]
	ptr_job->b_buf_end = false;
  402790:	7c6a      	ldrb	r2, [r5, #17]
	if (b_dir_in) {
  402792:	2800      	cmp	r0, #0
	ptr_job->b_stall_requested = false;
  402794:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402798:	f36f 1245 	bfc	r2, #5, #1
  40279c:	746a      	strb	r2, [r5, #17]
	ptr_job->size = MaxEndpointSize;
  40279e:	f105 0510 	add.w	r5, r5, #16
	if (b_dir_in) {
  4027a2:	db38      	blt.n	402816 <udd_ep_alloc+0xc6>
	udd_reset_endpoint(ep);
  4027a4:	2201      	movs	r2, #1
  4027a6:	4e1f      	ldr	r6, [pc, #124]	; (402824 <udd_ep_alloc+0xd4>)
  4027a8:	fa02 f404 	lsl.w	r4, r2, r4
  4027ac:	4635      	mov	r5, r6
  4027ae:	6ab2      	ldr	r2, [r6, #40]	; 0x28
  4027b0:	4322      	orrs	r2, r4
  4027b2:	62b2      	str	r2, [r6, #40]	; 0x28
  4027b4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  4027b6:	4214      	tst	r4, r2
  4027b8:	d0fc      	beq.n	4027b4 <udd_ep_alloc+0x64>
  4027ba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  4027bc:	2800      	cmp	r0, #0
	udd_reset_endpoint(ep);
  4027be:	ea22 0404 	bic.w	r4, r2, r4
  4027c2:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  4027c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4027c6:	9201      	str	r2, [sp, #4]
  4027c8:	9a01      	ldr	r2, [sp, #4]
  4027ca:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4027ce:	9201      	str	r2, [sp, #4]
  4027d0:	9a01      	ldr	r2, [sp, #4]
  4027d2:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  4027d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4027da:	9201      	str	r2, [sp, #4]
  4027dc:	ea4f 2201 	mov.w	r2, r1, lsl #8
  4027e0:	f402 7240 	and.w	r2, r2, #768	; 0x300
  4027e4:	9901      	ldr	r1, [sp, #4]
  4027e6:	bfb4      	ite	lt
  4027e8:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  4027ec:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  4027f0:	4311      	orrs	r1, r2
  4027f2:	9101      	str	r1, [sp, #4]
  4027f4:	9901      	ldr	r1, [sp, #4]
  4027f6:	6319      	str	r1, [r3, #48]	; 0x30
  4027f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4027fa:	ea32 0101 	bics.w	r1, r2, r1
  4027fe:	d1fb      	bne.n	4027f8 <udd_ep_alloc+0xa8>
	return true;
  402800:	2001      	movs	r0, #1
}
  402802:	b003      	add	sp, #12
  402804:	bc70      	pop	{r4, r5, r6}
  402806:	4770      	bx	lr
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  402808:	b10c      	cbz	r4, 40280e <udd_ep_alloc+0xbe>
  40280a:	2c03      	cmp	r4, #3
  40280c:	d1b3      	bne.n	402776 <udd_ep_alloc+0x26>
		return false;
  40280e:	2000      	movs	r0, #0
}
  402810:	b003      	add	sp, #12
  402812:	bc70      	pop	{r4, r5, r6}
  402814:	4770      	bx	lr
		ptr_job->bank = 0;
  402816:	b2d2      	uxtb	r2, r2
  402818:	f36f 0283 	bfc	r2, #2, #2
  40281c:	706a      	strb	r2, [r5, #1]
  40281e:	e7c1      	b.n	4027a4 <udd_ep_alloc+0x54>
  402820:	20001238 	.word	0x20001238
  402824:	40034000 	.word	0x40034000

00402828 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402828:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  40282c:	2a03      	cmp	r2, #3
  40282e:	d83c      	bhi.n	4028aa <udd_ep_free+0x82>
{
  402830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402834:	0091      	lsls	r1, r2, #2
  402836:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  40283a:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
	udd_disable_endpoint(ep_index);
  40283e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
{
  402840:	b082      	sub	sp, #8
	udd_disable_endpoint(ep_index);
  402842:	9301      	str	r3, [sp, #4]
  402844:	9b01      	ldr	r3, [sp, #4]
  402846:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40284a:	9301      	str	r3, [sp, #4]
  40284c:	9b01      	ldr	r3, [sp, #4]
  40284e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  402852:	9301      	str	r3, [sp, #4]
  402854:	9b01      	ldr	r3, [sp, #4]
  402856:	630b      	str	r3, [r1, #48]	; 0x30
  402858:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40285a:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
  40285e:	d1fb      	bne.n	402858 <udd_ep_free+0x30>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402860:	1e56      	subs	r6, r2, #1
	if (ptr_job->busy == false) {
  402862:	00b7      	lsls	r7, r6, #2
  402864:	19b8      	adds	r0, r7, r6
  402866:	4d11      	ldr	r5, [pc, #68]	; (4028ac <udd_ep_free+0x84>)
  402868:	0080      	lsls	r0, r0, #2
  40286a:	182c      	adds	r4, r5, r0
  40286c:	f894 e011 	ldrb.w	lr, [r4, #17]
  402870:	f01e 0f10 	tst.w	lr, #16
  402874:	d102      	bne.n	40287c <udd_ep_free+0x54>
}
  402876:	b002      	add	sp, #8
  402878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (NULL == ptr_job->call_trans) {
  40287c:	f855 8000 	ldr.w	r8, [r5, r0]
	ptr_job->busy = false;
  402880:	f363 1e04 	bfi	lr, r3, #4, #1
  402884:	f884 e011 	strb.w	lr, [r4, #17]
	if (NULL == ptr_job->call_trans) {
  402888:	f1b8 0f00 	cmp.w	r8, #0
  40288c:	d0f3      	beq.n	402876 <udd_ep_free+0x4e>
	if (Is_udd_endpoint_type_in(ep_num)) {
  40288e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  402890:	443e      	add	r6, r7
	if (Is_udd_endpoint_type_in(ep_num)) {
  402892:	055b      	lsls	r3, r3, #21
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  402894:	eb05 0586 	add.w	r5, r5, r6, lsl #2
		ep_num |= USB_EP_DIR_IN;
  402898:	bf48      	it	mi
  40289a:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  40289e:	68a9      	ldr	r1, [r5, #8]
  4028a0:	2001      	movs	r0, #1
  4028a2:	47c0      	blx	r8
}
  4028a4:	b002      	add	sp, #8
  4028a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028aa:	4770      	bx	lr
  4028ac:	20001238 	.word	0x20001238

004028b0 <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4028b0:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4028b4:	2803      	cmp	r0, #3
  4028b6:	d814      	bhi.n	4028e2 <udd_ep_is_halted+0x32>
	return ptr_job->b_stall_requested ||
  4028b8:	1e43      	subs	r3, r0, #1
  4028ba:	4a0b      	ldr	r2, [pc, #44]	; (4028e8 <udd_ep_is_halted+0x38>)
  4028bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4028c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4028c4:	7c5b      	ldrb	r3, [r3, #17]
  4028c6:	069b      	lsls	r3, r3, #26
  4028c8:	d501      	bpl.n	4028ce <udd_ep_is_halted+0x1e>
  4028ca:	2001      	movs	r0, #1
  4028cc:	4770      	bx	lr
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  4028ce:	4b07      	ldr	r3, [pc, #28]	; (4028ec <udd_ep_is_halted+0x3c>)
  4028d0:	300c      	adds	r0, #12
  4028d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  4028d6:	f013 0f28 	tst.w	r3, #40	; 0x28
  4028da:	bf14      	ite	ne
  4028dc:	2001      	movne	r0, #1
  4028de:	2000      	moveq	r0, #0
  4028e0:	4770      	bx	lr
		return false;
  4028e2:	2000      	movs	r0, #0
}
  4028e4:	4770      	bx	lr
  4028e6:	bf00      	nop
  4028e8:	20001238 	.word	0x20001238
  4028ec:	40034000 	.word	0x40034000

004028f0 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4028f0:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4028f4:	2903      	cmp	r1, #3
  4028f6:	d82e      	bhi.n	402956 <udd_ep_set_halt+0x66>
{
  4028f8:	b470      	push	{r4, r5, r6}
  4028fa:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4028fc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402900:	fab3 f383 	clz	r3, r3
  402904:	095b      	lsrs	r3, r3, #5
  402906:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402908:	b672      	cpsid	i
  40290a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40290e:	2300      	movs	r3, #0
  402910:	4c27      	ldr	r4, [pc, #156]	; (4029b0 <udd_ep_set_halt+0xc0>)
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402912:	0600      	lsls	r0, r0, #24
  402914:	7023      	strb	r3, [r4, #0]
	return flags;
  402916:	9d01      	ldr	r5, [sp, #4]
  402918:	d41f      	bmi.n	40295a <udd_ep_set_halt+0x6a>
  40291a:	008a      	lsls	r2, r1, #2
  40291c:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402920:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_enable_stall_handshake(ep_index);
  402924:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402926:	9300      	str	r3, [sp, #0]
  402928:	9b00      	ldr	r3, [sp, #0]
  40292a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40292e:	9300      	str	r3, [sp, #0]
  402930:	9b00      	ldr	r3, [sp, #0]
  402932:	f043 0320 	orr.w	r3, r3, #32
  402936:	9300      	str	r3, [sp, #0]
  402938:	9b00      	ldr	r3, [sp, #0]
  40293a:	6313      	str	r3, [r2, #48]	; 0x30
  40293c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40293e:	069b      	lsls	r3, r3, #26
  402940:	d5fc      	bpl.n	40293c <udd_ep_set_halt+0x4c>
		udd_enable_endpoint_interrupt(ep_index);
  402942:	2001      	movs	r0, #1
  402944:	4b1b      	ldr	r3, [pc, #108]	; (4029b4 <udd_ep_set_halt+0xc4>)
  402946:	fa00 f101 	lsl.w	r1, r0, r1
  40294a:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  40294c:	b9ed      	cbnz	r5, 40298a <udd_ep_set_halt+0x9a>
		return true;
  40294e:	2001      	movs	r0, #1
}
  402950:	b003      	add	sp, #12
  402952:	bc70      	pop	{r4, r5, r6}
  402954:	4770      	bx	lr
		return false;
  402956:	2000      	movs	r0, #0
  402958:	4770      	bx	lr
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  40295a:	4b16      	ldr	r3, [pc, #88]	; (4029b4 <udd_ep_set_halt+0xc4>)
  40295c:	f101 020c 	add.w	r2, r1, #12
  402960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402964:	1e4e      	subs	r6, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402966:	06da      	lsls	r2, r3, #27
  402968:	d516      	bpl.n	402998 <udd_ep_set_halt+0xa8>
  40296a:	4b13      	ldr	r3, [pc, #76]	; (4029b8 <udd_ep_set_halt+0xc8>)
  40296c:	00b2      	lsls	r2, r6, #2
		udd_enable_endpoint_interrupt(ep_index);
  40296e:	2001      	movs	r0, #1
		ptr_job->b_stall_requested = true;
  402970:	4432      	add	r2, r6
  402972:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402976:	7c5a      	ldrb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  402978:	4e0e      	ldr	r6, [pc, #56]	; (4029b4 <udd_ep_set_halt+0xc4>)
		ptr_job->b_stall_requested = true;
  40297a:	f042 0220 	orr.w	r2, r2, #32
		udd_enable_endpoint_interrupt(ep_index);
  40297e:	fa00 f101 	lsl.w	r1, r0, r1
		ptr_job->b_stall_requested = true;
  402982:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  402984:	6131      	str	r1, [r6, #16]
  402986:	2d00      	cmp	r5, #0
  402988:	d0e1      	beq.n	40294e <udd_ep_set_halt+0x5e>
		cpu_irq_enable();
  40298a:	7020      	strb	r0, [r4, #0]
  40298c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402990:	b662      	cpsie	i
}
  402992:	b003      	add	sp, #12
  402994:	bc70      	pop	{r4, r5, r6}
  402996:	4770      	bx	lr
				|| ptr_job->bank > 1)) {
  402998:	00b2      	lsls	r2, r6, #2
  40299a:	4b07      	ldr	r3, [pc, #28]	; (4029b8 <udd_ep_set_halt+0xc8>)
  40299c:	1990      	adds	r0, r2, r6
  40299e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4029a2:	7c40      	ldrb	r0, [r0, #17]
  4029a4:	f3c0 0081 	ubfx	r0, r0, #2, #2
  4029a8:	2801      	cmp	r0, #1
  4029aa:	dce0      	bgt.n	40296e <udd_ep_set_halt+0x7e>
  4029ac:	e7b5      	b.n	40291a <udd_ep_set_halt+0x2a>
  4029ae:	bf00      	nop
  4029b0:	20000290 	.word	0x20000290
  4029b4:	40034000 	.word	0x40034000
  4029b8:	20001238 	.word	0x20001238

004029bc <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  4029bc:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  4029c0:	2803      	cmp	r0, #3
  4029c2:	d84a      	bhi.n	402a5a <udd_ep_clear_halt+0x9e>
{
  4029c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	ptr_job = &udd_ep_job[ep - 1];
  4029c6:	1e45      	subs	r5, r0, #1
	ptr_job->b_stall_requested = false;
  4029c8:	00ac      	lsls	r4, r5, #2
  4029ca:	4e29      	ldr	r6, [pc, #164]	; (402a70 <udd_ep_clear_halt+0xb4>)
  4029cc:	1963      	adds	r3, r4, r5
  4029ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4029d2:	7c59      	ldrb	r1, [r3, #17]
  4029d4:	0082      	lsls	r2, r0, #2
  4029d6:	f36f 1145 	bfc	r1, #5, #1
  4029da:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4029de:	7459      	strb	r1, [r3, #17]
  4029e0:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  4029e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
{
  4029e6:	b083      	sub	sp, #12
	if (Is_udd_endpoint_stall_requested(ep)) {
  4029e8:	069b      	lsls	r3, r3, #26
  4029ea:	d533      	bpl.n	402a54 <udd_ep_clear_halt+0x98>
		udd_disable_stall_handshake(ep);
  4029ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4029ee:	9300      	str	r3, [sp, #0]
  4029f0:	9b00      	ldr	r3, [sp, #0]
  4029f2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4029f6:	9300      	str	r3, [sp, #0]
  4029f8:	9b00      	ldr	r3, [sp, #0]
  4029fa:	f023 0320 	bic.w	r3, r3, #32
  4029fe:	9300      	str	r3, [sp, #0]
  402a00:	9b00      	ldr	r3, [sp, #0]
  402a02:	6313      	str	r3, [r2, #48]	; 0x30
  402a04:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402a06:	069f      	lsls	r7, r3, #26
  402a08:	d4fc      	bmi.n	402a04 <udd_ep_clear_halt+0x48>
		udd_reset_endpoint(ep);
  402a0a:	2301      	movs	r3, #1
  402a0c:	4f19      	ldr	r7, [pc, #100]	; (402a74 <udd_ep_clear_halt+0xb8>)
  402a0e:	fa03 f000 	lsl.w	r0, r3, r0
  402a12:	4639      	mov	r1, r7
  402a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402a16:	4303      	orrs	r3, r0
  402a18:	62bb      	str	r3, [r7, #40]	; 0x28
  402a1a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  402a1c:	4218      	tst	r0, r3
  402a1e:	d0fc      	beq.n	402a1a <udd_ep_clear_halt+0x5e>
  402a20:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  402a22:	ea23 0000 	bic.w	r0, r3, r0
  402a26:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  402a28:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402a2a:	9301      	str	r3, [sp, #4]
  402a2c:	9b01      	ldr	r3, [sp, #4]
  402a2e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402a32:	9301      	str	r3, [sp, #4]
  402a34:	9b01      	ldr	r3, [sp, #4]
  402a36:	f023 0308 	bic.w	r3, r3, #8
  402a3a:	9301      	str	r3, [sp, #4]
  402a3c:	9b01      	ldr	r3, [sp, #4]
  402a3e:	6313      	str	r3, [r2, #48]	; 0x30
  402a40:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402a42:	f013 0308 	ands.w	r3, r3, #8
  402a46:	d1fb      	bne.n	402a40 <udd_ep_clear_halt+0x84>
		if (ptr_job->busy == true) {
  402a48:	442c      	add	r4, r5
  402a4a:	00a4      	lsls	r4, r4, #2
  402a4c:	1932      	adds	r2, r6, r4
  402a4e:	7c51      	ldrb	r1, [r2, #17]
  402a50:	06c8      	lsls	r0, r1, #27
  402a52:	d404      	bmi.n	402a5e <udd_ep_clear_halt+0xa2>
	return true;
  402a54:	2001      	movs	r0, #1
}
  402a56:	b003      	add	sp, #12
  402a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  402a5a:	2000      	movs	r0, #0
  402a5c:	4770      	bx	lr
			ptr_job->busy = false;
  402a5e:	f363 1104 	bfi	r1, r3, #4, #1
			ptr_job->call_nohalt();
  402a62:	5930      	ldr	r0, [r6, r4]
			ptr_job->busy = false;
  402a64:	7451      	strb	r1, [r2, #17]
			ptr_job->call_nohalt();
  402a66:	4780      	blx	r0
	return true;
  402a68:	2001      	movs	r0, #1
}
  402a6a:	b003      	add	sp, #12
  402a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402a6e:	bf00      	nop
  402a70:	20001238 	.word	0x20001238
  402a74:	40034000 	.word	0x40034000

00402a78 <udd_ep_run>:
{
  402a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ep &= USB_EP_ADDR_MASK;
  402a7c:	f000 060f 	and.w	r6, r0, #15
{
  402a80:	b085      	sub	sp, #20
	if (USB_DEVICE_MAX_EP < ep) {
  402a82:	2e03      	cmp	r6, #3
{
  402a84:	9201      	str	r2, [sp, #4]
	if (USB_DEVICE_MAX_EP < ep) {
  402a86:	d833      	bhi.n	402af0 <udd_ep_run+0x78>
  402a88:	00b4      	lsls	r4, r6, #2
  402a8a:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  402a8e:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
	if ((!Is_udd_endpoint_enabled(ep))
  402a92:	6b25      	ldr	r5, [r4, #48]	; 0x30
  402a94:	042a      	lsls	r2, r5, #16
  402a96:	d52b      	bpl.n	402af0 <udd_ep_run+0x78>
	ptr_job = &udd_ep_job[ep - 1];
  402a98:	f106 3eff 	add.w	lr, r6, #4294967295
			|| ptr_job->b_stall_requested
  402a9c:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
  402aa0:	4f44      	ldr	r7, [pc, #272]	; (402bb4 <udd_ep_run+0x13c>)
  402aa2:	eb0c 050e 	add.w	r5, ip, lr
  402aa6:	eb07 0585 	add.w	r5, r7, r5, lsl #2
  402aaa:	f895 8011 	ldrb.w	r8, [r5, #17]
  402aae:	f018 0f20 	tst.w	r8, #32
  402ab2:	d11d      	bne.n	402af0 <udd_ep_run+0x78>
			|| Is_udd_endpoint_stall_requested(ep)) {
  402ab4:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
  402ab8:	f019 0920 	ands.w	r9, r9, #32
  402abc:	d118      	bne.n	402af0 <udd_ep_run+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402abe:	f3ef 8810 	mrs	r8, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402ac2:	fab8 f888 	clz	r8, r8
  402ac6:	ea4f 1858 	mov.w	r8, r8, lsr #5
  402aca:	f8cd 8008 	str.w	r8, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  402ace:	b672      	cpsid	i
  402ad0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402ad4:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 402bc0 <udd_ep_run+0x148>
	if (ptr_job->busy == true) {
  402ad8:	f895 b011 	ldrb.w	fp, [r5, #17]
  402adc:	f888 9000 	strb.w	r9, [r8]
  402ae0:	f01b 0f10 	tst.w	fp, #16
	return flags;
  402ae4:	f8dd a008 	ldr.w	sl, [sp, #8]
  402ae8:	d006      	beq.n	402af8 <udd_ep_run+0x80>
	if (cpu_irq_is_enabled_flags(flags))
  402aea:	f1ba 0f00 	cmp.w	sl, #0
  402aee:	d14c      	bne.n	402b8a <udd_ep_run+0x112>
		return false;
  402af0:	2000      	movs	r0, #0
}
  402af2:	b005      	add	sp, #20
  402af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ptr_job->busy = true;
  402af8:	f895 9011 	ldrb.w	r9, [r5, #17]
  402afc:	f049 0910 	orr.w	r9, r9, #16
  402b00:	f885 9011 	strb.w	r9, [r5, #17]
  402b04:	f1ba 0f00 	cmp.w	sl, #0
  402b08:	d138      	bne.n	402b7c <udd_ep_run+0x104>
	ptr_job->buf_cnt = 0;
  402b0a:	f04f 0900 	mov.w	r9, #0
	ptr_job->call_trans = callback;
  402b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	ptr_job->buf = buf;
  402b10:	eb0c 050e 	add.w	r5, ip, lr
  402b14:	00ad      	lsls	r5, r5, #2
	ptr_job->call_trans = callback;
  402b16:	517a      	str	r2, [r7, r5]
	ptr_job->buf = buf;
  402b18:	9a01      	ldr	r2, [sp, #4]
  402b1a:	443d      	add	r5, r7
  402b1c:	606a      	str	r2, [r5, #4]
	ptr_job->buf_size = buf_size;
  402b1e:	60ab      	str	r3, [r5, #8]
	ptr_job->buf_cnt = 0;
  402b20:	f8c5 900c 	str.w	r9, [r5, #12]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402b24:	b331      	cbz	r1, 402b74 <udd_ep_run+0xfc>
  402b26:	eb0c 030e 	add.w	r3, ip, lr
  402b2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402b2e:	7c5a      	ldrb	r2, [r3, #17]
  402b30:	f361 1286 	bfi	r2, r1, #6, #1
	ptr_job->b_buf_end = false;
  402b34:	f36f 12c7 	bfc	r2, #7, #1
  402b38:	745a      	strb	r2, [r3, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402b3a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402b3e:	fab3 f383 	clz	r3, r3
  402b42:	095b      	lsrs	r3, r3, #5
  402b44:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  402b46:	b672      	cpsid	i
  402b48:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402b4c:	2200      	movs	r2, #0
	udd_enable_endpoint_interrupt(ep);
  402b4e:	2101      	movs	r1, #1
  402b50:	4b19      	ldr	r3, [pc, #100]	; (402bb8 <udd_ep_run+0x140>)
  402b52:	f888 2000 	strb.w	r2, [r8]
  402b56:	fa01 f206 	lsl.w	r2, r1, r6
	return flags;
  402b5a:	9d03      	ldr	r5, [sp, #12]
  402b5c:	611a      	str	r2, [r3, #16]
	if (b_dir_in) {
  402b5e:	0603      	lsls	r3, r0, #24
  402b60:	d41b      	bmi.n	402b9a <udd_ep_run+0x122>
		cpu_irq_enable();
  402b62:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
  402b64:	2d00      	cmp	r5, #0
  402b66:	d0c4      	beq.n	402af2 <udd_ep_run+0x7a>
		cpu_irq_enable();
  402b68:	f888 0000 	strb.w	r0, [r8]
  402b6c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402b70:	b662      	cpsie	i
  402b72:	e7be      	b.n	402af2 <udd_ep_run+0x7a>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402b74:	fab3 f183 	clz	r1, r3
  402b78:	0949      	lsrs	r1, r1, #5
  402b7a:	e7d4      	b.n	402b26 <udd_ep_run+0xae>
  402b7c:	2501      	movs	r5, #1
  402b7e:	f888 5000 	strb.w	r5, [r8]
  402b82:	f3bf 8f5f 	dmb	sy
  402b86:	b662      	cpsie	i
  402b88:	e7bf      	b.n	402b0a <udd_ep_run+0x92>
  402b8a:	2301      	movs	r3, #1
  402b8c:	f888 3000 	strb.w	r3, [r8]
  402b90:	f3bf 8f5f 	dmb	sy
  402b94:	b662      	cpsie	i
		return false; // Job already on going
  402b96:	4648      	mov	r0, r9
  402b98:	e7ab      	b.n	402af2 <udd_ep_run+0x7a>
		if (Is_udd_in_pending(ep)) {
  402b9a:	6b24      	ldr	r4, [r4, #48]	; 0x30
  402b9c:	f014 0411 	ands.w	r4, r4, #17
  402ba0:	d1df      	bne.n	402b62 <udd_ep_run+0xea>
			if (udd_ep_in_sent(ep, true)) {
  402ba2:	4630      	mov	r0, r6
  402ba4:	4f05      	ldr	r7, [pc, #20]	; (402bbc <udd_ep_run+0x144>)
  402ba6:	47b8      	blx	r7
  402ba8:	2800      	cmp	r0, #0
  402baa:	d0da      	beq.n	402b62 <udd_ep_run+0xea>
				udd_ep_in_sent(ep, false);
  402bac:	4621      	mov	r1, r4
  402bae:	4630      	mov	r0, r6
  402bb0:	47b8      	blx	r7
  402bb2:	e7d6      	b.n	402b62 <udd_ep_run+0xea>
  402bb4:	20001238 	.word	0x20001238
  402bb8:	40034000 	.word	0x40034000
  402bbc:	0040154d 	.word	0x0040154d
  402bc0:	20000290 	.word	0x20000290

00402bc4 <udd_ep_abort>:
	ep &= USB_EP_ADDR_MASK;
  402bc4:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402bc8:	2a03      	cmp	r2, #3
  402bca:	f200 808f 	bhi.w	402cec <udd_ep_abort+0x128>
{
  402bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402bd2:	b088      	sub	sp, #32
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402bd4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402bd8:	fab3 f383 	clz	r3, r3
  402bdc:	095b      	lsrs	r3, r3, #5
  402bde:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  402be0:	b672      	cpsid	i
  402be2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402be6:	2400      	movs	r4, #0
	udd_disable_endpoint_interrupt(ep);
  402be8:	2101      	movs	r1, #1
  402bea:	4b7d      	ldr	r3, [pc, #500]	; (402de0 <udd_ep_abort+0x21c>)
  402bec:	4e7d      	ldr	r6, [pc, #500]	; (402de4 <udd_ep_abort+0x220>)
  402bee:	701c      	strb	r4, [r3, #0]
	return flags;
  402bf0:	9d05      	ldr	r5, [sp, #20]
  402bf2:	fa01 f402 	lsl.w	r4, r1, r2
  402bf6:	6174      	str	r4, [r6, #20]
	if (cpu_irq_is_enabled_flags(flags))
  402bf8:	2d00      	cmp	r5, #0
  402bfa:	f040 808f 	bne.w	402d1c <udd_ep_abort+0x158>
	if (b_dir_in) {
  402bfe:	0605      	lsls	r5, r0, #24
  402c00:	f100 8093 	bmi.w	402d2a <udd_ep_abort+0x166>
		ptr_job->bank = 1;
  402c04:	f04f 0c01 	mov.w	ip, #1
  402c08:	1e57      	subs	r7, r2, #1
  402c0a:	ea4f 0e87 	mov.w	lr, r7, lsl #2
  402c0e:	4e76      	ldr	r6, [pc, #472]	; (402de8 <udd_ep_abort+0x224>)
  402c10:	eb0e 0507 	add.w	r5, lr, r7
  402c14:	0091      	lsls	r1, r2, #2
  402c16:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  402c1a:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  402c1e:	f105 0010 	add.w	r0, r5, #16
  402c22:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
		while(Is_udd_any_bank_received(ep)) {
  402c26:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402c28:	f013 0f42 	tst.w	r3, #66	; 0x42
  402c2c:	d028      	beq.n	402c80 <udd_ep_abort+0xbc>
	bank0_received = Is_udd_bank0_received(ep);
  402c2e:	f8d1 8030 	ldr.w	r8, [r1, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  402c32:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	if (bank0_received && bank1_received) {
  402c34:	f018 0f02 	tst.w	r8, #2
  402c38:	d14e      	bne.n	402cd8 <udd_ep_abort+0x114>
		ptr_job->bank = 1;
  402c3a:	7843      	ldrb	r3, [r0, #1]
  402c3c:	f36c 0383 	bfi	r3, ip, #2, #2
  402c40:	7043      	strb	r3, [r0, #1]
	if (ptr_job->bank == 0) {
  402c42:	7c6b      	ldrb	r3, [r5, #17]
  402c44:	f013 0f0c 	tst.w	r3, #12
		udd_ack_bank0_received(ep);
  402c48:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	if (ptr_job->bank == 0) {
  402c4a:	d12f      	bne.n	402cac <udd_ep_abort+0xe8>
		udd_ack_bank0_received(ep);
  402c4c:	9306      	str	r3, [sp, #24]
  402c4e:	9b06      	ldr	r3, [sp, #24]
  402c50:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c54:	9306      	str	r3, [sp, #24]
  402c56:	9b06      	ldr	r3, [sp, #24]
  402c58:	f023 0302 	bic.w	r3, r3, #2
  402c5c:	9306      	str	r3, [sp, #24]
  402c5e:	9b06      	ldr	r3, [sp, #24]
  402c60:	630b      	str	r3, [r1, #48]	; 0x30
  402c62:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402c64:	079b      	lsls	r3, r3, #30
  402c66:	d4fc      	bmi.n	402c62 <udd_ep_abort+0x9e>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  402c68:	2a00      	cmp	r2, #0
  402c6a:	d0dc      	beq.n	402c26 <udd_ep_abort+0x62>
  402c6c:	2a03      	cmp	r2, #3
  402c6e:	d0da      	beq.n	402c26 <udd_ep_abort+0x62>
			ptr_job->bank = 1;
  402c70:	7843      	ldrb	r3, [r0, #1]
  402c72:	f36c 0383 	bfi	r3, ip, #2, #2
  402c76:	7043      	strb	r3, [r0, #1]
		while(Is_udd_any_bank_received(ep)) {
  402c78:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402c7a:	f013 0f42 	tst.w	r3, #66	; 0x42
  402c7e:	d1d6      	bne.n	402c2e <udd_ep_abort+0x6a>
	udd_reset_endpoint(ep);
  402c80:	4b58      	ldr	r3, [pc, #352]	; (402de4 <udd_ep_abort+0x220>)
  402c82:	4619      	mov	r1, r3
  402c84:	6a98      	ldr	r0, [r3, #40]	; 0x28
  402c86:	4320      	orrs	r0, r4
  402c88:	6298      	str	r0, [r3, #40]	; 0x28
  402c8a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  402c8c:	421c      	tst	r4, r3
  402c8e:	d0fc      	beq.n	402c8a <udd_ep_abort+0xc6>
  402c90:	6a88      	ldr	r0, [r1, #40]	; 0x28
	if (ptr_job->busy == false) {
  402c92:	eb0e 0307 	add.w	r3, lr, r7
	udd_reset_endpoint(ep);
  402c96:	ea20 0404 	bic.w	r4, r0, r4
	if (ptr_job->busy == false) {
  402c9a:	009b      	lsls	r3, r3, #2
	udd_reset_endpoint(ep);
  402c9c:	628c      	str	r4, [r1, #40]	; 0x28
	if (ptr_job->busy == false) {
  402c9e:	18f0      	adds	r0, r6, r3
  402ca0:	7c44      	ldrb	r4, [r0, #17]
  402ca2:	06e5      	lsls	r5, r4, #27
  402ca4:	d423      	bmi.n	402cee <udd_ep_abort+0x12a>
}
  402ca6:	b008      	add	sp, #32
  402ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_bank1_received(ep);
  402cac:	9307      	str	r3, [sp, #28]
  402cae:	9b07      	ldr	r3, [sp, #28]
  402cb0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402cb4:	9307      	str	r3, [sp, #28]
  402cb6:	9b07      	ldr	r3, [sp, #28]
  402cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  402cbc:	9307      	str	r3, [sp, #28]
  402cbe:	9b07      	ldr	r3, [sp, #28]
  402cc0:	630b      	str	r3, [r1, #48]	; 0x30
  402cc2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402cc4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  402cc8:	d1fb      	bne.n	402cc2 <udd_ep_abort+0xfe>
		ptr_job->bank = 0;
  402cca:	f890 8001 	ldrb.w	r8, [r0, #1]
  402cce:	f363 0883 	bfi	r8, r3, #2, #2
  402cd2:	f880 8001 	strb.w	r8, [r0, #1]
  402cd6:	e7a6      	b.n	402c26 <udd_ep_abort+0x62>
	if (bank0_received && bank1_received) {
  402cd8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  402cdc:	d1b1      	bne.n	402c42 <udd_ep_abort+0x7e>
		ptr_job->bank = 0;
  402cde:	f890 8001 	ldrb.w	r8, [r0, #1]
  402ce2:	f363 0883 	bfi	r8, r3, #2, #2
  402ce6:	f880 8001 	strb.w	r8, [r0, #1]
  402cea:	e7aa      	b.n	402c42 <udd_ep_abort+0x7e>
  402cec:	4770      	bx	lr
	if (NULL == ptr_job->call_trans) {
  402cee:	58f3      	ldr	r3, [r6, r3]
	ptr_job->busy = false;
  402cf0:	f36f 1404 	bfc	r4, #4, #1
  402cf4:	7444      	strb	r4, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  402cf6:	2b00      	cmp	r3, #0
  402cf8:	d0d5      	beq.n	402ca6 <udd_ep_abort+0xe2>
	if (Is_udd_endpoint_type_in(ep_num)) {
  402cfa:	f102 000c 	add.w	r0, r2, #12
  402cfe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  402d02:	4477      	add	r7, lr
	if (Is_udd_endpoint_type_in(ep_num)) {
  402d04:	0549      	lsls	r1, r1, #21
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  402d06:	eb06 0687 	add.w	r6, r6, r7, lsl #2
		ep_num |= USB_EP_DIR_IN;
  402d0a:	bf48      	it	mi
  402d0c:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  402d10:	68b1      	ldr	r1, [r6, #8]
  402d12:	2001      	movs	r0, #1
  402d14:	4798      	blx	r3
}
  402d16:	b008      	add	sp, #32
  402d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cpu_irq_enable();
  402d1c:	7019      	strb	r1, [r3, #0]
  402d1e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402d22:	b662      	cpsie	i
	if (b_dir_in) {
  402d24:	0605      	lsls	r5, r0, #24
  402d26:	f57f af6d 	bpl.w	402c04 <udd_ep_abort+0x40>
  402d2a:	0091      	lsls	r1, r2, #2
  402d2c:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  402d30:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
		if (Is_udd_transmit_ready(ep)) {
  402d34:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402d36:	06d8      	lsls	r0, r3, #27
  402d38:	d535      	bpl.n	402da6 <udd_ep_abort+0x1e2>
			udd_kill_data_in_fifo(ep,
  402d3a:	b32a      	cbz	r2, 402d88 <udd_ep_abort+0x1c4>
  402d3c:	2a03      	cmp	r2, #3
  402d3e:	d023      	beq.n	402d88 <udd_ep_abort+0x1c4>
  402d40:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402d42:	9301      	str	r3, [sp, #4]
  402d44:	9b01      	ldr	r3, [sp, #4]
  402d46:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402d4a:	9301      	str	r3, [sp, #4]
  402d4c:	9b01      	ldr	r3, [sp, #4]
  402d4e:	f023 0310 	bic.w	r3, r3, #16
  402d52:	9301      	str	r3, [sp, #4]
  402d54:	9b01      	ldr	r3, [sp, #4]
  402d56:	630b      	str	r3, [r1, #48]	; 0x30
  402d58:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402d5a:	06db      	lsls	r3, r3, #27
  402d5c:	d4fc      	bmi.n	402d58 <udd_ep_abort+0x194>
  402d5e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402d60:	06df      	lsls	r7, r3, #27
  402d62:	d4fc      	bmi.n	402d5e <udd_ep_abort+0x19a>
  402d64:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402d66:	9302      	str	r3, [sp, #8]
  402d68:	9b02      	ldr	r3, [sp, #8]
  402d6a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402d6e:	9302      	str	r3, [sp, #8]
  402d70:	9b02      	ldr	r3, [sp, #8]
  402d72:	f043 0310 	orr.w	r3, r3, #16
  402d76:	9302      	str	r3, [sp, #8]
  402d78:	9b02      	ldr	r3, [sp, #8]
  402d7a:	630b      	str	r3, [r1, #48]	; 0x30
  402d7c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402d7e:	06de      	lsls	r6, r3, #27
  402d80:	d5fc      	bpl.n	402d7c <udd_ep_abort+0x1b8>
  402d82:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402d84:	06dd      	lsls	r5, r3, #27
  402d86:	d5fc      	bpl.n	402d82 <udd_ep_abort+0x1be>
  402d88:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402d8a:	9303      	str	r3, [sp, #12]
  402d8c:	9b03      	ldr	r3, [sp, #12]
  402d8e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402d92:	9303      	str	r3, [sp, #12]
  402d94:	9b03      	ldr	r3, [sp, #12]
  402d96:	f023 0310 	bic.w	r3, r3, #16
  402d9a:	9303      	str	r3, [sp, #12]
  402d9c:	9b03      	ldr	r3, [sp, #12]
  402d9e:	630b      	str	r3, [r1, #48]	; 0x30
  402da0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402da2:	06d8      	lsls	r0, r3, #27
  402da4:	d4fc      	bmi.n	402da0 <udd_ep_abort+0x1dc>
		udd_ack_in_sent(ep);
  402da6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402da8:	9304      	str	r3, [sp, #16]
  402daa:	9b04      	ldr	r3, [sp, #16]
  402dac:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402db0:	9304      	str	r3, [sp, #16]
  402db2:	9b04      	ldr	r3, [sp, #16]
  402db4:	f023 0301 	bic.w	r3, r3, #1
  402db8:	9304      	str	r3, [sp, #16]
  402dba:	9b04      	ldr	r3, [sp, #16]
  402dbc:	630b      	str	r3, [r1, #48]	; 0x30
  402dbe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402dc0:	f013 0301 	ands.w	r3, r3, #1
  402dc4:	d1fb      	bne.n	402dbe <udd_ep_abort+0x1fa>
		udd_ep_job[ep - 1].bank = 0;
  402dc6:	1e57      	subs	r7, r2, #1
  402dc8:	ea4f 0e87 	mov.w	lr, r7, lsl #2
  402dcc:	4e06      	ldr	r6, [pc, #24]	; (402de8 <udd_ep_abort+0x224>)
  402dce:	eb0e 0107 	add.w	r1, lr, r7
  402dd2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
  402dd6:	7c48      	ldrb	r0, [r1, #17]
  402dd8:	f363 0083 	bfi	r0, r3, #2, #2
  402ddc:	7448      	strb	r0, [r1, #17]
  402dde:	e74f      	b.n	402c80 <udd_ep_abort+0xbc>
  402de0:	20000290 	.word	0x20000290
  402de4:	40034000 	.word	0x40034000
  402de8:	20001238 	.word	0x20001238

00402dec <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  402dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402df0:	6043      	str	r3, [r0, #4]
  402df2:	4770      	bx	lr

00402df4 <init>:
** \brief     Initializes the USB interface.
** \param     settings Pointer to the USB interface settings.
**
****************************************************************************************/
uint8_t init(void *ptr) //initialize communication
{
  402df4:	b508      	push	{r3, lr}
  /* Set result to false. */
  bool result = 0;
  /* USB stack, ASF */
  udc_start();
  402df6:	4b02      	ldr	r3, [pc, #8]	; (402e00 <init+0xc>)
  402df8:	4798      	blx	r3
  result = 1;
  /* return result */
  return result;
} /*** end of init ***/
  402dfa:	2001      	movs	r0, #1
  402dfc:	bd08      	pop	{r3, pc}
  402dfe:	bf00      	nop
  402e00:	00400c49 	.word	0x00400c49

00402e04 <available>:
** \brief     Return length of data in receive buffer.
** \return    Length of data in receive buffer.
**
****************************************************************************************/
uint8_t available()
{
  402e04:	b508      	push	{r3, lr}
  return udi_cdc_get_nb_received_data();
  402e06:	4b02      	ldr	r3, [pc, #8]	; (402e10 <available+0xc>)
  402e08:	4798      	blx	r3
} /*** end of available ***/
  402e0a:	b2c0      	uxtb	r0, r0
  402e0c:	bd08      	pop	{r3, pc}
  402e0e:	bf00      	nop
  402e10:	00400829 	.word	0x00400829

00402e14 <read>:
** \brief     Return char from receive buffer.
** \return    Return next uint8_t from buffer.
**
****************************************************************************************/
uint8_t read()
{
  402e14:	b508      	push	{r3, lr}
  return udi_cdc_getc();
  402e16:	4b02      	ldr	r3, [pc, #8]	; (402e20 <read+0xc>)
  402e18:	4798      	blx	r3
} /*** end of read ***/
  402e1a:	b2c0      	uxtb	r0, r0
  402e1c:	bd08      	pop	{r3, pc}
  402e1e:	bf00      	nop
  402e20:	00400881 	.word	0x00400881

00402e24 <write>:
** \brief     Write single char to interface.
** \return    Return result.
**
****************************************************************************************/
uint8_t write(const uint8_t *payload)
{
  402e24:	b500      	push	{lr}
  402e26:	b083      	sub	sp, #12
  402e28:	ab02      	add	r3, sp, #8
  402e2a:	f843 0d04 	str.w	r0, [r3, #-4]!
  return udi_cdc_write_buf(&payload, 1);
  402e2e:	4618      	mov	r0, r3
  402e30:	2101      	movs	r1, #1
  402e32:	4b03      	ldr	r3, [pc, #12]	; (402e40 <write+0x1c>)
  402e34:	4798      	blx	r3
} /*** end of write ***/
  402e36:	b2c0      	uxtb	r0, r0
  402e38:	b003      	add	sp, #12
  402e3a:	f85d fb04 	ldr.w	pc, [sp], #4
  402e3e:	bf00      	nop
  402e40:	00400b29 	.word	0x00400b29

00402e44 <printbuf>:
** \brief     Print buffer to interface
** \return    Return result.
**
****************************************************************************************/
uint8_t printbuf(uint8_t *bufPtr, uint16_t len)
{
  402e44:	b508      	push	{r3, lr}
  return udi_cdc_multi_write_buf(0, bufPtr, len);
  402e46:	460a      	mov	r2, r1
  402e48:	4b02      	ldr	r3, [pc, #8]	; (402e54 <printbuf+0x10>)
  402e4a:	4601      	mov	r1, r0
  402e4c:	2000      	movs	r0, #0
  402e4e:	4798      	blx	r3
} /*** end of printbuf ***/
  402e50:	b2c0      	uxtb	r0, r0
  402e52:	bd08      	pop	{r3, pc}
  402e54:	00400a05 	.word	0x00400a05

00402e58 <getComInterface>:
} /*** end of getComInterface ***/
  402e58:	4800      	ldr	r0, [pc, #0]	; (402e5c <getComInterface+0x4>)
  402e5a:	4770      	bx	lr
  402e5c:	200000f8 	.word	0x200000f8

00402e60 <udi_cdc_callback_rx_notify>:
** \brief     This is a callback function and it is called when we get new data.
**
****************************************************************************************/
void udi_cdc_callback_rx_notify(uint8_t port)
{
  if(comInterface.rxCallback != NULL)
  402e60:	4b02      	ldr	r3, [pc, #8]	; (402e6c <udi_cdc_callback_rx_notify+0xc>)
  402e62:	695b      	ldr	r3, [r3, #20]
  402e64:	b103      	cbz	r3, 402e68 <udi_cdc_callback_rx_notify+0x8>
  {
    comInterface.rxCallback(port);
  402e66:	4718      	bx	r3
  402e68:	4770      	bx	lr
  402e6a:	bf00      	nop
  402e6c:	200000f8 	.word	0x200000f8

00402e70 <udi_cdc_callback_tx_empty_notify>:
** \brief     This is a callback function and it is called when transmit buffer is empty.
**
****************************************************************************************/
void udi_cdc_callback_tx_empty_notify(uint8_t port)
{
  if(comInterface.txEmptyCallback != NULL)
  402e70:	4b02      	ldr	r3, [pc, #8]	; (402e7c <udi_cdc_callback_tx_empty_notify+0xc>)
  402e72:	699b      	ldr	r3, [r3, #24]
  402e74:	b103      	cbz	r3, 402e78 <udi_cdc_callback_tx_empty_notify+0x8>
  {
    comInterface.txEmptyCallback(port);
  402e76:	4718      	bx	r3
  402e78:	4770      	bx	lr
  402e7a:	bf00      	nop
  402e7c:	200000f8 	.word	0x200000f8

00402e80 <comTxEmptyCallback>:
** \brief     This is a callback function and it is called when tx buffer is empty.
**
****************************************************************************************/
void comTxEmptyCallback(uint8_t port)
{
  if(pdcAdcTransfetComplete)
  402e80:	4b6f      	ldr	r3, [pc, #444]	; (403040 <comTxEmptyCallback+0x1c0>)
  402e82:	781b      	ldrb	r3, [r3, #0]
  402e84:	2b00      	cmp	r3, #0
  402e86:	d060      	beq.n	402f4a <comTxEmptyCallback+0xca>
{
  402e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    if(settings->mode == BIN_MODE)
  402e8c:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 40305c <comTxEmptyCallback+0x1dc>
{
  402e90:	b087      	sub	sp, #28
    if(settings->mode == BIN_MODE)
  402e92:	f8db c000 	ldr.w	ip, [fp]
  402e96:	f89c 3016 	ldrb.w	r3, [ip, #22]
  402e9a:	2b01      	cmp	r3, #1
  402e9c:	d06f      	beq.n	402f7e <comTxEmptyCallback+0xfe>
  402e9e:	2400      	movs	r4, #0
  402ea0:	4667      	mov	r7, ip
  402ea2:	4d68      	ldr	r5, [pc, #416]	; (403044 <comTxEmptyCallback+0x1c4>)
            measurment += (adcPdcBuff[i][ch] & 0x0FFF);
          }
          measurment /= settings->averaging;
        }
        measurment *= 20000;
        measurment /= 4095;
  402ea4:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 403060 <comTxEmptyCallback+0x1e0>
  402ea8:	f105 0902 	add.w	r9, r5, #2
      for(uint8_t ch = 0; ((ch < 4) && settings->sequence[ch]); ch++)
  402eac:	193b      	adds	r3, r7, r4
  402eae:	7c9e      	ldrb	r6, [r3, #18]
  402eb0:	2e00      	cmp	r6, #0
  402eb2:	f000 80b1 	beq.w	403018 <comTxEmptyCallback+0x198>
        if(settings->averaging > 1)
  402eb6:	f8b7 e006 	ldrh.w	lr, [r7, #6]
        measurment = (adcPdcBuff[0][ch] & 0x0FFF);
  402eba:	f835 1f02 	ldrh.w	r1, [r5, #2]!
        if(settings->averaging > 1)
  402ebe:	f1be 0f01 	cmp.w	lr, #1
        measurment = (adcPdcBuff[0][ch] & 0x0FFF);
  402ec2:	f3c1 010b 	ubfx	r1, r1, #0, #12
        if(settings->averaging > 1)
  402ec6:	d911      	bls.n	402eec <comTxEmptyCallback+0x6c>
  402ec8:	462a      	mov	r2, r5
  402eca:	f1ae 0302 	sub.w	r3, lr, #2
  402ece:	b29b      	uxth	r3, r3
  402ed0:	1d20      	adds	r0, r4, #4
  402ed2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  402ed6:	eb09 0040 	add.w	r0, r9, r0, lsl #1
            measurment += (adcPdcBuff[i][ch] & 0x0FFF);
  402eda:	f832 3f08 	ldrh.w	r3, [r2, #8]!
  402ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
          for(uint16_t i = 1; i < settings->averaging; i++)
  402ee2:	4290      	cmp	r0, r2
            measurment += (adcPdcBuff[i][ch] & 0x0FFF);
  402ee4:	4419      	add	r1, r3
          for(uint16_t i = 1; i < settings->averaging; i++)
  402ee6:	d1f8      	bne.n	402eda <comTxEmptyCallback+0x5a>
          measurment /= settings->averaging;
  402ee8:	fbb1 f1fe 	udiv	r1, r1, lr
        measurment *= 20000;
  402eec:	f644 6320 	movw	r3, #20000	; 0x4e20
        measurment = 10000 - measurment;
  402ef0:	f242 7010 	movw	r0, #10000	; 0x2710
        measurment *= 20000;
  402ef4:	fb03 f101 	mul.w	r1, r3, r1
        measurment /= 4095;
  402ef8:	fba8 2301 	umull	r2, r3, r8, r1
  402efc:	1ac9      	subs	r1, r1, r3
  402efe:	eb03 0151 	add.w	r1, r3, r1, lsr #1
        settings->com->len = sprintf((char*)settings->com->buf, "CH%u: %+ 6.0fmV, ",
  402f02:	eba0 20d1 	sub.w	r0, r0, r1, lsr #11
  402f06:	4b50      	ldr	r3, [pc, #320]	; (403048 <comTxEmptyCallback+0x1c8>)
  402f08:	4798      	blx	r3
  402f0a:	a34b      	add	r3, pc, #300	; (adr r3, 403038 <comTxEmptyCallback+0x1b8>)
  402f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f10:	f8df a150 	ldr.w	sl, [pc, #336]	; 403064 <comTxEmptyCallback+0x1e4>
  402f14:	47d0      	blx	sl
  402f16:	69ff      	ldr	r7, [r7, #28]
  402f18:	4632      	mov	r2, r6
  402f1a:	f107 031c 	add.w	r3, r7, #28
  402f1e:	e9cd 0100 	strd	r0, r1, [sp]
  402f22:	4618      	mov	r0, r3
  402f24:	4949      	ldr	r1, [pc, #292]	; (40304c <comTxEmptyCallback+0x1cc>)
  402f26:	4b4a      	ldr	r3, [pc, #296]	; (403050 <comTxEmptyCallback+0x1d0>)
  402f28:	4798      	blx	r3
                                     settings->sequence[ch], (measurment - 10000.0));
        settings->com->printBuf(settings->com->buf, settings->com->len);
  402f2a:	f8db 3000 	ldr.w	r3, [fp]
        settings->com->len = sprintf((char*)settings->com->buf, "CH%u: %+ 6.0fmV, ",
  402f2e:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
        settings->com->printBuf(settings->com->buf, settings->com->len);
  402f32:	69d8      	ldr	r0, [r3, #28]
  402f34:	3401      	adds	r4, #1
  402f36:	6903      	ldr	r3, [r0, #16]
  402f38:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
  402f3c:	301c      	adds	r0, #28
  402f3e:	4798      	blx	r3
      for(uint8_t ch = 0; ((ch < 4) && settings->sequence[ch]); ch++)
  402f40:	2c04      	cmp	r4, #4
  402f42:	d003      	beq.n	402f4c <comTxEmptyCallback+0xcc>
  402f44:	f8db 7000 	ldr.w	r7, [fp]
  402f48:	e7b0      	b.n	402eac <comTxEmptyCallback+0x2c>
  402f4a:	4770      	bx	lr
  402f4c:	f8db c000 	ldr.w	ip, [fp]
      }
      settings->com->len = sprintf((char*)settings->com->buf, "\n\r");
  402f50:	2102      	movs	r1, #2
  402f52:	4a40      	ldr	r2, [pc, #256]	; (403054 <comTxEmptyCallback+0x1d4>)
  402f54:	f8dc 301c 	ldr.w	r3, [ip, #28]
  402f58:	8810      	ldrh	r0, [r2, #0]
  402f5a:	7892      	ldrb	r2, [r2, #2]
  402f5c:	8398      	strh	r0, [r3, #28]
  402f5e:	779a      	strb	r2, [r3, #30]
  402f60:	f883 111c 	strb.w	r1, [r3, #284]	; 0x11c
      settings->com->printBuf(settings->com->buf, settings->com->len);      
  402f64:	f8dc 001c 	ldr.w	r0, [ip, #28]
  402f68:	6903      	ldr	r3, [r0, #16]
  402f6a:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
  402f6e:	301c      	adds	r0, #28
  402f70:	4798      	blx	r3
    }
    pdcAdcTransfetComplete = false;
  402f72:	2300      	movs	r3, #0
  402f74:	4a32      	ldr	r2, [pc, #200]	; (403040 <comTxEmptyCallback+0x1c0>)
  402f76:	7013      	strb	r3, [r2, #0]
  }
}
  402f78:	b007      	add	sp, #28
  402f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(settings->averaging > 1)
  402f7e:	f8bc 3006 	ldrh.w	r3, [ip, #6]
  402f82:	2b01      	cmp	r3, #1
  402f84:	d94a      	bls.n	40301c <comTxEmptyCallback+0x19c>
        for(uint16_t j = 0; j < *settings->blockSize; j += settings->averaging)
  402f86:	f8dc 3018 	ldr.w	r3, [ip, #24]
  402f8a:	681b      	ldr	r3, [r3, #0]
  402f8c:	2b00      	cmp	r3, #0
  402f8e:	d0f0      	beq.n	402f72 <comTxEmptyCallback+0xf2>
  402f90:	2700      	movs	r7, #0
  402f92:	46ba      	mov	sl, r7
  402f94:	4e30      	ldr	r6, [pc, #192]	; (403058 <comTxEmptyCallback+0x1d8>)
            adcPdcBuff[0][ch] = measurment[ch] | (adcPdcBuff[0][ch] & 0xF000);
  402f96:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 403068 <comTxEmptyCallback+0x1e8>
        for(uint16_t j = 0; j < *settings->blockSize; j += settings->averaging)
  402f9a:	2400      	movs	r4, #0
  402f9c:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 403058 <comTxEmptyCallback+0x1d8>
  402fa0:	af02      	add	r7, sp, #8
  402fa2:	f10c 0912 	add.w	r9, ip, #18
          for(uint8_t ch = 0; ((ch < 4) && settings->sequence[ch]); ch++)
  402fa6:	f819 3b01 	ldrb.w	r3, [r9], #1
  402faa:	b313      	cbz	r3, 402ff2 <comTxEmptyCallback+0x172>
            for(uint16_t i = ch + j; i < (ch + j + settings->averaging); i += 4)
  402fac:	f8bc 5006 	ldrh.w	r5, [ip, #6]
  402fb0:	eb0a 0304 	add.w	r3, sl, r4
  402fb4:	1958      	adds	r0, r3, r5
  402fb6:	b29b      	uxth	r3, r3
  402fb8:	4298      	cmp	r0, r3
  402fba:	6839      	ldr	r1, [r7, #0]
  402fbc:	dd0b      	ble.n	402fd6 <comTxEmptyCallback+0x156>
              measurment[ch] += (adcPdcBuff[i][ch] & 0x0FFF);
  402fbe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  402fc2:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
            for(uint16_t i = ch + j; i < (ch + j + settings->averaging); i += 4)
  402fc6:	3304      	adds	r3, #4
  402fc8:	b29b      	uxth	r3, r3
              measurment[ch] += (adcPdcBuff[i][ch] & 0x0FFF);
  402fca:	f3c2 020b 	ubfx	r2, r2, #0, #12
            for(uint16_t i = ch + j; i < (ch + j + settings->averaging); i += 4)
  402fce:	4283      	cmp	r3, r0
              measurment[ch] += (adcPdcBuff[i][ch] & 0x0FFF);
  402fd0:	4411      	add	r1, r2
            for(uint16_t i = ch + j; i < (ch + j + settings->averaging); i += 4)
  402fd2:	dbf4      	blt.n	402fbe <comTxEmptyCallback+0x13e>
  402fd4:	6039      	str	r1, [r7, #0]
            measurment[ch] /= settings->averaging;
  402fd6:	fbb1 f1f5 	udiv	r1, r1, r5
            adcPdcBuff[0][ch] = measurment[ch] | (adcPdcBuff[0][ch] & 0xF000);
  402fda:	f8be 3000 	ldrh.w	r3, [lr]
  402fde:	3401      	adds	r4, #1
  402fe0:	ea03 0308 	and.w	r3, r3, r8
  402fe4:	430b      	orrs	r3, r1
          for(uint8_t ch = 0; ((ch < 4) && settings->sequence[ch]); ch++)
  402fe6:	2c04      	cmp	r4, #4
            measurment[ch] /= settings->averaging;
  402fe8:	f847 1b04 	str.w	r1, [r7], #4
            adcPdcBuff[0][ch] = measurment[ch] | (adcPdcBuff[0][ch] & 0xF000);
  402fec:	f82e 3b02 	strh.w	r3, [lr], #2
          for(uint8_t ch = 0; ((ch < 4) && settings->sequence[ch]); ch++)
  402ff0:	d1d9      	bne.n	402fa6 <comTxEmptyCallback+0x126>
          settings->com->printBuf((uint8_t *)adcPdcBuff, 4*2);
  402ff2:	f8dc 301c 	ldr.w	r3, [ip, #28]
  402ff6:	2108      	movs	r1, #8
  402ff8:	691b      	ldr	r3, [r3, #16]
  402ffa:	4817      	ldr	r0, [pc, #92]	; (403058 <comTxEmptyCallback+0x1d8>)
  402ffc:	4798      	blx	r3
        for(uint16_t j = 0; j < *settings->blockSize; j += settings->averaging)
  402ffe:	f8db c000 	ldr.w	ip, [fp]
  403002:	f8bc 3006 	ldrh.w	r3, [ip, #6]
  403006:	f8dc 2018 	ldr.w	r2, [ip, #24]
  40300a:	449a      	add	sl, r3
  40300c:	6813      	ldr	r3, [r2, #0]
  40300e:	fa1f fa8a 	uxth.w	sl, sl
  403012:	459a      	cmp	sl, r3
  403014:	d3c1      	bcc.n	402f9a <comTxEmptyCallback+0x11a>
  403016:	e7ac      	b.n	402f72 <comTxEmptyCallback+0xf2>
  403018:	46bc      	mov	ip, r7
  40301a:	e799      	b.n	402f50 <comTxEmptyCallback+0xd0>
        settings->com->printBuf((uint8_t *)adcPdcBuff, *(settings->blockSize)*2);
  40301c:	f8dc 2018 	ldr.w	r2, [ip, #24]
  403020:	f8dc 301c 	ldr.w	r3, [ip, #28]
  403024:	6811      	ldr	r1, [r2, #0]
  403026:	691b      	ldr	r3, [r3, #16]
  403028:	0049      	lsls	r1, r1, #1
  40302a:	b289      	uxth	r1, r1
  40302c:	480a      	ldr	r0, [pc, #40]	; (403058 <comTxEmptyCallback+0x1d8>)
  40302e:	4798      	blx	r3
  403030:	e79f      	b.n	402f72 <comTxEmptyCallback+0xf2>
  403032:	bf00      	nop
  403034:	f3af 8000 	nop.w
  403038:	00000000 	.word	0x00000000
  40303c:	40c38800 	.word	0x40c38800
  403040:	20001279 	.word	0x20001279
  403044:	200012e2 	.word	0x200012e2
  403048:	00404a1d 	.word	0x00404a1d
  40304c:	00409224 	.word	0x00409224
  403050:	00404ce9 	.word	0x00404ce9
  403054:	00409220 	.word	0x00409220
  403058:	200012e4 	.word	0x200012e4
  40305c:	2000127c 	.word	0x2000127c
  403060:	00100101 	.word	0x00100101
  403064:	004047a1 	.word	0x004047a1
  403068:	fffff000 	.word	0xfffff000

0040306c <coreConfigure>:
  if(master_settings != NULL)
  40306c:	b130      	cbz	r0, 40307c <coreConfigure+0x10>
    master_settings->blockSize = &adcPdcPacket.ul_size;
  40306e:	4b04      	ldr	r3, [pc, #16]	; (403080 <coreConfigure+0x14>)
    settings = master_settings;
  403070:	4904      	ldr	r1, [pc, #16]	; (403084 <coreConfigure+0x18>)
    uint32_t tmp = (uint32_t)master_settings->blockSize;
  403072:	6982      	ldr	r2, [r0, #24]
    settings = master_settings;
  403074:	6008      	str	r0, [r1, #0]
    master_settings->blockSize = &adcPdcPacket.ul_size;
  403076:	6183      	str	r3, [r0, #24]
    return TRUE;
  403078:	2001      	movs	r0, #1
    *master_settings->blockSize = tmp;
  40307a:	601a      	str	r2, [r3, #0]
} /*** end of core_configure ***/
  40307c:	4770      	bx	lr
  40307e:	bf00      	nop
  403080:	20001ef0 	.word	0x20001ef0
  403084:	2000127c 	.word	0x2000127c

00403088 <adcInit>:
{
  403088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(adc_init(ADC, sysclk_get_cpu_hz(), ADC_CLK, 0))
  40308c:	4d2e      	ldr	r5, [pc, #184]	; (403148 <adcInit+0xc0>)
    if(pmc_enable_periph_clk(ID_ADC))
  40308e:	4b2f      	ldr	r3, [pc, #188]	; (40314c <adcInit+0xc4>)
  403090:	201d      	movs	r0, #29
  403092:	4798      	blx	r3
    if(adc_init(ADC, sysclk_get_cpu_hz(), ADC_CLK, 0))
  403094:	4c2e      	ldr	r4, [pc, #184]	; (403150 <adcInit+0xc8>)
  403096:	4628      	mov	r0, r5
  403098:	2300      	movs	r3, #0
  40309a:	4a2e      	ldr	r2, [pc, #184]	; (403154 <adcInit+0xcc>)
  40309c:	492e      	ldr	r1, [pc, #184]	; (403158 <adcInit+0xd0>)
  40309e:	47a0      	blx	r4
    adc_configure_timing(ADC, 15, ADC_SETTLING_TIME_0, 0);
  4030a0:	2300      	movs	r3, #0
    ADC->ADC_CGR = ( (((ADC_GAIN_1 << 2) | ADC_GAIN_1) <<  4) |
  4030a2:	f245 5655 	movw	r6, #21845	; 0x5555
    adc_configure_timing(ADC, 15, ADC_SETTLING_TIME_0, 0);
  4030a6:	461a      	mov	r2, r3
  4030a8:	4628      	mov	r0, r5
  4030aa:	210f      	movs	r1, #15
  4030ac:	4c2b      	ldr	r4, [pc, #172]	; (40315c <adcInit+0xd4>)
  4030ae:	47a0      	blx	r4
    adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
  4030b0:	4628      	mov	r0, r5
  4030b2:	2100      	movs	r1, #0
  4030b4:	4b2a      	ldr	r3, [pc, #168]	; (403160 <adcInit+0xd8>)
  4030b6:	4798      	blx	r3
    adc_disable_all_channel(ADC);
  4030b8:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 40317c <adcInit+0xf4>
  4030bc:	4628      	mov	r0, r5
  4030be:	47c8      	blx	r9
    adc_set_bias_current(ADC, 1);
  4030c0:	4628      	mov	r0, r5
  4030c2:	2101      	movs	r1, #1
  4030c4:	4b27      	ldr	r3, [pc, #156]	; (403164 <adcInit+0xdc>)
  4030c6:	4798      	blx	r3
    adc_configure_trigger(ADC, ADC_TRIG_TIO_CH_0, 0);
  4030c8:	4628      	mov	r0, r5
  4030ca:	2200      	movs	r2, #0
  4030cc:	2103      	movs	r1, #3
  4030ce:	4b26      	ldr	r3, [pc, #152]	; (403168 <adcInit+0xe0>)
  4030d0:	4798      	blx	r3
  ch2ch[4] = DAQ_CH_4_ADC_CH;
  4030d2:	2002      	movs	r0, #2
  ch2ch[0] = 0;
  4030d4:	2400      	movs	r4, #0
  ch2ch[1] = DAQ_CH_1_ADC_CH;
  4030d6:	2104      	movs	r1, #4
  ch2ch[2] = DAQ_CH_2_ADC_CH;
  4030d8:	2206      	movs	r2, #6
    ADC->ADC_COR |= ( ADC_COR_DIFF0 | ADC_COR_DIFF1 | ADC_COR_DIFF2 | ADC_COR_DIFF3 |
  4030da:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    adc_enable_channel(ADC, ch2ch[settings->sequence[idx]]);
  4030dc:	462f      	mov	r7, r5
    ADC->ADC_COR |= ( ADC_COR_DIFF0 | ADC_COR_DIFF1 | ADC_COR_DIFF2 | ADC_COR_DIFF3 |
  4030de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
  4030e2:	64eb      	str	r3, [r5, #76]	; 0x4c
    ADC->ADC_CGR = ( (((ADC_GAIN_1 << 2) | ADC_GAIN_1) <<  4) |
  4030e4:	64ae      	str	r6, [r5, #72]	; 0x48
    ADC->ADC_EMR |= ADC_EMR_TAG;
  4030e6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  ch2ch[0] = 0;
  4030e8:	4e20      	ldr	r6, [pc, #128]	; (40316c <adcInit+0xe4>)
    ADC->ADC_EMR |= ADC_EMR_TAG;
  4030ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4030ee:	642b      	str	r3, [r5, #64]	; 0x40
    ADC->ADC_MR |= ADC_MR_ANACH;
  4030f0:	686b      	ldr	r3, [r5, #4]
  ch2ch[4] = DAQ_CH_4_ADC_CH;
  4030f2:	7130      	strb	r0, [r6, #4]
    ADC->ADC_MR |= ADC_MR_ANACH;
  4030f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  4030f8:	606b      	str	r3, [r5, #4]
  adc_disable_all_channel(ADC);
  4030fa:	4628      	mov	r0, r5
  ch2ch[0] = 0;
  4030fc:	7034      	strb	r4, [r6, #0]
  ch2ch[3] = DAQ_CH_3_ADC_CH;
  4030fe:	70f4      	strb	r4, [r6, #3]
  ch2ch[1] = DAQ_CH_1_ADC_CH;
  403100:	7071      	strb	r1, [r6, #1]
  ch2ch[2] = DAQ_CH_2_ADC_CH;
  403102:	70b2      	strb	r2, [r6, #2]
  adc_disable_all_channel(ADC);
  403104:	47c8      	blx	r9
  403106:	f8df 8078 	ldr.w	r8, [pc, #120]	; 403180 <adcInit+0xf8>
    adc_enable_channel(ADC, ch2ch[settings->sequence[idx]]);
  40310a:	4d19      	ldr	r5, [pc, #100]	; (403170 <adcInit+0xe8>)
  for(idx = 0; ((idx < 4) && settings->sequence[idx]); idx++)
  40310c:	f8d8 3000 	ldr.w	r3, [r8]
  403110:	4423      	add	r3, r4
  403112:	7c9b      	ldrb	r3, [r3, #18]
  403114:	3401      	adds	r4, #1
  403116:	b123      	cbz	r3, 403122 <adcInit+0x9a>
    adc_enable_channel(ADC, ch2ch[settings->sequence[idx]]);
  403118:	5cf1      	ldrb	r1, [r6, r3]
  40311a:	4638      	mov	r0, r7
  40311c:	47a8      	blx	r5
  for(idx = 0; ((idx < 4) && settings->sequence[idx]); idx++)
  40311e:	2c04      	cmp	r4, #4
  403120:	d1f4      	bne.n	40310c <adcInit+0x84>
    adc_enable_interrupt(ADC, ADC_IER_RXBUFF);
  403122:	4c14      	ldr	r4, [pc, #80]	; (403174 <adcInit+0xec>)
  403124:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403128:	4807      	ldr	r0, [pc, #28]	; (403148 <adcInit+0xc0>)
  40312a:	47a0      	blx	r4
    adc_enable_interrupt(ADC, ADC_IER_ENDRX);
  40312c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403130:	4805      	ldr	r0, [pc, #20]	; (403148 <adcInit+0xc0>)
  403132:	47a0      	blx	r4
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  403134:	2140      	movs	r1, #64	; 0x40
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  403136:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40313a:	4b0f      	ldr	r3, [pc, #60]	; (403178 <adcInit+0xf0>)
}
  40313c:	2001      	movs	r0, #1
  40313e:	f883 131d 	strb.w	r1, [r3, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  403142:	601a      	str	r2, [r3, #0]
  403144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403148:	40038000 	.word	0x40038000
  40314c:	00404325 	.word	0x00404325
  403150:	004012d1 	.word	0x004012d1
  403154:	00f42400 	.word	0x00f42400
  403158:	03d09000 	.word	0x03d09000
  40315c:	00401325 	.word	0x00401325
  403160:	00401305 	.word	0x00401305
  403164:	00401361 	.word	0x00401361
  403168:	00401315 	.word	0x00401315
  40316c:	20001274 	.word	0x20001274
  403170:	00401341 	.word	0x00401341
  403174:	00401355 	.word	0x00401355
  403178:	e000e100 	.word	0xe000e100
  40317c:	0040134d 	.word	0x0040134d
  403180:	2000127c 	.word	0x2000127c

00403184 <coreStart>:
{
  403184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(settings != NULL)
  403188:	4e3f      	ldr	r6, [pc, #252]	; (403288 <coreStart+0x104>)
{
  40318a:	b084      	sub	sp, #16
  if(settings != NULL)
  40318c:	6830      	ldr	r0, [r6, #0]
  40318e:	2800      	cmp	r0, #0
  403190:	d058      	beq.n	403244 <coreStart+0xc0>
  uint32_t ul_div = 0;
  403192:	f04f 0800 	mov.w	r8, #0
    tc_init(TC0, 0, TC_CMR_CPCTRG | TC_CMR_WAVE | TC_CMR_ACPA_CLEAR | TC_CMR_ACPC_SET);
  403196:	4d3d      	ldr	r5, [pc, #244]	; (40328c <coreStart+0x108>)
    if(pmc_enable_periph_clk(ID_TC0))
  403198:	2017      	movs	r0, #23
  40319a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 4032e4 <coreStart+0x160>
  40319e:	47c8      	blx	r9
    tc_init(TC0, 0, TC_CMR_CPCTRG | TC_CMR_WAVE | TC_CMR_ACPA_CLEAR | TC_CMR_ACPC_SET);
  4031a0:	4b3b      	ldr	r3, [pc, #236]	; (403290 <coreStart+0x10c>)
  4031a2:	4628      	mov	r0, r5
  4031a4:	f44f 22d8 	mov.w	r2, #442368	; 0x6c000
  4031a8:	4641      	mov	r1, r8
  4031aa:	4798      	blx	r3
  if(settings->acqusitionTime > 1000000)
  4031ac:	6833      	ldr	r3, [r6, #0]
  uint32_t ul_div = 0;
  4031ae:	f8cd 8008 	str.w	r8, [sp, #8]
  uint32_t ul_tc_clks = 0;
  4031b2:	f8cd 800c 	str.w	r8, [sp, #12]
  if(settings->acqusitionTime > 1000000)
  4031b6:	681f      	ldr	r7, [r3, #0]
  4031b8:	4c36      	ldr	r4, [pc, #216]	; (403294 <coreStart+0x110>)
  4031ba:	42a7      	cmp	r7, r4
  4031bc:	d945      	bls.n	40324a <coreStart+0xc6>
  adcPdc = adc_get_pdc_base(ADC);
  4031be:	4836      	ldr	r0, [pc, #216]	; (403298 <coreStart+0x114>)
  4031c0:	4b36      	ldr	r3, [pc, #216]	; (40329c <coreStart+0x118>)
  4031c2:	4798      	blx	r3
  4031c4:	4a36      	ldr	r2, [pc, #216]	; (4032a0 <coreStart+0x11c>)
  4031c6:	6010      	str	r0, [r2, #0]
  if(adcPdc != NULL)
  4031c8:	b148      	cbz	r0, 4031de <coreStart+0x5a>
    adcPdcPacket.ul_size = *settings->blockSize;
  4031ca:	6832      	ldr	r2, [r6, #0]
    adcPdcPacket.ul_addr = (uint32_t)&adcPdcBuff;
  4031cc:	4b35      	ldr	r3, [pc, #212]	; (4032a4 <coreStart+0x120>)
  4031ce:	4936      	ldr	r1, [pc, #216]	; (4032a8 <coreStart+0x124>)
    adcPdcPacket.ul_size = *settings->blockSize;
  4031d0:	6992      	ldr	r2, [r2, #24]
    adcPdcPacket.ul_addr = (uint32_t)&adcPdcBuff;
  4031d2:	6019      	str	r1, [r3, #0]
    adcPdcPacket.ul_size = *settings->blockSize;
  4031d4:	6814      	ldr	r4, [r2, #0]
    pdc_enable_transfer(adcPdc, PERIPH_PTCR_RXTEN);
  4031d6:	2101      	movs	r1, #1
  4031d8:	4a34      	ldr	r2, [pc, #208]	; (4032ac <coreStart+0x128>)
    adcPdcPacket.ul_size = *settings->blockSize;
  4031da:	605c      	str	r4, [r3, #4]
    pdc_enable_transfer(adcPdc, PERIPH_PTCR_RXTEN);
  4031dc:	4790      	blx	r2
  daccPdc = dacc_get_pdc_base(DACC);
  4031de:	4834      	ldr	r0, [pc, #208]	; (4032b0 <coreStart+0x12c>)
  4031e0:	4b34      	ldr	r3, [pc, #208]	; (4032b4 <coreStart+0x130>)
  4031e2:	4798      	blx	r3
  4031e4:	4a34      	ldr	r2, [pc, #208]	; (4032b8 <coreStart+0x134>)
  4031e6:	6010      	str	r0, [r2, #0]
  if(daccPdc != NULL)
  4031e8:	b140      	cbz	r0, 4031fc <coreStart+0x78>
    daccPdcPacket.ul_size = DACC_BUFFER_SIZE;
  4031ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    daccPdcPacket.ul_addr = (uint32_t)&daccPdcBuff;
  4031ee:	4b33      	ldr	r3, [pc, #204]	; (4032bc <coreStart+0x138>)
  4031f0:	4d33      	ldr	r5, [pc, #204]	; (4032c0 <coreStart+0x13c>)
    pdc_enable_transfer(daccPdc, PERIPH_PTCR_TXTEN);
  4031f2:	4611      	mov	r1, r2
  4031f4:	4c2d      	ldr	r4, [pc, #180]	; (4032ac <coreStart+0x128>)
    daccPdcPacket.ul_size = DACC_BUFFER_SIZE;
  4031f6:	605a      	str	r2, [r3, #4]
    daccPdcPacket.ul_addr = (uint32_t)&daccPdcBuff;
  4031f8:	601d      	str	r5, [r3, #0]
    pdc_enable_transfer(daccPdc, PERIPH_PTCR_TXTEN);
  4031fa:	47a0      	blx	r4
      if(!adcInit())
  4031fc:	4b31      	ldr	r3, [pc, #196]	; (4032c4 <coreStart+0x140>)
  4031fe:	4798      	blx	r3
  pmc_enable_periph_clk(ID_DACC); // enable clock for DACC
  403200:	201e      	movs	r0, #30
  403202:	47c8      	blx	r9
  dacc_reset(DACC);
  403204:	482a      	ldr	r0, [pc, #168]	; (4032b0 <coreStart+0x12c>)
  403206:	4b30      	ldr	r3, [pc, #192]	; (4032c8 <coreStart+0x144>)
  403208:	4798      	blx	r3
  dacc_set_transfer_mode(DACC, 0); 
  40320a:	2100      	movs	r1, #0
  40320c:	4b2f      	ldr	r3, [pc, #188]	; (4032cc <coreStart+0x148>)
  40320e:	4828      	ldr	r0, [pc, #160]	; (4032b0 <coreStart+0x12c>)
  403210:	4798      	blx	r3
  dacc_set_power_save(DACC, 0, 0);
  403212:	2200      	movs	r2, #0
  403214:	4b2e      	ldr	r3, [pc, #184]	; (4032d0 <coreStart+0x14c>)
  403216:	4611      	mov	r1, r2
  403218:	4825      	ldr	r0, [pc, #148]	; (4032b0 <coreStart+0x12c>)
  40321a:	4798      	blx	r3
  dacc_set_channel_selection(DACC, DACC_CHANNEL0);
  40321c:	4c2d      	ldr	r4, [pc, #180]	; (4032d4 <coreStart+0x150>)
  40321e:	2100      	movs	r1, #0
  403220:	4823      	ldr	r0, [pc, #140]	; (4032b0 <coreStart+0x12c>)
  403222:	47a0      	blx	r4
  dacc_set_channel_selection(DACC, DACC_CHANNEL1);
  403224:	2101      	movs	r1, #1
  403226:	4822      	ldr	r0, [pc, #136]	; (4032b0 <coreStart+0x12c>)
  403228:	47a0      	blx	r4
  dacc_enable_channel(DACC, DACC_CHANNEL0);
  40322a:	4c2b      	ldr	r4, [pc, #172]	; (4032d8 <coreStart+0x154>)
  40322c:	2100      	movs	r1, #0
  40322e:	4820      	ldr	r0, [pc, #128]	; (4032b0 <coreStart+0x12c>)
  403230:	47a0      	blx	r4
  dacc_enable_channel(DACC, DACC_CHANNEL1); 
  403232:	2101      	movs	r1, #1
  403234:	481e      	ldr	r0, [pc, #120]	; (4032b0 <coreStart+0x12c>)
  403236:	47a0      	blx	r4
  dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
  403238:	f44f 7185 	mov.w	r1, #266	; 0x10a
  40323c:	481c      	ldr	r0, [pc, #112]	; (4032b0 <coreStart+0x12c>)
  40323e:	4b27      	ldr	r3, [pc, #156]	; (4032dc <coreStart+0x158>)
  403240:	4798      	blx	r3
  403242:	2001      	movs	r0, #1
} /*** end of coreInit ***/
  403244:	b004      	add	sp, #16
  403246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    timerFreq = 1000000 / settings->acqusitionTime;
  40324a:	fbb4 f7f7 	udiv	r7, r4, r7
    if(!tc_find_mck_divisor(timerFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk))
  40324e:	4c24      	ldr	r4, [pc, #144]	; (4032e0 <coreStart+0x15c>)
  403250:	4638      	mov	r0, r7
  403252:	9400      	str	r4, [sp, #0]
  403254:	4621      	mov	r1, r4
  403256:	ab03      	add	r3, sp, #12
  403258:	aa02      	add	r2, sp, #8
  40325a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 4032e8 <coreStart+0x164>
  40325e:	47d0      	blx	sl
  403260:	2800      	cmp	r0, #0
  403262:	d0ac      	beq.n	4031be <coreStart+0x3a>
    TC0->TC_CHANNEL[0].TC_CMR = (TC0->TC_CHANNEL[0].TC_CMR & 0xFFFFFFF8) | ul_tc_clks;
  403264:	686b      	ldr	r3, [r5, #4]
  403266:	9a03      	ldr	r2, [sp, #12]
  403268:	f023 0307 	bic.w	r3, r3, #7
  40326c:	4313      	orrs	r3, r2
  40326e:	606b      	str	r3, [r5, #4]
    TC0->TC_CHANNEL[0].TC_RA = ((ul_sysclk / ul_div) / timerFreq) / 2;
  403270:	9b02      	ldr	r3, [sp, #8]
  403272:	fbb4 f4f3 	udiv	r4, r4, r3
  403276:	fbb4 f4f7 	udiv	r4, r4, r7
  40327a:	0863      	lsrs	r3, r4, #1
  40327c:	616b      	str	r3, [r5, #20]
	  TC0->TC_CHANNEL[0].TC_RC = ((ul_sysclk / ul_div) / timerFreq) / 1;
  40327e:	61ec      	str	r4, [r5, #28]
    TC0->TC_CHANNEL[0].TC_CV = 0;
  403280:	f8c5 8010 	str.w	r8, [r5, #16]
  403284:	e79b      	b.n	4031be <coreStart+0x3a>
  403286:	bf00      	nop
  403288:	2000127c 	.word	0x2000127c
  40328c:	40010000 	.word	0x40010000
  403290:	004043e1 	.word	0x004043e1
  403294:	000f4240 	.word	0x000f4240
  403298:	40038000 	.word	0x40038000
  40329c:	00401375 	.word	0x00401375
  4032a0:	20001ee4 	.word	0x20001ee4
  4032a4:	20001eec 	.word	0x20001eec
  4032a8:	200012e4 	.word	0x200012e4
  4032ac:	0040421d 	.word	0x0040421d
  4032b0:	4003c000 	.word	0x4003c000
  4032b4:	00404195 	.word	0x00404195
  4032b8:	20001ee8 	.word	0x20001ee8
  4032bc:	200012dc 	.word	0x200012dc
  4032c0:	20001ae4 	.word	0x20001ae4
  4032c4:	00403089 	.word	0x00403089
  4032c8:	0040416d 	.word	0x0040416d
  4032cc:	00404175 	.word	0x00404175
  4032d0:	004041b5 	.word	0x004041b5
  4032d4:	0040419d 	.word	0x0040419d
  4032d8:	004041e5 	.word	0x004041e5
  4032dc:	004041f9 	.word	0x004041f9
  4032e0:	03d09000 	.word	0x03d09000
  4032e4:	00404325 	.word	0x00404325
  4032e8:	00404409 	.word	0x00404409

004032ec <adcSetGain>:
{
  4032ec:	b430      	push	{r4, r5}
  ADC->ADC_CGR = ( (((settings->ADCgain[1] << 2) | settings->ADCgain[1]) << 12) |
  4032ee:	4b0c      	ldr	r3, [pc, #48]	; (403320 <adcSetGain+0x34>)
  4032f0:	4d0c      	ldr	r5, [pc, #48]	; (403324 <adcSetGain+0x38>)
  4032f2:	681c      	ldr	r4, [r3, #0]
  4032f4:	7b62      	ldrb	r2, [r4, #13]
                   (((settings->ADCgain[2] << 2) | settings->ADCgain[2]) <<  0) );
  4032f6:	7ba3      	ldrb	r3, [r4, #14]
                   (((settings->ADCgain[0] << 2) | settings->ADCgain[0]) <<  8) |
  4032f8:	7b21      	ldrb	r1, [r4, #12]
  ADC->ADC_CGR = ( (((settings->ADCgain[1] << 2) | settings->ADCgain[1]) << 12) |
  4032fa:	ea42 0082 	orr.w	r0, r2, r2, lsl #2
                   (((settings->ADCgain[3] << 2) | settings->ADCgain[3]) <<  4) |
  4032fe:	ea43 0383 	orr.w	r3, r3, r3, lsl #2
  403302:	7be2      	ldrb	r2, [r4, #15]
  403304:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
                   (((settings->ADCgain[0] << 2) | settings->ADCgain[0]) <<  8) |
  403308:	ea41 0181 	orr.w	r1, r1, r1, lsl #2
                   (((settings->ADCgain[3] << 2) | settings->ADCgain[3]) <<  4) |
  40330c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  403310:	ea42 0282 	orr.w	r2, r2, r2, lsl #2
  403314:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  ADC->ADC_CGR = ( (((settings->ADCgain[1] << 2) | settings->ADCgain[1]) << 12) |
  403318:	64ab      	str	r3, [r5, #72]	; 0x48
} /*** end of DacSetVal ***/
  40331a:	bc30      	pop	{r4, r5}
  40331c:	4770      	bx	lr
  40331e:	bf00      	nop
  403320:	2000127c 	.word	0x2000127c
  403324:	40038000 	.word	0x40038000

00403328 <adcSetRes>:
  if(settings->ADClowRes) ADC->ADC_MR |= ADC_MR_LOWRES;
  403328:	4b07      	ldr	r3, [pc, #28]	; (403348 <adcSetRes+0x20>)
  40332a:	4a08      	ldr	r2, [pc, #32]	; (40334c <adcSetRes+0x24>)
  40332c:	681b      	ldr	r3, [r3, #0]
  40332e:	7c1b      	ldrb	r3, [r3, #16]
  403330:	b923      	cbnz	r3, 40333c <adcSetRes+0x14>
  else                    ADC->ADC_MR &= ADC_MR_LOWRES;
  403332:	6853      	ldr	r3, [r2, #4]
  403334:	f003 0310 	and.w	r3, r3, #16
  403338:	6053      	str	r3, [r2, #4]
  40333a:	4770      	bx	lr
  if(settings->ADClowRes) ADC->ADC_MR |= ADC_MR_LOWRES;
  40333c:	6853      	ldr	r3, [r2, #4]
  40333e:	f043 0310 	orr.w	r3, r3, #16
  403342:	6053      	str	r3, [r2, #4]
  403344:	4770      	bx	lr
  403346:	bf00      	nop
  403348:	2000127c 	.word	0x2000127c
  40334c:	40038000 	.word	0x40038000

00403350 <ADC_Handler>:
{
  403350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t status = adc_get_status(ADC);
  403354:	483f      	ldr	r0, [pc, #252]	; (403454 <ADC_Handler+0x104>)
{
  403356:	b084      	sub	sp, #16
  uint32_t status = adc_get_status(ADC);
  403358:	4b3f      	ldr	r3, [pc, #252]	; (403458 <ADC_Handler+0x108>)
  40335a:	4798      	blx	r3
  if((status & ADC_ISR_RXBUFF) == ADC_ISR_RXBUFF)
  40335c:	00c2      	lsls	r2, r0, #3
  uint32_t status = adc_get_status(ADC);
  40335e:	4604      	mov	r4, r0
  if((status & ADC_ISR_RXBUFF) == ADC_ISR_RXBUFF)
  403360:	d50b      	bpl.n	40337a <ADC_Handler+0x2a>
    if(!pdcAdcTransfetComplete)
  403362:	4d3e      	ldr	r5, [pc, #248]	; (40345c <ADC_Handler+0x10c>)
  403364:	782a      	ldrb	r2, [r5, #0]
  403366:	b9ba      	cbnz	r2, 403398 <ADC_Handler+0x48>
      pdc_rx_init(adcPdc, &adcPdcPacket, NULL);
  403368:	4d3d      	ldr	r5, [pc, #244]	; (403460 <ADC_Handler+0x110>)
  40336a:	493e      	ldr	r1, [pc, #248]	; (403464 <ADC_Handler+0x114>)
  40336c:	6828      	ldr	r0, [r5, #0]
  40336e:	4b3e      	ldr	r3, [pc, #248]	; (403468 <ADC_Handler+0x118>)
  403370:	4798      	blx	r3
      pdc_enable_transfer(adcPdc, PERIPH_PTCR_RXTEN);
  403372:	6828      	ldr	r0, [r5, #0]
  403374:	2101      	movs	r1, #1
  403376:	4b3d      	ldr	r3, [pc, #244]	; (40346c <ADC_Handler+0x11c>)
  403378:	4798      	blx	r3
  if((status & ADC_ISR_ENDRX) == ADC_ISR_ENDRX)
  40337a:	0123      	lsls	r3, r4, #4
  40337c:	d509      	bpl.n	403392 <ADC_Handler+0x42>
    pdcAdcTransfetComplete = true;
  40337e:	2101      	movs	r1, #1
    settings->com->printBuf(syncBytes, 2);
  403380:	4b3b      	ldr	r3, [pc, #236]	; (403470 <ADC_Handler+0x120>)
    pdcAdcTransfetComplete = true;
  403382:	4a36      	ldr	r2, [pc, #216]	; (40345c <ADC_Handler+0x10c>)
    settings->com->printBuf(syncBytes, 2);
  403384:	681b      	ldr	r3, [r3, #0]
    pdcAdcTransfetComplete = true;
  403386:	7011      	strb	r1, [r2, #0]
    settings->com->printBuf(syncBytes, 2);
  403388:	69db      	ldr	r3, [r3, #28]
  40338a:	2102      	movs	r1, #2
  40338c:	691b      	ldr	r3, [r3, #16]
  40338e:	4839      	ldr	r0, [pc, #228]	; (403474 <ADC_Handler+0x124>)
  403390:	4798      	blx	r3
}
  403392:	b004      	add	sp, #16
  403394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pdcAdcTransfetComplete = false;
  403398:	f04f 0800 	mov.w	r8, #0
  tc_stop(TC0, 0);
  40339c:	4e36      	ldr	r6, [pc, #216]	; (403478 <ADC_Handler+0x128>)
  40339e:	4b37      	ldr	r3, [pc, #220]	; (40347c <ADC_Handler+0x12c>)
  4033a0:	4641      	mov	r1, r8
  4033a2:	4630      	mov	r0, r6
  4033a4:	4798      	blx	r3
    adc_disable_interrupt(ADC, ADC_IER_RXBUFF);
  4033a6:	4f36      	ldr	r7, [pc, #216]	; (403480 <ADC_Handler+0x130>)
  4033a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4033ac:	4829      	ldr	r0, [pc, #164]	; (403454 <ADC_Handler+0x104>)
      settings->acqusitionTime = 1000000;
  4033ae:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 403470 <ADC_Handler+0x120>
    adc_disable_interrupt(ADC, ADC_IER_RXBUFF);
  4033b2:	47b8      	blx	r7
    adc_disable_interrupt(ADC, ADC_IER_ENDRX);
  4033b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4033b8:	4826      	ldr	r0, [pc, #152]	; (403454 <ADC_Handler+0x104>)
  4033ba:	47b8      	blx	r7
      settings->acqusitionTime = 1000000;
  4033bc:	f8d9 7000 	ldr.w	r7, [r9]
  4033c0:	4b30      	ldr	r3, [pc, #192]	; (403484 <ADC_Handler+0x134>)
      pdcAdcTransfetComplete = false;
  4033c2:	f885 8000 	strb.w	r8, [r5]
      settings->acqusitionTime = 1000000;
  4033c6:	603b      	str	r3, [r7, #0]
  uint32_t ul_div = 0;
  4033c8:	f8cd 8008 	str.w	r8, [sp, #8]
  uint32_t ul_tc_clks = 0;
  4033cc:	f8cd 800c 	str.w	r8, [sp, #12]
  if(settings->acqusitionTime > 1000000)
  4033d0:	683d      	ldr	r5, [r7, #0]
  4033d2:	429d      	cmp	r5, r3
  4033d4:	d81d      	bhi.n	403412 <ADC_Handler+0xc2>
    timerFreq = 1000000 / settings->acqusitionTime;
  4033d6:	fbb3 f7f5 	udiv	r7, r3, r5
    if(!tc_find_mck_divisor(timerFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk))
  4033da:	4d2b      	ldr	r5, [pc, #172]	; (403488 <ADC_Handler+0x138>)
  4033dc:	4638      	mov	r0, r7
  4033de:	9500      	str	r5, [sp, #0]
  4033e0:	4629      	mov	r1, r5
  4033e2:	ab03      	add	r3, sp, #12
  4033e4:	aa02      	add	r2, sp, #8
  4033e6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 403490 <ADC_Handler+0x140>
  4033ea:	47d0      	blx	sl
  4033ec:	b178      	cbz	r0, 40340e <ADC_Handler+0xbe>
    TC0->TC_CHANNEL[0].TC_CMR = (TC0->TC_CHANNEL[0].TC_CMR & 0xFFFFFFF8) | ul_tc_clks;
  4033ee:	6873      	ldr	r3, [r6, #4]
  4033f0:	9a03      	ldr	r2, [sp, #12]
  4033f2:	f023 0307 	bic.w	r3, r3, #7
  4033f6:	4313      	orrs	r3, r2
  4033f8:	6073      	str	r3, [r6, #4]
    TC0->TC_CHANNEL[0].TC_RA = ((ul_sysclk / ul_div) / timerFreq) / 2;
  4033fa:	9b02      	ldr	r3, [sp, #8]
  4033fc:	fbb5 f5f3 	udiv	r5, r5, r3
  403400:	fbb5 f5f7 	udiv	r5, r5, r7
  403404:	086b      	lsrs	r3, r5, #1
  403406:	6173      	str	r3, [r6, #20]
	  TC0->TC_CHANNEL[0].TC_RC = ((ul_sysclk / ul_div) / timerFreq) / 1;
  403408:	61f5      	str	r5, [r6, #28]
    TC0->TC_CHANNEL[0].TC_CV = 0;
  40340a:	f8c6 8010 	str.w	r8, [r6, #16]
  40340e:	f8d9 7000 	ldr.w	r7, [r9]
      settings->com->len = sprintf((char*)settings->com->buf, "Sample rate to high!\n\r");
  403412:	f04f 0c16 	mov.w	ip, #22
  403416:	f8d7 e01c 	ldr.w	lr, [r7, #28]
  40341a:	4d1c      	ldr	r5, [pc, #112]	; (40348c <ADC_Handler+0x13c>)
  40341c:	f88e c11c 	strb.w	ip, [lr, #284]	; 0x11c
  403420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403422:	f8ce 001c 	str.w	r0, [lr, #28]
  403426:	f8ce 1020 	str.w	r1, [lr, #32]
  40342a:	f8ce 2024 	str.w	r2, [lr, #36]	; 0x24
  40342e:	6828      	ldr	r0, [r5, #0]
  403430:	88a9      	ldrh	r1, [r5, #4]
  403432:	79aa      	ldrb	r2, [r5, #6]
  403434:	f8ce 3028 	str.w	r3, [lr, #40]	; 0x28
  403438:	f8ce 002c 	str.w	r0, [lr, #44]	; 0x2c
  40343c:	f8ae 1030 	strh.w	r1, [lr, #48]	; 0x30
  403440:	f88e 2032 	strb.w	r2, [lr, #50]	; 0x32
      settings->com->printBuf(settings->com->buf, settings->com->len);
  403444:	69f8      	ldr	r0, [r7, #28]
  403446:	6903      	ldr	r3, [r0, #16]
  403448:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
  40344c:	301c      	adds	r0, #28
  40344e:	4798      	blx	r3
  403450:	e793      	b.n	40337a <ADC_Handler+0x2a>
  403452:	bf00      	nop
  403454:	40038000 	.word	0x40038000
  403458:	0040135d 	.word	0x0040135d
  40345c:	20001279 	.word	0x20001279
  403460:	20001ee4 	.word	0x20001ee4
  403464:	20001eec 	.word	0x20001eec
  403468:	00404205 	.word	0x00404205
  40346c:	0040421d 	.word	0x0040421d
  403470:	2000127c 	.word	0x2000127c
  403474:	20000218 	.word	0x20000218
  403478:	40010000 	.word	0x40010000
  40347c:	00404401 	.word	0x00404401
  403480:	00401359 	.word	0x00401359
  403484:	000f4240 	.word	0x000f4240
  403488:	03d09000 	.word	0x03d09000
  40348c:	0040920c 	.word	0x0040920c
  403490:	00404409 	.word	0x00404409

00403494 <coreSetDacVal>:
  uint16_t status = dacc_get_interrupt_status(DACC);
  403494:	4b0d      	ldr	r3, [pc, #52]	; (4034cc <coreSetDacVal+0x38>)
{
  403496:	b570      	push	{r4, r5, r6, lr}
  uint16_t status = dacc_get_interrupt_status(DACC);
  403498:	480d      	ldr	r0, [pc, #52]	; (4034d0 <coreSetDacVal+0x3c>)
  40349a:	4798      	blx	r3
  if ((status & DACC_ISR_TXRDY) == DACC_ISR_TXRDY)
  40349c:	07c3      	lsls	r3, r0, #31
  40349e:	d513      	bpl.n	4034c8 <coreSetDacVal+0x34>
      dacc_write_conversion_data(DACC, settings->DACval[i]);
  4034a0:	4d0c      	ldr	r5, [pc, #48]	; (4034d4 <coreSetDacVal+0x40>)
      dacc_set_channel_selection(DACC, i); //first channel 0, then channel 1      
  4034a2:	4e0d      	ldr	r6, [pc, #52]	; (4034d8 <coreSetDacVal+0x44>)
  4034a4:	2100      	movs	r1, #0
  4034a6:	480a      	ldr	r0, [pc, #40]	; (4034d0 <coreSetDacVal+0x3c>)
  4034a8:	47b0      	blx	r6
      dacc_write_conversion_data(DACC, settings->DACval[i]);
  4034aa:	682b      	ldr	r3, [r5, #0]
  4034ac:	4c0b      	ldr	r4, [pc, #44]	; (4034dc <coreSetDacVal+0x48>)
  4034ae:	8919      	ldrh	r1, [r3, #8]
  4034b0:	4807      	ldr	r0, [pc, #28]	; (4034d0 <coreSetDacVal+0x3c>)
  4034b2:	47a0      	blx	r4
      dacc_set_channel_selection(DACC, i); //first channel 0, then channel 1      
  4034b4:	2101      	movs	r1, #1
  4034b6:	4806      	ldr	r0, [pc, #24]	; (4034d0 <coreSetDacVal+0x3c>)
  4034b8:	47b0      	blx	r6
      dacc_write_conversion_data(DACC, settings->DACval[i]);
  4034ba:	682b      	ldr	r3, [r5, #0]
  4034bc:	4804      	ldr	r0, [pc, #16]	; (4034d0 <coreSetDacVal+0x3c>)
  4034be:	8959      	ldrh	r1, [r3, #10]
  4034c0:	4623      	mov	r3, r4
} /*** end of DacSetVal ***/
  4034c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      dacc_write_conversion_data(DACC, settings->DACval[i]);
  4034c6:	4718      	bx	r3
  4034c8:	bd70      	pop	{r4, r5, r6, pc}
  4034ca:	bf00      	nop
  4034cc:	0040418d 	.word	0x0040418d
  4034d0:	4003c000 	.word	0x4003c000
  4034d4:	2000127c 	.word	0x2000127c
  4034d8:	0040419d 	.word	0x0040419d
  4034dc:	00404191 	.word	0x00404191

004034e0 <timerSetTimePeriod>:
{
  4034e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t ul_div = 0;
  4034e2:	2500      	movs	r5, #0
  if(settings->acqusitionTime > 1000000)
  4034e4:	4b15      	ldr	r3, [pc, #84]	; (40353c <timerSetTimePeriod+0x5c>)
{
  4034e6:	b085      	sub	sp, #20
  if(settings->acqusitionTime > 1000000)
  4034e8:	681b      	ldr	r3, [r3, #0]
  uint32_t ul_div = 0;
  4034ea:	9502      	str	r5, [sp, #8]
  uint32_t ul_tc_clks = 0;
  4034ec:	9503      	str	r5, [sp, #12]
  if(settings->acqusitionTime > 1000000)
  4034ee:	681e      	ldr	r6, [r3, #0]
  4034f0:	4c13      	ldr	r4, [pc, #76]	; (403540 <timerSetTimePeriod+0x60>)
  4034f2:	42a6      	cmp	r6, r4
  4034f4:	d80a      	bhi.n	40350c <timerSetTimePeriod+0x2c>
    timerFreq = 1000000 / settings->acqusitionTime;
  4034f6:	fbb4 f6f6 	udiv	r6, r4, r6
    if(!tc_find_mck_divisor(timerFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk))
  4034fa:	4c12      	ldr	r4, [pc, #72]	; (403544 <timerSetTimePeriod+0x64>)
  4034fc:	4630      	mov	r0, r6
  4034fe:	9400      	str	r4, [sp, #0]
  403500:	4621      	mov	r1, r4
  403502:	ab03      	add	r3, sp, #12
  403504:	aa02      	add	r2, sp, #8
  403506:	4f10      	ldr	r7, [pc, #64]	; (403548 <timerSetTimePeriod+0x68>)
  403508:	47b8      	blx	r7
  40350a:	b910      	cbnz	r0, 403512 <timerSetTimePeriod+0x32>
{
  40350c:	2000      	movs	r0, #0
} /*** end of timer_set_compare_time ***/
  40350e:	b005      	add	sp, #20
  403510:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TC0->TC_CHANNEL[0].TC_CMR = (TC0->TC_CHANNEL[0].TC_CMR & 0xFFFFFFF8) | ul_tc_clks;
  403512:	4b0e      	ldr	r3, [pc, #56]	; (40354c <timerSetTimePeriod+0x6c>)
  403514:	9903      	ldr	r1, [sp, #12]
  403516:	685a      	ldr	r2, [r3, #4]
    TC0->TC_CHANNEL[0].TC_CV = 0;
  403518:	2001      	movs	r0, #1
    TC0->TC_CHANNEL[0].TC_CMR = (TC0->TC_CHANNEL[0].TC_CMR & 0xFFFFFFF8) | ul_tc_clks;
  40351a:	f022 0207 	bic.w	r2, r2, #7
  40351e:	430a      	orrs	r2, r1
  403520:	605a      	str	r2, [r3, #4]
    TC0->TC_CHANNEL[0].TC_RA = ((ul_sysclk / ul_div) / timerFreq) / 2;
  403522:	9a02      	ldr	r2, [sp, #8]
  403524:	fbb4 f4f2 	udiv	r4, r4, r2
  403528:	fbb4 f4f6 	udiv	r4, r4, r6
  40352c:	fa24 f200 	lsr.w	r2, r4, r0
  403530:	615a      	str	r2, [r3, #20]
	  TC0->TC_CHANNEL[0].TC_RC = ((ul_sysclk / ul_div) / timerFreq) / 1;
  403532:	61dc      	str	r4, [r3, #28]
    TC0->TC_CHANNEL[0].TC_CV = 0;
  403534:	611d      	str	r5, [r3, #16]
} /*** end of timer_set_compare_time ***/
  403536:	b005      	add	sp, #20
  403538:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40353a:	bf00      	nop
  40353c:	2000127c 	.word	0x2000127c
  403540:	000f4240 	.word	0x000f4240
  403544:	03d09000 	.word	0x03d09000
  403548:	00404409 	.word	0x00404409
  40354c:	40010000 	.word	0x40010000

00403550 <timerStart>:
{
  403550:	b570      	push	{r4, r5, r6, lr}
    adc_enable_interrupt(ADC, ADC_IER_RXBUFF);
  403552:	4d0b      	ldr	r5, [pc, #44]	; (403580 <timerStart+0x30>)
  403554:	4c0b      	ldr	r4, [pc, #44]	; (403584 <timerStart+0x34>)
  403556:	4628      	mov	r0, r5
  403558:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40355c:	47a0      	blx	r4
    adc_enable_interrupt(ADC, ADC_IER_ENDRX);
  40355e:	4628      	mov	r0, r5
  403560:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403564:	47a0      	blx	r4
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  403566:	2040      	movs	r0, #64	; 0x40
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  403568:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40356c:	4b06      	ldr	r3, [pc, #24]	; (403588 <timerStart+0x38>)
  tc_start(TC0, 0);
  40356e:	2100      	movs	r1, #0
  403570:	f883 031d 	strb.w	r0, [r3, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  403574:	601a      	str	r2, [r3, #0]
  403576:	4805      	ldr	r0, [pc, #20]	; (40358c <timerStart+0x3c>)
  403578:	4b05      	ldr	r3, [pc, #20]	; (403590 <timerStart+0x40>)
}
  40357a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  tc_start(TC0, 0);
  40357e:	4718      	bx	r3
  403580:	40038000 	.word	0x40038000
  403584:	00401355 	.word	0x00401355
  403588:	e000e100 	.word	0xe000e100
  40358c:	40010000 	.word	0x40010000
  403590:	004043f9 	.word	0x004043f9

00403594 <timerStop>:
  tc_stop(TC0, 0);
  403594:	2100      	movs	r1, #0
  403596:	4801      	ldr	r0, [pc, #4]	; (40359c <timerStop+0x8>)
  403598:	4b01      	ldr	r3, [pc, #4]	; (4035a0 <timerStop+0xc>)
  40359a:	4718      	bx	r3
  40359c:	40010000 	.word	0x40010000
  4035a0:	00404401 	.word	0x00404401

004035a4 <coreTxEmptyCallBack>:
**
****************************************************************************************/
void * coreTxEmptyCallBack(void)
{
  return comTxEmptyCallback;
}
  4035a4:	4800      	ldr	r0, [pc, #0]	; (4035a8 <coreTxEmptyCallBack+0x4>)
  4035a6:	4770      	bx	lr
  4035a8:	00402e81 	.word	0x00402e81

004035ac <startACQ>:
**            module.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
bool startACQ (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface)
{
  4035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4035ae:	4616      	mov	r6, r2
  /* Set result to false. */
  bool result = FALSE;
  /* Start core */
  timerStart();
  /* Print msg to inform user */
  comInterface->len = sprintf((char*)comInterface->buf, "Acquisition started\n\r");
  4035b0:	2715      	movs	r7, #21
  4035b2:	4c09      	ldr	r4, [pc, #36]	; (4035d8 <startACQ+0x2c>)
  timerStart();
  4035b4:	4b09      	ldr	r3, [pc, #36]	; (4035dc <startACQ+0x30>)
  4035b6:	4798      	blx	r3
  comInterface->len = sprintf((char*)comInterface->buf, "Acquisition started\n\r");
  4035b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4035ba:	61f0      	str	r0, [r6, #28]
  4035bc:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  4035c0:	6820      	ldr	r0, [r4, #0]
  4035c2:	6231      	str	r1, [r6, #32]
  4035c4:	62f0      	str	r0, [r6, #44]	; 0x2c
  4035c6:	6272      	str	r2, [r6, #36]	; 0x24
  4035c8:	62b3      	str	r3, [r6, #40]	; 0x28
  4035ca:	f8a6 e030 	strh.w	lr, [r6, #48]	; 0x30
  4035ce:	f886 711c 	strb.w	r7, [r6, #284]	; 0x11c
  /* Set result */
  result = TRUE;
  /* Return result */
  return result;
} /*** end of StartACQ ***/
  4035d2:	2001      	movs	r0, #1
  4035d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4035d6:	bf00      	nop
  4035d8:	004093c0 	.word	0x004093c0
  4035dc:	00403551 	.word	0x00403551

004035e0 <stopACQ>:
**            module.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
bool stopACQ (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface)
{
  4035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4035e2:	4616      	mov	r6, r2
  /* Set result to false. */
  bool result = FALSE;
  /* Stop core */
  timerStop();
  /* Print msg to inform user */
  comInterface->len = sprintf((char*)comInterface->buf, "Acquisition stopped\n\r");
  4035e4:	2715      	movs	r7, #21
  4035e6:	4c09      	ldr	r4, [pc, #36]	; (40360c <stopACQ+0x2c>)
  timerStop();
  4035e8:	4b09      	ldr	r3, [pc, #36]	; (403610 <stopACQ+0x30>)
  4035ea:	4798      	blx	r3
  comInterface->len = sprintf((char*)comInterface->buf, "Acquisition stopped\n\r");
  4035ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4035ee:	61f0      	str	r0, [r6, #28]
  4035f0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  4035f4:	6820      	ldr	r0, [r4, #0]
  4035f6:	6231      	str	r1, [r6, #32]
  4035f8:	62f0      	str	r0, [r6, #44]	; 0x2c
  4035fa:	6272      	str	r2, [r6, #36]	; 0x24
  4035fc:	62b3      	str	r3, [r6, #40]	; 0x28
  4035fe:	f8a6 e030 	strh.w	lr, [r6, #48]	; 0x30
  403602:	f886 711c 	strb.w	r7, [r6, #284]	; 0x11c
  /* Set result */
  result = TRUE;
  /* Return result */
  return result;
} /*** end of StopACQ ***/
  403606:	2001      	movs	r0, #1
  403608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40360a:	bf00      	nop
  40360c:	004093d8 	.word	0x004093d8
  403610:	00403595 	.word	0x00403595

00403614 <setAverageCount>:
{
  /* Set result to false. */
  bool result = FALSE;
  
  /* Is parameter is range? */
  if(*parPtr >= AVERAGE_COUNT_LOWRANGE &&  *parPtr <= AVERAGE_COUNT_HIGHRANGE)
  403614:	6803      	ldr	r3, [r0, #0]
  403616:	1e58      	subs	r0, r3, #1
  403618:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  40361c:	d302      	bcc.n	403624 <setAverageCount+0x10>
  bool result = FALSE;
  40361e:	2300      	movs	r3, #0
    result = TRUE;
  }
  
  /* Return result */
  return result;
} /*** end of SetAverageCount ***/
  403620:	4618      	mov	r0, r3
  403622:	4770      	bx	lr
{
  403624:	b510      	push	{r4, lr}
  403626:	4614      	mov	r4, r2
    settings->averaging = (uint16_t)*parPtr;
  403628:	80cb      	strh	r3, [r1, #6]
    comInterface->len = sprintf((char*)comInterface->buf,
  40362a:	461a      	mov	r2, r3
  40362c:	4904      	ldr	r1, [pc, #16]	; (403640 <setAverageCount+0x2c>)
  40362e:	f104 001c 	add.w	r0, r4, #28
  403632:	4b04      	ldr	r3, [pc, #16]	; (403644 <setAverageCount+0x30>)
  403634:	4798      	blx	r3
    result = TRUE;
  403636:	2301      	movs	r3, #1
    comInterface->len = sprintf((char*)comInterface->buf,
  403638:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
} /*** end of SetAverageCount ***/
  40363c:	4618      	mov	r0, r3
  40363e:	bd10      	pop	{r4, pc}
  403640:	004092a0 	.word	0x004092a0
  403644:	00404ce9 	.word	0x00404ce9

00403648 <setMeasurmentCount>:
{
  /* Set result to false. */
  bool result = FALSE;
  
  /* Is parameter is range? */
  if(*parPtr >= MEASURMENT_COUNT_LOWRANGE &&  *parPtr <= MEASURMENT_COUNT_HIGHRANGE)
  403648:	6803      	ldr	r3, [r0, #0]
  40364a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40364e:	d902      	bls.n	403656 <setMeasurmentCount+0xe>
  bool result = FALSE;
  403650:	2300      	movs	r3, #0
    result = TRUE;
  }
  
  /* Return result */
  return result;
} /*** end of SetMeasurmentCount ***/
  403652:	4618      	mov	r0, r3
  403654:	4770      	bx	lr
{
  403656:	b510      	push	{r4, lr}
  403658:	4614      	mov	r4, r2
    settings->acquisitionNbr = (uint16_t)*parPtr;
  40365a:	808b      	strh	r3, [r1, #4]
    comInterface->len = sprintf((char*)comInterface->buf,
  40365c:	461a      	mov	r2, r3
  40365e:	4905      	ldr	r1, [pc, #20]	; (403674 <setMeasurmentCount+0x2c>)
  403660:	f104 001c 	add.w	r0, r4, #28
  403664:	4b04      	ldr	r3, [pc, #16]	; (403678 <setMeasurmentCount+0x30>)
  403666:	4798      	blx	r3
    result = TRUE;
  403668:	2301      	movs	r3, #1
    comInterface->len = sprintf((char*)comInterface->buf,
  40366a:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
} /*** end of SetMeasurmentCount ***/
  40366e:	4618      	mov	r0, r3
  403670:	bd10      	pop	{r4, pc}
  403672:	bf00      	nop
  403674:	0040930c 	.word	0x0040930c
  403678:	00404ce9 	.word	0x00404ce9

0040367c <setBlockSize>:
**            module.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
bool setBlockSize (int32_t *parPtr, daq_settings_t *settings, COM_t *comInterface)
{
  40367c:	b510      	push	{r4, lr}
  /* Set result to false. */
  bool result = FALSE;

  /* Is parameter is range? */
  if(*(parPtr + 0) >= BLOCK_SIZE_MIN &&  *(parPtr + 0) <= BLOCK_SIZE_MAX)
  40367e:	6803      	ldr	r3, [r0, #0]
  403680:	1e5c      	subs	r4, r3, #1
  403682:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  403686:	d302      	bcc.n	40368e <setBlockSize+0x12>
  bool result = FALSE;
  403688:	2300      	movs	r3, #0
    result = TRUE;
  }

  /* Return result */
  return result;
} /*** end of setBlockSize ***/
  40368a:	4618      	mov	r0, r3
  40368c:	bd10      	pop	{r4, pc}
  40368e:	4614      	mov	r4, r2
    *(settings->blockSize) = (uint32_t)*(parPtr + 0);
  403690:	698a      	ldr	r2, [r1, #24]
    comInterface->len = sprintf((char*)comInterface->buf, "Block size set to %u\n\r",
  403692:	4906      	ldr	r1, [pc, #24]	; (4036ac <setBlockSize+0x30>)
    *(settings->blockSize) = (uint32_t)*(parPtr + 0);
  403694:	6013      	str	r3, [r2, #0]
    comInterface->len = sprintf((char*)comInterface->buf, "Block size set to %u\n\r",
  403696:	8802      	ldrh	r2, [r0, #0]
  403698:	4b05      	ldr	r3, [pc, #20]	; (4036b0 <setBlockSize+0x34>)
  40369a:	f104 001c 	add.w	r0, r4, #28
  40369e:	4798      	blx	r3
    result = TRUE;
  4036a0:	2301      	movs	r3, #1
    comInterface->len = sprintf((char*)comInterface->buf, "Block size set to %u\n\r",
  4036a2:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
} /*** end of setBlockSize ***/
  4036a6:	4618      	mov	r0, r3
  4036a8:	bd10      	pop	{r4, pc}
  4036aa:	bf00      	nop
  4036ac:	004092d4 	.word	0x004092d4
  4036b0:	00404ce9 	.word	0x00404ce9

004036b4 <setDACvalue>:
{
  4036b4:	b570      	push	{r4, r5, r6, lr}
  if( (*(parPtr + 0) >= DAC_VALUE_PAR0_LOWRANGE && *(parPtr + 0) <= DAC_VALUE_PAR0_HIGHRANGE) &&
  4036b6:	6806      	ldr	r6, [r0, #0]
  4036b8:	1e73      	subs	r3, r6, #1
  4036ba:	2b01      	cmp	r3, #1
  4036bc:	d902      	bls.n	4036c4 <setDACvalue+0x10>
  bool result = FALSE;
  4036be:	2300      	movs	r3, #0
} /*** end of SetDACvalue ***/
  4036c0:	4618      	mov	r0, r3
  4036c2:	bd70      	pop	{r4, r5, r6, pc}
  if( (*(parPtr + 0) >= DAC_VALUE_PAR0_LOWRANGE && *(parPtr + 0) <= DAC_VALUE_PAR0_HIGHRANGE) &&
  4036c4:	f644 6420 	movw	r4, #20000	; 0x4e20
      (*(parPtr + 1) >= DAC_VALUE_PAR1_LOWRANGE && *(parPtr + 1) <= DAC_VALUE_PAR1_HIGHRANGE) )
  4036c8:	6843      	ldr	r3, [r0, #4]
  4036ca:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
  4036ce:	3310      	adds	r3, #16
  if( (*(parPtr + 0) >= DAC_VALUE_PAR0_LOWRANGE && *(parPtr + 0) <= DAC_VALUE_PAR0_HIGHRANGE) &&
  4036d0:	42a3      	cmp	r3, r4
  4036d2:	d8f4      	bhi.n	4036be <setDACvalue+0xa>
  4036d4:	4605      	mov	r5, r0
  4036d6:	4614      	mov	r4, r2
    tmp *= 25;
  4036d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4036dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    tmp /= 500000;
  4036e0:	4a0c      	ldr	r2, [pc, #48]	; (403714 <setDACvalue+0x60>)
    tmp += 36;
  4036e2:	3324      	adds	r3, #36	; 0x24
    tmp *= 4095;
  4036e4:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    tmp /= 500000;
  4036e8:	fba2 2303 	umull	r2, r3, r2, r3
    settings->DACval[((uint8_t)*parPtr) - 1] = (uint16_t)tmp;
  4036ec:	3603      	adds	r6, #3
    tmp /= 500000;
  4036ee:	0c5b      	lsrs	r3, r3, #17
    settings->DACval[((uint8_t)*parPtr) - 1] = (uint16_t)tmp;
  4036f0:	f821 3016 	strh.w	r3, [r1, r6, lsl #1]
    coreSetDacVal();
  4036f4:	4b08      	ldr	r3, [pc, #32]	; (403718 <setDACvalue+0x64>)
  4036f6:	4798      	blx	r3
    comInterface->len = sprintf((char*)comInterface->buf,
  4036f8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  4036fc:	782a      	ldrb	r2, [r5, #0]
  4036fe:	4907      	ldr	r1, [pc, #28]	; (40371c <setDACvalue+0x68>)
  403700:	f104 001c 	add.w	r0, r4, #28
  403704:	4d06      	ldr	r5, [pc, #24]	; (403720 <setDACvalue+0x6c>)
  403706:	47a8      	blx	r5
    result = TRUE;
  403708:	2301      	movs	r3, #1
    comInterface->len = sprintf((char*)comInterface->buf,
  40370a:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
} /*** end of SetDACvalue ***/
  40370e:	4618      	mov	r0, r3
  403710:	bd70      	pop	{r4, r5, r6, pc}
  403712:	bf00      	nop
  403714:	431bde83 	.word	0x431bde83
  403718:	00403495 	.word	0x00403495
  40371c:	004092ec 	.word	0x004092ec
  403720:	00404ce9 	.word	0x00404ce9

00403724 <setADCgain>:
{
  403724:	b538      	push	{r3, r4, r5, lr}
  if( ( (*(parPtr + 0) > 0) && (*(parPtr + 0) <= 4) ) &&
  403726:	6803      	ldr	r3, [r0, #0]
  403728:	1e5c      	subs	r4, r3, #1
  40372a:	2c03      	cmp	r4, #3
  40372c:	d802      	bhi.n	403734 <setADCgain+0x10>
      ( (*(parPtr + 1) == ADC_GAIN_0_5) || (*(parPtr + 1) == ADC_GAIN_1) ||
  40372e:	6844      	ldr	r4, [r0, #4]
  if( ( (*(parPtr + 0) > 0) && (*(parPtr + 0) <= 4) ) &&
  403730:	2c02      	cmp	r4, #2
  403732:	d901      	bls.n	403738 <setADCgain+0x14>
  bool result = FALSE;
  403734:	2000      	movs	r0, #0
} /*** end of SetDACvalue ***/
  403736:	bd38      	pop	{r3, r4, r5, pc}
  403738:	4615      	mov	r5, r2
    settings->ADCgain[*(parPtr + 0) - 1] = (uint8_t)*(parPtr + 1);
  40373a:	440b      	add	r3, r1
  40373c:	72dc      	strb	r4, [r3, #11]
    comInterface->len = sprintf((char*)comInterface->buf,
  40373e:	7802      	ldrb	r2, [r0, #0]
  403740:	f990 3004 	ldrsb.w	r3, [r0, #4]
  403744:	4905      	ldr	r1, [pc, #20]	; (40375c <setADCgain+0x38>)
  403746:	f105 001c 	add.w	r0, r5, #28
  40374a:	4c05      	ldr	r4, [pc, #20]	; (403760 <setADCgain+0x3c>)
  40374c:	47a0      	blx	r4
    adcSetGain();
  40374e:	4b05      	ldr	r3, [pc, #20]	; (403764 <setADCgain+0x40>)
    comInterface->len = sprintf((char*)comInterface->buf,
  403750:	f885 011c 	strb.w	r0, [r5, #284]	; 0x11c
    adcSetGain();
  403754:	4798      	blx	r3
    result = TRUE;
  403756:	2001      	movs	r0, #1
  403758:	bd38      	pop	{r3, r4, r5, pc}
  40375a:	bf00      	nop
  40375c:	00409238 	.word	0x00409238
  403760:	00404ce9 	.word	0x00404ce9
  403764:	004032ed 	.word	0x004032ed

00403768 <setADClowRes>:
{
  403768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( (*(parPtr + 0) == ADC_RES_12_BITS) || (*(parPtr + 0) == ADC_RES_10_BITS) )
  40376a:	6803      	ldr	r3, [r0, #0]
  40376c:	2b01      	cmp	r3, #1
  40376e:	d901      	bls.n	403774 <setADClowRes+0xc>
  bool result = FALSE;
  403770:	2000      	movs	r0, #0
} /*** end of setADClowRes ***/
  403772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403774:	4614      	mov	r4, r2
    settings->ADClowRes = (uint8_t)*(parPtr + 0);
  403776:	740b      	strb	r3, [r1, #16]
    if(settings->ADClowRes)
  403778:	b1cb      	cbz	r3, 4037ae <setADClowRes+0x46>
      comInterface->len = sprintf((char*)comInterface->buf,
  40377a:	4f16      	ldr	r7, [pc, #88]	; (4037d4 <setADClowRes+0x6c>)
  40377c:	f102 061c 	add.w	r6, r2, #28
  403780:	f107 0e20 	add.w	lr, r7, #32
  403784:	463d      	mov	r5, r7
  403786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403788:	4575      	cmp	r5, lr
  40378a:	6030      	str	r0, [r6, #0]
  40378c:	6071      	str	r1, [r6, #4]
  40378e:	60b2      	str	r2, [r6, #8]
  403790:	60f3      	str	r3, [r6, #12]
  403792:	f107 0710 	add.w	r7, r7, #16
  403796:	f106 0610 	add.w	r6, r6, #16
  40379a:	d1f3      	bne.n	403784 <setADClowRes+0x1c>
      comInterface->len = sprintf((char*)comInterface->buf,
  40379c:	2320      	movs	r3, #32
  40379e:	783a      	ldrb	r2, [r7, #0]
  4037a0:	7032      	strb	r2, [r6, #0]
  4037a2:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
    adcSetRes();
  4037a6:	4b0c      	ldr	r3, [pc, #48]	; (4037d8 <setADClowRes+0x70>)
  4037a8:	4798      	blx	r3
    result = TRUE;
  4037aa:	2001      	movs	r0, #1
  4037ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      comInterface->len = sprintf((char*)comInterface->buf,
  4037ae:	4f0b      	ldr	r7, [pc, #44]	; (4037dc <setADClowRes+0x74>)
  4037b0:	f102 061c 	add.w	r6, r2, #28
  4037b4:	f107 0e20 	add.w	lr, r7, #32
  4037b8:	463d      	mov	r5, r7
  4037ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4037bc:	4575      	cmp	r5, lr
  4037be:	6030      	str	r0, [r6, #0]
  4037c0:	6071      	str	r1, [r6, #4]
  4037c2:	60b2      	str	r2, [r6, #8]
  4037c4:	60f3      	str	r3, [r6, #12]
  4037c6:	f107 0710 	add.w	r7, r7, #16
  4037ca:	f106 0610 	add.w	r6, r6, #16
  4037ce:	d1f3      	bne.n	4037b8 <setADClowRes+0x50>
  4037d0:	e7e4      	b.n	40379c <setADClowRes+0x34>
  4037d2:	bf00      	nop
  4037d4:	00409258 	.word	0x00409258
  4037d8:	00403329 	.word	0x00403329
  4037dc:	0040927c 	.word	0x0040927c

004037e0 <setMode>:
{
  4037e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(*parPtr >= MODE_LOWRANGE && *parPtr <= MODE_HIGHRANGE)
  4037e2:	6803      	ldr	r3, [r0, #0]
  4037e4:	2b01      	cmp	r3, #1
  4037e6:	d902      	bls.n	4037ee <setMode+0xe>
  bool result = FALSE;
  4037e8:	2400      	movs	r4, #0
} /*** end of StartFastACQ ***/
  4037ea:	4620      	mov	r0, r4
  4037ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    settings->mode = (uint8_t)*parPtr;
  4037ee:	758b      	strb	r3, [r1, #22]
    switch((uint8_t)*parPtr)
  4037f0:	7804      	ldrb	r4, [r0, #0]
  4037f2:	4615      	mov	r5, r2
  4037f4:	b1ac      	cbz	r4, 403822 <setMode+0x42>
  4037f6:	2c01      	cmp	r4, #1
  4037f8:	d110      	bne.n	40381c <setMode+0x3c>
        comInterface->len = sprintf((char*)comInterface->buf,
  4037fa:	f04f 0e1f 	mov.w	lr, #31
  4037fe:	4e14      	ldr	r6, [pc, #80]	; (403850 <setMode+0x70>)
  403800:	f885 e11c 	strb.w	lr, [r5, #284]	; 0x11c
  403804:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403806:	61e8      	str	r0, [r5, #28]
  403808:	6229      	str	r1, [r5, #32]
  40380a:	626a      	str	r2, [r5, #36]	; 0x24
  40380c:	62ab      	str	r3, [r5, #40]	; 0x28
  40380e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403810:	62e8      	str	r0, [r5, #44]	; 0x2c
  403812:	6329      	str	r1, [r5, #48]	; 0x30
  403814:	636a      	str	r2, [r5, #52]	; 0x34
  403816:	63ab      	str	r3, [r5, #56]	; 0x38
} /*** end of StartFastACQ ***/
  403818:	4620      	mov	r0, r4
  40381a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    result = TRUE;
  40381c:	2401      	movs	r4, #1
} /*** end of StartFastACQ ***/
  40381e:	4620      	mov	r0, r4
  403820:	bdf0      	pop	{r4, r5, r6, r7, pc}
        comInterface->len = sprintf((char*)comInterface->buf,
  403822:	4c0c      	ldr	r4, [pc, #48]	; (403854 <setMode+0x74>)
  403824:	271e      	movs	r7, #30
  403826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  403828:	61e8      	str	r0, [r5, #28]
  40382a:	6229      	str	r1, [r5, #32]
  40382c:	626a      	str	r2, [r5, #36]	; 0x24
  40382e:	62ab      	str	r3, [r5, #40]	; 0x28
  403830:	cc07      	ldmia	r4!, {r0, r1, r2}
  403832:	f8b4 e000 	ldrh.w	lr, [r4]
  403836:	78a3      	ldrb	r3, [r4, #2]
  403838:	2401      	movs	r4, #1
  40383a:	62e8      	str	r0, [r5, #44]	; 0x2c
  40383c:	6329      	str	r1, [r5, #48]	; 0x30
  40383e:	636a      	str	r2, [r5, #52]	; 0x34
  403840:	f8a5 e038 	strh.w	lr, [r5, #56]	; 0x38
  403844:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
  403848:	f885 711c 	strb.w	r7, [r5, #284]	; 0x11c
} /*** end of StartFastACQ ***/
  40384c:	4620      	mov	r0, r4
  40384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403850:	0040935c 	.word	0x0040935c
  403854:	0040933c 	.word	0x0040933c

00403858 <setSamplePeriod>:
{
  403858:	b570      	push	{r4, r5, r6, lr}
  if(*parPtr >= SAMPLE_PERIOD_LOWRANGE && *parPtr <= SAMPLE_PERIOD_HIGHRANGE)
  40385a:	6803      	ldr	r3, [r0, #0]
  40385c:	480c      	ldr	r0, [pc, #48]	; (403890 <setSamplePeriod+0x38>)
  40385e:	1e5c      	subs	r4, r3, #1
  403860:	4284      	cmp	r4, r0
  403862:	d902      	bls.n	40386a <setSamplePeriod+0x12>
  bool result = FALSE;
  403864:	2400      	movs	r4, #0
} /*** end of SetSamplePeriod ***/
  403866:	4620      	mov	r0, r4
  403868:	bd70      	pop	{r4, r5, r6, pc}
    settings->acqusitionTime = (uint32_t)*parPtr;
  40386a:	600b      	str	r3, [r1, #0]
    if(timerSetTimePeriod())
  40386c:	4b09      	ldr	r3, [pc, #36]	; (403894 <setSamplePeriod+0x3c>)
  40386e:	4616      	mov	r6, r2
  403870:	460d      	mov	r5, r1
  403872:	4798      	blx	r3
  403874:	4604      	mov	r4, r0
  403876:	2800      	cmp	r0, #0
  403878:	d0f4      	beq.n	403864 <setSamplePeriod+0xc>
      comInterface->len = sprintf((char*)comInterface->buf,
  40387a:	682a      	ldr	r2, [r5, #0]
  40387c:	4906      	ldr	r1, [pc, #24]	; (403898 <setSamplePeriod+0x40>)
  40387e:	f106 001c 	add.w	r0, r6, #28
  403882:	4b06      	ldr	r3, [pc, #24]	; (40389c <setSamplePeriod+0x44>)
  403884:	4798      	blx	r3
  403886:	f886 011c 	strb.w	r0, [r6, #284]	; 0x11c
} /*** end of SetSamplePeriod ***/
  40388a:	4620      	mov	r0, r4
  40388c:	bd70      	pop	{r4, r5, r6, pc}
  40388e:	bf00      	nop
  403890:	000f423f 	.word	0x000f423f
  403894:	004034e1 	.word	0x004034e1
  403898:	0040937c 	.word	0x0040937c
  40389c:	00404ce9 	.word	0x00404ce9

004038a0 <setSequencer>:
{
  4038a0:	b570      	push	{r4, r5, r6, lr}
  if((*(parPtr + 0) >= SEQUENCER_LOWRANGE && *(parPtr + 0) <= SEQUENCER_HIGHRANGE) &&
  4038a2:	6804      	ldr	r4, [r0, #0]
{
  4038a4:	b082      	sub	sp, #8
  if((*(parPtr + 0) >= SEQUENCER_LOWRANGE && *(parPtr + 0) <= SEQUENCER_HIGHRANGE) &&
  4038a6:	2c04      	cmp	r4, #4
  4038a8:	d821      	bhi.n	4038ee <setSequencer+0x4e>
  4038aa:	6843      	ldr	r3, [r0, #4]
  4038ac:	2b04      	cmp	r3, #4
  4038ae:	d81e      	bhi.n	4038ee <setSequencer+0x4e>
     (*(parPtr + 1) >= SEQUENCER_LOWRANGE && *(parPtr + 1) <= SEQUENCER_HIGHRANGE) &&
  4038b0:	6883      	ldr	r3, [r0, #8]
  4038b2:	2b04      	cmp	r3, #4
  4038b4:	d81b      	bhi.n	4038ee <setSequencer+0x4e>
     (*(parPtr + 2) >= SEQUENCER_LOWRANGE && *(parPtr + 2) <= SEQUENCER_HIGHRANGE) &&
  4038b6:	68c3      	ldr	r3, [r0, #12]
  4038b8:	2b04      	cmp	r3, #4
  4038ba:	d818      	bhi.n	4038ee <setSequencer+0x4e>
  4038bc:	4615      	mov	r5, r2
    for(uint8_t i = 0; i < 4; i++)  settings->sequence[i] = (uint8_t)*(parPtr + i);
  4038be:	748c      	strb	r4, [r1, #18]
  4038c0:	6843      	ldr	r3, [r0, #4]
    comInterface->len = sprintf((char*)comInterface->buf,
  4038c2:	4622      	mov	r2, r4
    for(uint8_t i = 0; i < 4; i++)  settings->sequence[i] = (uint8_t)*(parPtr + i);
  4038c4:	74cb      	strb	r3, [r1, #19]
  4038c6:	6884      	ldr	r4, [r0, #8]
    comInterface->len = sprintf((char*)comInterface->buf,
  4038c8:	b2db      	uxtb	r3, r3
    for(uint8_t i = 0; i < 4; i++)  settings->sequence[i] = (uint8_t)*(parPtr + i);
  4038ca:	750c      	strb	r4, [r1, #20]
  4038cc:	68c0      	ldr	r0, [r0, #12]
    comInterface->len = sprintf((char*)comInterface->buf,
  4038ce:	b2e4      	uxtb	r4, r4
  4038d0:	b2c6      	uxtb	r6, r0
    for(uint8_t i = 0; i < 4; i++)  settings->sequence[i] = (uint8_t)*(parPtr + i);
  4038d2:	7548      	strb	r0, [r1, #21]
    comInterface->len = sprintf((char*)comInterface->buf,
  4038d4:	e88d 0050 	stmia.w	sp, {r4, r6}
  4038d8:	4907      	ldr	r1, [pc, #28]	; (4038f8 <setSequencer+0x58>)
  4038da:	f105 001c 	add.w	r0, r5, #28
  4038de:	4c07      	ldr	r4, [pc, #28]	; (4038fc <setSequencer+0x5c>)
  4038e0:	47a0      	blx	r4
  4038e2:	2301      	movs	r3, #1
  4038e4:	f885 011c 	strb.w	r0, [r5, #284]	; 0x11c
} /*** end of SetSequencer ***/
  4038e8:	4618      	mov	r0, r3
  4038ea:	b002      	add	sp, #8
  4038ec:	bd70      	pop	{r4, r5, r6, pc}
   bool result = FALSE;
  4038ee:	2300      	movs	r3, #0
} /*** end of SetSequencer ***/
  4038f0:	4618      	mov	r0, r3
  4038f2:	b002      	add	sp, #8
  4038f4:	bd70      	pop	{r4, r5, r6, pc}
  4038f6:	bf00      	nop
  4038f8:	0040939c 	.word	0x0040939c
  4038fc:	00404ce9 	.word	0x00404ce9

00403900 <parseCommand>:
{
  403900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (CMD)
  403904:	3841      	subs	r0, #65	; 0x41
{
  403906:	b088      	sub	sp, #32
  403908:	460e      	mov	r6, r1
  40390a:	4614      	mov	r4, r2
  switch (CMD)
  40390c:	2813      	cmp	r0, #19
  40390e:	f200 8225 	bhi.w	403d5c <parseCommand+0x45c>
  403912:	e8df f010 	tbh	[pc, r0, lsl #1]
  403916:	0043      	.short	0x0043
  403918:	02230072 	.word	0x02230072
  40391c:	00d000a1 	.word	0x00d000a1
  403920:	012e00ff 	.word	0x012e00ff
  403924:	02230223 	.word	0x02230223
  403928:	02230223 	.word	0x02230223
  40392c:	019a016b 	.word	0x019a016b
  403930:	02230223 	.word	0x02230223
  403934:	02230223 	.word	0x02230223
  403938:	01f601c8 	.word	0x01f601c8
  40393c:	0014      	.short	0x0014
      buf[x][y] = 0;
  40393e:	2300      	movs	r3, #0
      parsedCMD->cmd = CMD_STOP_ACQ;
  403940:	2154      	movs	r1, #84	; 0x54
      buf[x][y] = 0;
  403942:	461d      	mov	r5, r3
  403944:	461f      	mov	r7, r3
        buf[currentPar][idx] = 0;
  403946:	4698      	mov	r8, r3
      parsedCMD->funcPtr = stopACQ;
  403948:	4aa1      	ldr	r2, [pc, #644]	; (403bd0 <parseCommand+0x2d0>)
      buf[x][y] = 0;
  40394a:	9301      	str	r3, [sp, #4]
  40394c:	9302      	str	r3, [sp, #8]
  40394e:	9303      	str	r3, [sp, #12]
  403950:	9304      	str	r3, [sp, #16]
  403952:	9305      	str	r3, [sp, #20]
  403954:	9306      	str	r3, [sp, #24]
  403956:	9307      	str	r3, [sp, #28]
      parsedCMD->cmd = CMD_STOP_ACQ;
  403958:	7031      	strb	r1, [r6, #0]
      parsedCMD->funcPtr = stopACQ;
  40395a:	6072      	str	r2, [r6, #4]
    if(comInterface->available())
  40395c:	6863      	ldr	r3, [r4, #4]
  40395e:	4798      	blx	r3
  403960:	2800      	cmp	r0, #0
  403962:	d0fb      	beq.n	40395c <parseCommand+0x5c>
      newChar = comInterface->read();
  403964:	68a3      	ldr	r3, [r4, #8]
  403966:	4798      	blx	r3
      if(newChar == '\r')
  403968:	280d      	cmp	r0, #13
  40396a:	f000 8214 	beq.w	403d96 <parseCommand+0x496>
      else if(newChar == ',')
  40396e:	282c      	cmp	r0, #44	; 0x2c
  403970:	f000 822d 	beq.w	403dce <parseCommand+0x4ce>
      else if(newChar == '\b')
  403974:	2808      	cmp	r0, #8
  403976:	f000 8360 	beq.w	40403a <parseCommand+0x73a>
      else if((newChar >= '0' && newChar <= '9') || newChar == '-')
  40397a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  40397e:	b2db      	uxtb	r3, r3
  403980:	2b09      	cmp	r3, #9
  403982:	d901      	bls.n	403988 <parseCommand+0x88>
  403984:	282d      	cmp	r0, #45	; 0x2d
  403986:	d1e9      	bne.n	40395c <parseCommand+0x5c>
        buf[currentPar][idx] = newChar;
  403988:	ab08      	add	r3, sp, #32
  40398a:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
  40398e:	441a      	add	r2, r3
  403990:	442a      	add	r2, r5
        idx++;
  403992:	1c6b      	adds	r3, r5, #1
        buf[currentPar][idx] = newChar;
  403994:	f802 0c1c 	strb.w	r0, [r2, #-28]
        idx++;
  403998:	b2dd      	uxtb	r5, r3
  40399a:	e7df      	b.n	40395c <parseCommand+0x5c>
      buf[x][y] = 0;
  40399c:	2300      	movs	r3, #0
      parsedCMD->cmd =  CMD_SET_AVERAGE_COUNT;
  40399e:	2141      	movs	r1, #65	; 0x41
      buf[x][y] = 0;
  4039a0:	461d      	mov	r5, r3
  4039a2:	461f      	mov	r7, r3
        buf[currentPar][idx] = 0;
  4039a4:	4698      	mov	r8, r3
      parsedCMD->funcPtr = setAverageCount;
  4039a6:	4a8b      	ldr	r2, [pc, #556]	; (403bd4 <parseCommand+0x2d4>)
      buf[x][y] = 0;
  4039a8:	9301      	str	r3, [sp, #4]
  4039aa:	9302      	str	r3, [sp, #8]
  4039ac:	9303      	str	r3, [sp, #12]
  4039ae:	9304      	str	r3, [sp, #16]
  4039b0:	9305      	str	r3, [sp, #20]
  4039b2:	9306      	str	r3, [sp, #24]
  4039b4:	9307      	str	r3, [sp, #28]
      parsedCMD->cmd =  CMD_SET_AVERAGE_COUNT;
  4039b6:	7031      	strb	r1, [r6, #0]
      parsedCMD->funcPtr = setAverageCount;
  4039b8:	6072      	str	r2, [r6, #4]
    if(comInterface->available())
  4039ba:	6863      	ldr	r3, [r4, #4]
  4039bc:	4798      	blx	r3
  4039be:	2800      	cmp	r0, #0
  4039c0:	d0fb      	beq.n	4039ba <parseCommand+0xba>
      newChar = comInterface->read();
  4039c2:	68a3      	ldr	r3, [r4, #8]
  4039c4:	4798      	blx	r3
      if(newChar == '\r')
  4039c6:	280d      	cmp	r0, #13
  4039c8:	f000 81cf 	beq.w	403d6a <parseCommand+0x46a>
      else if(newChar == ',')
  4039cc:	282c      	cmp	r0, #44	; 0x2c
  4039ce:	f000 81fa 	beq.w	403dc6 <parseCommand+0x4c6>
      else if(newChar == '\b')
  4039d2:	2808      	cmp	r0, #8
  4039d4:	f000 834e 	beq.w	404074 <parseCommand+0x774>
      else if((newChar >= '0' && newChar <= '9') || newChar == '-')
  4039d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  4039dc:	b2db      	uxtb	r3, r3
  4039de:	2b09      	cmp	r3, #9
  4039e0:	d901      	bls.n	4039e6 <parseCommand+0xe6>
  4039e2:	282d      	cmp	r0, #45	; 0x2d
  4039e4:	d1e9      	bne.n	4039ba <parseCommand+0xba>
        buf[currentPar][idx] = newChar;
  4039e6:	ab08      	add	r3, sp, #32
  4039e8:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
  4039ec:	441a      	add	r2, r3
  4039ee:	442a      	add	r2, r5
        idx++;
  4039f0:	1c6b      	adds	r3, r5, #1
        buf[currentPar][idx] = newChar;
  4039f2:	f802 0c1c 	strb.w	r0, [r2, #-28]
        idx++;
  4039f6:	b2dd      	uxtb	r5, r3
  4039f8:	e7df      	b.n	4039ba <parseCommand+0xba>
      buf[x][y] = 0;
  4039fa:	2300      	movs	r3, #0
      parsedCMD->cmd =  CMD_SET_BLOCK_SIZE;
  4039fc:	2142      	movs	r1, #66	; 0x42
      buf[x][y] = 0;
  4039fe:	461d      	mov	r5, r3
  403a00:	461f      	mov	r7, r3
        buf[currentPar][idx] = 0;
  403a02:	4698      	mov	r8, r3
      parsedCMD->funcPtr = setBlockSize;
  403a04:	4a74      	ldr	r2, [pc, #464]	; (403bd8 <parseCommand+0x2d8>)
      buf[x][y] = 0;
  403a06:	9301      	str	r3, [sp, #4]
  403a08:	9302      	str	r3, [sp, #8]
  403a0a:	9303      	str	r3, [sp, #12]
  403a0c:	9304      	str	r3, [sp, #16]
  403a0e:	9305      	str	r3, [sp, #20]
  403a10:	9306      	str	r3, [sp, #24]
  403a12:	9307      	str	r3, [sp, #28]
      parsedCMD->cmd =  CMD_SET_BLOCK_SIZE;
  403a14:	7031      	strb	r1, [r6, #0]
      parsedCMD->funcPtr = setBlockSize;
  403a16:	6072      	str	r2, [r6, #4]
    if(comInterface->available())
  403a18:	6863      	ldr	r3, [r4, #4]
  403a1a:	4798      	blx	r3
  403a1c:	2800      	cmp	r0, #0
  403a1e:	d0fb      	beq.n	403a18 <parseCommand+0x118>
      newChar = comInterface->read();
  403a20:	68a3      	ldr	r3, [r4, #8]
  403a22:	4798      	blx	r3
      if(newChar == '\r')
  403a24:	280d      	cmp	r0, #13
  403a26:	f000 81a0 	beq.w	403d6a <parseCommand+0x46a>
      else if(newChar == ',')
  403a2a:	282c      	cmp	r0, #44	; 0x2c
  403a2c:	f000 81ef 	beq.w	403e0e <parseCommand+0x50e>
      else if(newChar == '\b')
  403a30:	2808      	cmp	r0, #8
  403a32:	f000 82e5 	beq.w	404000 <parseCommand+0x700>
      else if((newChar >= '0' && newChar <= '9') || newChar == '-')
  403a36:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  403a3a:	b2db      	uxtb	r3, r3
  403a3c:	2b09      	cmp	r3, #9
  403a3e:	d901      	bls.n	403a44 <parseCommand+0x144>
  403a40:	282d      	cmp	r0, #45	; 0x2d
  403a42:	d1e9      	bne.n	403a18 <parseCommand+0x118>
        buf[currentPar][idx] = newChar;
  403a44:	ab08      	add	r3, sp, #32
  403a46:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
  403a4a:	441a      	add	r2, r3
  403a4c:	442a      	add	r2, r5
        idx++;
  403a4e:	1c6b      	adds	r3, r5, #1
        buf[currentPar][idx] = newChar;
  403a50:	f802 0c1c 	strb.w	r0, [r2, #-28]
        idx++;
  403a54:	b2dd      	uxtb	r5, r3
  403a56:	e7df      	b.n	403a18 <parseCommand+0x118>
      buf[x][y] = 0;
  403a58:	2300      	movs	r3, #0
      parsedCMD->cmd =  CMD_SET_DAC_VALUE;
  403a5a:	2144      	movs	r1, #68	; 0x44
      buf[x][y] = 0;
  403a5c:	461d      	mov	r5, r3
  403a5e:	461f      	mov	r7, r3
        buf[currentPar][idx] = 0;
  403a60:	4698      	mov	r8, r3
      parsedCMD->funcPtr = setDACvalue;
  403a62:	4a5e      	ldr	r2, [pc, #376]	; (403bdc <parseCommand+0x2dc>)
      buf[x][y] = 0;
  403a64:	9301      	str	r3, [sp, #4]
  403a66:	9302      	str	r3, [sp, #8]
  403a68:	9303      	str	r3, [sp, #12]
  403a6a:	9304      	str	r3, [sp, #16]
  403a6c:	9305      	str	r3, [sp, #20]
  403a6e:	9306      	str	r3, [sp, #24]
  403a70:	9307      	str	r3, [sp, #28]
      parsedCMD->cmd =  CMD_SET_DAC_VALUE;
  403a72:	7031      	strb	r1, [r6, #0]
      parsedCMD->funcPtr = setDACvalue;
  403a74:	6072      	str	r2, [r6, #4]
    if(comInterface->available())
  403a76:	6863      	ldr	r3, [r4, #4]
  403a78:	4798      	blx	r3
  403a7a:	2800      	cmp	r0, #0
  403a7c:	d0fb      	beq.n	403a76 <parseCommand+0x176>
      newChar = comInterface->read();
  403a7e:	68a3      	ldr	r3, [r4, #8]
  403a80:	4798      	blx	r3
      if(newChar == '\r')
  403a82:	280d      	cmp	r0, #13
  403a84:	f000 8189 	beq.w	403d9a <parseCommand+0x49a>
      else if(newChar == ',')
  403a88:	282c      	cmp	r0, #44	; 0x2c
  403a8a:	f000 81a4 	beq.w	403dd6 <parseCommand+0x4d6>
      else if(newChar == '\b')
  403a8e:	2808      	cmp	r0, #8
  403a90:	f000 8225 	beq.w	403ede <parseCommand+0x5de>
      else if((newChar >= '0' && newChar <= '9') || newChar == '-')
  403a94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  403a98:	b2db      	uxtb	r3, r3
  403a9a:	2b09      	cmp	r3, #9
  403a9c:	d901      	bls.n	403aa2 <parseCommand+0x1a2>
  403a9e:	282d      	cmp	r0, #45	; 0x2d
  403aa0:	d1e9      	bne.n	403a76 <parseCommand+0x176>
        buf[currentPar][idx] = newChar;
  403aa2:	ab08      	add	r3, sp, #32
  403aa4:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
  403aa8:	441a      	add	r2, r3
  403aaa:	442a      	add	r2, r5
        idx++;
  403aac:	1c6b      	adds	r3, r5, #1
        buf[currentPar][idx] = newChar;
  403aae:	f802 0c1c 	strb.w	r0, [r2, #-28]
        idx++;
  403ab2:	b2dd      	uxtb	r5, r3
  403ab4:	e7df      	b.n	403a76 <parseCommand+0x176>
      buf[x][y] = 0;
  403ab6:	2300      	movs	r3, #0
      parsedCMD->cmd =  CMD_SET_SEQUENCER;
  403ab8:	2145      	movs	r1, #69	; 0x45
      buf[x][y] = 0;
  403aba:	461d      	mov	r5, r3
  403abc:	461f      	mov	r7, r3
        buf[currentPar][idx] = 0;
  403abe:	4698      	mov	r8, r3
      parsedCMD->funcPtr = setSequencer;
  403ac0:	4a47      	ldr	r2, [pc, #284]	; (403be0 <parseCommand+0x2e0>)
      buf[x][y] = 0;
  403ac2:	9301      	str	r3, [sp, #4]
  403ac4:	9302      	str	r3, [sp, #8]
  403ac6:	9303      	str	r3, [sp, #12]
  403ac8:	9304      	str	r3, [sp, #16]
  403aca:	9305      	str	r3, [sp, #20]
  403acc:	9306      	str	r3, [sp, #24]
  403ace:	9307      	str	r3, [sp, #28]
      parsedCMD->cmd =  CMD_SET_SEQUENCER;
  403ad0:	7031      	strb	r1, [r6, #0]
      parsedCMD->funcPtr = setSequencer;
  403ad2:	6072      	str	r2, [r6, #4]
    if(comInterface->available())
  403ad4:	6863      	ldr	r3, [r4, #4]
  403ad6:	4798      	blx	r3
  403ad8:	2800      	cmp	r0, #0
  403ada:	d0fb      	beq.n	403ad4 <parseCommand+0x1d4>
      newChar = comInterface->read();
  403adc:	68a3      	ldr	r3, [r4, #8]
  403ade:	4798      	blx	r3
      if(newChar == '\r')
  403ae0:	280d      	cmp	r0, #13
  403ae2:	f000 8148 	beq.w	403d76 <parseCommand+0x476>
      else if(newChar == ',')
  403ae6:	282c      	cmp	r0, #44	; 0x2c
  403ae8:	f000 8179 	beq.w	403dde <parseCommand+0x4de>
      else if(newChar == '\b')
  403aec:	2808      	cmp	r0, #8
  403aee:	f000 8213 	beq.w	403f18 <parseCommand+0x618>
      else if((newChar >= '0' && newChar <= '9') || newChar == '-')
  403af2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  403af6:	b2db      	uxtb	r3, r3
  403af8:	2b09      	cmp	r3, #9
  403afa:	d901      	bls.n	403b00 <parseCommand+0x200>
  403afc:	282d      	cmp	r0, #45	; 0x2d
  403afe:	d1e9      	bne.n	403ad4 <parseCommand+0x1d4>
        buf[currentPar][idx] = newChar;
  403b00:	ab08      	add	r3, sp, #32
  403b02:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
  403b06:	441a      	add	r2, r3
  403b08:	442a      	add	r2, r5
        idx++;
  403b0a:	1c6b      	adds	r3, r5, #1
        buf[currentPar][idx] = newChar;
  403b0c:	f802 0c1c 	strb.w	r0, [r2, #-28]
        idx++;
  403b10:	b2dd      	uxtb	r5, r3
  403b12:	e7df      	b.n	403ad4 <parseCommand+0x1d4>
      buf[x][y] = 0;
  403b14:	2300      	movs	r3, #0
      parsedCMD->cmd =  CMD_SET_MEASURMENT_COUNT;
  403b16:	2146      	movs	r1, #70	; 0x46
      buf[x][y] = 0;
  403b18:	461d      	mov	r5, r3
  403b1a:	461f      	mov	r7, r3
        buf[currentPar][idx] = 0;
  403b1c:	4698      	mov	r8, r3
      parsedCMD->funcPtr = setMeasurmentCount;
  403b1e:	4a31      	ldr	r2, [pc, #196]	; (403be4 <parseCommand+0x2e4>)
      buf[x][y] = 0;
  403b20:	9301      	str	r3, [sp, #4]
  403b22:	9302      	str	r3, [sp, #8]
  403b24:	9303      	str	r3, [sp, #12]
  403b26:	9304      	str	r3, [sp, #16]
  403b28:	9305      	str	r3, [sp, #20]
  403b2a:	9306      	str	r3, [sp, #24]
  403b2c:	9307      	str	r3, [sp, #28]
      parsedCMD->cmd =  CMD_SET_MEASURMENT_COUNT;
  403b2e:	7031      	strb	r1, [r6, #0]
      parsedCMD->funcPtr = setMeasurmentCount;
  403b30:	6072      	str	r2, [r6, #4]
    if(comInterface->available())
  403b32:	6863      	ldr	r3, [r4, #4]
  403b34:	4798      	blx	r3
  403b36:	2800      	cmp	r0, #0
  403b38:	d0fb      	beq.n	403b32 <parseCommand+0x232>
      newChar = comInterface->read();
  403b3a:	68a3      	ldr	r3, [r4, #8]
  403b3c:	4798      	blx	r3
      if(newChar == '\r')
  403b3e:	280d      	cmp	r0, #13
  403b40:	f000 8113 	beq.w	403d6a <parseCommand+0x46a>
      else if(newChar == ',')
  403b44:	282c      	cmp	r0, #44	; 0x2c
  403b46:	f000 8166 	beq.w	403e16 <parseCommand+0x516>
      else if(newChar == '\b')
  403b4a:	2808      	cmp	r0, #8
  403b4c:	f000 8167 	beq.w	403e1e <parseCommand+0x51e>
      else if((newChar >= '0' && newChar <= '9') || newChar == '-')
  403b50:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  403b54:	b2db      	uxtb	r3, r3
  403b56:	2b09      	cmp	r3, #9
  403b58:	d901      	bls.n	403b5e <parseCommand+0x25e>
  403b5a:	282d      	cmp	r0, #45	; 0x2d
  403b5c:	d1e9      	bne.n	403b32 <parseCommand+0x232>
        buf[currentPar][idx] = newChar;
  403b5e:	ab08      	add	r3, sp, #32
  403b60:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
  403b64:	441a      	add	r2, r3
  403b66:	442a      	add	r2, r5
        idx++;
  403b68:	1c6b      	adds	r3, r5, #1
        buf[currentPar][idx] = newChar;
  403b6a:	f802 0c1c 	strb.w	r0, [r2, #-28]
        idx++;
  403b6e:	b2dd      	uxtb	r5, r3
  403b70:	e7df      	b.n	403b32 <parseCommand+0x232>
      buf[x][y] = 0;
  403b72:	2300      	movs	r3, #0
      parsedCMD->cmd =  CMD_SET_ADC_GAIN;
  403b74:	2147      	movs	r1, #71	; 0x47
      buf[x][y] = 0;
  403b76:	461d      	mov	r5, r3
  403b78:	461f      	mov	r7, r3
        buf[currentPar][idx] = 0;
  403b7a:	4698      	mov	r8, r3
      parsedCMD->funcPtr = setADCgain;
  403b7c:	4a1a      	ldr	r2, [pc, #104]	; (403be8 <parseCommand+0x2e8>)
      buf[x][y] = 0;
  403b7e:	9301      	str	r3, [sp, #4]
  403b80:	9302      	str	r3, [sp, #8]
  403b82:	9303      	str	r3, [sp, #12]
  403b84:	9304      	str	r3, [sp, #16]
  403b86:	9305      	str	r3, [sp, #20]
  403b88:	9306      	str	r3, [sp, #24]
  403b8a:	9307      	str	r3, [sp, #28]
      parsedCMD->cmd =  CMD_SET_ADC_GAIN;
  403b8c:	7031      	strb	r1, [r6, #0]
      parsedCMD->funcPtr = setADCgain;
  403b8e:	6072      	str	r2, [r6, #4]
    if(comInterface->available())
  403b90:	6863      	ldr	r3, [r4, #4]
  403b92:	4798      	blx	r3
  403b94:	2800      	cmp	r0, #0
  403b96:	d0fb      	beq.n	403b90 <parseCommand+0x290>
      newChar = comInterface->read();
  403b98:	68a3      	ldr	r3, [r4, #8]
  403b9a:	4798      	blx	r3
      if(newChar == '\r')
  403b9c:	280d      	cmp	r0, #13
  403b9e:	f000 80fc 	beq.w	403d9a <parseCommand+0x49a>
      else if(newChar == ',')
  403ba2:	282c      	cmp	r0, #44	; 0x2c
  403ba4:	f000 8123 	beq.w	403dee <parseCommand+0x4ee>
      else if(newChar == '\b')
  403ba8:	2808      	cmp	r0, #8
  403baa:	f000 8154 	beq.w	403e56 <parseCommand+0x556>
      else if((newChar >= '0' && newChar <= '9') || newChar == '-')
  403bae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  403bb2:	b2db      	uxtb	r3, r3
  403bb4:	2b09      	cmp	r3, #9
  403bb6:	d901      	bls.n	403bbc <parseCommand+0x2bc>
  403bb8:	282d      	cmp	r0, #45	; 0x2d
  403bba:	d1e9      	bne.n	403b90 <parseCommand+0x290>
        buf[currentPar][idx] = newChar;
  403bbc:	ab08      	add	r3, sp, #32
  403bbe:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
  403bc2:	441a      	add	r2, r3
  403bc4:	442a      	add	r2, r5
        idx++;
  403bc6:	1c6b      	adds	r3, r5, #1
        buf[currentPar][idx] = newChar;
  403bc8:	f802 0c1c 	strb.w	r0, [r2, #-28]
        idx++;
  403bcc:	b2dd      	uxtb	r5, r3
  403bce:	e7df      	b.n	403b90 <parseCommand+0x290>
  403bd0:	004035e1 	.word	0x004035e1
  403bd4:	00403615 	.word	0x00403615
  403bd8:	0040367d 	.word	0x0040367d
  403bdc:	004036b5 	.word	0x004036b5
  403be0:	004038a1 	.word	0x004038a1
  403be4:	00403649 	.word	0x00403649
  403be8:	00403725 	.word	0x00403725
      buf[x][y] = 0;
  403bec:	2300      	movs	r3, #0
      parsedCMD->cmd =  CMD_SET_ADC_LOW_RESOLUTION;
  403bee:	214c      	movs	r1, #76	; 0x4c
      buf[x][y] = 0;
  403bf0:	461d      	mov	r5, r3
  403bf2:	461f      	mov	r7, r3
        buf[currentPar][idx] = 0;
  403bf4:	4698      	mov	r8, r3
      parsedCMD->funcPtr = setADClowRes;
  403bf6:	4aa6      	ldr	r2, [pc, #664]	; (403e90 <parseCommand+0x590>)
      buf[x][y] = 0;
  403bf8:	9301      	str	r3, [sp, #4]
  403bfa:	9302      	str	r3, [sp, #8]
  403bfc:	9303      	str	r3, [sp, #12]
  403bfe:	9304      	str	r3, [sp, #16]
  403c00:	9305      	str	r3, [sp, #20]
  403c02:	9306      	str	r3, [sp, #24]
  403c04:	9307      	str	r3, [sp, #28]
      parsedCMD->cmd =  CMD_SET_ADC_LOW_RESOLUTION;
  403c06:	7031      	strb	r1, [r6, #0]
      parsedCMD->funcPtr = setADClowRes;
  403c08:	6072      	str	r2, [r6, #4]
    if(comInterface->available())
  403c0a:	6863      	ldr	r3, [r4, #4]
  403c0c:	4798      	blx	r3
  403c0e:	2800      	cmp	r0, #0
  403c10:	d0fb      	beq.n	403c0a <parseCommand+0x30a>
      newChar = comInterface->read();
  403c12:	68a3      	ldr	r3, [r4, #8]
  403c14:	4798      	blx	r3
      if(newChar == '\r')
  403c16:	280d      	cmp	r0, #13
  403c18:	f000 80a7 	beq.w	403d6a <parseCommand+0x46a>
      else if(newChar == ',')
  403c1c:	282c      	cmp	r0, #44	; 0x2c
  403c1e:	f000 80ea 	beq.w	403df6 <parseCommand+0x4f6>
      else if(newChar == '\b')
  403c22:	2808      	cmp	r0, #8
  403c24:	f000 813e 	beq.w	403ea4 <parseCommand+0x5a4>
      else if((newChar >= '0' && newChar <= '9') || newChar == '-')
  403c28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  403c2c:	b2db      	uxtb	r3, r3
  403c2e:	2b09      	cmp	r3, #9
  403c30:	d901      	bls.n	403c36 <parseCommand+0x336>
  403c32:	282d      	cmp	r0, #45	; 0x2d
  403c34:	d1e9      	bne.n	403c0a <parseCommand+0x30a>
        buf[currentPar][idx] = newChar;
  403c36:	ab08      	add	r3, sp, #32
  403c38:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
  403c3c:	441a      	add	r2, r3
  403c3e:	442a      	add	r2, r5
        idx++;
  403c40:	1c6b      	adds	r3, r5, #1
        buf[currentPar][idx] = newChar;
  403c42:	f802 0c1c 	strb.w	r0, [r2, #-28]
        idx++;
  403c46:	b2dd      	uxtb	r5, r3
  403c48:	e7df      	b.n	403c0a <parseCommand+0x30a>
      buf[x][y] = 0;
  403c4a:	2300      	movs	r3, #0
      parsedCMD->cmd = CMD_SET_MODE;
  403c4c:	214d      	movs	r1, #77	; 0x4d
      buf[x][y] = 0;
  403c4e:	461d      	mov	r5, r3
  403c50:	461f      	mov	r7, r3
        buf[currentPar][idx] = 0;
  403c52:	4698      	mov	r8, r3
      parsedCMD->funcPtr = setMode;
  403c54:	4a8f      	ldr	r2, [pc, #572]	; (403e94 <parseCommand+0x594>)
      buf[x][y] = 0;
  403c56:	9301      	str	r3, [sp, #4]
  403c58:	9302      	str	r3, [sp, #8]
  403c5a:	9303      	str	r3, [sp, #12]
  403c5c:	9304      	str	r3, [sp, #16]
  403c5e:	9305      	str	r3, [sp, #20]
  403c60:	9306      	str	r3, [sp, #24]
  403c62:	9307      	str	r3, [sp, #28]
      parsedCMD->cmd = CMD_SET_MODE;
  403c64:	7031      	strb	r1, [r6, #0]
      parsedCMD->funcPtr = setMode;
  403c66:	6072      	str	r2, [r6, #4]
    if(comInterface->available())
  403c68:	6863      	ldr	r3, [r4, #4]
  403c6a:	4798      	blx	r3
  403c6c:	2800      	cmp	r0, #0
  403c6e:	d0fb      	beq.n	403c68 <parseCommand+0x368>
      newChar = comInterface->read();
  403c70:	68a3      	ldr	r3, [r4, #8]
  403c72:	4798      	blx	r3
      if(newChar == '\r')
  403c74:	280d      	cmp	r0, #13
  403c76:	d078      	beq.n	403d6a <parseCommand+0x46a>
      else if(newChar == ',')
  403c78:	282c      	cmp	r0, #44	; 0x2c
  403c7a:	f000 80c4 	beq.w	403e06 <parseCommand+0x506>
      else if(newChar == '\b')
  403c7e:	2808      	cmp	r0, #8
  403c80:	f000 81a1 	beq.w	403fc6 <parseCommand+0x6c6>
      else if((newChar >= '0' && newChar <= '9') || newChar == '-')
  403c84:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  403c88:	b2db      	uxtb	r3, r3
  403c8a:	2b09      	cmp	r3, #9
  403c8c:	d901      	bls.n	403c92 <parseCommand+0x392>
  403c8e:	282d      	cmp	r0, #45	; 0x2d
  403c90:	d1ea      	bne.n	403c68 <parseCommand+0x368>
        buf[currentPar][idx] = newChar;
  403c92:	ab08      	add	r3, sp, #32
  403c94:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
  403c98:	441a      	add	r2, r3
  403c9a:	442a      	add	r2, r5
        idx++;
  403c9c:	1c6b      	adds	r3, r5, #1
        buf[currentPar][idx] = newChar;
  403c9e:	f802 0c1c 	strb.w	r0, [r2, #-28]
        idx++;
  403ca2:	b2dd      	uxtb	r5, r3
  403ca4:	e7e0      	b.n	403c68 <parseCommand+0x368>
      buf[x][y] = 0;
  403ca6:	2300      	movs	r3, #0
      parsedCMD->cmd = CMD_SET_SAMPLE_PERIOD;
  403ca8:	2152      	movs	r1, #82	; 0x52
      buf[x][y] = 0;
  403caa:	461d      	mov	r5, r3
  403cac:	461f      	mov	r7, r3
        buf[currentPar][idx] = 0;
  403cae:	4698      	mov	r8, r3
      parsedCMD->funcPtr = setSamplePeriod;
  403cb0:	4a79      	ldr	r2, [pc, #484]	; (403e98 <parseCommand+0x598>)
      buf[x][y] = 0;
  403cb2:	9301      	str	r3, [sp, #4]
  403cb4:	9302      	str	r3, [sp, #8]
  403cb6:	9303      	str	r3, [sp, #12]
  403cb8:	9304      	str	r3, [sp, #16]
  403cba:	9305      	str	r3, [sp, #20]
  403cbc:	9306      	str	r3, [sp, #24]
  403cbe:	9307      	str	r3, [sp, #28]
      parsedCMD->cmd = CMD_SET_SAMPLE_PERIOD;
  403cc0:	7031      	strb	r1, [r6, #0]
      parsedCMD->funcPtr = setSamplePeriod;
  403cc2:	6072      	str	r2, [r6, #4]
    if(comInterface->available())
  403cc4:	6863      	ldr	r3, [r4, #4]
  403cc6:	4798      	blx	r3
  403cc8:	2800      	cmp	r0, #0
  403cca:	d0fb      	beq.n	403cc4 <parseCommand+0x3c4>
      newChar = comInterface->read();
  403ccc:	68a3      	ldr	r3, [r4, #8]
  403cce:	4798      	blx	r3
      if(newChar == '\r')
  403cd0:	280d      	cmp	r0, #13
  403cd2:	d04a      	beq.n	403d6a <parseCommand+0x46a>
      else if(newChar == ',')
  403cd4:	282c      	cmp	r0, #44	; 0x2c
  403cd6:	f000 8086 	beq.w	403de6 <parseCommand+0x4e6>
      else if(newChar == '\b')
  403cda:	2808      	cmp	r0, #8
  403cdc:	f000 8139 	beq.w	403f52 <parseCommand+0x652>
      else if((newChar >= '0' && newChar <= '9') || newChar == '-')
  403ce0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  403ce4:	b2db      	uxtb	r3, r3
  403ce6:	2b09      	cmp	r3, #9
  403ce8:	d901      	bls.n	403cee <parseCommand+0x3ee>
  403cea:	282d      	cmp	r0, #45	; 0x2d
  403cec:	d1ea      	bne.n	403cc4 <parseCommand+0x3c4>
        buf[currentPar][idx] = newChar;
  403cee:	ab08      	add	r3, sp, #32
  403cf0:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
  403cf4:	441a      	add	r2, r3
  403cf6:	442a      	add	r2, r5
        idx++;
  403cf8:	1c6b      	adds	r3, r5, #1
        buf[currentPar][idx] = newChar;
  403cfa:	f802 0c1c 	strb.w	r0, [r2, #-28]
        idx++;
  403cfe:	b2dd      	uxtb	r5, r3
  403d00:	e7e0      	b.n	403cc4 <parseCommand+0x3c4>
      buf[x][y] = 0;
  403d02:	2300      	movs	r3, #0
      parsedCMD->cmd = CMD_START_ACQ;
  403d04:	2153      	movs	r1, #83	; 0x53
      buf[x][y] = 0;
  403d06:	461d      	mov	r5, r3
  403d08:	461f      	mov	r7, r3
        buf[currentPar][idx] = 0;
  403d0a:	4698      	mov	r8, r3
      parsedCMD->funcPtr = startACQ;
  403d0c:	4a63      	ldr	r2, [pc, #396]	; (403e9c <parseCommand+0x59c>)
      buf[x][y] = 0;
  403d0e:	9301      	str	r3, [sp, #4]
  403d10:	9302      	str	r3, [sp, #8]
  403d12:	9303      	str	r3, [sp, #12]
  403d14:	9304      	str	r3, [sp, #16]
  403d16:	9305      	str	r3, [sp, #20]
  403d18:	9306      	str	r3, [sp, #24]
  403d1a:	9307      	str	r3, [sp, #28]
      parsedCMD->cmd = CMD_START_ACQ;
  403d1c:	7031      	strb	r1, [r6, #0]
      parsedCMD->funcPtr = startACQ;
  403d1e:	6072      	str	r2, [r6, #4]
    if(comInterface->available())
  403d20:	6863      	ldr	r3, [r4, #4]
  403d22:	4798      	blx	r3
  403d24:	2800      	cmp	r0, #0
  403d26:	d0fb      	beq.n	403d20 <parseCommand+0x420>
      newChar = comInterface->read();
  403d28:	68a3      	ldr	r3, [r4, #8]
  403d2a:	4798      	blx	r3
      if(newChar == '\r')
  403d2c:	280d      	cmp	r0, #13
  403d2e:	d032      	beq.n	403d96 <parseCommand+0x496>
      else if(newChar == ',')
  403d30:	282c      	cmp	r0, #44	; 0x2c
  403d32:	d064      	beq.n	403dfe <parseCommand+0x4fe>
      else if(newChar == '\b')
  403d34:	2808      	cmp	r0, #8
  403d36:	f000 8129 	beq.w	403f8c <parseCommand+0x68c>
      else if((newChar >= '0' && newChar <= '9') || newChar == '-')
  403d3a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  403d3e:	b2db      	uxtb	r3, r3
  403d40:	2b09      	cmp	r3, #9
  403d42:	d901      	bls.n	403d48 <parseCommand+0x448>
  403d44:	282d      	cmp	r0, #45	; 0x2d
  403d46:	d1eb      	bne.n	403d20 <parseCommand+0x420>
        buf[currentPar][idx] = newChar;
  403d48:	ab08      	add	r3, sp, #32
  403d4a:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
  403d4e:	441a      	add	r2, r3
  403d50:	442a      	add	r2, r5
        idx++;
  403d52:	1c6b      	adds	r3, r5, #1
        buf[currentPar][idx] = newChar;
  403d54:	f802 0c1c 	strb.w	r0, [r2, #-28]
        idx++;
  403d58:	b2dd      	uxtb	r5, r3
  403d5a:	e7e1      	b.n	403d20 <parseCommand+0x420>
      parsedCMD->cmd = 0;
  403d5c:	2300      	movs	r3, #0
  403d5e:	700b      	strb	r3, [r1, #0]
      parsedCMD->funcPtr = NULL;
  403d60:	604b      	str	r3, [r1, #4]
} /*** end of parseCommand ***/
  403d62:	4618      	mov	r0, r3
  403d64:	b008      	add	sp, #32
  403d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((parCount == (currentPar + 1) && idx) || !parCount)
  403d6a:	b327      	cbz	r7, 403db6 <parseCommand+0x4b6>
  403d6c:	2300      	movs	r3, #0
} /*** end of parseCommand ***/
  403d6e:	4618      	mov	r0, r3
  403d70:	b008      	add	sp, #32
  403d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((parCount == (currentPar + 1) && idx) || !parCount)
  403d76:	2f03      	cmp	r7, #3
  403d78:	d1f8      	bne.n	403d6c <parseCommand+0x46c>
  403d7a:	2d00      	cmp	r5, #0
  403d7c:	d0f6      	beq.n	403d6c <parseCommand+0x46c>
  403d7e:	4f48      	ldr	r7, [pc, #288]	; (403ea0 <parseCommand+0x5a0>)
  403d80:	1d34      	adds	r4, r6, #4
  403d82:	ad01      	add	r5, sp, #4
  403d84:	3614      	adds	r6, #20
          for(uint8_t i=0; i<parCount; i++) *(parPtr + i)=(int32_t)atoll((char*)buf[i]);
  403d86:	4628      	mov	r0, r5
  403d88:	47b8      	blx	r7
  403d8a:	f844 0f04 	str.w	r0, [r4, #4]!
  403d8e:	42b4      	cmp	r4, r6
  403d90:	f105 0507 	add.w	r5, r5, #7
  403d94:	d1f7      	bne.n	403d86 <parseCommand+0x486>
  403d96:	2301      	movs	r3, #1
  403d98:	e7e3      	b.n	403d62 <parseCommand+0x462>
        if((parCount == (currentPar + 1) && idx) || !parCount)
  403d9a:	2f01      	cmp	r7, #1
  403d9c:	d1e6      	bne.n	403d6c <parseCommand+0x46c>
  403d9e:	2d00      	cmp	r5, #0
  403da0:	d0e4      	beq.n	403d6c <parseCommand+0x46c>
          for(uint8_t i=0; i<parCount; i++) *(parPtr + i)=(int32_t)atoll((char*)buf[i]);
  403da2:	4c3f      	ldr	r4, [pc, #252]	; (403ea0 <parseCommand+0x5a0>)
  403da4:	a801      	add	r0, sp, #4
  403da6:	47a0      	blx	r4
  403da8:	60b0      	str	r0, [r6, #8]
  403daa:	f10d 000b 	add.w	r0, sp, #11
  403dae:	47a0      	blx	r4
  403db0:	463b      	mov	r3, r7
  403db2:	60f0      	str	r0, [r6, #12]
  403db4:	e7d5      	b.n	403d62 <parseCommand+0x462>
        if((parCount == (currentPar + 1) && idx) || !parCount)
  403db6:	2d00      	cmp	r5, #0
  403db8:	d0d8      	beq.n	403d6c <parseCommand+0x46c>
          for(uint8_t i=0; i<parCount; i++) *(parPtr + i)=(int32_t)atoll((char*)buf[i]);
  403dba:	4b39      	ldr	r3, [pc, #228]	; (403ea0 <parseCommand+0x5a0>)
  403dbc:	a801      	add	r0, sp, #4
  403dbe:	4798      	blx	r3
  403dc0:	2301      	movs	r3, #1
  403dc2:	60b0      	str	r0, [r6, #8]
  return result;
  403dc4:	e7cd      	b.n	403d62 <parseCommand+0x462>
        currentPar++;
  403dc6:	3701      	adds	r7, #1
  403dc8:	b2ff      	uxtb	r7, r7
        idx = 0;
  403dca:	2500      	movs	r5, #0
  403dcc:	e5f5      	b.n	4039ba <parseCommand+0xba>
        currentPar++;
  403dce:	3701      	adds	r7, #1
  403dd0:	b2ff      	uxtb	r7, r7
        idx = 0;
  403dd2:	2500      	movs	r5, #0
  403dd4:	e5c2      	b.n	40395c <parseCommand+0x5c>
        currentPar++;
  403dd6:	1c7b      	adds	r3, r7, #1
  403dd8:	b2df      	uxtb	r7, r3
        idx = 0;
  403dda:	2500      	movs	r5, #0
  403ddc:	e64b      	b.n	403a76 <parseCommand+0x176>
        currentPar++;
  403dde:	3701      	adds	r7, #1
  403de0:	b2ff      	uxtb	r7, r7
        idx = 0;
  403de2:	2500      	movs	r5, #0
  403de4:	e676      	b.n	403ad4 <parseCommand+0x1d4>
        currentPar++;
  403de6:	3701      	adds	r7, #1
  403de8:	b2ff      	uxtb	r7, r7
        idx = 0;
  403dea:	2500      	movs	r5, #0
  403dec:	e76a      	b.n	403cc4 <parseCommand+0x3c4>
        currentPar++;
  403dee:	1c7b      	adds	r3, r7, #1
  403df0:	b2df      	uxtb	r7, r3
        idx = 0;
  403df2:	2500      	movs	r5, #0
  403df4:	e6cc      	b.n	403b90 <parseCommand+0x290>
        currentPar++;
  403df6:	3701      	adds	r7, #1
  403df8:	b2ff      	uxtb	r7, r7
        idx = 0;
  403dfa:	2500      	movs	r5, #0
  403dfc:	e705      	b.n	403c0a <parseCommand+0x30a>
        currentPar++;
  403dfe:	3701      	adds	r7, #1
  403e00:	b2ff      	uxtb	r7, r7
        idx = 0;
  403e02:	2500      	movs	r5, #0
  403e04:	e78c      	b.n	403d20 <parseCommand+0x420>
        currentPar++;
  403e06:	3701      	adds	r7, #1
  403e08:	b2ff      	uxtb	r7, r7
        idx = 0;
  403e0a:	2500      	movs	r5, #0
  403e0c:	e72c      	b.n	403c68 <parseCommand+0x368>
        currentPar++;
  403e0e:	3701      	adds	r7, #1
  403e10:	b2ff      	uxtb	r7, r7
        idx = 0;
  403e12:	2500      	movs	r5, #0
  403e14:	e600      	b.n	403a18 <parseCommand+0x118>
        currentPar++;
  403e16:	3701      	adds	r7, #1
  403e18:	b2ff      	uxtb	r7, r7
        idx = 0;
  403e1a:	2500      	movs	r5, #0
  403e1c:	e689      	b.n	403b32 <parseCommand+0x232>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403e1e:	00fa      	lsls	r2, r7, #3
  403e20:	1bd3      	subs	r3, r2, r7
  403e22:	a908      	add	r1, sp, #32
  403e24:	440b      	add	r3, r1
  403e26:	442b      	add	r3, r5
  403e28:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
  403e2c:	2b2c      	cmp	r3, #44	; 0x2c
  403e2e:	d00a      	beq.n	403e46 <parseCommand+0x546>
        else if(idx) idx--;
  403e30:	2d00      	cmp	r5, #0
  403e32:	d09b      	beq.n	403d6c <parseCommand+0x46c>
  403e34:	1e6b      	subs	r3, r5, #1
  403e36:	b2dd      	uxtb	r5, r3
        buf[currentPar][idx] = 0;
  403e38:	1bd3      	subs	r3, r2, r7
  403e3a:	aa08      	add	r2, sp, #32
  403e3c:	4413      	add	r3, r2
  403e3e:	442b      	add	r3, r5
  403e40:	f803 8c1c 	strb.w	r8, [r3, #-28]
  403e44:	e675      	b.n	403b32 <parseCommand+0x232>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403e46:	2f00      	cmp	r7, #0
  403e48:	d0f2      	beq.n	403e30 <parseCommand+0x530>
          currentPar--;
  403e4a:	3f01      	subs	r7, #1
  403e4c:	b2ff      	uxtb	r7, r7
          idx = prevIdx + 1;
  403e4e:	1c6b      	adds	r3, r5, #1
  403e50:	b2dd      	uxtb	r5, r3
  403e52:	00fa      	lsls	r2, r7, #3
  403e54:	e7f0      	b.n	403e38 <parseCommand+0x538>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403e56:	00fa      	lsls	r2, r7, #3
  403e58:	1bd3      	subs	r3, r2, r7
  403e5a:	a908      	add	r1, sp, #32
  403e5c:	440b      	add	r3, r1
  403e5e:	442b      	add	r3, r5
  403e60:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
  403e64:	2b2c      	cmp	r3, #44	; 0x2c
  403e66:	d00b      	beq.n	403e80 <parseCommand+0x580>
        else if(idx) idx--;
  403e68:	2d00      	cmp	r5, #0
  403e6a:	f43f af7f 	beq.w	403d6c <parseCommand+0x46c>
  403e6e:	1e6b      	subs	r3, r5, #1
  403e70:	b2dd      	uxtb	r5, r3
        buf[currentPar][idx] = 0;
  403e72:	1bd3      	subs	r3, r2, r7
  403e74:	aa08      	add	r2, sp, #32
  403e76:	4413      	add	r3, r2
  403e78:	442b      	add	r3, r5
  403e7a:	f803 8c1c 	strb.w	r8, [r3, #-28]
  403e7e:	e687      	b.n	403b90 <parseCommand+0x290>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403e80:	2f00      	cmp	r7, #0
  403e82:	d0f1      	beq.n	403e68 <parseCommand+0x568>
          currentPar--;
  403e84:	1e7b      	subs	r3, r7, #1
  403e86:	b2df      	uxtb	r7, r3
          idx = prevIdx + 1;
  403e88:	1c6b      	adds	r3, r5, #1
  403e8a:	b2dd      	uxtb	r5, r3
  403e8c:	00fa      	lsls	r2, r7, #3
  403e8e:	e7f0      	b.n	403e72 <parseCommand+0x572>
  403e90:	00403769 	.word	0x00403769
  403e94:	004037e1 	.word	0x004037e1
  403e98:	00403859 	.word	0x00403859
  403e9c:	004035ad 	.word	0x004035ad
  403ea0:	00404b09 	.word	0x00404b09
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403ea4:	00fa      	lsls	r2, r7, #3
  403ea6:	1bd3      	subs	r3, r2, r7
  403ea8:	a908      	add	r1, sp, #32
  403eaa:	440b      	add	r3, r1
  403eac:	442b      	add	r3, r5
  403eae:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
  403eb2:	2b2c      	cmp	r3, #44	; 0x2c
  403eb4:	d00b      	beq.n	403ece <parseCommand+0x5ce>
        else if(idx) idx--;
  403eb6:	2d00      	cmp	r5, #0
  403eb8:	f43f af58 	beq.w	403d6c <parseCommand+0x46c>
  403ebc:	1e6b      	subs	r3, r5, #1
  403ebe:	b2dd      	uxtb	r5, r3
        buf[currentPar][idx] = 0;
  403ec0:	1bd3      	subs	r3, r2, r7
  403ec2:	aa08      	add	r2, sp, #32
  403ec4:	4413      	add	r3, r2
  403ec6:	442b      	add	r3, r5
  403ec8:	f803 8c1c 	strb.w	r8, [r3, #-28]
  403ecc:	e69d      	b.n	403c0a <parseCommand+0x30a>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403ece:	2f00      	cmp	r7, #0
  403ed0:	d0f1      	beq.n	403eb6 <parseCommand+0x5b6>
          currentPar--;
  403ed2:	3f01      	subs	r7, #1
  403ed4:	b2ff      	uxtb	r7, r7
          idx = prevIdx + 1;
  403ed6:	1c6b      	adds	r3, r5, #1
  403ed8:	b2dd      	uxtb	r5, r3
  403eda:	00fa      	lsls	r2, r7, #3
  403edc:	e7f0      	b.n	403ec0 <parseCommand+0x5c0>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403ede:	00fa      	lsls	r2, r7, #3
  403ee0:	1bd3      	subs	r3, r2, r7
  403ee2:	a908      	add	r1, sp, #32
  403ee4:	440b      	add	r3, r1
  403ee6:	442b      	add	r3, r5
  403ee8:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
  403eec:	2b2c      	cmp	r3, #44	; 0x2c
  403eee:	d00b      	beq.n	403f08 <parseCommand+0x608>
        else if(idx) idx--;
  403ef0:	2d00      	cmp	r5, #0
  403ef2:	f43f af3b 	beq.w	403d6c <parseCommand+0x46c>
  403ef6:	1e6b      	subs	r3, r5, #1
  403ef8:	b2dd      	uxtb	r5, r3
        buf[currentPar][idx] = 0;
  403efa:	1bd3      	subs	r3, r2, r7
  403efc:	aa08      	add	r2, sp, #32
  403efe:	4413      	add	r3, r2
  403f00:	442b      	add	r3, r5
  403f02:	f803 8c1c 	strb.w	r8, [r3, #-28]
  403f06:	e5b6      	b.n	403a76 <parseCommand+0x176>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403f08:	2f00      	cmp	r7, #0
  403f0a:	d0f1      	beq.n	403ef0 <parseCommand+0x5f0>
          currentPar--;
  403f0c:	1e7b      	subs	r3, r7, #1
  403f0e:	b2df      	uxtb	r7, r3
          idx = prevIdx + 1;
  403f10:	1c6b      	adds	r3, r5, #1
  403f12:	b2dd      	uxtb	r5, r3
  403f14:	00fa      	lsls	r2, r7, #3
  403f16:	e7f0      	b.n	403efa <parseCommand+0x5fa>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403f18:	00fa      	lsls	r2, r7, #3
  403f1a:	1bd3      	subs	r3, r2, r7
  403f1c:	a908      	add	r1, sp, #32
  403f1e:	440b      	add	r3, r1
  403f20:	442b      	add	r3, r5
  403f22:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
  403f26:	2b2c      	cmp	r3, #44	; 0x2c
  403f28:	d00b      	beq.n	403f42 <parseCommand+0x642>
        else if(idx) idx--;
  403f2a:	2d00      	cmp	r5, #0
  403f2c:	f43f af1e 	beq.w	403d6c <parseCommand+0x46c>
  403f30:	1e6b      	subs	r3, r5, #1
  403f32:	b2dd      	uxtb	r5, r3
        buf[currentPar][idx] = 0;
  403f34:	1bd3      	subs	r3, r2, r7
  403f36:	aa08      	add	r2, sp, #32
  403f38:	4413      	add	r3, r2
  403f3a:	442b      	add	r3, r5
  403f3c:	f803 8c1c 	strb.w	r8, [r3, #-28]
  403f40:	e5c8      	b.n	403ad4 <parseCommand+0x1d4>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403f42:	2f00      	cmp	r7, #0
  403f44:	d0f1      	beq.n	403f2a <parseCommand+0x62a>
          currentPar--;
  403f46:	3f01      	subs	r7, #1
  403f48:	b2ff      	uxtb	r7, r7
          idx = prevIdx + 1;
  403f4a:	1c6b      	adds	r3, r5, #1
  403f4c:	b2dd      	uxtb	r5, r3
  403f4e:	00fa      	lsls	r2, r7, #3
  403f50:	e7f0      	b.n	403f34 <parseCommand+0x634>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403f52:	00fa      	lsls	r2, r7, #3
  403f54:	1bd3      	subs	r3, r2, r7
  403f56:	a908      	add	r1, sp, #32
  403f58:	440b      	add	r3, r1
  403f5a:	442b      	add	r3, r5
  403f5c:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
  403f60:	2b2c      	cmp	r3, #44	; 0x2c
  403f62:	d00b      	beq.n	403f7c <parseCommand+0x67c>
        else if(idx) idx--;
  403f64:	2d00      	cmp	r5, #0
  403f66:	f43f af01 	beq.w	403d6c <parseCommand+0x46c>
  403f6a:	1e6b      	subs	r3, r5, #1
  403f6c:	b2dd      	uxtb	r5, r3
        buf[currentPar][idx] = 0;
  403f6e:	1bd3      	subs	r3, r2, r7
  403f70:	aa08      	add	r2, sp, #32
  403f72:	4413      	add	r3, r2
  403f74:	442b      	add	r3, r5
  403f76:	f803 8c1c 	strb.w	r8, [r3, #-28]
  403f7a:	e6a3      	b.n	403cc4 <parseCommand+0x3c4>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403f7c:	2f00      	cmp	r7, #0
  403f7e:	d0f1      	beq.n	403f64 <parseCommand+0x664>
          currentPar--;
  403f80:	3f01      	subs	r7, #1
  403f82:	b2ff      	uxtb	r7, r7
          idx = prevIdx + 1;
  403f84:	1c6b      	adds	r3, r5, #1
  403f86:	b2dd      	uxtb	r5, r3
  403f88:	00fa      	lsls	r2, r7, #3
  403f8a:	e7f0      	b.n	403f6e <parseCommand+0x66e>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403f8c:	00fa      	lsls	r2, r7, #3
  403f8e:	1bd3      	subs	r3, r2, r7
  403f90:	a908      	add	r1, sp, #32
  403f92:	440b      	add	r3, r1
  403f94:	442b      	add	r3, r5
  403f96:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
  403f9a:	2b2c      	cmp	r3, #44	; 0x2c
  403f9c:	d00b      	beq.n	403fb6 <parseCommand+0x6b6>
        else if(idx) idx--;
  403f9e:	2d00      	cmp	r5, #0
  403fa0:	f43f aee4 	beq.w	403d6c <parseCommand+0x46c>
  403fa4:	1e6b      	subs	r3, r5, #1
  403fa6:	b2dd      	uxtb	r5, r3
        buf[currentPar][idx] = 0;
  403fa8:	1bd3      	subs	r3, r2, r7
  403faa:	aa08      	add	r2, sp, #32
  403fac:	4413      	add	r3, r2
  403fae:	442b      	add	r3, r5
  403fb0:	f803 8c1c 	strb.w	r8, [r3, #-28]
  403fb4:	e6b4      	b.n	403d20 <parseCommand+0x420>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403fb6:	2f00      	cmp	r7, #0
  403fb8:	d0f1      	beq.n	403f9e <parseCommand+0x69e>
          currentPar--;
  403fba:	3f01      	subs	r7, #1
  403fbc:	b2ff      	uxtb	r7, r7
          idx = prevIdx + 1;
  403fbe:	1c6b      	adds	r3, r5, #1
  403fc0:	b2dd      	uxtb	r5, r3
  403fc2:	00fa      	lsls	r2, r7, #3
  403fc4:	e7f0      	b.n	403fa8 <parseCommand+0x6a8>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403fc6:	00fa      	lsls	r2, r7, #3
  403fc8:	1bd3      	subs	r3, r2, r7
  403fca:	a908      	add	r1, sp, #32
  403fcc:	440b      	add	r3, r1
  403fce:	442b      	add	r3, r5
  403fd0:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
  403fd4:	2b2c      	cmp	r3, #44	; 0x2c
  403fd6:	d00b      	beq.n	403ff0 <parseCommand+0x6f0>
        else if(idx) idx--;
  403fd8:	2d00      	cmp	r5, #0
  403fda:	f43f aec7 	beq.w	403d6c <parseCommand+0x46c>
  403fde:	1e6b      	subs	r3, r5, #1
  403fe0:	b2dd      	uxtb	r5, r3
        buf[currentPar][idx] = 0;
  403fe2:	1bd3      	subs	r3, r2, r7
  403fe4:	aa08      	add	r2, sp, #32
  403fe6:	4413      	add	r3, r2
  403fe8:	442b      	add	r3, r5
  403fea:	f803 8c1c 	strb.w	r8, [r3, #-28]
  403fee:	e63b      	b.n	403c68 <parseCommand+0x368>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  403ff0:	2f00      	cmp	r7, #0
  403ff2:	d0f1      	beq.n	403fd8 <parseCommand+0x6d8>
          currentPar--;
  403ff4:	3f01      	subs	r7, #1
  403ff6:	b2ff      	uxtb	r7, r7
          idx = prevIdx + 1;
  403ff8:	1c6b      	adds	r3, r5, #1
  403ffa:	b2dd      	uxtb	r5, r3
  403ffc:	00fa      	lsls	r2, r7, #3
  403ffe:	e7f0      	b.n	403fe2 <parseCommand+0x6e2>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  404000:	00fa      	lsls	r2, r7, #3
  404002:	1bd3      	subs	r3, r2, r7
  404004:	a908      	add	r1, sp, #32
  404006:	440b      	add	r3, r1
  404008:	442b      	add	r3, r5
  40400a:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
  40400e:	2b2c      	cmp	r3, #44	; 0x2c
  404010:	d00b      	beq.n	40402a <parseCommand+0x72a>
        else if(idx) idx--;
  404012:	2d00      	cmp	r5, #0
  404014:	f43f aeaa 	beq.w	403d6c <parseCommand+0x46c>
  404018:	1e6b      	subs	r3, r5, #1
  40401a:	b2dd      	uxtb	r5, r3
        buf[currentPar][idx] = 0;
  40401c:	1bd3      	subs	r3, r2, r7
  40401e:	aa08      	add	r2, sp, #32
  404020:	4413      	add	r3, r2
  404022:	442b      	add	r3, r5
  404024:	f803 8c1c 	strb.w	r8, [r3, #-28]
  404028:	e4f6      	b.n	403a18 <parseCommand+0x118>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  40402a:	2f00      	cmp	r7, #0
  40402c:	d0f1      	beq.n	404012 <parseCommand+0x712>
          currentPar--;
  40402e:	3f01      	subs	r7, #1
  404030:	b2ff      	uxtb	r7, r7
          idx = prevIdx + 1;
  404032:	1c6b      	adds	r3, r5, #1
  404034:	b2dd      	uxtb	r5, r3
  404036:	00fa      	lsls	r2, r7, #3
  404038:	e7f0      	b.n	40401c <parseCommand+0x71c>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  40403a:	00fa      	lsls	r2, r7, #3
  40403c:	1bd3      	subs	r3, r2, r7
  40403e:	a908      	add	r1, sp, #32
  404040:	440b      	add	r3, r1
  404042:	442b      	add	r3, r5
  404044:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
  404048:	2b2c      	cmp	r3, #44	; 0x2c
  40404a:	d00b      	beq.n	404064 <parseCommand+0x764>
        else if(idx) idx--;
  40404c:	2d00      	cmp	r5, #0
  40404e:	f43f ae8d 	beq.w	403d6c <parseCommand+0x46c>
  404052:	1e6b      	subs	r3, r5, #1
  404054:	b2dd      	uxtb	r5, r3
        buf[currentPar][idx] = 0;
  404056:	1bd3      	subs	r3, r2, r7
  404058:	aa08      	add	r2, sp, #32
  40405a:	4413      	add	r3, r2
  40405c:	442b      	add	r3, r5
  40405e:	f803 8c1c 	strb.w	r8, [r3, #-28]
  404062:	e47b      	b.n	40395c <parseCommand+0x5c>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  404064:	2f00      	cmp	r7, #0
  404066:	d0f1      	beq.n	40404c <parseCommand+0x74c>
          currentPar--;
  404068:	3f01      	subs	r7, #1
  40406a:	b2ff      	uxtb	r7, r7
          idx = prevIdx + 1;
  40406c:	1c6b      	adds	r3, r5, #1
  40406e:	b2dd      	uxtb	r5, r3
  404070:	00fa      	lsls	r2, r7, #3
  404072:	e7f0      	b.n	404056 <parseCommand+0x756>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  404074:	00fa      	lsls	r2, r7, #3
  404076:	1bd3      	subs	r3, r2, r7
  404078:	a908      	add	r1, sp, #32
  40407a:	440b      	add	r3, r1
  40407c:	442b      	add	r3, r5
  40407e:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
  404082:	2b2c      	cmp	r3, #44	; 0x2c
  404084:	d00b      	beq.n	40409e <parseCommand+0x79e>
        else if(idx) idx--;
  404086:	2d00      	cmp	r5, #0
  404088:	f43f ae70 	beq.w	403d6c <parseCommand+0x46c>
  40408c:	1e6b      	subs	r3, r5, #1
  40408e:	b2dd      	uxtb	r5, r3
        buf[currentPar][idx] = 0;
  404090:	1bd3      	subs	r3, r2, r7
  404092:	aa08      	add	r2, sp, #32
  404094:	4413      	add	r3, r2
  404096:	442b      	add	r3, r5
  404098:	f803 8c1c 	strb.w	r8, [r3, #-28]
  40409c:	e48d      	b.n	4039ba <parseCommand+0xba>
        if (buf[currentPar][idx - 1] == ',' && currentPar)
  40409e:	2f00      	cmp	r7, #0
  4040a0:	d0f1      	beq.n	404086 <parseCommand+0x786>
          currentPar--;
  4040a2:	3f01      	subs	r7, #1
  4040a4:	b2ff      	uxtb	r7, r7
          idx = prevIdx + 1;
  4040a6:	1c6b      	adds	r3, r5, #1
  4040a8:	b2dd      	uxtb	r5, r3
  4040aa:	00fa      	lsls	r2, r7, #3
  4040ac:	e7f0      	b.n	404090 <parseCommand+0x790>
  4040ae:	bf00      	nop

004040b0 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  4040b0:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4040b2:	213e      	movs	r1, #62	; 0x3e
  4040b4:	2000      	movs	r0, #0
  4040b6:	4b0b      	ldr	r3, [pc, #44]	; (4040e4 <sysclk_enable_usb+0x34>)
  4040b8:	4798      	blx	r3
  4040ba:	4c0b      	ldr	r4, [pc, #44]	; (4040e8 <sysclk_enable_usb+0x38>)
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4040bc:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4040be:	2800      	cmp	r0, #0
  4040c0:	d0fc      	beq.n	4040bc <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  4040c2:	4b0a      	ldr	r3, [pc, #40]	; (4040ec <sysclk_enable_usb+0x3c>)
  4040c4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4040c6:	4b0a      	ldr	r3, [pc, #40]	; (4040f0 <sysclk_enable_usb+0x40>)
  4040c8:	4a0a      	ldr	r2, [pc, #40]	; (4040f4 <sysclk_enable_usb+0x44>)
  4040ca:	4c0b      	ldr	r4, [pc, #44]	; (4040f8 <sysclk_enable_usb+0x48>)
  4040cc:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  4040ce:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4040d0:	2800      	cmp	r0, #0
  4040d2:	d0fc      	beq.n	4040ce <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  4040d4:	4b09      	ldr	r3, [pc, #36]	; (4040fc <sysclk_enable_usb+0x4c>)
  4040d6:	2001      	movs	r0, #1
  4040d8:	4798      	blx	r3
		pmc_enable_udpck();
		return;
	}
#endif
}
  4040da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pmc_enable_udpck();
  4040de:	4b08      	ldr	r3, [pc, #32]	; (404100 <sysclk_enable_usb+0x50>)
  4040e0:	4718      	bx	r3
  4040e2:	bf00      	nop
  4040e4:	00404289 	.word	0x00404289
  4040e8:	004042d9 	.word	0x004042d9
  4040ec:	00404309 	.word	0x00404309
  4040f0:	400e0400 	.word	0x400e0400
  4040f4:	00113f03 	.word	0x00113f03
  4040f8:	00404315 	.word	0x00404315
  4040fc:	004043ad 	.word	0x004043ad
  404100:	004043c1 	.word	0x004043c1

00404104 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404104:	b570      	push	{r4, r5, r6, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  404106:	480f      	ldr	r0, [pc, #60]	; (404144 <sysclk_init+0x40>)
  404108:	4d0f      	ldr	r5, [pc, #60]	; (404148 <sysclk_init+0x44>)
  40410a:	47a8      	blx	r5
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40410c:	213e      	movs	r1, #62	; 0x3e
  40410e:	2000      	movs	r0, #0
  404110:	4b0e      	ldr	r3, [pc, #56]	; (40414c <sysclk_init+0x48>)
  404112:	4798      	blx	r3
  404114:	4c0e      	ldr	r4, [pc, #56]	; (404150 <sysclk_init+0x4c>)
		return pmc_osc_is_ready_mainck();
  404116:	47a0      	blx	r4
  404118:	2800      	cmp	r0, #0
  40411a:	d0fc      	beq.n	404116 <sysclk_init+0x12>
		pmc_disable_pllack(); // Always stop PLL first!
  40411c:	4b0d      	ldr	r3, [pc, #52]	; (404154 <sysclk_init+0x50>)
  40411e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404120:	4b0d      	ldr	r3, [pc, #52]	; (404158 <sysclk_init+0x54>)
  404122:	4a0e      	ldr	r2, [pc, #56]	; (40415c <sysclk_init+0x58>)
  404124:	4c0e      	ldr	r4, [pc, #56]	; (404160 <sysclk_init+0x5c>)
  404126:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
  404128:	47a0      	blx	r4
  40412a:	2800      	cmp	r0, #0
  40412c:	d0fc      	beq.n	404128 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40412e:	4b0d      	ldr	r3, [pc, #52]	; (404164 <sysclk_init+0x60>)
  404130:	2010      	movs	r0, #16
  404132:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  404134:	4b0c      	ldr	r3, [pc, #48]	; (404168 <sysclk_init+0x64>)
  404136:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404138:	462b      	mov	r3, r5

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40413a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  40413e:	4801      	ldr	r0, [pc, #4]	; (404144 <sysclk_init+0x40>)
  404140:	4718      	bx	r3
  404142:	bf00      	nop
  404144:	03d09000 	.word	0x03d09000
  404148:	20000089 	.word	0x20000089
  40414c:	00404289 	.word	0x00404289
  404150:	004042d9 	.word	0x004042d9
  404154:	004042e9 	.word	0x004042e9
  404158:	400e0400 	.word	0x400e0400
  40415c:	20173f03 	.word	0x20173f03
  404160:	004042f9 	.word	0x004042f9
  404164:	00404231 	.word	0x00404231
  404168:	0040452d 	.word	0x0040452d

0040416c <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  40416c:	2301      	movs	r3, #1
  40416e:	6003      	str	r3, [r0, #0]
  404170:	4770      	bx	lr
  404172:	bf00      	nop

00404174 <dacc_set_transfer_mode>:
		p_dacc->DACC_MR |= DACC_MR_ONE;
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
		p_dacc->DACC_MR = ul_mode;
#else
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  404174:	6843      	ldr	r3, [r0, #4]
	if (ul_mode) {
  404176:	b921      	cbnz	r1, 404182 <dacc_set_transfer_mode+0xe>
		p_dacc->DACC_MR |= DACC_MR_ONE;
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
		p_dacc->DACC_MR = ul_mode;
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  404178:	f023 0310 	bic.w	r3, r3, #16
  40417c:	6043      	str	r3, [r0, #4]
#endif
	}
	return DACC_RC_OK;
}
  40417e:	2000      	movs	r0, #0
  404180:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  404182:	f043 0310 	orr.w	r3, r3, #16
  404186:	6043      	str	r3, [r0, #4]
}
  404188:	2000      	movs	r0, #0
  40418a:	4770      	bx	lr

0040418c <dacc_get_interrupt_status>:
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
	return p_dacc->DACC_ISR;
  40418c:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  40418e:	4770      	bx	lr

00404190 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  404190:	6201      	str	r1, [r0, #32]
  404192:	4770      	bx	lr

00404194 <dacc_get_pdc_base>:
Pdc *dacc_get_pdc_base(Dacc *p_dacc)
{
	/* avoid Cppcheck Warning */
	UNUSED(p_dacc);
	return PDC_DACC;
}
  404194:	4800      	ldr	r0, [pc, #0]	; (404198 <dacc_get_pdc_base+0x4>)
  404196:	4770      	bx	lr
  404198:	4003c100 	.word	0x4003c100

0040419c <dacc_set_channel_selection>:
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
	if (ul_channel > MAX_CH_NB) {
  40419c:	2901      	cmp	r1, #1
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  40419e:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  4041a0:	d901      	bls.n	4041a6 <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  4041a2:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  4041a4:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  4041a6:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  4041aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  4041ae:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  4041b0:	2000      	movs	r0, #0
  4041b2:	4770      	bx	lr

004041b4 <dacc_set_power_save>:
 */
uint32_t dacc_set_power_save(Dacc *p_dacc,
		uint32_t ul_sleep_mode, uint32_t ul_fast_wakeup_mode)
{
	if (ul_sleep_mode) {
		p_dacc->DACC_MR |= DACC_MR_SLEEP;
  4041b4:	6843      	ldr	r3, [r0, #4]
	if (ul_sleep_mode) {
  4041b6:	b149      	cbz	r1, 4041cc <dacc_set_power_save+0x18>
		p_dacc->DACC_MR |= DACC_MR_SLEEP;
  4041b8:	f043 0320 	orr.w	r3, r3, #32
  4041bc:	6043      	str	r3, [r0, #4]
	} else {
		p_dacc->DACC_MR &= (~DACC_MR_SLEEP);
	}
	if (ul_fast_wakeup_mode) {
		p_dacc->DACC_MR |= DACC_MR_FASTWKUP;
  4041be:	6843      	ldr	r3, [r0, #4]
	if (ul_fast_wakeup_mode) {
  4041c0:	b952      	cbnz	r2, 4041d8 <dacc_set_power_save+0x24>
	} else {
		p_dacc->DACC_MR &= (~DACC_MR_FASTWKUP);
  4041c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4041c6:	6043      	str	r3, [r0, #4]
	}
	return DACC_RC_OK;
}
  4041c8:	2000      	movs	r0, #0
  4041ca:	4770      	bx	lr
		p_dacc->DACC_MR &= (~DACC_MR_SLEEP);
  4041cc:	f023 0320 	bic.w	r3, r3, #32
  4041d0:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_FASTWKUP;
  4041d2:	6843      	ldr	r3, [r0, #4]
	if (ul_fast_wakeup_mode) {
  4041d4:	2a00      	cmp	r2, #0
  4041d6:	d0f4      	beq.n	4041c2 <dacc_set_power_save+0xe>
		p_dacc->DACC_MR |= DACC_MR_FASTWKUP;
  4041d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4041dc:	6043      	str	r3, [r0, #4]
}
  4041de:	2000      	movs	r0, #0
  4041e0:	4770      	bx	lr
  4041e2:	bf00      	nop

004041e4 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  4041e4:	2901      	cmp	r1, #1
  4041e6:	d901      	bls.n	4041ec <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  4041e8:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  4041ea:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  4041ec:	2301      	movs	r3, #1
  4041ee:	fa03 f101 	lsl.w	r1, r3, r1
  4041f2:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  4041f4:	2000      	movs	r0, #0
  4041f6:	4770      	bx	lr

004041f8 <dacc_set_analog_control>:
 * \param ul_analog_control Analog control configuration.
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
  4041f8:	4603      	mov	r3, r0
	p_dacc->DACC_ACR = ul_analog_control;
	return DACC_RC_OK;
}
  4041fa:	2000      	movs	r0, #0
	p_dacc->DACC_ACR = ul_analog_control;
  4041fc:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
  404200:	4770      	bx	lr
  404202:	bf00      	nop

00404204 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  404204:	b119      	cbz	r1, 40420e <pdc_rx_init+0xa>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  404206:	680b      	ldr	r3, [r1, #0]
  404208:	6003      	str	r3, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  40420a:	684b      	ldr	r3, [r1, #4]
  40420c:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  40420e:	b11a      	cbz	r2, 404218 <pdc_rx_init+0x14>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  404210:	6813      	ldr	r3, [r2, #0]
  404212:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  404214:	6853      	ldr	r3, [r2, #4]
  404216:	6143      	str	r3, [r0, #20]
  404218:	4770      	bx	lr
  40421a:	bf00      	nop

0040421c <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  40421c:	f240 1301 	movw	r3, #257	; 0x101
  404220:	4019      	ands	r1, r3
	p_pdc->PERIPH_PTCR =
  404222:	6201      	str	r1, [r0, #32]
  404224:	4770      	bx	lr
  404226:	bf00      	nop

00404228 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  404228:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40422a:	4770      	bx	lr

0040422c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40422c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40422e:	4770      	bx	lr

00404230 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404230:	4914      	ldr	r1, [pc, #80]	; (404284 <pmc_switch_mck_to_pllack+0x54>)
  404232:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  404238:	4318      	orrs	r0, r3
  40423a:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40423c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40423e:	0718      	lsls	r0, r3, #28
  404240:	bf58      	it	pl
  404242:	f44f 6300 	movpl.w	r3, #2048	; 0x800
  404246:	d502      	bpl.n	40424e <pmc_switch_mck_to_pllack+0x1e>
  404248:	e004      	b.n	404254 <pmc_switch_mck_to_pllack+0x24>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40424a:	3b01      	subs	r3, #1
  40424c:	d017      	beq.n	40427e <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40424e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  404250:	0712      	lsls	r2, r2, #28
  404252:	d5fa      	bpl.n	40424a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  404254:	490b      	ldr	r1, [pc, #44]	; (404284 <pmc_switch_mck_to_pllack+0x54>)
  404256:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404258:	f023 0303 	bic.w	r3, r3, #3
  40425c:	f043 0302 	orr.w	r3, r3, #2
  404260:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404262:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  404264:	0718      	lsls	r0, r3, #28
  404266:	bf58      	it	pl
  404268:	f44f 6300 	movpl.w	r3, #2048	; 0x800
  40426c:	d502      	bpl.n	404274 <pmc_switch_mck_to_pllack+0x44>
  40426e:	e004      	b.n	40427a <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404270:	3b01      	subs	r3, #1
  404272:	d004      	beq.n	40427e <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404274:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  404276:	0712      	lsls	r2, r2, #28
  404278:	d5fa      	bpl.n	404270 <pmc_switch_mck_to_pllack+0x40>
			return 1;
		}
	}

	return 0;
  40427a:	2000      	movs	r0, #0
}
  40427c:	4770      	bx	lr
			return 1;
  40427e:	2001      	movs	r0, #1
  404280:	4770      	bx	lr
  404282:	bf00      	nop
  404284:	400e0400 	.word	0x400e0400

00404288 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  404288:	b9c0      	cbnz	r0, 4042bc <pmc_switch_mainck_to_xtal+0x34>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40428a:	4810      	ldr	r0, [pc, #64]	; (4042cc <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40428c:	0209      	lsls	r1, r1, #8
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40428e:	4602      	mov	r2, r0
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404290:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  404292:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  404294:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404298:	f023 0303 	bic.w	r3, r3, #3
  40429c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4042a0:	f043 0301 	orr.w	r3, r3, #1
  4042a4:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4042a6:	6203      	str	r3, [r0, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4042a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4042aa:	07db      	lsls	r3, r3, #31
  4042ac:	d5fc      	bpl.n	4042a8 <pmc_switch_mainck_to_xtal+0x20>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4042ae:	6a13      	ldr	r3, [r2, #32]
  4042b0:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4042b8:	6213      	str	r3, [r2, #32]
  4042ba:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4042bc:	4903      	ldr	r1, [pc, #12]	; (4042cc <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4042be:	4a04      	ldr	r2, [pc, #16]	; (4042d0 <pmc_switch_mainck_to_xtal+0x48>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4042c0:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4042c2:	4b04      	ldr	r3, [pc, #16]	; (4042d4 <pmc_switch_mainck_to_xtal+0x4c>)
  4042c4:	4002      	ands	r2, r0
  4042c6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4042c8:	620b      	str	r3, [r1, #32]
  4042ca:	4770      	bx	lr
  4042cc:	400e0400 	.word	0x400e0400
  4042d0:	fec8fffc 	.word	0xfec8fffc
  4042d4:	01370002 	.word	0x01370002

004042d8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4042d8:	4b02      	ldr	r3, [pc, #8]	; (4042e4 <pmc_osc_is_ready_mainck+0xc>)
  4042da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4042dc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4042e0:	4770      	bx	lr
  4042e2:	bf00      	nop
  4042e4:	400e0400 	.word	0x400e0400

004042e8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4042e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4042ec:	4b01      	ldr	r3, [pc, #4]	; (4042f4 <pmc_disable_pllack+0xc>)
  4042ee:	629a      	str	r2, [r3, #40]	; 0x28
  4042f0:	4770      	bx	lr
  4042f2:	bf00      	nop
  4042f4:	400e0400 	.word	0x400e0400

004042f8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4042f8:	4b02      	ldr	r3, [pc, #8]	; (404304 <pmc_is_locked_pllack+0xc>)
  4042fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4042fc:	f000 0002 	and.w	r0, r0, #2
  404300:	4770      	bx	lr
  404302:	bf00      	nop
  404304:	400e0400 	.word	0x400e0400

00404308 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  404308:	2200      	movs	r2, #0
  40430a:	4b01      	ldr	r3, [pc, #4]	; (404310 <pmc_disable_pllbck+0x8>)
  40430c:	62da      	str	r2, [r3, #44]	; 0x2c
  40430e:	4770      	bx	lr
  404310:	400e0400 	.word	0x400e0400

00404314 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  404314:	4b02      	ldr	r3, [pc, #8]	; (404320 <pmc_is_locked_pllbck+0xc>)
  404316:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  404318:	f000 0004 	and.w	r0, r0, #4
  40431c:	4770      	bx	lr
  40431e:	bf00      	nop
  404320:	400e0400 	.word	0x400e0400

00404324 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  404324:	2822      	cmp	r0, #34	; 0x22
  404326:	d819      	bhi.n	40435c <pmc_enable_periph_clk+0x38>
		return 1;
	}

	if (ul_id < 32) {
  404328:	281f      	cmp	r0, #31
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40432a:	f04f 0301 	mov.w	r3, #1
  40432e:	4a0d      	ldr	r2, [pc, #52]	; (404364 <pmc_enable_periph_clk+0x40>)
	if (ul_id < 32) {
  404330:	d808      	bhi.n	404344 <pmc_enable_periph_clk+0x20>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  404332:	fa03 f000 	lsl.w	r0, r3, r0
  404336:	6993      	ldr	r3, [r2, #24]
  404338:	ea30 0303 	bics.w	r3, r0, r3
  40433c:	d010      	beq.n	404360 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
  40433e:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  404340:	2000      	movs	r0, #0
  404342:	4770      	bx	lr
		ul_id -= 32;
  404344:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  404346:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
  40434a:	fa03 f000 	lsl.w	r0, r3, r0
  40434e:	ea30 0301 	bics.w	r3, r0, r1
  404352:	d005      	beq.n	404360 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER1 = 1 << ul_id;
  404354:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
  404358:	2000      	movs	r0, #0
  40435a:	4770      	bx	lr
		return 1;
  40435c:	2001      	movs	r0, #1
  40435e:	4770      	bx	lr
	return 0;
  404360:	2000      	movs	r0, #0
}
  404362:	4770      	bx	lr
  404364:	400e0400 	.word	0x400e0400

00404368 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  404368:	2822      	cmp	r0, #34	; 0x22
  40436a:	d818      	bhi.n	40439e <pmc_disable_periph_clk+0x36>
		return 1;
	}

	if (ul_id < 32) {
  40436c:	281f      	cmp	r0, #31
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  40436e:	f04f 0301 	mov.w	r3, #1
  404372:	4a0d      	ldr	r2, [pc, #52]	; (4043a8 <pmc_disable_periph_clk+0x40>)
	if (ul_id < 32) {
  404374:	d807      	bhi.n	404386 <pmc_disable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  404376:	fa03 f000 	lsl.w	r0, r3, r0
  40437a:	6993      	ldr	r3, [r2, #24]
  40437c:	ea30 0303 	bics.w	r3, r0, r3
  404380:	d00f      	beq.n	4043a2 <pmc_disable_periph_clk+0x3a>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  404382:	2000      	movs	r0, #0
}
  404384:	4770      	bx	lr
		ul_id -= 32;
  404386:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  404388:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
  40438c:	fa03 f000 	lsl.w	r0, r3, r0
  404390:	ea30 0301 	bics.w	r3, r0, r1
  404394:	d1f5      	bne.n	404382 <pmc_disable_periph_clk+0x1a>
			PMC->PMC_PCDR1 = 1 << ul_id;
  404396:	f8c2 0104 	str.w	r0, [r2, #260]	; 0x104
	return 0;
  40439a:	2000      	movs	r0, #0
  40439c:	4770      	bx	lr
		return 1;
  40439e:	2001      	movs	r0, #1
  4043a0:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  4043a2:	6150      	str	r0, [r2, #20]
	return 0;
  4043a4:	2000      	movs	r0, #0
  4043a6:	4770      	bx	lr
  4043a8:	400e0400 	.word	0x400e0400

004043ac <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  4043ac:	0200      	lsls	r0, r0, #8
  4043ae:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  4043b2:	4b02      	ldr	r3, [pc, #8]	; (4043bc <pmc_switch_udpck_to_pllbck+0x10>)
  4043b4:	f040 0001 	orr.w	r0, r0, #1
  4043b8:	6398      	str	r0, [r3, #56]	; 0x38
  4043ba:	4770      	bx	lr
  4043bc:	400e0400 	.word	0x400e0400

004043c0 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  4043c0:	2280      	movs	r2, #128	; 0x80
  4043c2:	4b01      	ldr	r3, [pc, #4]	; (4043c8 <pmc_enable_udpck+0x8>)
  4043c4:	601a      	str	r2, [r3, #0]
  4043c6:	4770      	bx	lr
  4043c8:	400e0400 	.word	0x400e0400

004043cc <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4043cc:	4b03      	ldr	r3, [pc, #12]	; (4043dc <pmc_set_fast_startup_input+0x10>)
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4043ce:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  4043d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4043d4:	4310      	orrs	r0, r2
  4043d6:	6718      	str	r0, [r3, #112]	; 0x70
  4043d8:	4770      	bx	lr
  4043da:	bf00      	nop
  4043dc:	400e0400 	.word	0x400e0400

004043e0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4043e0:	b430      	push	{r4, r5}
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4043e2:	2502      	movs	r5, #2

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4043e4:	f04f 34ff 	mov.w	r4, #4294967295
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4043e8:	0189      	lsls	r1, r1, #6
  4043ea:	1843      	adds	r3, r0, r1
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4043ec:	5045      	str	r5, [r0, r1]
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4043ee:	629c      	str	r4, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4043f0:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4043f2:	605a      	str	r2, [r3, #4]
}
  4043f4:	bc30      	pop	{r4, r5}
  4043f6:	4770      	bx	lr

004043f8 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4043f8:	2305      	movs	r3, #5
  4043fa:	0189      	lsls	r1, r1, #6
  4043fc:	5043      	str	r3, [r0, r1]
  4043fe:	4770      	bx	lr

00404400 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  404400:	2302      	movs	r3, #2
  404402:	0189      	lsls	r1, r1, #6
  404404:	5043      	str	r3, [r0, r1]
  404406:	4770      	bx	lr

00404408 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  404408:	b430      	push	{r4, r5}
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40440a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
{
  40440e:	9c02      	ldr	r4, [sp, #8]
		if (ul_freq > ul_high) {
  404410:	d820      	bhi.n	404454 <tc_find_mck_divisor+0x4c>
  404412:	0c4d      	lsrs	r5, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  404414:	42a8      	cmp	r0, r5
  404416:	d220      	bcs.n	40445a <tc_find_mck_divisor+0x52>
		if (ul_freq > ul_high) {
  404418:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
		ul_low  = ul_high / TC_DIV_FACTOR;
  40441c:	ea4f 45d1 	mov.w	r5, r1, lsr #19
		if (ul_freq > ul_high) {
  404420:	d818      	bhi.n	404454 <tc_find_mck_divisor+0x4c>
		} else if (ul_freq >= ul_low) {
  404422:	42a8      	cmp	r0, r5
  404424:	d224      	bcs.n	404470 <tc_find_mck_divisor+0x68>
		if (ul_freq > ul_high) {
  404426:	ebb0 1f51 	cmp.w	r0, r1, lsr #5
		ul_low  = ul_high / TC_DIV_FACTOR;
  40442a:	ea4f 5551 	mov.w	r5, r1, lsr #21
		if (ul_freq > ul_high) {
  40442e:	d811      	bhi.n	404454 <tc_find_mck_divisor+0x4c>
		} else if (ul_freq >= ul_low) {
  404430:	42a8      	cmp	r0, r5
  404432:	d220      	bcs.n	404476 <tc_find_mck_divisor+0x6e>
		if (ul_freq > ul_high) {
  404434:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
		ul_low  = ul_high / TC_DIV_FACTOR;
  404438:	ea4f 55d1 	mov.w	r5, r1, lsr #23
		if (ul_freq > ul_high) {
  40443c:	d80a      	bhi.n	404454 <tc_find_mck_divisor+0x4c>
		} else if (ul_freq >= ul_low) {
  40443e:	42a8      	cmp	r0, r5
  404440:	d21c      	bcs.n	40447c <tc_find_mck_divisor+0x74>
  404442:	0be4      	lsrs	r4, r4, #15
		ul_high = ul_mck / divisors[ul_index];
  404444:	fbb1 f1f4 	udiv	r1, r1, r4
		if (ul_freq > ul_high) {
  404448:	4281      	cmp	r1, r0
		ul_low  = ul_high / TC_DIV_FACTOR;
  40444a:	ea4f 4511 	mov.w	r5, r1, lsr #16
		if (ul_freq > ul_high) {
  40444e:	d301      	bcc.n	404454 <tc_find_mck_divisor+0x4c>
		} else if (ul_freq >= ul_low) {
  404450:	4285      	cmp	r5, r0
  404452:	d916      	bls.n	404482 <tc_find_mck_divisor+0x7a>
			return 0;
  404454:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  404456:	bc30      	pop	{r4, r5}
  404458:	4770      	bx	lr
	for (ul_index = 0;
  40445a:	2100      	movs	r1, #0
		ul_high = ul_mck / divisors[ul_index];
  40445c:	2402      	movs	r4, #2
	if (p_uldiv) {
  40445e:	b102      	cbz	r2, 404462 <tc_find_mck_divisor+0x5a>
		*p_uldiv = divisors[ul_index];
  404460:	6014      	str	r4, [r2, #0]
	if (p_ultcclks) {
  404462:	b11b      	cbz	r3, 40446c <tc_find_mck_divisor+0x64>
}
  404464:	bc30      	pop	{r4, r5}
	return 1;
  404466:	2001      	movs	r0, #1
		*p_ultcclks = ul_index;
  404468:	6019      	str	r1, [r3, #0]
}
  40446a:	4770      	bx	lr
	return 1;
  40446c:	2001      	movs	r0, #1
  40446e:	e7f2      	b.n	404456 <tc_find_mck_divisor+0x4e>
			ul_index++) {
  404470:	2101      	movs	r1, #1
		ul_high = ul_mck / divisors[ul_index];
  404472:	2408      	movs	r4, #8
  404474:	e7f3      	b.n	40445e <tc_find_mck_divisor+0x56>
			ul_index++) {
  404476:	2102      	movs	r1, #2
		ul_high = ul_mck / divisors[ul_index];
  404478:	2420      	movs	r4, #32
  40447a:	e7f0      	b.n	40445e <tc_find_mck_divisor+0x56>
			ul_index++) {
  40447c:	2103      	movs	r1, #3
		ul_high = ul_mck / divisors[ul_index];
  40447e:	2480      	movs	r4, #128	; 0x80
  404480:	e7ed      	b.n	40445e <tc_find_mck_divisor+0x56>
			ul_index++) {
  404482:	2104      	movs	r1, #4
  404484:	e7eb      	b.n	40445e <tc_find_mck_divisor+0x56>
  404486:	bf00      	nop

00404488 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  404488:	4b02      	ldr	r3, [pc, #8]	; (404494 <pmc_is_wakeup_clocks_restored+0xc>)
  40448a:	7818      	ldrb	r0, [r3, #0]
}
  40448c:	f080 0001 	eor.w	r0, r0, #1
  404490:	4770      	bx	lr
  404492:	bf00      	nop
  404494:	20001280 	.word	0x20001280

00404498 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  404498:	4770      	bx	lr
  40449a:	bf00      	nop

0040449c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40449c:	e7fe      	b.n	40449c <Dummy_Handler>
  40449e:	bf00      	nop

004044a0 <Reset_Handler>:

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4044a0:	4917      	ldr	r1, [pc, #92]	; (404500 <Reset_Handler+0x60>)
  4044a2:	4818      	ldr	r0, [pc, #96]	; (404504 <Reset_Handler+0x64>)
{
  4044a4:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
  4044a6:	4281      	cmp	r1, r0
  4044a8:	d009      	beq.n	4044be <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
  4044aa:	4b17      	ldr	r3, [pc, #92]	; (404508 <Reset_Handler+0x68>)
  4044ac:	4298      	cmp	r0, r3
  4044ae:	d206      	bcs.n	4044be <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
  4044b0:	43c2      	mvns	r2, r0
  4044b2:	441a      	add	r2, r3
  4044b4:	f022 0203 	bic.w	r2, r2, #3
  4044b8:	3204      	adds	r2, #4
  4044ba:	4b14      	ldr	r3, [pc, #80]	; (40450c <Reset_Handler+0x6c>)
  4044bc:	4798      	blx	r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4044be:	4814      	ldr	r0, [pc, #80]	; (404510 <Reset_Handler+0x70>)
  4044c0:	4b14      	ldr	r3, [pc, #80]	; (404514 <Reset_Handler+0x74>)
  4044c2:	4298      	cmp	r0, r3
  4044c4:	d207      	bcs.n	4044d6 <Reset_Handler+0x36>
		*pDest++ = 0;
  4044c6:	43c2      	mvns	r2, r0
  4044c8:	441a      	add	r2, r3
  4044ca:	f022 0203 	bic.w	r2, r2, #3
  4044ce:	3204      	adds	r2, #4
  4044d0:	2100      	movs	r1, #0
  4044d2:	4b11      	ldr	r3, [pc, #68]	; (404518 <Reset_Handler+0x78>)
  4044d4:	4798      	blx	r3
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4044d6:	4b11      	ldr	r3, [pc, #68]	; (40451c <Reset_Handler+0x7c>)
  4044d8:	4a11      	ldr	r2, [pc, #68]	; (404520 <Reset_Handler+0x80>)
  4044da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  4044de:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4044e2:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  4044e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4044ea:	6091      	str	r1, [r2, #8]
	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  4044ec:	d203      	bcs.n	4044f6 <Reset_Handler+0x56>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  4044ee:	6893      	ldr	r3, [r2, #8]
  4044f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4044f4:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  4044f6:	4b0b      	ldr	r3, [pc, #44]	; (404524 <Reset_Handler+0x84>)
  4044f8:	4798      	blx	r3

	/* Branch to main function */
	main();
  4044fa:	4b0b      	ldr	r3, [pc, #44]	; (404528 <Reset_Handler+0x88>)
  4044fc:	4798      	blx	r3
  4044fe:	e7fe      	b.n	4044fe <Reset_Handler+0x5e>
  404500:	004096d4 	.word	0x004096d4
  404504:	20000000 	.word	0x20000000
  404508:	20000c48 	.word	0x20000c48
  40450c:	00404b61 	.word	0x00404b61
  404510:	20000c48 	.word	0x20000c48
  404514:	20001f44 	.word	0x20001f44
  404518:	00404c4d 	.word	0x00404c4d
  40451c:	00400000 	.word	0x00400000
  404520:	e000ed00 	.word	0xe000ed00
  404524:	00404b11 	.word	0x00404b11
  404528:	004046f9 	.word	0x004046f9

0040452c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  40452c:	4a32      	ldr	r2, [pc, #200]	; (4045f8 <SystemCoreClockUpdate+0xcc>)
  40452e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404530:	f003 0303 	and.w	r3, r3, #3
  404534:	2b01      	cmp	r3, #1
  404536:	d03a      	beq.n	4045ae <SystemCoreClockUpdate+0x82>
  404538:	d323      	bcc.n	404582 <SystemCoreClockUpdate+0x56>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40453a:	6a13      	ldr	r3, [r2, #32]
  40453c:	01d9      	lsls	r1, r3, #7
  40453e:	d546      	bpl.n	4045ce <SystemCoreClockUpdate+0xa2>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  404540:	492e      	ldr	r1, [pc, #184]	; (4045fc <SystemCoreClockUpdate+0xd0>)
  404542:	4b2f      	ldr	r3, [pc, #188]	; (404600 <SystemCoreClockUpdate+0xd4>)
  404544:	600b      	str	r3, [r1, #0]
				break;
			default:
				break;
			}
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  404546:	4a2c      	ldr	r2, [pc, #176]	; (4045f8 <SystemCoreClockUpdate+0xcc>)
  404548:	6b10      	ldr	r0, [r2, #48]	; 0x30
  40454a:	f000 0003 	and.w	r0, r0, #3
  40454e:	2802      	cmp	r0, #2
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  404550:	bf0a      	itet	eq
  404552:	6a90      	ldreq	r0, [r2, #40]	; 0x28
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                          CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  404554:	6ad0      	ldrne	r0, [r2, #44]	; 0x2c
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  404556:	6a92      	ldreq	r2, [r2, #40]	; 0x28
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  404558:	f3c0 400a 	ubfx	r0, r0, #16, #11
  40455c:	fb00 3303 	mla	r3, r0, r3, r3
				                           CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  404560:	bf18      	it	ne
  404562:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  404564:	4824      	ldr	r0, [pc, #144]	; (4045f8 <SystemCoreClockUpdate+0xcc>)
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  404566:	b2d2      	uxtb	r2, r2
  404568:	fbb3 f3f2 	udiv	r3, r3, r2
	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40456c:	6b02      	ldr	r2, [r0, #48]	; 0x30
  40456e:	f002 0270 	and.w	r2, r2, #112	; 0x70
  404572:	2a70      	cmp	r2, #112	; 0x70
  404574:	d115      	bne.n	4045a2 <SystemCoreClockUpdate+0x76>
		SystemCoreClock /= 3U;
  404576:	4a23      	ldr	r2, [pc, #140]	; (404604 <SystemCoreClockUpdate+0xd8>)
  404578:	fba2 2303 	umull	r2, r3, r2, r3
  40457c:	085b      	lsrs	r3, r3, #1
  40457e:	600b      	str	r3, [r1, #0]
  404580:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  404582:	4b21      	ldr	r3, [pc, #132]	; (404608 <SystemCoreClockUpdate+0xdc>)
  404584:	491d      	ldr	r1, [pc, #116]	; (4045fc <SystemCoreClockUpdate+0xd0>)
  404586:	695b      	ldr	r3, [r3, #20]
  404588:	f013 0f80 	tst.w	r3, #128	; 0x80
  40458c:	bf14      	ite	ne
  40458e:	f44f 4300 	movne.w	r3, #32768	; 0x8000
  404592:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  404596:	4818      	ldr	r0, [pc, #96]	; (4045f8 <SystemCoreClockUpdate+0xcc>)
  404598:	6b02      	ldr	r2, [r0, #48]	; 0x30
  40459a:	f002 0270 	and.w	r2, r2, #112	; 0x70
  40459e:	2a70      	cmp	r2, #112	; 0x70
  4045a0:	d0e9      	beq.n	404576 <SystemCoreClockUpdate+0x4a>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4045a2:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4045a4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4045a8:	40d3      	lsrs	r3, r2
  4045aa:	600b      	str	r3, [r1, #0]
  4045ac:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4045ae:	6a13      	ldr	r3, [r2, #32]
  4045b0:	01db      	lsls	r3, r3, #7
  4045b2:	d419      	bmi.n	4045e8 <SystemCoreClockUpdate+0xbc>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4045b4:	4911      	ldr	r1, [pc, #68]	; (4045fc <SystemCoreClockUpdate+0xd0>)
  4045b6:	4815      	ldr	r0, [pc, #84]	; (40460c <SystemCoreClockUpdate+0xe0>)
  4045b8:	6008      	str	r0, [r1, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4045ba:	6a12      	ldr	r2, [r2, #32]
  4045bc:	f002 0270 	and.w	r2, r2, #112	; 0x70
  4045c0:	2a10      	cmp	r2, #16
  4045c2:	d017      	beq.n	4045f4 <SystemCoreClockUpdate+0xc8>
  4045c4:	4b0e      	ldr	r3, [pc, #56]	; (404600 <SystemCoreClockUpdate+0xd4>)
  4045c6:	2a20      	cmp	r2, #32
  4045c8:	bf18      	it	ne
  4045ca:	4603      	movne	r3, r0
  4045cc:	e7e3      	b.n	404596 <SystemCoreClockUpdate+0x6a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4045ce:	490b      	ldr	r1, [pc, #44]	; (4045fc <SystemCoreClockUpdate+0xd0>)
  4045d0:	4b0e      	ldr	r3, [pc, #56]	; (40460c <SystemCoreClockUpdate+0xe0>)
  4045d2:	600b      	str	r3, [r1, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4045d4:	6a12      	ldr	r2, [r2, #32]
  4045d6:	f002 0270 	and.w	r2, r2, #112	; 0x70
  4045da:	2a10      	cmp	r2, #16
  4045dc:	d007      	beq.n	4045ee <SystemCoreClockUpdate+0xc2>
  4045de:	2a20      	cmp	r2, #32
  4045e0:	d1b1      	bne.n	404546 <SystemCoreClockUpdate+0x1a>
				SystemCoreClock *= 3U;
  4045e2:	4b07      	ldr	r3, [pc, #28]	; (404600 <SystemCoreClockUpdate+0xd4>)
  4045e4:	600b      	str	r3, [r1, #0]
				break;
  4045e6:	e7ae      	b.n	404546 <SystemCoreClockUpdate+0x1a>
  4045e8:	4b05      	ldr	r3, [pc, #20]	; (404600 <SystemCoreClockUpdate+0xd4>)
  4045ea:	4904      	ldr	r1, [pc, #16]	; (4045fc <SystemCoreClockUpdate+0xd0>)
  4045ec:	e7d3      	b.n	404596 <SystemCoreClockUpdate+0x6a>
				SystemCoreClock *= 2U;
  4045ee:	4b08      	ldr	r3, [pc, #32]	; (404610 <SystemCoreClockUpdate+0xe4>)
  4045f0:	600b      	str	r3, [r1, #0]
				break;
  4045f2:	e7a8      	b.n	404546 <SystemCoreClockUpdate+0x1a>
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4045f4:	4b06      	ldr	r3, [pc, #24]	; (404610 <SystemCoreClockUpdate+0xe4>)
  4045f6:	e7ce      	b.n	404596 <SystemCoreClockUpdate+0x6a>
  4045f8:	400e0400 	.word	0x400e0400
  4045fc:	20000294 	.word	0x20000294
  404600:	00b71b00 	.word	0x00b71b00
  404604:	aaaaaaab 	.word	0xaaaaaaab
  404608:	400e1410 	.word	0x400e1410
  40460c:	003d0900 	.word	0x003d0900
  404610:	007a1200 	.word	0x007a1200

00404614 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  404614:	4a0b      	ldr	r2, [pc, #44]	; (404644 <_sbrk+0x30>)
	int ramend = (int)&__ram_end__;
  404616:	490c      	ldr	r1, [pc, #48]	; (404648 <_sbrk+0x34>)
	if (heap == NULL) {
  404618:	6813      	ldr	r3, [r2, #0]
  40461a:	b13b      	cbz	r3, 40462c <_sbrk+0x18>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  40461c:	4418      	add	r0, r3
  40461e:	4281      	cmp	r1, r0
		return (caddr_t) -1;	
	}

	heap += incr;
  404620:	bfa6      	itte	ge
  404622:	6010      	strge	r0, [r2, #0]

	return (caddr_t) prev_heap;
  404624:	4618      	movge	r0, r3
		return (caddr_t) -1;	
  404626:	f04f 30ff 	movlt.w	r0, #4294967295
  40462a:	4770      	bx	lr
{
  40462c:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  40462e:	4c07      	ldr	r4, [pc, #28]	; (40464c <_sbrk+0x38>)
	if (((int)prev_heap + incr) > ramend) {
  404630:	4420      	add	r0, r4
  404632:	4281      	cmp	r1, r0
		heap = (unsigned char *)&_end;
  404634:	6014      	str	r4, [r2, #0]
	heap += incr;
  404636:	bfaa      	itet	ge
  404638:	6010      	strge	r0, [r2, #0]
		return (caddr_t) -1;	
  40463a:	f04f 30ff 	movlt.w	r0, #4294967295
	return (caddr_t) prev_heap;
  40463e:	4620      	movge	r0, r4
}
  404640:	bc10      	pop	{r4}
  404642:	4770      	bx	lr
  404644:	20001284 	.word	0x20001284
  404648:	2000bffc 	.word	0x2000bffc
  40464c:	20003f48 	.word	0x20003f48

00404650 <usbRxcallback>:
  
}


void usbRxcallback(uint8_t port)
{
  404650:	b5f0      	push	{r4, r5, r6, r7, lr}
  CMD_t incomingCMD;
  if(USB->available())
  404652:	4c24      	ldr	r4, [pc, #144]	; (4046e4 <usbRxcallback+0x94>)
{
  404654:	b087      	sub	sp, #28
  if(USB->available())
  404656:	6823      	ldr	r3, [r4, #0]
  404658:	685b      	ldr	r3, [r3, #4]
  40465a:	4798      	blx	r3
  40465c:	b908      	cbnz	r0, 404662 <usbRxcallback+0x12>
    {
      USB->len = sprintf((char*)USB->buf, "Command syntax ERROR\n\r");
    }
    USB->printBuf(USB->buf, USB->len);
  }
  40465e:	b007      	add	sp, #28
  404660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (parseCommand(USB->read(), &incomingCMD, USB))
  404662:	6823      	ldr	r3, [r4, #0]
  404664:	689b      	ldr	r3, [r3, #8]
  404666:	4798      	blx	r3
  404668:	6822      	ldr	r2, [r4, #0]
  40466a:	4669      	mov	r1, sp
  40466c:	4b1e      	ldr	r3, [pc, #120]	; (4046e8 <usbRxcallback+0x98>)
  40466e:	4798      	blx	r3
  404670:	b158      	cbz	r0, 40468a <usbRxcallback+0x3a>
      if(!incomingCMD.funcPtr(incomingCMD.par, &master_settings, USB))
  404672:	9b01      	ldr	r3, [sp, #4]
  404674:	6822      	ldr	r2, [r4, #0]
  404676:	491d      	ldr	r1, [pc, #116]	; (4046ec <usbRxcallback+0x9c>)
  404678:	a802      	add	r0, sp, #8
  40467a:	4798      	blx	r3
  40467c:	b300      	cbz	r0, 4046c0 <usbRxcallback+0x70>
  40467e:	6826      	ldr	r6, [r4, #0]
  404680:	f106 041c 	add.w	r4, r6, #28
  404684:	f896 711c 	ldrb.w	r7, [r6, #284]	; 0x11c
  404688:	e014      	b.n	4046b4 <usbRxcallback+0x64>
      USB->len = sprintf((char*)USB->buf, "Command syntax ERROR\n\r");
  40468a:	f04f 0e16 	mov.w	lr, #22
  40468e:	4677      	mov	r7, lr
  404690:	6826      	ldr	r6, [r4, #0]
  404692:	4d17      	ldr	r5, [pc, #92]	; (4046f0 <usbRxcallback+0xa0>)
  404694:	f106 041c 	add.w	r4, r6, #28
  404698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40469a:	61f0      	str	r0, [r6, #28]
  40469c:	6231      	str	r1, [r6, #32]
  40469e:	6828      	ldr	r0, [r5, #0]
  4046a0:	6272      	str	r2, [r6, #36]	; 0x24
  4046a2:	88a9      	ldrh	r1, [r5, #4]
  4046a4:	79aa      	ldrb	r2, [r5, #6]
  4046a6:	62b3      	str	r3, [r6, #40]	; 0x28
  4046a8:	62f0      	str	r0, [r6, #44]	; 0x2c
  4046aa:	8631      	strh	r1, [r6, #48]	; 0x30
  4046ac:	f886 2032 	strb.w	r2, [r6, #50]	; 0x32
  4046b0:	f886 e11c 	strb.w	lr, [r6, #284]	; 0x11c
    USB->printBuf(USB->buf, USB->len);
  4046b4:	6933      	ldr	r3, [r6, #16]
  4046b6:	4639      	mov	r1, r7
  4046b8:	4620      	mov	r0, r4
  4046ba:	4798      	blx	r3
  4046bc:	b007      	add	sp, #28
  4046be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        USB->len = sprintf((char*)USB->buf, "ERROR setting command\n\r");
  4046c0:	f04f 0e17 	mov.w	lr, #23
  4046c4:	6826      	ldr	r6, [r4, #0]
  4046c6:	4d0b      	ldr	r5, [pc, #44]	; (4046f4 <usbRxcallback+0xa4>)
  4046c8:	f106 041c 	add.w	r4, r6, #28
  4046cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4046ce:	4677      	mov	r7, lr
  4046d0:	61f0      	str	r0, [r6, #28]
  4046d2:	6061      	str	r1, [r4, #4]
  4046d4:	60a2      	str	r2, [r4, #8]
  4046d6:	cd03      	ldmia	r5!, {r0, r1}
  4046d8:	60e3      	str	r3, [r4, #12]
  4046da:	6120      	str	r0, [r4, #16]
  4046dc:	6161      	str	r1, [r4, #20]
  4046de:	f886 e11c 	strb.w	lr, [r6, #284]	; 0x11c
  4046e2:	e7e7      	b.n	4046b4 <usbRxcallback+0x64>
  4046e4:	20001ef8 	.word	0x20001ef8
  4046e8:	00403901 	.word	0x00403901
  4046ec:	20001efc 	.word	0x20001efc
  4046f0:	00409408 	.word	0x00409408
  4046f4:	004093f0 	.word	0x004093f0

004046f8 <main>:
{
  4046f8:	b580      	push	{r7, lr}
  wdt_disable(WDT);
  4046fa:	481b      	ldr	r0, [pc, #108]	; (404768 <main+0x70>)
  4046fc:	4b1b      	ldr	r3, [pc, #108]	; (40476c <main+0x74>)
  4046fe:	4798      	blx	r3
  sysclk_init(); // clock init, ASF
  404700:	4b1b      	ldr	r3, [pc, #108]	; (404770 <main+0x78>)
  404702:	4798      	blx	r3
  board_init();  // ASF function, empty function??
  404704:	4b1b      	ldr	r3, [pc, #108]	; (404774 <main+0x7c>)
  404706:	4798      	blx	r3
  USB = getComInterface();
  404708:	4b1b      	ldr	r3, [pc, #108]	; (404778 <main+0x80>)
  40470a:	4798      	blx	r3
  USB->rxCallback = usbRxcallback;
  40470c:	4b1b      	ldr	r3, [pc, #108]	; (40477c <main+0x84>)
  USB = getComInterface();
  40470e:	4c1c      	ldr	r4, [pc, #112]	; (404780 <main+0x88>)
  USB->rxCallback = usbRxcallback;
  404710:	6143      	str	r3, [r0, #20]
  USB->txEmptyCallback = coreTxEmptyCallBack();
  404712:	4b1c      	ldr	r3, [pc, #112]	; (404784 <main+0x8c>)
  USB = getComInterface();
  404714:	4605      	mov	r5, r0
  404716:	6020      	str	r0, [r4, #0]
  USB->txEmptyCallback = coreTxEmptyCallBack();
  404718:	4798      	blx	r3
  USB->init(NULL);
  40471a:	6823      	ldr	r3, [r4, #0]
  USB->txEmptyCallback = coreTxEmptyCallBack();
  40471c:	61a8      	str	r0, [r5, #24]
  USB->init(NULL);
  40471e:	681b      	ldr	r3, [r3, #0]
  404720:	2000      	movs	r0, #0
  404722:	4798      	blx	r3
  master_settings.acquisitionNbr = 0;
  404724:	f06f 26f8 	mvn.w	r6, #4160813056	; 0xf800f800
  master_settings.mode = ASCII_MODE;
  404728:	2100      	movs	r1, #0
  master_settings.sequence[2] = 3;
  40472a:	2003      	movs	r0, #3
  master_settings.sequence[0] = 1;
  40472c:	2201      	movs	r2, #1
  master_settings.sequence[1] = 2;
  40472e:	f04f 0e02 	mov.w	lr, #2
  master_settings.sequence[3] = 4;
  404732:	2704      	movs	r7, #4
  master_settings.blockSize = 16;
  404734:	2510      	movs	r5, #16
  master_settings.acqusitionTime = 1000000;
  404736:	4b14      	ldr	r3, [pc, #80]	; (404788 <main+0x90>)
  master_settings.com = USB;
  404738:	6824      	ldr	r4, [r4, #0]
  master_settings.sequence[2] = 3;
  40473a:	7518      	strb	r0, [r3, #20]
  master_settings.com = USB;
  40473c:	61dc      	str	r4, [r3, #28]
  master_settings.acqusitionTime = 1000000;
  40473e:	4c13      	ldr	r4, [pc, #76]	; (40478c <main+0x94>)
  coreConfigure(&master_settings);
  404740:	4618      	mov	r0, r3
  master_settings.acqusitionTime = 1000000;
  404742:	601c      	str	r4, [r3, #0]
  master_settings.acquisitionNbr = 0;
  404744:	609e      	str	r6, [r3, #8]
  404746:	6059      	str	r1, [r3, #4]
  coreConfigure(&master_settings);
  404748:	4c11      	ldr	r4, [pc, #68]	; (404790 <main+0x98>)
  master_settings.sequence[1] = 2;
  40474a:	f883 e013 	strb.w	lr, [r3, #19]
  master_settings.sequence[3] = 4;
  40474e:	755f      	strb	r7, [r3, #21]
  master_settings.blockSize = 16;
  404750:	619d      	str	r5, [r3, #24]
  master_settings.sequence[0] = 1;
  404752:	749a      	strb	r2, [r3, #18]
  master_settings.ADCgain[0] = 1;
  404754:	731a      	strb	r2, [r3, #12]
  master_settings.ADCgain[1] = 1;
  404756:	735a      	strb	r2, [r3, #13]
  master_settings.ADCgain[2] = 1;
  404758:	739a      	strb	r2, [r3, #14]
  master_settings.ADCgain[3] = 1;
  40475a:	73da      	strb	r2, [r3, #15]
  master_settings.mode = ASCII_MODE;
  40475c:	7599      	strb	r1, [r3, #22]
  master_settings.ADClowRes = false;
  40475e:	7419      	strb	r1, [r3, #16]
  coreConfigure(&master_settings);
  404760:	47a0      	blx	r4
  coreStart();
  404762:	4b0c      	ldr	r3, [pc, #48]	; (404794 <main+0x9c>)
  404764:	4798      	blx	r3
  404766:	e7fe      	b.n	404766 <main+0x6e>
  404768:	400e1450 	.word	0x400e1450
  40476c:	00402ded 	.word	0x00402ded
  404770:	00404105 	.word	0x00404105
  404774:	00404499 	.word	0x00404499
  404778:	00402e59 	.word	0x00402e59
  40477c:	00404651 	.word	0x00404651
  404780:	20001ef8 	.word	0x20001ef8
  404784:	004035a5 	.word	0x004035a5
  404788:	20001efc 	.word	0x20001efc
  40478c:	000f4240 	.word	0x000f4240
  404790:	0040306d 	.word	0x0040306d
  404794:	00403185 	.word	0x00403185

00404798 <__aeabi_drsub>:
  404798:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40479c:	e002      	b.n	4047a4 <__adddf3>
  40479e:	bf00      	nop

004047a0 <__aeabi_dsub>:
  4047a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004047a4 <__adddf3>:
  4047a4:	b530      	push	{r4, r5, lr}
  4047a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4047aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4047ae:	ea94 0f05 	teq	r4, r5
  4047b2:	bf08      	it	eq
  4047b4:	ea90 0f02 	teqeq	r0, r2
  4047b8:	bf1f      	itttt	ne
  4047ba:	ea54 0c00 	orrsne.w	ip, r4, r0
  4047be:	ea55 0c02 	orrsne.w	ip, r5, r2
  4047c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4047c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4047ca:	f000 80e2 	beq.w	404992 <__adddf3+0x1ee>
  4047ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4047d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4047d6:	bfb8      	it	lt
  4047d8:	426d      	neglt	r5, r5
  4047da:	dd0c      	ble.n	4047f6 <__adddf3+0x52>
  4047dc:	442c      	add	r4, r5
  4047de:	ea80 0202 	eor.w	r2, r0, r2
  4047e2:	ea81 0303 	eor.w	r3, r1, r3
  4047e6:	ea82 0000 	eor.w	r0, r2, r0
  4047ea:	ea83 0101 	eor.w	r1, r3, r1
  4047ee:	ea80 0202 	eor.w	r2, r0, r2
  4047f2:	ea81 0303 	eor.w	r3, r1, r3
  4047f6:	2d36      	cmp	r5, #54	; 0x36
  4047f8:	bf88      	it	hi
  4047fa:	bd30      	pophi	{r4, r5, pc}
  4047fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404800:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404804:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404808:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40480c:	d002      	beq.n	404814 <__adddf3+0x70>
  40480e:	4240      	negs	r0, r0
  404810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404814:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404818:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40481c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404820:	d002      	beq.n	404828 <__adddf3+0x84>
  404822:	4252      	negs	r2, r2
  404824:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404828:	ea94 0f05 	teq	r4, r5
  40482c:	f000 80a7 	beq.w	40497e <__adddf3+0x1da>
  404830:	f1a4 0401 	sub.w	r4, r4, #1
  404834:	f1d5 0e20 	rsbs	lr, r5, #32
  404838:	db0d      	blt.n	404856 <__adddf3+0xb2>
  40483a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40483e:	fa22 f205 	lsr.w	r2, r2, r5
  404842:	1880      	adds	r0, r0, r2
  404844:	f141 0100 	adc.w	r1, r1, #0
  404848:	fa03 f20e 	lsl.w	r2, r3, lr
  40484c:	1880      	adds	r0, r0, r2
  40484e:	fa43 f305 	asr.w	r3, r3, r5
  404852:	4159      	adcs	r1, r3
  404854:	e00e      	b.n	404874 <__adddf3+0xd0>
  404856:	f1a5 0520 	sub.w	r5, r5, #32
  40485a:	f10e 0e20 	add.w	lr, lr, #32
  40485e:	2a01      	cmp	r2, #1
  404860:	fa03 fc0e 	lsl.w	ip, r3, lr
  404864:	bf28      	it	cs
  404866:	f04c 0c02 	orrcs.w	ip, ip, #2
  40486a:	fa43 f305 	asr.w	r3, r3, r5
  40486e:	18c0      	adds	r0, r0, r3
  404870:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  404874:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404878:	d507      	bpl.n	40488a <__adddf3+0xe6>
  40487a:	f04f 0e00 	mov.w	lr, #0
  40487e:	f1dc 0c00 	rsbs	ip, ip, #0
  404882:	eb7e 0000 	sbcs.w	r0, lr, r0
  404886:	eb6e 0101 	sbc.w	r1, lr, r1
  40488a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40488e:	d31b      	bcc.n	4048c8 <__adddf3+0x124>
  404890:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  404894:	d30c      	bcc.n	4048b0 <__adddf3+0x10c>
  404896:	0849      	lsrs	r1, r1, #1
  404898:	ea5f 0030 	movs.w	r0, r0, rrx
  40489c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4048a0:	f104 0401 	add.w	r4, r4, #1
  4048a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4048a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4048ac:	f080 809a 	bcs.w	4049e4 <__adddf3+0x240>
  4048b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4048b4:	bf08      	it	eq
  4048b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4048ba:	f150 0000 	adcs.w	r0, r0, #0
  4048be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4048c2:	ea41 0105 	orr.w	r1, r1, r5
  4048c6:	bd30      	pop	{r4, r5, pc}
  4048c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4048cc:	4140      	adcs	r0, r0
  4048ce:	eb41 0101 	adc.w	r1, r1, r1
  4048d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4048d6:	f1a4 0401 	sub.w	r4, r4, #1
  4048da:	d1e9      	bne.n	4048b0 <__adddf3+0x10c>
  4048dc:	f091 0f00 	teq	r1, #0
  4048e0:	bf04      	itt	eq
  4048e2:	4601      	moveq	r1, r0
  4048e4:	2000      	moveq	r0, #0
  4048e6:	fab1 f381 	clz	r3, r1
  4048ea:	bf08      	it	eq
  4048ec:	3320      	addeq	r3, #32
  4048ee:	f1a3 030b 	sub.w	r3, r3, #11
  4048f2:	f1b3 0220 	subs.w	r2, r3, #32
  4048f6:	da0c      	bge.n	404912 <__adddf3+0x16e>
  4048f8:	320c      	adds	r2, #12
  4048fa:	dd08      	ble.n	40490e <__adddf3+0x16a>
  4048fc:	f102 0c14 	add.w	ip, r2, #20
  404900:	f1c2 020c 	rsb	r2, r2, #12
  404904:	fa01 f00c 	lsl.w	r0, r1, ip
  404908:	fa21 f102 	lsr.w	r1, r1, r2
  40490c:	e00c      	b.n	404928 <__adddf3+0x184>
  40490e:	f102 0214 	add.w	r2, r2, #20
  404912:	bfd8      	it	le
  404914:	f1c2 0c20 	rsble	ip, r2, #32
  404918:	fa01 f102 	lsl.w	r1, r1, r2
  40491c:	fa20 fc0c 	lsr.w	ip, r0, ip
  404920:	bfdc      	itt	le
  404922:	ea41 010c 	orrle.w	r1, r1, ip
  404926:	4090      	lslle	r0, r2
  404928:	1ae4      	subs	r4, r4, r3
  40492a:	bfa2      	ittt	ge
  40492c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  404930:	4329      	orrge	r1, r5
  404932:	bd30      	popge	{r4, r5, pc}
  404934:	ea6f 0404 	mvn.w	r4, r4
  404938:	3c1f      	subs	r4, #31
  40493a:	da1c      	bge.n	404976 <__adddf3+0x1d2>
  40493c:	340c      	adds	r4, #12
  40493e:	dc0e      	bgt.n	40495e <__adddf3+0x1ba>
  404940:	f104 0414 	add.w	r4, r4, #20
  404944:	f1c4 0220 	rsb	r2, r4, #32
  404948:	fa20 f004 	lsr.w	r0, r0, r4
  40494c:	fa01 f302 	lsl.w	r3, r1, r2
  404950:	ea40 0003 	orr.w	r0, r0, r3
  404954:	fa21 f304 	lsr.w	r3, r1, r4
  404958:	ea45 0103 	orr.w	r1, r5, r3
  40495c:	bd30      	pop	{r4, r5, pc}
  40495e:	f1c4 040c 	rsb	r4, r4, #12
  404962:	f1c4 0220 	rsb	r2, r4, #32
  404966:	fa20 f002 	lsr.w	r0, r0, r2
  40496a:	fa01 f304 	lsl.w	r3, r1, r4
  40496e:	ea40 0003 	orr.w	r0, r0, r3
  404972:	4629      	mov	r1, r5
  404974:	bd30      	pop	{r4, r5, pc}
  404976:	fa21 f004 	lsr.w	r0, r1, r4
  40497a:	4629      	mov	r1, r5
  40497c:	bd30      	pop	{r4, r5, pc}
  40497e:	f094 0f00 	teq	r4, #0
  404982:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  404986:	bf06      	itte	eq
  404988:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40498c:	3401      	addeq	r4, #1
  40498e:	3d01      	subne	r5, #1
  404990:	e74e      	b.n	404830 <__adddf3+0x8c>
  404992:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404996:	bf18      	it	ne
  404998:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40499c:	d029      	beq.n	4049f2 <__adddf3+0x24e>
  40499e:	ea94 0f05 	teq	r4, r5
  4049a2:	bf08      	it	eq
  4049a4:	ea90 0f02 	teqeq	r0, r2
  4049a8:	d005      	beq.n	4049b6 <__adddf3+0x212>
  4049aa:	ea54 0c00 	orrs.w	ip, r4, r0
  4049ae:	bf04      	itt	eq
  4049b0:	4619      	moveq	r1, r3
  4049b2:	4610      	moveq	r0, r2
  4049b4:	bd30      	pop	{r4, r5, pc}
  4049b6:	ea91 0f03 	teq	r1, r3
  4049ba:	bf1e      	ittt	ne
  4049bc:	2100      	movne	r1, #0
  4049be:	2000      	movne	r0, #0
  4049c0:	bd30      	popne	{r4, r5, pc}
  4049c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4049c6:	d105      	bne.n	4049d4 <__adddf3+0x230>
  4049c8:	0040      	lsls	r0, r0, #1
  4049ca:	4149      	adcs	r1, r1
  4049cc:	bf28      	it	cs
  4049ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4049d2:	bd30      	pop	{r4, r5, pc}
  4049d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4049d8:	bf3c      	itt	cc
  4049da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4049de:	bd30      	popcc	{r4, r5, pc}
  4049e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4049e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4049e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4049ec:	f04f 0000 	mov.w	r0, #0
  4049f0:	bd30      	pop	{r4, r5, pc}
  4049f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4049f6:	bf1a      	itte	ne
  4049f8:	4619      	movne	r1, r3
  4049fa:	4610      	movne	r0, r2
  4049fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  404a00:	bf1c      	itt	ne
  404a02:	460b      	movne	r3, r1
  404a04:	4602      	movne	r2, r0
  404a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404a0a:	bf06      	itte	eq
  404a0c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  404a10:	ea91 0f03 	teqeq	r1, r3
  404a14:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404a18:	bd30      	pop	{r4, r5, pc}
  404a1a:	bf00      	nop

00404a1c <__aeabi_ui2d>:
  404a1c:	f090 0f00 	teq	r0, #0
  404a20:	bf04      	itt	eq
  404a22:	2100      	moveq	r1, #0
  404a24:	4770      	bxeq	lr
  404a26:	b530      	push	{r4, r5, lr}
  404a28:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404a2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404a30:	f04f 0500 	mov.w	r5, #0
  404a34:	f04f 0100 	mov.w	r1, #0
  404a38:	e750      	b.n	4048dc <__adddf3+0x138>
  404a3a:	bf00      	nop

00404a3c <__aeabi_i2d>:
  404a3c:	f090 0f00 	teq	r0, #0
  404a40:	bf04      	itt	eq
  404a42:	2100      	moveq	r1, #0
  404a44:	4770      	bxeq	lr
  404a46:	b530      	push	{r4, r5, lr}
  404a48:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404a4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404a50:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  404a54:	bf48      	it	mi
  404a56:	4240      	negmi	r0, r0
  404a58:	f04f 0100 	mov.w	r1, #0
  404a5c:	e73e      	b.n	4048dc <__adddf3+0x138>
  404a5e:	bf00      	nop

00404a60 <__aeabi_f2d>:
  404a60:	0042      	lsls	r2, r0, #1
  404a62:	ea4f 01e2 	mov.w	r1, r2, asr #3
  404a66:	ea4f 0131 	mov.w	r1, r1, rrx
  404a6a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  404a6e:	bf1f      	itttt	ne
  404a70:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  404a74:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404a78:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  404a7c:	4770      	bxne	lr
  404a7e:	f092 0f00 	teq	r2, #0
  404a82:	bf14      	ite	ne
  404a84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404a88:	4770      	bxeq	lr
  404a8a:	b530      	push	{r4, r5, lr}
  404a8c:	f44f 7460 	mov.w	r4, #896	; 0x380
  404a90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404a94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404a98:	e720      	b.n	4048dc <__adddf3+0x138>
  404a9a:	bf00      	nop

00404a9c <__aeabi_ul2d>:
  404a9c:	ea50 0201 	orrs.w	r2, r0, r1
  404aa0:	bf08      	it	eq
  404aa2:	4770      	bxeq	lr
  404aa4:	b530      	push	{r4, r5, lr}
  404aa6:	f04f 0500 	mov.w	r5, #0
  404aaa:	e00a      	b.n	404ac2 <__aeabi_l2d+0x16>

00404aac <__aeabi_l2d>:
  404aac:	ea50 0201 	orrs.w	r2, r0, r1
  404ab0:	bf08      	it	eq
  404ab2:	4770      	bxeq	lr
  404ab4:	b530      	push	{r4, r5, lr}
  404ab6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  404aba:	d502      	bpl.n	404ac2 <__aeabi_l2d+0x16>
  404abc:	4240      	negs	r0, r0
  404abe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404ac2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404ac6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404aca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  404ace:	f43f aedc 	beq.w	40488a <__adddf3+0xe6>
  404ad2:	f04f 0203 	mov.w	r2, #3
  404ad6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404ada:	bf18      	it	ne
  404adc:	3203      	addne	r2, #3
  404ade:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404ae2:	bf18      	it	ne
  404ae4:	3203      	addne	r2, #3
  404ae6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  404aea:	f1c2 0320 	rsb	r3, r2, #32
  404aee:	fa00 fc03 	lsl.w	ip, r0, r3
  404af2:	fa20 f002 	lsr.w	r0, r0, r2
  404af6:	fa01 fe03 	lsl.w	lr, r1, r3
  404afa:	ea40 000e 	orr.w	r0, r0, lr
  404afe:	fa21 f102 	lsr.w	r1, r1, r2
  404b02:	4414      	add	r4, r2
  404b04:	e6c1      	b.n	40488a <__adddf3+0xe6>
  404b06:	bf00      	nop

00404b08 <atoll>:
  404b08:	220a      	movs	r2, #10
  404b0a:	2100      	movs	r1, #0
  404b0c:	f000 ba0e 	b.w	404f2c <strtoll>

00404b10 <__libc_init_array>:
  404b10:	b570      	push	{r4, r5, r6, lr}
  404b12:	4e0f      	ldr	r6, [pc, #60]	; (404b50 <__libc_init_array+0x40>)
  404b14:	4d0f      	ldr	r5, [pc, #60]	; (404b54 <__libc_init_array+0x44>)
  404b16:	1b76      	subs	r6, r6, r5
  404b18:	10b6      	asrs	r6, r6, #2
  404b1a:	bf18      	it	ne
  404b1c:	2400      	movne	r4, #0
  404b1e:	d005      	beq.n	404b2c <__libc_init_array+0x1c>
  404b20:	3401      	adds	r4, #1
  404b22:	f855 3b04 	ldr.w	r3, [r5], #4
  404b26:	4798      	blx	r3
  404b28:	42a6      	cmp	r6, r4
  404b2a:	d1f9      	bne.n	404b20 <__libc_init_array+0x10>
  404b2c:	4e0a      	ldr	r6, [pc, #40]	; (404b58 <__libc_init_array+0x48>)
  404b2e:	4d0b      	ldr	r5, [pc, #44]	; (404b5c <__libc_init_array+0x4c>)
  404b30:	f004 fdba 	bl	4096a8 <_init>
  404b34:	1b76      	subs	r6, r6, r5
  404b36:	10b6      	asrs	r6, r6, #2
  404b38:	bf18      	it	ne
  404b3a:	2400      	movne	r4, #0
  404b3c:	d006      	beq.n	404b4c <__libc_init_array+0x3c>
  404b3e:	3401      	adds	r4, #1
  404b40:	f855 3b04 	ldr.w	r3, [r5], #4
  404b44:	4798      	blx	r3
  404b46:	42a6      	cmp	r6, r4
  404b48:	d1f9      	bne.n	404b3e <__libc_init_array+0x2e>
  404b4a:	bd70      	pop	{r4, r5, r6, pc}
  404b4c:	bd70      	pop	{r4, r5, r6, pc}
  404b4e:	bf00      	nop
  404b50:	004096b4 	.word	0x004096b4
  404b54:	004096b4 	.word	0x004096b4
  404b58:	004096bc 	.word	0x004096bc
  404b5c:	004096b4 	.word	0x004096b4

00404b60 <memcpy>:
  404b60:	4684      	mov	ip, r0
  404b62:	ea41 0300 	orr.w	r3, r1, r0
  404b66:	f013 0303 	ands.w	r3, r3, #3
  404b6a:	d149      	bne.n	404c00 <memcpy+0xa0>
  404b6c:	3a40      	subs	r2, #64	; 0x40
  404b6e:	d323      	bcc.n	404bb8 <memcpy+0x58>
  404b70:	680b      	ldr	r3, [r1, #0]
  404b72:	6003      	str	r3, [r0, #0]
  404b74:	684b      	ldr	r3, [r1, #4]
  404b76:	6043      	str	r3, [r0, #4]
  404b78:	688b      	ldr	r3, [r1, #8]
  404b7a:	6083      	str	r3, [r0, #8]
  404b7c:	68cb      	ldr	r3, [r1, #12]
  404b7e:	60c3      	str	r3, [r0, #12]
  404b80:	690b      	ldr	r3, [r1, #16]
  404b82:	6103      	str	r3, [r0, #16]
  404b84:	694b      	ldr	r3, [r1, #20]
  404b86:	6143      	str	r3, [r0, #20]
  404b88:	698b      	ldr	r3, [r1, #24]
  404b8a:	6183      	str	r3, [r0, #24]
  404b8c:	69cb      	ldr	r3, [r1, #28]
  404b8e:	61c3      	str	r3, [r0, #28]
  404b90:	6a0b      	ldr	r3, [r1, #32]
  404b92:	6203      	str	r3, [r0, #32]
  404b94:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  404b96:	6243      	str	r3, [r0, #36]	; 0x24
  404b98:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  404b9a:	6283      	str	r3, [r0, #40]	; 0x28
  404b9c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  404b9e:	62c3      	str	r3, [r0, #44]	; 0x2c
  404ba0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404ba2:	6303      	str	r3, [r0, #48]	; 0x30
  404ba4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
  404ba6:	6343      	str	r3, [r0, #52]	; 0x34
  404ba8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  404baa:	6383      	str	r3, [r0, #56]	; 0x38
  404bac:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  404bae:	63c3      	str	r3, [r0, #60]	; 0x3c
  404bb0:	3040      	adds	r0, #64	; 0x40
  404bb2:	3140      	adds	r1, #64	; 0x40
  404bb4:	3a40      	subs	r2, #64	; 0x40
  404bb6:	d2db      	bcs.n	404b70 <memcpy+0x10>
  404bb8:	3230      	adds	r2, #48	; 0x30
  404bba:	d30b      	bcc.n	404bd4 <memcpy+0x74>
  404bbc:	680b      	ldr	r3, [r1, #0]
  404bbe:	6003      	str	r3, [r0, #0]
  404bc0:	684b      	ldr	r3, [r1, #4]
  404bc2:	6043      	str	r3, [r0, #4]
  404bc4:	688b      	ldr	r3, [r1, #8]
  404bc6:	6083      	str	r3, [r0, #8]
  404bc8:	68cb      	ldr	r3, [r1, #12]
  404bca:	60c3      	str	r3, [r0, #12]
  404bcc:	3010      	adds	r0, #16
  404bce:	3110      	adds	r1, #16
  404bd0:	3a10      	subs	r2, #16
  404bd2:	d2f3      	bcs.n	404bbc <memcpy+0x5c>
  404bd4:	320c      	adds	r2, #12
  404bd6:	d305      	bcc.n	404be4 <memcpy+0x84>
  404bd8:	f851 3b04 	ldr.w	r3, [r1], #4
  404bdc:	f840 3b04 	str.w	r3, [r0], #4
  404be0:	3a04      	subs	r2, #4
  404be2:	d2f9      	bcs.n	404bd8 <memcpy+0x78>
  404be4:	3204      	adds	r2, #4
  404be6:	d008      	beq.n	404bfa <memcpy+0x9a>
  404be8:	07d2      	lsls	r2, r2, #31
  404bea:	bf1c      	itt	ne
  404bec:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404bf0:	f800 3b01 	strbne.w	r3, [r0], #1
  404bf4:	d301      	bcc.n	404bfa <memcpy+0x9a>
  404bf6:	880b      	ldrh	r3, [r1, #0]
  404bf8:	8003      	strh	r3, [r0, #0]
  404bfa:	4660      	mov	r0, ip
  404bfc:	4770      	bx	lr
  404bfe:	bf00      	nop
  404c00:	2a08      	cmp	r2, #8
  404c02:	d313      	bcc.n	404c2c <memcpy+0xcc>
  404c04:	078b      	lsls	r3, r1, #30
  404c06:	d0b1      	beq.n	404b6c <memcpy+0xc>
  404c08:	f010 0303 	ands.w	r3, r0, #3
  404c0c:	d0ae      	beq.n	404b6c <memcpy+0xc>
  404c0e:	f1c3 0304 	rsb	r3, r3, #4
  404c12:	1ad2      	subs	r2, r2, r3
  404c14:	07db      	lsls	r3, r3, #31
  404c16:	bf1c      	itt	ne
  404c18:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404c1c:	f800 3b01 	strbne.w	r3, [r0], #1
  404c20:	d3a4      	bcc.n	404b6c <memcpy+0xc>
  404c22:	f831 3b02 	ldrh.w	r3, [r1], #2
  404c26:	f820 3b02 	strh.w	r3, [r0], #2
  404c2a:	e79f      	b.n	404b6c <memcpy+0xc>
  404c2c:	3a04      	subs	r2, #4
  404c2e:	d3d9      	bcc.n	404be4 <memcpy+0x84>
  404c30:	3a01      	subs	r2, #1
  404c32:	f811 3b01 	ldrb.w	r3, [r1], #1
  404c36:	f800 3b01 	strb.w	r3, [r0], #1
  404c3a:	d2f9      	bcs.n	404c30 <memcpy+0xd0>
  404c3c:	780b      	ldrb	r3, [r1, #0]
  404c3e:	7003      	strb	r3, [r0, #0]
  404c40:	784b      	ldrb	r3, [r1, #1]
  404c42:	7043      	strb	r3, [r0, #1]
  404c44:	788b      	ldrb	r3, [r1, #2]
  404c46:	7083      	strb	r3, [r0, #2]
  404c48:	4660      	mov	r0, ip
  404c4a:	4770      	bx	lr

00404c4c <memset>:
  404c4c:	b470      	push	{r4, r5, r6}
  404c4e:	0786      	lsls	r6, r0, #30
  404c50:	d046      	beq.n	404ce0 <memset+0x94>
  404c52:	1e54      	subs	r4, r2, #1
  404c54:	2a00      	cmp	r2, #0
  404c56:	d041      	beq.n	404cdc <memset+0x90>
  404c58:	b2ca      	uxtb	r2, r1
  404c5a:	4603      	mov	r3, r0
  404c5c:	e002      	b.n	404c64 <memset+0x18>
  404c5e:	f114 34ff 	adds.w	r4, r4, #4294967295
  404c62:	d33b      	bcc.n	404cdc <memset+0x90>
  404c64:	f803 2b01 	strb.w	r2, [r3], #1
  404c68:	079d      	lsls	r5, r3, #30
  404c6a:	d1f8      	bne.n	404c5e <memset+0x12>
  404c6c:	2c03      	cmp	r4, #3
  404c6e:	d92e      	bls.n	404cce <memset+0x82>
  404c70:	b2cd      	uxtb	r5, r1
  404c72:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404c76:	2c0f      	cmp	r4, #15
  404c78:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404c7c:	d919      	bls.n	404cb2 <memset+0x66>
  404c7e:	4626      	mov	r6, r4
  404c80:	f103 0210 	add.w	r2, r3, #16
  404c84:	3e10      	subs	r6, #16
  404c86:	2e0f      	cmp	r6, #15
  404c88:	f842 5c10 	str.w	r5, [r2, #-16]
  404c8c:	f842 5c0c 	str.w	r5, [r2, #-12]
  404c90:	f842 5c08 	str.w	r5, [r2, #-8]
  404c94:	f842 5c04 	str.w	r5, [r2, #-4]
  404c98:	f102 0210 	add.w	r2, r2, #16
  404c9c:	d8f2      	bhi.n	404c84 <memset+0x38>
  404c9e:	f1a4 0210 	sub.w	r2, r4, #16
  404ca2:	f022 020f 	bic.w	r2, r2, #15
  404ca6:	f004 040f 	and.w	r4, r4, #15
  404caa:	3210      	adds	r2, #16
  404cac:	2c03      	cmp	r4, #3
  404cae:	4413      	add	r3, r2
  404cb0:	d90d      	bls.n	404cce <memset+0x82>
  404cb2:	461e      	mov	r6, r3
  404cb4:	4622      	mov	r2, r4
  404cb6:	3a04      	subs	r2, #4
  404cb8:	2a03      	cmp	r2, #3
  404cba:	f846 5b04 	str.w	r5, [r6], #4
  404cbe:	d8fa      	bhi.n	404cb6 <memset+0x6a>
  404cc0:	1f22      	subs	r2, r4, #4
  404cc2:	f022 0203 	bic.w	r2, r2, #3
  404cc6:	3204      	adds	r2, #4
  404cc8:	4413      	add	r3, r2
  404cca:	f004 0403 	and.w	r4, r4, #3
  404cce:	b12c      	cbz	r4, 404cdc <memset+0x90>
  404cd0:	b2c9      	uxtb	r1, r1
  404cd2:	441c      	add	r4, r3
  404cd4:	f803 1b01 	strb.w	r1, [r3], #1
  404cd8:	429c      	cmp	r4, r3
  404cda:	d1fb      	bne.n	404cd4 <memset+0x88>
  404cdc:	bc70      	pop	{r4, r5, r6}
  404cde:	4770      	bx	lr
  404ce0:	4614      	mov	r4, r2
  404ce2:	4603      	mov	r3, r0
  404ce4:	e7c2      	b.n	404c6c <memset+0x20>
  404ce6:	bf00      	nop

00404ce8 <sprintf>:
  404ce8:	b40e      	push	{r1, r2, r3}
  404cea:	4601      	mov	r1, r0
  404cec:	b5f0      	push	{r4, r5, r6, r7, lr}
  404cee:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  404cf2:	f44f 7702 	mov.w	r7, #520	; 0x208
  404cf6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  404cfa:	b09c      	sub	sp, #112	; 0x70
  404cfc:	ac21      	add	r4, sp, #132	; 0x84
  404cfe:	f854 2b04 	ldr.w	r2, [r4], #4
  404d02:	4b0b      	ldr	r3, [pc, #44]	; (404d30 <sprintf+0x48>)
  404d04:	9102      	str	r1, [sp, #8]
  404d06:	9106      	str	r1, [sp, #24]
  404d08:	6818      	ldr	r0, [r3, #0]
  404d0a:	a902      	add	r1, sp, #8
  404d0c:	4623      	mov	r3, r4
  404d0e:	9401      	str	r4, [sp, #4]
  404d10:	f8ad 7014 	strh.w	r7, [sp, #20]
  404d14:	9504      	str	r5, [sp, #16]
  404d16:	9507      	str	r5, [sp, #28]
  404d18:	f8ad 6016 	strh.w	r6, [sp, #22]
  404d1c:	f000 f91c 	bl	404f58 <_svfprintf_r>
  404d20:	2200      	movs	r2, #0
  404d22:	9b02      	ldr	r3, [sp, #8]
  404d24:	701a      	strb	r2, [r3, #0]
  404d26:	b01c      	add	sp, #112	; 0x70
  404d28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404d2c:	b003      	add	sp, #12
  404d2e:	4770      	bx	lr
  404d30:	20000298 	.word	0x20000298

00404d34 <strlen>:
  404d34:	f020 0103 	bic.w	r1, r0, #3
  404d38:	f010 0003 	ands.w	r0, r0, #3
  404d3c:	f1c0 0000 	rsb	r0, r0, #0
  404d40:	f851 3b04 	ldr.w	r3, [r1], #4
  404d44:	f100 0c04 	add.w	ip, r0, #4
  404d48:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  404d4c:	f06f 0200 	mvn.w	r2, #0
  404d50:	bf1c      	itt	ne
  404d52:	fa22 f20c 	lsrne.w	r2, r2, ip
  404d56:	4313      	orrne	r3, r2
  404d58:	f04f 0c01 	mov.w	ip, #1
  404d5c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  404d60:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  404d64:	eba3 020c 	sub.w	r2, r3, ip
  404d68:	ea22 0203 	bic.w	r2, r2, r3
  404d6c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  404d70:	bf04      	itt	eq
  404d72:	f851 3b04 	ldreq.w	r3, [r1], #4
  404d76:	3004      	addeq	r0, #4
  404d78:	d0f4      	beq.n	404d64 <strlen+0x30>
  404d7a:	f1c2 0100 	rsb	r1, r2, #0
  404d7e:	ea02 0201 	and.w	r2, r2, r1
  404d82:	fab2 f282 	clz	r2, r2
  404d86:	f1c2 021f 	rsb	r2, r2, #31
  404d8a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404d8e:	4770      	bx	lr

00404d90 <_strtoll_l.isra.0>:
  404d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d94:	b085      	sub	sp, #20
  404d96:	9102      	str	r1, [sp, #8]
  404d98:	9003      	str	r0, [sp, #12]
  404d9a:	9200      	str	r2, [sp, #0]
  404d9c:	461e      	mov	r6, r3
  404d9e:	4688      	mov	r8, r1
  404da0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404da2:	e000      	b.n	404da6 <_strtoll_l.isra.0+0x16>
  404da4:	46a8      	mov	r8, r5
  404da6:	4645      	mov	r5, r8
  404da8:	4638      	mov	r0, r7
  404daa:	f815 4b01 	ldrb.w	r4, [r5], #1
  404dae:	f002 fc69 	bl	407684 <__locale_ctype_ptr_l>
  404db2:	4420      	add	r0, r4
  404db4:	7843      	ldrb	r3, [r0, #1]
  404db6:	f013 0308 	ands.w	r3, r3, #8
  404dba:	d1f3      	bne.n	404da4 <_strtoll_l.isra.0+0x14>
  404dbc:	2c2d      	cmp	r4, #45	; 0x2d
  404dbe:	f000 8081 	beq.w	404ec4 <_strtoll_l.isra.0+0x134>
  404dc2:	2c2b      	cmp	r4, #43	; 0x2b
  404dc4:	bf03      	ittte	eq
  404dc6:	782c      	ldrbeq	r4, [r5, #0]
  404dc8:	9301      	streq	r3, [sp, #4]
  404dca:	f108 0502 	addeq.w	r5, r8, #2
  404dce:	9301      	strne	r3, [sp, #4]
  404dd0:	b166      	cbz	r6, 404dec <_strtoll_l.isra.0+0x5c>
  404dd2:	2e10      	cmp	r6, #16
  404dd4:	f000 8088 	beq.w	404ee8 <_strtoll_l.isra.0+0x158>
  404dd8:	9b01      	ldr	r3, [sp, #4]
  404dda:	46b0      	mov	r8, r6
  404ddc:	ea4f 79e6 	mov.w	r9, r6, asr #31
  404de0:	b97b      	cbnz	r3, 404e02 <_strtoll_l.isra.0+0x72>
  404de2:	f04f 3aff 	mov.w	sl, #4294967295
  404de6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
  404dea:	e00e      	b.n	404e0a <_strtoll_l.isra.0+0x7a>
  404dec:	2c30      	cmp	r4, #48	; 0x30
  404dee:	f000 808a 	beq.w	404f06 <_strtoll_l.isra.0+0x176>
  404df2:	f04f 080a 	mov.w	r8, #10
  404df6:	f04f 0900 	mov.w	r9, #0
  404dfa:	260a      	movs	r6, #10
  404dfc:	9b01      	ldr	r3, [sp, #4]
  404dfe:	2b00      	cmp	r3, #0
  404e00:	d0ef      	beq.n	404de2 <_strtoll_l.isra.0+0x52>
  404e02:	f04f 0a00 	mov.w	sl, #0
  404e06:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  404e0a:	4642      	mov	r2, r8
  404e0c:	464b      	mov	r3, r9
  404e0e:	4650      	mov	r0, sl
  404e10:	4639      	mov	r1, r7
  404e12:	f004 f873 	bl	408efc <__aeabi_uldivmod>
  404e16:	464b      	mov	r3, r9
  404e18:	4693      	mov	fp, r2
  404e1a:	4650      	mov	r0, sl
  404e1c:	4642      	mov	r2, r8
  404e1e:	4639      	mov	r1, r7
  404e20:	f004 f86c 	bl	408efc <__aeabi_uldivmod>
  404e24:	f04f 0e00 	mov.w	lr, #0
  404e28:	2200      	movs	r2, #0
  404e2a:	2300      	movs	r3, #0
  404e2c:	e00f      	b.n	404e4e <_strtoll_l.isra.0+0xbe>
  404e2e:	d044      	beq.n	404eba <_strtoll_l.isra.0+0x12a>
  404e30:	f04f 0e01 	mov.w	lr, #1
  404e34:	fb02 f409 	mul.w	r4, r2, r9
  404e38:	fb08 4403 	mla	r4, r8, r3, r4
  404e3c:	fba2 2308 	umull	r2, r3, r2, r8
  404e40:	4423      	add	r3, r4
  404e42:	eb12 020c 	adds.w	r2, r2, ip
  404e46:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
  404e4a:	f815 4b01 	ldrb.w	r4, [r5], #1
  404e4e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  404e52:	f1bc 0f09 	cmp.w	ip, #9
  404e56:	d906      	bls.n	404e66 <_strtoll_l.isra.0+0xd6>
  404e58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
  404e5c:	f1bc 0f19 	cmp.w	ip, #25
  404e60:	d80d      	bhi.n	404e7e <_strtoll_l.isra.0+0xee>
  404e62:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
  404e66:	4566      	cmp	r6, ip
  404e68:	dd12      	ble.n	404e90 <_strtoll_l.isra.0+0x100>
  404e6a:	f1be 3fff 	cmp.w	lr, #4294967295
  404e6e:	d0ec      	beq.n	404e4a <_strtoll_l.isra.0+0xba>
  404e70:	4299      	cmp	r1, r3
  404e72:	bf08      	it	eq
  404e74:	4290      	cmpeq	r0, r2
  404e76:	d2da      	bcs.n	404e2e <_strtoll_l.isra.0+0x9e>
  404e78:	f04f 3eff 	mov.w	lr, #4294967295
  404e7c:	e7e5      	b.n	404e4a <_strtoll_l.isra.0+0xba>
  404e7e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
  404e82:	f1bc 0f19 	cmp.w	ip, #25
  404e86:	d803      	bhi.n	404e90 <_strtoll_l.isra.0+0x100>
  404e88:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
  404e8c:	4566      	cmp	r6, ip
  404e8e:	dcec      	bgt.n	404e6a <_strtoll_l.isra.0+0xda>
  404e90:	f1be 3fff 	cmp.w	lr, #4294967295
  404e94:	d01c      	beq.n	404ed0 <_strtoll_l.isra.0+0x140>
  404e96:	9901      	ldr	r1, [sp, #4]
  404e98:	b111      	cbz	r1, 404ea0 <_strtoll_l.isra.0+0x110>
  404e9a:	4252      	negs	r2, r2
  404e9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404ea0:	9900      	ldr	r1, [sp, #0]
  404ea2:	b129      	cbz	r1, 404eb0 <_strtoll_l.isra.0+0x120>
  404ea4:	f1be 0f00 	cmp.w	lr, #0
  404ea8:	d11b      	bne.n	404ee2 <_strtoll_l.isra.0+0x152>
  404eaa:	9d02      	ldr	r5, [sp, #8]
  404eac:	9900      	ldr	r1, [sp, #0]
  404eae:	600d      	str	r5, [r1, #0]
  404eb0:	4610      	mov	r0, r2
  404eb2:	4619      	mov	r1, r3
  404eb4:	b005      	add	sp, #20
  404eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404eba:	45e3      	cmp	fp, ip
  404ebc:	dab8      	bge.n	404e30 <_strtoll_l.isra.0+0xa0>
  404ebe:	f04f 3eff 	mov.w	lr, #4294967295
  404ec2:	e7c2      	b.n	404e4a <_strtoll_l.isra.0+0xba>
  404ec4:	2301      	movs	r3, #1
  404ec6:	782c      	ldrb	r4, [r5, #0]
  404ec8:	9301      	str	r3, [sp, #4]
  404eca:	f108 0502 	add.w	r5, r8, #2
  404ece:	e77f      	b.n	404dd0 <_strtoll_l.isra.0+0x40>
  404ed0:	2322      	movs	r3, #34	; 0x22
  404ed2:	9a03      	ldr	r2, [sp, #12]
  404ed4:	6013      	str	r3, [r2, #0]
  404ed6:	9b00      	ldr	r3, [sp, #0]
  404ed8:	b32b      	cbz	r3, 404f26 <_strtoll_l.isra.0+0x196>
  404eda:	4652      	mov	r2, sl
  404edc:	3d01      	subs	r5, #1
  404ede:	463b      	mov	r3, r7
  404ee0:	e7e4      	b.n	404eac <_strtoll_l.isra.0+0x11c>
  404ee2:	4692      	mov	sl, r2
  404ee4:	461f      	mov	r7, r3
  404ee6:	e7f8      	b.n	404eda <_strtoll_l.isra.0+0x14a>
  404ee8:	2c30      	cmp	r4, #48	; 0x30
  404eea:	d117      	bne.n	404f1c <_strtoll_l.isra.0+0x18c>
  404eec:	782b      	ldrb	r3, [r5, #0]
  404eee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  404ef2:	2b58      	cmp	r3, #88	; 0x58
  404ef4:	d112      	bne.n	404f1c <_strtoll_l.isra.0+0x18c>
  404ef6:	786c      	ldrb	r4, [r5, #1]
  404ef8:	f04f 0810 	mov.w	r8, #16
  404efc:	f04f 0900 	mov.w	r9, #0
  404f00:	3502      	adds	r5, #2
  404f02:	2610      	movs	r6, #16
  404f04:	e77a      	b.n	404dfc <_strtoll_l.isra.0+0x6c>
  404f06:	782b      	ldrb	r3, [r5, #0]
  404f08:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  404f0c:	2b58      	cmp	r3, #88	; 0x58
  404f0e:	d0f2      	beq.n	404ef6 <_strtoll_l.isra.0+0x166>
  404f10:	f04f 0808 	mov.w	r8, #8
  404f14:	f04f 0900 	mov.w	r9, #0
  404f18:	2608      	movs	r6, #8
  404f1a:	e76f      	b.n	404dfc <_strtoll_l.isra.0+0x6c>
  404f1c:	f04f 0810 	mov.w	r8, #16
  404f20:	f04f 0900 	mov.w	r9, #0
  404f24:	e76a      	b.n	404dfc <_strtoll_l.isra.0+0x6c>
  404f26:	4652      	mov	r2, sl
  404f28:	463b      	mov	r3, r7
  404f2a:	e7c1      	b.n	404eb0 <_strtoll_l.isra.0+0x120>

00404f2c <strtoll>:
  404f2c:	4b08      	ldr	r3, [pc, #32]	; (404f50 <strtoll+0x24>)
  404f2e:	b570      	push	{r4, r5, r6, lr}
  404f30:	681d      	ldr	r5, [r3, #0]
  404f32:	4e08      	ldr	r6, [pc, #32]	; (404f54 <strtoll+0x28>)
  404f34:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  404f36:	b082      	sub	sp, #8
  404f38:	2c00      	cmp	r4, #0
  404f3a:	bf08      	it	eq
  404f3c:	4634      	moveq	r4, r6
  404f3e:	4613      	mov	r3, r2
  404f40:	9400      	str	r4, [sp, #0]
  404f42:	460a      	mov	r2, r1
  404f44:	4601      	mov	r1, r0
  404f46:	4628      	mov	r0, r5
  404f48:	f7ff ff22 	bl	404d90 <_strtoll_l.isra.0>
  404f4c:	b002      	add	sp, #8
  404f4e:	bd70      	pop	{r4, r5, r6, pc}
  404f50:	20000298 	.word	0x20000298
  404f54:	200006cc 	.word	0x200006cc

00404f58 <_svfprintf_r>:
  404f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f5c:	b0c3      	sub	sp, #268	; 0x10c
  404f5e:	460c      	mov	r4, r1
  404f60:	910b      	str	r1, [sp, #44]	; 0x2c
  404f62:	4692      	mov	sl, r2
  404f64:	930f      	str	r3, [sp, #60]	; 0x3c
  404f66:	900c      	str	r0, [sp, #48]	; 0x30
  404f68:	f002 fb90 	bl	40768c <_localeconv_r>
  404f6c:	6803      	ldr	r3, [r0, #0]
  404f6e:	4618      	mov	r0, r3
  404f70:	931a      	str	r3, [sp, #104]	; 0x68
  404f72:	f7ff fedf 	bl	404d34 <strlen>
  404f76:	89a3      	ldrh	r3, [r4, #12]
  404f78:	9019      	str	r0, [sp, #100]	; 0x64
  404f7a:	0619      	lsls	r1, r3, #24
  404f7c:	d503      	bpl.n	404f86 <_svfprintf_r+0x2e>
  404f7e:	6923      	ldr	r3, [r4, #16]
  404f80:	2b00      	cmp	r3, #0
  404f82:	f001 8035 	beq.w	405ff0 <_svfprintf_r+0x1098>
  404f86:	2300      	movs	r3, #0
  404f88:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  404f8c:	46c8      	mov	r8, r9
  404f8e:	9315      	str	r3, [sp, #84]	; 0x54
  404f90:	9313      	str	r3, [sp, #76]	; 0x4c
  404f92:	9314      	str	r3, [sp, #80]	; 0x50
  404f94:	9318      	str	r3, [sp, #96]	; 0x60
  404f96:	931b      	str	r3, [sp, #108]	; 0x6c
  404f98:	9309      	str	r3, [sp, #36]	; 0x24
  404f9a:	9316      	str	r3, [sp, #88]	; 0x58
  404f9c:	9317      	str	r3, [sp, #92]	; 0x5c
  404f9e:	9327      	str	r3, [sp, #156]	; 0x9c
  404fa0:	9326      	str	r3, [sp, #152]	; 0x98
  404fa2:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  404fa6:	f89a 3000 	ldrb.w	r3, [sl]
  404faa:	4654      	mov	r4, sl
  404fac:	b1eb      	cbz	r3, 404fea <_svfprintf_r+0x92>
  404fae:	2b25      	cmp	r3, #37	; 0x25
  404fb0:	d102      	bne.n	404fb8 <_svfprintf_r+0x60>
  404fb2:	e01a      	b.n	404fea <_svfprintf_r+0x92>
  404fb4:	2b25      	cmp	r3, #37	; 0x25
  404fb6:	d003      	beq.n	404fc0 <_svfprintf_r+0x68>
  404fb8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404fbc:	2b00      	cmp	r3, #0
  404fbe:	d1f9      	bne.n	404fb4 <_svfprintf_r+0x5c>
  404fc0:	eba4 050a 	sub.w	r5, r4, sl
  404fc4:	b18d      	cbz	r5, 404fea <_svfprintf_r+0x92>
  404fc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404fc8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404fca:	3301      	adds	r3, #1
  404fcc:	442a      	add	r2, r5
  404fce:	2b07      	cmp	r3, #7
  404fd0:	f8c8 a000 	str.w	sl, [r8]
  404fd4:	f8c8 5004 	str.w	r5, [r8, #4]
  404fd8:	9227      	str	r2, [sp, #156]	; 0x9c
  404fda:	9326      	str	r3, [sp, #152]	; 0x98
  404fdc:	f300 808a 	bgt.w	4050f4 <_svfprintf_r+0x19c>
  404fe0:	f108 0808 	add.w	r8, r8, #8
  404fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404fe6:	442b      	add	r3, r5
  404fe8:	9309      	str	r3, [sp, #36]	; 0x24
  404fea:	7823      	ldrb	r3, [r4, #0]
  404fec:	2b00      	cmp	r3, #0
  404fee:	f000 8089 	beq.w	405104 <_svfprintf_r+0x1ac>
  404ff2:	2300      	movs	r3, #0
  404ff4:	f04f 30ff 	mov.w	r0, #4294967295
  404ff8:	461a      	mov	r2, r3
  404ffa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404ffe:	4619      	mov	r1, r3
  405000:	930d      	str	r3, [sp, #52]	; 0x34
  405002:	469b      	mov	fp, r3
  405004:	7863      	ldrb	r3, [r4, #1]
  405006:	f104 0a01 	add.w	sl, r4, #1
  40500a:	900a      	str	r0, [sp, #40]	; 0x28
  40500c:	f10a 0a01 	add.w	sl, sl, #1
  405010:	f1a3 0020 	sub.w	r0, r3, #32
  405014:	2858      	cmp	r0, #88	; 0x58
  405016:	f200 83b7 	bhi.w	405788 <_svfprintf_r+0x830>
  40501a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40501e:	034c      	.short	0x034c
  405020:	03b503b5 	.word	0x03b503b5
  405024:	03b50354 	.word	0x03b50354
  405028:	03b503b5 	.word	0x03b503b5
  40502c:	03b503b5 	.word	0x03b503b5
  405030:	005903b5 	.word	0x005903b5
  405034:	03b50359 	.word	0x03b50359
  405038:	02140066 	.word	0x02140066
  40503c:	022f03b5 	.word	0x022f03b5
  405040:	03a503a5 	.word	0x03a503a5
  405044:	03a503a5 	.word	0x03a503a5
  405048:	03a503a5 	.word	0x03a503a5
  40504c:	03a503a5 	.word	0x03a503a5
  405050:	03b503a5 	.word	0x03b503a5
  405054:	03b503b5 	.word	0x03b503b5
  405058:	03b503b5 	.word	0x03b503b5
  40505c:	03b503b5 	.word	0x03b503b5
  405060:	03b503b5 	.word	0x03b503b5
  405064:	028b03b5 	.word	0x028b03b5
  405068:	03b502d3 	.word	0x03b502d3
  40506c:	03b502d3 	.word	0x03b502d3
  405070:	03b503b5 	.word	0x03b503b5
  405074:	031b03b5 	.word	0x031b03b5
  405078:	03b503b5 	.word	0x03b503b5
  40507c:	03b50320 	.word	0x03b50320
  405080:	03b503b5 	.word	0x03b503b5
  405084:	03b503b5 	.word	0x03b503b5
  405088:	03b50234 	.word	0x03b50234
  40508c:	024b03b5 	.word	0x024b03b5
  405090:	03b503b5 	.word	0x03b503b5
  405094:	03b503b5 	.word	0x03b503b5
  405098:	03b503b5 	.word	0x03b503b5
  40509c:	03b503b5 	.word	0x03b503b5
  4050a0:	03b503b5 	.word	0x03b503b5
  4050a4:	039e0276 	.word	0x039e0276
  4050a8:	02d302d3 	.word	0x02d302d3
  4050ac:	036302d3 	.word	0x036302d3
  4050b0:	03b5039e 	.word	0x03b5039e
  4050b4:	036803b5 	.word	0x036803b5
  4050b8:	037503b5 	.word	0x037503b5
  4050bc:	038c01dd 	.word	0x038c01dd
  4050c0:	03b5035e 	.word	0x03b5035e
  4050c4:	03b501f2 	.word	0x03b501f2
  4050c8:	03b50087 	.word	0x03b50087
  4050cc:	033203b5 	.word	0x033203b5
  4050d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4050d2:	6823      	ldr	r3, [r4, #0]
  4050d4:	4618      	mov	r0, r3
  4050d6:	930d      	str	r3, [sp, #52]	; 0x34
  4050d8:	4623      	mov	r3, r4
  4050da:	2800      	cmp	r0, #0
  4050dc:	f103 0304 	add.w	r3, r3, #4
  4050e0:	930f      	str	r3, [sp, #60]	; 0x3c
  4050e2:	da04      	bge.n	4050ee <_svfprintf_r+0x196>
  4050e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4050e6:	425b      	negs	r3, r3
  4050e8:	930d      	str	r3, [sp, #52]	; 0x34
  4050ea:	f04b 0b04 	orr.w	fp, fp, #4
  4050ee:	f89a 3000 	ldrb.w	r3, [sl]
  4050f2:	e78b      	b.n	40500c <_svfprintf_r+0xb4>
  4050f4:	aa25      	add	r2, sp, #148	; 0x94
  4050f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4050f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4050fa:	f003 fb0b 	bl	408714 <__ssprint_r>
  4050fe:	b940      	cbnz	r0, 405112 <_svfprintf_r+0x1ba>
  405100:	46c8      	mov	r8, r9
  405102:	e76f      	b.n	404fe4 <_svfprintf_r+0x8c>
  405104:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  405106:	b123      	cbz	r3, 405112 <_svfprintf_r+0x1ba>
  405108:	980c      	ldr	r0, [sp, #48]	; 0x30
  40510a:	aa25      	add	r2, sp, #148	; 0x94
  40510c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40510e:	f003 fb01 	bl	408714 <__ssprint_r>
  405112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405114:	899b      	ldrh	r3, [r3, #12]
  405116:	f013 0f40 	tst.w	r3, #64	; 0x40
  40511a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40511c:	bf18      	it	ne
  40511e:	f04f 33ff 	movne.w	r3, #4294967295
  405122:	9309      	str	r3, [sp, #36]	; 0x24
  405124:	9809      	ldr	r0, [sp, #36]	; 0x24
  405126:	b043      	add	sp, #268	; 0x10c
  405128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40512c:	f01b 0f20 	tst.w	fp, #32
  405130:	9311      	str	r3, [sp, #68]	; 0x44
  405132:	f040 81af 	bne.w	405494 <_svfprintf_r+0x53c>
  405136:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405138:	f01b 0f10 	tst.w	fp, #16
  40513c:	4613      	mov	r3, r2
  40513e:	f040 859a 	bne.w	405c76 <_svfprintf_r+0xd1e>
  405142:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405146:	f000 8596 	beq.w	405c76 <_svfprintf_r+0xd1e>
  40514a:	2500      	movs	r5, #0
  40514c:	2301      	movs	r3, #1
  40514e:	8814      	ldrh	r4, [r2, #0]
  405150:	3204      	adds	r2, #4
  405152:	920f      	str	r2, [sp, #60]	; 0x3c
  405154:	2200      	movs	r2, #0
  405156:	4617      	mov	r7, r2
  405158:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
  40515c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40515e:	1c4a      	adds	r2, r1, #1
  405160:	f000 8210 	beq.w	405584 <_svfprintf_r+0x62c>
  405164:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  405168:	9207      	str	r2, [sp, #28]
  40516a:	ea54 0205 	orrs.w	r2, r4, r5
  40516e:	f040 820f 	bne.w	405590 <_svfprintf_r+0x638>
  405172:	2900      	cmp	r1, #0
  405174:	f040 8431 	bne.w	4059da <_svfprintf_r+0xa82>
  405178:	2b00      	cmp	r3, #0
  40517a:	f040 8539 	bne.w	405bf0 <_svfprintf_r+0xc98>
  40517e:	f01b 0301 	ands.w	r3, fp, #1
  405182:	930e      	str	r3, [sp, #56]	; 0x38
  405184:	f000 8662 	beq.w	405e4c <_svfprintf_r+0xef4>
  405188:	2330      	movs	r3, #48	; 0x30
  40518a:	ae42      	add	r6, sp, #264	; 0x108
  40518c:	f806 3d41 	strb.w	r3, [r6, #-65]!
  405190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405194:	4293      	cmp	r3, r2
  405196:	bfb8      	it	lt
  405198:	4613      	movlt	r3, r2
  40519a:	9308      	str	r3, [sp, #32]
  40519c:	2300      	movs	r3, #0
  40519e:	9312      	str	r3, [sp, #72]	; 0x48
  4051a0:	b117      	cbz	r7, 4051a8 <_svfprintf_r+0x250>
  4051a2:	9b08      	ldr	r3, [sp, #32]
  4051a4:	3301      	adds	r3, #1
  4051a6:	9308      	str	r3, [sp, #32]
  4051a8:	9b07      	ldr	r3, [sp, #28]
  4051aa:	f013 0302 	ands.w	r3, r3, #2
  4051ae:	9310      	str	r3, [sp, #64]	; 0x40
  4051b0:	d002      	beq.n	4051b8 <_svfprintf_r+0x260>
  4051b2:	9b08      	ldr	r3, [sp, #32]
  4051b4:	3302      	adds	r3, #2
  4051b6:	9308      	str	r3, [sp, #32]
  4051b8:	9b07      	ldr	r3, [sp, #28]
  4051ba:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4051be:	f040 8310 	bne.w	4057e2 <_svfprintf_r+0x88a>
  4051c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4051c4:	9a08      	ldr	r2, [sp, #32]
  4051c6:	eba3 0b02 	sub.w	fp, r3, r2
  4051ca:	f1bb 0f00 	cmp.w	fp, #0
  4051ce:	f340 8308 	ble.w	4057e2 <_svfprintf_r+0x88a>
  4051d2:	f1bb 0f10 	cmp.w	fp, #16
  4051d6:	f340 87b2 	ble.w	40613e <_svfprintf_r+0x11e6>
  4051da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4051dc:	4643      	mov	r3, r8
  4051de:	4621      	mov	r1, r4
  4051e0:	46a8      	mov	r8, r5
  4051e2:	2710      	movs	r7, #16
  4051e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4051e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4051e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4051ea:	e006      	b.n	4051fa <_svfprintf_r+0x2a2>
  4051ec:	f1ab 0b10 	sub.w	fp, fp, #16
  4051f0:	f1bb 0f10 	cmp.w	fp, #16
  4051f4:	f103 0308 	add.w	r3, r3, #8
  4051f8:	dd18      	ble.n	40522c <_svfprintf_r+0x2d4>
  4051fa:	3201      	adds	r2, #1
  4051fc:	48ab      	ldr	r0, [pc, #684]	; (4054ac <_svfprintf_r+0x554>)
  4051fe:	3110      	adds	r1, #16
  405200:	2a07      	cmp	r2, #7
  405202:	9127      	str	r1, [sp, #156]	; 0x9c
  405204:	9226      	str	r2, [sp, #152]	; 0x98
  405206:	e883 0081 	stmia.w	r3, {r0, r7}
  40520a:	ddef      	ble.n	4051ec <_svfprintf_r+0x294>
  40520c:	aa25      	add	r2, sp, #148	; 0x94
  40520e:	4629      	mov	r1, r5
  405210:	4620      	mov	r0, r4
  405212:	f003 fa7f 	bl	408714 <__ssprint_r>
  405216:	2800      	cmp	r0, #0
  405218:	f47f af7b 	bne.w	405112 <_svfprintf_r+0x1ba>
  40521c:	f1ab 0b10 	sub.w	fp, fp, #16
  405220:	f1bb 0f10 	cmp.w	fp, #16
  405224:	464b      	mov	r3, r9
  405226:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405228:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40522a:	dce6      	bgt.n	4051fa <_svfprintf_r+0x2a2>
  40522c:	4645      	mov	r5, r8
  40522e:	460c      	mov	r4, r1
  405230:	4698      	mov	r8, r3
  405232:	3201      	adds	r2, #1
  405234:	4b9d      	ldr	r3, [pc, #628]	; (4054ac <_svfprintf_r+0x554>)
  405236:	445c      	add	r4, fp
  405238:	2a07      	cmp	r2, #7
  40523a:	9427      	str	r4, [sp, #156]	; 0x9c
  40523c:	9226      	str	r2, [sp, #152]	; 0x98
  40523e:	e888 0808 	stmia.w	r8, {r3, fp}
  405242:	f300 82c3 	bgt.w	4057cc <_svfprintf_r+0x874>
  405246:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40524a:	f108 0808 	add.w	r8, r8, #8
  40524e:	b187      	cbz	r7, 405272 <_svfprintf_r+0x31a>
  405250:	2101      	movs	r1, #1
  405252:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405254:	440c      	add	r4, r1
  405256:	440b      	add	r3, r1
  405258:	f10d 0277 	add.w	r2, sp, #119	; 0x77
  40525c:	2b07      	cmp	r3, #7
  40525e:	9427      	str	r4, [sp, #156]	; 0x9c
  405260:	9326      	str	r3, [sp, #152]	; 0x98
  405262:	f8c8 1004 	str.w	r1, [r8, #4]
  405266:	f8c8 2000 	str.w	r2, [r8]
  40526a:	f300 83cd 	bgt.w	405a08 <_svfprintf_r+0xab0>
  40526e:	f108 0808 	add.w	r8, r8, #8
  405272:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405274:	b17b      	cbz	r3, 405296 <_svfprintf_r+0x33e>
  405276:	2102      	movs	r1, #2
  405278:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40527a:	440c      	add	r4, r1
  40527c:	3301      	adds	r3, #1
  40527e:	aa1e      	add	r2, sp, #120	; 0x78
  405280:	2b07      	cmp	r3, #7
  405282:	9427      	str	r4, [sp, #156]	; 0x9c
  405284:	9326      	str	r3, [sp, #152]	; 0x98
  405286:	f8c8 1004 	str.w	r1, [r8, #4]
  40528a:	f8c8 2000 	str.w	r2, [r8]
  40528e:	f300 8411 	bgt.w	405ab4 <_svfprintf_r+0xb5c>
  405292:	f108 0808 	add.w	r8, r8, #8
  405296:	2d80      	cmp	r5, #128	; 0x80
  405298:	f000 8304 	beq.w	4058a4 <_svfprintf_r+0x94c>
  40529c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40529e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4052a0:	1a9f      	subs	r7, r3, r2
  4052a2:	2f00      	cmp	r7, #0
  4052a4:	dd37      	ble.n	405316 <_svfprintf_r+0x3be>
  4052a6:	2f10      	cmp	r7, #16
  4052a8:	f340 8679 	ble.w	405f9e <_svfprintf_r+0x1046>
  4052ac:	4d80      	ldr	r5, [pc, #512]	; (4054b0 <_svfprintf_r+0x558>)
  4052ae:	4642      	mov	r2, r8
  4052b0:	4621      	mov	r1, r4
  4052b2:	46b0      	mov	r8, r6
  4052b4:	f04f 0b10 	mov.w	fp, #16
  4052b8:	462e      	mov	r6, r5
  4052ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4052be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4052c0:	e004      	b.n	4052cc <_svfprintf_r+0x374>
  4052c2:	3f10      	subs	r7, #16
  4052c4:	2f10      	cmp	r7, #16
  4052c6:	f102 0208 	add.w	r2, r2, #8
  4052ca:	dd15      	ble.n	4052f8 <_svfprintf_r+0x3a0>
  4052cc:	3301      	adds	r3, #1
  4052ce:	3110      	adds	r1, #16
  4052d0:	2b07      	cmp	r3, #7
  4052d2:	9127      	str	r1, [sp, #156]	; 0x9c
  4052d4:	9326      	str	r3, [sp, #152]	; 0x98
  4052d6:	e882 0840 	stmia.w	r2, {r6, fp}
  4052da:	ddf2      	ble.n	4052c2 <_svfprintf_r+0x36a>
  4052dc:	aa25      	add	r2, sp, #148	; 0x94
  4052de:	4629      	mov	r1, r5
  4052e0:	4620      	mov	r0, r4
  4052e2:	f003 fa17 	bl	408714 <__ssprint_r>
  4052e6:	2800      	cmp	r0, #0
  4052e8:	f47f af13 	bne.w	405112 <_svfprintf_r+0x1ba>
  4052ec:	3f10      	subs	r7, #16
  4052ee:	2f10      	cmp	r7, #16
  4052f0:	464a      	mov	r2, r9
  4052f2:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4052f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052f6:	dce9      	bgt.n	4052cc <_svfprintf_r+0x374>
  4052f8:	4635      	mov	r5, r6
  4052fa:	460c      	mov	r4, r1
  4052fc:	4646      	mov	r6, r8
  4052fe:	4690      	mov	r8, r2
  405300:	3301      	adds	r3, #1
  405302:	443c      	add	r4, r7
  405304:	2b07      	cmp	r3, #7
  405306:	9427      	str	r4, [sp, #156]	; 0x9c
  405308:	9326      	str	r3, [sp, #152]	; 0x98
  40530a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40530e:	f300 8370 	bgt.w	4059f2 <_svfprintf_r+0xa9a>
  405312:	f108 0808 	add.w	r8, r8, #8
  405316:	9b07      	ldr	r3, [sp, #28]
  405318:	05df      	lsls	r7, r3, #23
  40531a:	f100 8264 	bmi.w	4057e6 <_svfprintf_r+0x88e>
  40531e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405320:	990e      	ldr	r1, [sp, #56]	; 0x38
  405322:	3301      	adds	r3, #1
  405324:	440c      	add	r4, r1
  405326:	2b07      	cmp	r3, #7
  405328:	9427      	str	r4, [sp, #156]	; 0x9c
  40532a:	f8c8 6000 	str.w	r6, [r8]
  40532e:	f8c8 1004 	str.w	r1, [r8, #4]
  405332:	9326      	str	r3, [sp, #152]	; 0x98
  405334:	f300 83b3 	bgt.w	405a9e <_svfprintf_r+0xb46>
  405338:	f108 0808 	add.w	r8, r8, #8
  40533c:	9b07      	ldr	r3, [sp, #28]
  40533e:	075b      	lsls	r3, r3, #29
  405340:	d53b      	bpl.n	4053ba <_svfprintf_r+0x462>
  405342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405344:	9a08      	ldr	r2, [sp, #32]
  405346:	1a9d      	subs	r5, r3, r2
  405348:	2d00      	cmp	r5, #0
  40534a:	dd36      	ble.n	4053ba <_svfprintf_r+0x462>
  40534c:	2d10      	cmp	r5, #16
  40534e:	f340 8721 	ble.w	406194 <_svfprintf_r+0x123c>
  405352:	2610      	movs	r6, #16
  405354:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405356:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405358:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40535c:	e004      	b.n	405368 <_svfprintf_r+0x410>
  40535e:	3d10      	subs	r5, #16
  405360:	2d10      	cmp	r5, #16
  405362:	f108 0808 	add.w	r8, r8, #8
  405366:	dd16      	ble.n	405396 <_svfprintf_r+0x43e>
  405368:	3301      	adds	r3, #1
  40536a:	4a50      	ldr	r2, [pc, #320]	; (4054ac <_svfprintf_r+0x554>)
  40536c:	3410      	adds	r4, #16
  40536e:	2b07      	cmp	r3, #7
  405370:	9427      	str	r4, [sp, #156]	; 0x9c
  405372:	9326      	str	r3, [sp, #152]	; 0x98
  405374:	e888 0044 	stmia.w	r8, {r2, r6}
  405378:	ddf1      	ble.n	40535e <_svfprintf_r+0x406>
  40537a:	aa25      	add	r2, sp, #148	; 0x94
  40537c:	4659      	mov	r1, fp
  40537e:	4638      	mov	r0, r7
  405380:	f003 f9c8 	bl	408714 <__ssprint_r>
  405384:	2800      	cmp	r0, #0
  405386:	f47f aec4 	bne.w	405112 <_svfprintf_r+0x1ba>
  40538a:	3d10      	subs	r5, #16
  40538c:	2d10      	cmp	r5, #16
  40538e:	46c8      	mov	r8, r9
  405390:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405392:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405394:	dce8      	bgt.n	405368 <_svfprintf_r+0x410>
  405396:	3301      	adds	r3, #1
  405398:	4a44      	ldr	r2, [pc, #272]	; (4054ac <_svfprintf_r+0x554>)
  40539a:	442c      	add	r4, r5
  40539c:	2b07      	cmp	r3, #7
  40539e:	9427      	str	r4, [sp, #156]	; 0x9c
  4053a0:	9326      	str	r3, [sp, #152]	; 0x98
  4053a2:	e888 0024 	stmia.w	r8, {r2, r5}
  4053a6:	dd08      	ble.n	4053ba <_svfprintf_r+0x462>
  4053a8:	aa25      	add	r2, sp, #148	; 0x94
  4053aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4053ac:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053ae:	f003 f9b1 	bl	408714 <__ssprint_r>
  4053b2:	2800      	cmp	r0, #0
  4053b4:	f47f aead 	bne.w	405112 <_svfprintf_r+0x1ba>
  4053b8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4053ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4053bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4053be:	9908      	ldr	r1, [sp, #32]
  4053c0:	428a      	cmp	r2, r1
  4053c2:	bfac      	ite	ge
  4053c4:	189b      	addge	r3, r3, r2
  4053c6:	185b      	addlt	r3, r3, r1
  4053c8:	9309      	str	r3, [sp, #36]	; 0x24
  4053ca:	2c00      	cmp	r4, #0
  4053cc:	f040 82fb 	bne.w	4059c6 <_svfprintf_r+0xa6e>
  4053d0:	2300      	movs	r3, #0
  4053d2:	46c8      	mov	r8, r9
  4053d4:	9326      	str	r3, [sp, #152]	; 0x98
  4053d6:	e5e6      	b.n	404fa6 <_svfprintf_r+0x4e>
  4053d8:	9311      	str	r3, [sp, #68]	; 0x44
  4053da:	f01b 0320 	ands.w	r3, fp, #32
  4053de:	f040 8145 	bne.w	40566c <_svfprintf_r+0x714>
  4053e2:	f01b 0210 	ands.w	r2, fp, #16
  4053e6:	f040 8466 	bne.w	405cb6 <_svfprintf_r+0xd5e>
  4053ea:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4053ee:	f000 8462 	beq.w	405cb6 <_svfprintf_r+0xd5e>
  4053f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4053f4:	4613      	mov	r3, r2
  4053f6:	460a      	mov	r2, r1
  4053f8:	3204      	adds	r2, #4
  4053fa:	880c      	ldrh	r4, [r1, #0]
  4053fc:	2500      	movs	r5, #0
  4053fe:	920f      	str	r2, [sp, #60]	; 0x3c
  405400:	e6a8      	b.n	405154 <_svfprintf_r+0x1fc>
  405402:	2500      	movs	r5, #0
  405404:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405406:	9311      	str	r3, [sp, #68]	; 0x44
  405408:	6816      	ldr	r6, [r2, #0]
  40540a:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  40540e:	1d14      	adds	r4, r2, #4
  405410:	2e00      	cmp	r6, #0
  405412:	f000 86cd 	beq.w	4061b0 <_svfprintf_r+0x1258>
  405416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405418:	1c53      	adds	r3, r2, #1
  40541a:	f000 861b 	beq.w	406054 <_svfprintf_r+0x10fc>
  40541e:	4629      	mov	r1, r5
  405420:	4630      	mov	r0, r6
  405422:	f002 fbfd 	bl	407c20 <memchr>
  405426:	2800      	cmp	r0, #0
  405428:	f000 870d 	beq.w	406246 <_svfprintf_r+0x12ee>
  40542c:	1b83      	subs	r3, r0, r6
  40542e:	950a      	str	r5, [sp, #40]	; 0x28
  405430:	930e      	str	r3, [sp, #56]	; 0x38
  405432:	940f      	str	r4, [sp, #60]	; 0x3c
  405434:	f8cd b01c 	str.w	fp, [sp, #28]
  405438:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40543c:	9308      	str	r3, [sp, #32]
  40543e:	9512      	str	r5, [sp, #72]	; 0x48
  405440:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405444:	e6ac      	b.n	4051a0 <_svfprintf_r+0x248>
  405446:	f89a 3000 	ldrb.w	r3, [sl]
  40544a:	f10a 0401 	add.w	r4, sl, #1
  40544e:	2b2a      	cmp	r3, #42	; 0x2a
  405450:	f000 87c2 	beq.w	4063d8 <_svfprintf_r+0x1480>
  405454:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405458:	2809      	cmp	r0, #9
  40545a:	46a2      	mov	sl, r4
  40545c:	f200 8718 	bhi.w	406290 <_svfprintf_r+0x1338>
  405460:	2300      	movs	r3, #0
  405462:	461c      	mov	r4, r3
  405464:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405468:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40546c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  405470:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405474:	2809      	cmp	r0, #9
  405476:	d9f5      	bls.n	405464 <_svfprintf_r+0x50c>
  405478:	940a      	str	r4, [sp, #40]	; 0x28
  40547a:	e5c9      	b.n	405010 <_svfprintf_r+0xb8>
  40547c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  405480:	f89a 3000 	ldrb.w	r3, [sl]
  405484:	e5c2      	b.n	40500c <_svfprintf_r+0xb4>
  405486:	f04b 0b10 	orr.w	fp, fp, #16
  40548a:	f01b 0f20 	tst.w	fp, #32
  40548e:	9311      	str	r3, [sp, #68]	; 0x44
  405490:	f43f ae51 	beq.w	405136 <_svfprintf_r+0x1de>
  405494:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  405496:	3407      	adds	r4, #7
  405498:	f024 0307 	bic.w	r3, r4, #7
  40549c:	f103 0208 	add.w	r2, r3, #8
  4054a0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4054a4:	920f      	str	r2, [sp, #60]	; 0x3c
  4054a6:	2301      	movs	r3, #1
  4054a8:	e654      	b.n	405154 <_svfprintf_r+0x1fc>
  4054aa:	bf00      	nop
  4054ac:	00409468 	.word	0x00409468
  4054b0:	00409478 	.word	0x00409478
  4054b4:	9311      	str	r3, [sp, #68]	; 0x44
  4054b6:	2a00      	cmp	r2, #0
  4054b8:	f040 87ad 	bne.w	406416 <_svfprintf_r+0x14be>
  4054bc:	4bbe      	ldr	r3, [pc, #760]	; (4057b8 <_svfprintf_r+0x860>)
  4054be:	f01b 0f20 	tst.w	fp, #32
  4054c2:	9318      	str	r3, [sp, #96]	; 0x60
  4054c4:	f040 80e7 	bne.w	405696 <_svfprintf_r+0x73e>
  4054c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4054ca:	f01b 0f10 	tst.w	fp, #16
  4054ce:	4613      	mov	r3, r2
  4054d0:	f040 83d8 	bne.w	405c84 <_svfprintf_r+0xd2c>
  4054d4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4054d8:	f000 83d4 	beq.w	405c84 <_svfprintf_r+0xd2c>
  4054dc:	2500      	movs	r5, #0
  4054de:	3304      	adds	r3, #4
  4054e0:	8814      	ldrh	r4, [r2, #0]
  4054e2:	930f      	str	r3, [sp, #60]	; 0x3c
  4054e4:	f01b 0f01 	tst.w	fp, #1
  4054e8:	f000 80e3 	beq.w	4056b2 <_svfprintf_r+0x75a>
  4054ec:	ea54 0305 	orrs.w	r3, r4, r5
  4054f0:	f000 80df 	beq.w	4056b2 <_svfprintf_r+0x75a>
  4054f4:	2330      	movs	r3, #48	; 0x30
  4054f6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4054fa:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4054fe:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  405502:	f04b 0b02 	orr.w	fp, fp, #2
  405506:	2302      	movs	r3, #2
  405508:	e624      	b.n	405154 <_svfprintf_r+0x1fc>
  40550a:	2201      	movs	r2, #1
  40550c:	9311      	str	r3, [sp, #68]	; 0x44
  40550e:	2300      	movs	r3, #0
  405510:	4611      	mov	r1, r2
  405512:	980f      	ldr	r0, [sp, #60]	; 0x3c
  405514:	9208      	str	r2, [sp, #32]
  405516:	6802      	ldr	r2, [r0, #0]
  405518:	461f      	mov	r7, r3
  40551a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40551e:	930a      	str	r3, [sp, #40]	; 0x28
  405520:	9312      	str	r3, [sp, #72]	; 0x48
  405522:	1d03      	adds	r3, r0, #4
  405524:	f8cd b01c 	str.w	fp, [sp, #28]
  405528:	910e      	str	r1, [sp, #56]	; 0x38
  40552a:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40552e:	930f      	str	r3, [sp, #60]	; 0x3c
  405530:	ae28      	add	r6, sp, #160	; 0xa0
  405532:	e639      	b.n	4051a8 <_svfprintf_r+0x250>
  405534:	9311      	str	r3, [sp, #68]	; 0x44
  405536:	2a00      	cmp	r2, #0
  405538:	f040 8784 	bne.w	406444 <_svfprintf_r+0x14ec>
  40553c:	f04b 0b10 	orr.w	fp, fp, #16
  405540:	f01b 0f20 	tst.w	fp, #32
  405544:	f040 8475 	bne.w	405e32 <_svfprintf_r+0xeda>
  405548:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40554a:	f01b 0f10 	tst.w	fp, #16
  40554e:	4613      	mov	r3, r2
  405550:	f040 839d 	bne.w	405c8e <_svfprintf_r+0xd36>
  405554:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405558:	f000 8399 	beq.w	405c8e <_svfprintf_r+0xd36>
  40555c:	f9b2 4000 	ldrsh.w	r4, [r2]
  405560:	3304      	adds	r3, #4
  405562:	17e5      	asrs	r5, r4, #31
  405564:	930f      	str	r3, [sp, #60]	; 0x3c
  405566:	4622      	mov	r2, r4
  405568:	462b      	mov	r3, r5
  40556a:	2a00      	cmp	r2, #0
  40556c:	f173 0300 	sbcs.w	r3, r3, #0
  405570:	f2c0 8398 	blt.w	405ca4 <_svfprintf_r+0xd4c>
  405574:	990a      	ldr	r1, [sp, #40]	; 0x28
  405576:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40557a:	1c4a      	adds	r2, r1, #1
  40557c:	f04f 0301 	mov.w	r3, #1
  405580:	f47f adf0 	bne.w	405164 <_svfprintf_r+0x20c>
  405584:	ea54 0205 	orrs.w	r2, r4, r5
  405588:	f000 8229 	beq.w	4059de <_svfprintf_r+0xa86>
  40558c:	f8cd b01c 	str.w	fp, [sp, #28]
  405590:	2b01      	cmp	r3, #1
  405592:	f000 830e 	beq.w	405bb2 <_svfprintf_r+0xc5a>
  405596:	2b02      	cmp	r3, #2
  405598:	f040 829c 	bne.w	405ad4 <_svfprintf_r+0xb7c>
  40559c:	464e      	mov	r6, r9
  40559e:	9818      	ldr	r0, [sp, #96]	; 0x60
  4055a0:	0923      	lsrs	r3, r4, #4
  4055a2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4055a6:	0929      	lsrs	r1, r5, #4
  4055a8:	f004 020f 	and.w	r2, r4, #15
  4055ac:	460d      	mov	r5, r1
  4055ae:	461c      	mov	r4, r3
  4055b0:	5c83      	ldrb	r3, [r0, r2]
  4055b2:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4055b6:	ea54 0305 	orrs.w	r3, r4, r5
  4055ba:	d1f1      	bne.n	4055a0 <_svfprintf_r+0x648>
  4055bc:	eba9 0306 	sub.w	r3, r9, r6
  4055c0:	930e      	str	r3, [sp, #56]	; 0x38
  4055c2:	e5e5      	b.n	405190 <_svfprintf_r+0x238>
  4055c4:	9311      	str	r3, [sp, #68]	; 0x44
  4055c6:	2a00      	cmp	r2, #0
  4055c8:	f040 8738 	bne.w	40643c <_svfprintf_r+0x14e4>
  4055cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4055ce:	f01b 0f08 	tst.w	fp, #8
  4055d2:	f104 0407 	add.w	r4, r4, #7
  4055d6:	f000 84cf 	beq.w	405f78 <_svfprintf_r+0x1020>
  4055da:	f024 0307 	bic.w	r3, r4, #7
  4055de:	f103 0208 	add.w	r2, r3, #8
  4055e2:	920f      	str	r2, [sp, #60]	; 0x3c
  4055e4:	681a      	ldr	r2, [r3, #0]
  4055e6:	685b      	ldr	r3, [r3, #4]
  4055e8:	9215      	str	r2, [sp, #84]	; 0x54
  4055ea:	9314      	str	r3, [sp, #80]	; 0x50
  4055ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4055ee:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4055f0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4055f4:	4628      	mov	r0, r5
  4055f6:	4621      	mov	r1, r4
  4055f8:	f04f 32ff 	mov.w	r2, #4294967295
  4055fc:	4b6f      	ldr	r3, [pc, #444]	; (4057bc <_svfprintf_r+0x864>)
  4055fe:	f003 fc3f 	bl	408e80 <__aeabi_dcmpun>
  405602:	2800      	cmp	r0, #0
  405604:	f040 8434 	bne.w	405e70 <_svfprintf_r+0xf18>
  405608:	4628      	mov	r0, r5
  40560a:	4621      	mov	r1, r4
  40560c:	f04f 32ff 	mov.w	r2, #4294967295
  405610:	4b6a      	ldr	r3, [pc, #424]	; (4057bc <_svfprintf_r+0x864>)
  405612:	f003 fc17 	bl	408e44 <__aeabi_dcmple>
  405616:	2800      	cmp	r0, #0
  405618:	f040 842a 	bne.w	405e70 <_svfprintf_r+0xf18>
  40561c:	a815      	add	r0, sp, #84	; 0x54
  40561e:	c80d      	ldmia	r0, {r0, r2, r3}
  405620:	9914      	ldr	r1, [sp, #80]	; 0x50
  405622:	f003 fc05 	bl	408e30 <__aeabi_dcmplt>
  405626:	2800      	cmp	r0, #0
  405628:	f040 85d4 	bne.w	4061d4 <_svfprintf_r+0x127c>
  40562c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405630:	2303      	movs	r3, #3
  405632:	461a      	mov	r2, r3
  405634:	9308      	str	r3, [sp, #32]
  405636:	2300      	movs	r3, #0
  405638:	4e61      	ldr	r6, [pc, #388]	; (4057c0 <_svfprintf_r+0x868>)
  40563a:	4619      	mov	r1, r3
  40563c:	930a      	str	r3, [sp, #40]	; 0x28
  40563e:	4b61      	ldr	r3, [pc, #388]	; (4057c4 <_svfprintf_r+0x86c>)
  405640:	920e      	str	r2, [sp, #56]	; 0x38
  405642:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405644:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  405648:	9007      	str	r0, [sp, #28]
  40564a:	9112      	str	r1, [sp, #72]	; 0x48
  40564c:	2a47      	cmp	r2, #71	; 0x47
  40564e:	bfd8      	it	le
  405650:	461e      	movle	r6, r3
  405652:	e5a5      	b.n	4051a0 <_svfprintf_r+0x248>
  405654:	f04b 0b08 	orr.w	fp, fp, #8
  405658:	f89a 3000 	ldrb.w	r3, [sl]
  40565c:	e4d6      	b.n	40500c <_svfprintf_r+0xb4>
  40565e:	f04b 0b10 	orr.w	fp, fp, #16
  405662:	9311      	str	r3, [sp, #68]	; 0x44
  405664:	f01b 0320 	ands.w	r3, fp, #32
  405668:	f43f aebb 	beq.w	4053e2 <_svfprintf_r+0x48a>
  40566c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40566e:	3407      	adds	r4, #7
  405670:	f024 0307 	bic.w	r3, r4, #7
  405674:	f103 0208 	add.w	r2, r3, #8
  405678:	e9d3 4500 	ldrd	r4, r5, [r3]
  40567c:	920f      	str	r2, [sp, #60]	; 0x3c
  40567e:	2300      	movs	r3, #0
  405680:	e568      	b.n	405154 <_svfprintf_r+0x1fc>
  405682:	9311      	str	r3, [sp, #68]	; 0x44
  405684:	2a00      	cmp	r2, #0
  405686:	f040 86c2 	bne.w	40640e <_svfprintf_r+0x14b6>
  40568a:	4b4f      	ldr	r3, [pc, #316]	; (4057c8 <_svfprintf_r+0x870>)
  40568c:	f01b 0f20 	tst.w	fp, #32
  405690:	9318      	str	r3, [sp, #96]	; 0x60
  405692:	f43f af19 	beq.w	4054c8 <_svfprintf_r+0x570>
  405696:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  405698:	f01b 0f01 	tst.w	fp, #1
  40569c:	f104 0407 	add.w	r4, r4, #7
  4056a0:	f024 0307 	bic.w	r3, r4, #7
  4056a4:	f103 0208 	add.w	r2, r3, #8
  4056a8:	920f      	str	r2, [sp, #60]	; 0x3c
  4056aa:	e9d3 4500 	ldrd	r4, r5, [r3]
  4056ae:	f47f af1d 	bne.w	4054ec <_svfprintf_r+0x594>
  4056b2:	2302      	movs	r3, #2
  4056b4:	e54e      	b.n	405154 <_svfprintf_r+0x1fc>
  4056b6:	f89a 3000 	ldrb.w	r3, [sl]
  4056ba:	2900      	cmp	r1, #0
  4056bc:	f47f aca6 	bne.w	40500c <_svfprintf_r+0xb4>
  4056c0:	2201      	movs	r2, #1
  4056c2:	2120      	movs	r1, #32
  4056c4:	e4a2      	b.n	40500c <_svfprintf_r+0xb4>
  4056c6:	f04b 0b01 	orr.w	fp, fp, #1
  4056ca:	f89a 3000 	ldrb.w	r3, [sl]
  4056ce:	e49d      	b.n	40500c <_svfprintf_r+0xb4>
  4056d0:	f89a 3000 	ldrb.w	r3, [sl]
  4056d4:	2201      	movs	r2, #1
  4056d6:	212b      	movs	r1, #43	; 0x2b
  4056d8:	e498      	b.n	40500c <_svfprintf_r+0xb4>
  4056da:	f04b 0b20 	orr.w	fp, fp, #32
  4056de:	f89a 3000 	ldrb.w	r3, [sl]
  4056e2:	e493      	b.n	40500c <_svfprintf_r+0xb4>
  4056e4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4056e8:	f89a 3000 	ldrb.w	r3, [sl]
  4056ec:	e48e      	b.n	40500c <_svfprintf_r+0xb4>
  4056ee:	f89a 3000 	ldrb.w	r3, [sl]
  4056f2:	2b6c      	cmp	r3, #108	; 0x6c
  4056f4:	bf03      	ittte	eq
  4056f6:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  4056fa:	f04b 0b20 	orreq.w	fp, fp, #32
  4056fe:	f10a 0a01 	addeq.w	sl, sl, #1
  405702:	f04b 0b10 	orrne.w	fp, fp, #16
  405706:	e481      	b.n	40500c <_svfprintf_r+0xb4>
  405708:	2a00      	cmp	r2, #0
  40570a:	f040 867c 	bne.w	406406 <_svfprintf_r+0x14ae>
  40570e:	f01b 0f20 	tst.w	fp, #32
  405712:	f040 8452 	bne.w	405fba <_svfprintf_r+0x1062>
  405716:	f01b 0f10 	tst.w	fp, #16
  40571a:	f040 8438 	bne.w	405f8e <_svfprintf_r+0x1036>
  40571e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405722:	f000 8434 	beq.w	405f8e <_svfprintf_r+0x1036>
  405726:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405728:	6813      	ldr	r3, [r2, #0]
  40572a:	3204      	adds	r2, #4
  40572c:	920f      	str	r2, [sp, #60]	; 0x3c
  40572e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  405732:	801a      	strh	r2, [r3, #0]
  405734:	e437      	b.n	404fa6 <_svfprintf_r+0x4e>
  405736:	2378      	movs	r3, #120	; 0x78
  405738:	2230      	movs	r2, #48	; 0x30
  40573a:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40573c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  405740:	9311      	str	r3, [sp, #68]	; 0x44
  405742:	1d03      	adds	r3, r0, #4
  405744:	930f      	str	r3, [sp, #60]	; 0x3c
  405746:	4b20      	ldr	r3, [pc, #128]	; (4057c8 <_svfprintf_r+0x870>)
  405748:	6804      	ldr	r4, [r0, #0]
  40574a:	9318      	str	r3, [sp, #96]	; 0x60
  40574c:	f04b 0b02 	orr.w	fp, fp, #2
  405750:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  405754:	2500      	movs	r5, #0
  405756:	2302      	movs	r3, #2
  405758:	e4fc      	b.n	405154 <_svfprintf_r+0x1fc>
  40575a:	9311      	str	r3, [sp, #68]	; 0x44
  40575c:	2a00      	cmp	r2, #0
  40575e:	f43f aeef 	beq.w	405540 <_svfprintf_r+0x5e8>
  405762:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405766:	e6eb      	b.n	405540 <_svfprintf_r+0x5e8>
  405768:	2000      	movs	r0, #0
  40576a:	4604      	mov	r4, r0
  40576c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405770:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405774:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405778:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40577c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405780:	2809      	cmp	r0, #9
  405782:	d9f5      	bls.n	405770 <_svfprintf_r+0x818>
  405784:	940d      	str	r4, [sp, #52]	; 0x34
  405786:	e443      	b.n	405010 <_svfprintf_r+0xb8>
  405788:	9311      	str	r3, [sp, #68]	; 0x44
  40578a:	2a00      	cmp	r2, #0
  40578c:	f040 864a 	bne.w	406424 <_svfprintf_r+0x14cc>
  405790:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405792:	2a00      	cmp	r2, #0
  405794:	f43f acb6 	beq.w	405104 <_svfprintf_r+0x1ac>
  405798:	2300      	movs	r3, #0
  40579a:	2101      	movs	r1, #1
  40579c:	461f      	mov	r7, r3
  40579e:	9108      	str	r1, [sp, #32]
  4057a0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4057a4:	f8cd b01c 	str.w	fp, [sp, #28]
  4057a8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4057ac:	930a      	str	r3, [sp, #40]	; 0x28
  4057ae:	9312      	str	r3, [sp, #72]	; 0x48
  4057b0:	910e      	str	r1, [sp, #56]	; 0x38
  4057b2:	ae28      	add	r6, sp, #160	; 0xa0
  4057b4:	e4f8      	b.n	4051a8 <_svfprintf_r+0x250>
  4057b6:	bf00      	nop
  4057b8:	00409434 	.word	0x00409434
  4057bc:	7fefffff 	.word	0x7fefffff
  4057c0:	00409428 	.word	0x00409428
  4057c4:	00409424 	.word	0x00409424
  4057c8:	00409448 	.word	0x00409448
  4057cc:	aa25      	add	r2, sp, #148	; 0x94
  4057ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4057d0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4057d2:	f002 ff9f 	bl	408714 <__ssprint_r>
  4057d6:	2800      	cmp	r0, #0
  4057d8:	f47f ac9b 	bne.w	405112 <_svfprintf_r+0x1ba>
  4057dc:	46c8      	mov	r8, r9
  4057de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4057e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4057e4:	e533      	b.n	40524e <_svfprintf_r+0x2f6>
  4057e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4057e8:	2b65      	cmp	r3, #101	; 0x65
  4057ea:	f340 809a 	ble.w	405922 <_svfprintf_r+0x9ca>
  4057ee:	a815      	add	r0, sp, #84	; 0x54
  4057f0:	c80d      	ldmia	r0, {r0, r2, r3}
  4057f2:	9914      	ldr	r1, [sp, #80]	; 0x50
  4057f4:	f003 fb12 	bl	408e1c <__aeabi_dcmpeq>
  4057f8:	2800      	cmp	r0, #0
  4057fa:	f000 8193 	beq.w	405b24 <_svfprintf_r+0xbcc>
  4057fe:	2101      	movs	r1, #1
  405800:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405802:	4ab5      	ldr	r2, [pc, #724]	; (405ad8 <_svfprintf_r+0xb80>)
  405804:	440b      	add	r3, r1
  405806:	440c      	add	r4, r1
  405808:	2b07      	cmp	r3, #7
  40580a:	9427      	str	r4, [sp, #156]	; 0x9c
  40580c:	9326      	str	r3, [sp, #152]	; 0x98
  40580e:	f8c8 1004 	str.w	r1, [r8, #4]
  405812:	f8c8 2000 	str.w	r2, [r8]
  405816:	f300 83c6 	bgt.w	405fa6 <_svfprintf_r+0x104e>
  40581a:	f108 0808 	add.w	r8, r8, #8
  40581e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405822:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405824:	4293      	cmp	r3, r2
  405826:	db03      	blt.n	405830 <_svfprintf_r+0x8d8>
  405828:	9b07      	ldr	r3, [sp, #28]
  40582a:	07dd      	lsls	r5, r3, #31
  40582c:	f57f ad86 	bpl.w	40533c <_svfprintf_r+0x3e4>
  405830:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405832:	9919      	ldr	r1, [sp, #100]	; 0x64
  405834:	3301      	adds	r3, #1
  405836:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  405838:	440c      	add	r4, r1
  40583a:	2b07      	cmp	r3, #7
  40583c:	f8c8 2000 	str.w	r2, [r8]
  405840:	f8c8 1004 	str.w	r1, [r8, #4]
  405844:	9427      	str	r4, [sp, #156]	; 0x9c
  405846:	9326      	str	r3, [sp, #152]	; 0x98
  405848:	f300 83c4 	bgt.w	405fd4 <_svfprintf_r+0x107c>
  40584c:	f108 0808 	add.w	r8, r8, #8
  405850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405852:	1e5e      	subs	r6, r3, #1
  405854:	2e00      	cmp	r6, #0
  405856:	f77f ad71 	ble.w	40533c <_svfprintf_r+0x3e4>
  40585a:	2e10      	cmp	r6, #16
  40585c:	f340 8575 	ble.w	40634a <_svfprintf_r+0x13f2>
  405860:	4622      	mov	r2, r4
  405862:	2710      	movs	r7, #16
  405864:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405866:	4d9d      	ldr	r5, [pc, #628]	; (405adc <_svfprintf_r+0xb84>)
  405868:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40586c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40586e:	e005      	b.n	40587c <_svfprintf_r+0x924>
  405870:	f108 0808 	add.w	r8, r8, #8
  405874:	3e10      	subs	r6, #16
  405876:	2e10      	cmp	r6, #16
  405878:	f340 8225 	ble.w	405cc6 <_svfprintf_r+0xd6e>
  40587c:	3301      	adds	r3, #1
  40587e:	3210      	adds	r2, #16
  405880:	2b07      	cmp	r3, #7
  405882:	9227      	str	r2, [sp, #156]	; 0x9c
  405884:	9326      	str	r3, [sp, #152]	; 0x98
  405886:	e888 00a0 	stmia.w	r8, {r5, r7}
  40588a:	ddf1      	ble.n	405870 <_svfprintf_r+0x918>
  40588c:	aa25      	add	r2, sp, #148	; 0x94
  40588e:	4621      	mov	r1, r4
  405890:	4658      	mov	r0, fp
  405892:	f002 ff3f 	bl	408714 <__ssprint_r>
  405896:	2800      	cmp	r0, #0
  405898:	f47f ac3b 	bne.w	405112 <_svfprintf_r+0x1ba>
  40589c:	46c8      	mov	r8, r9
  40589e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4058a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4058a2:	e7e7      	b.n	405874 <_svfprintf_r+0x91c>
  4058a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4058a6:	9a08      	ldr	r2, [sp, #32]
  4058a8:	1a9f      	subs	r7, r3, r2
  4058aa:	2f00      	cmp	r7, #0
  4058ac:	f77f acf6 	ble.w	40529c <_svfprintf_r+0x344>
  4058b0:	2f10      	cmp	r7, #16
  4058b2:	f340 84a8 	ble.w	406206 <_svfprintf_r+0x12ae>
  4058b6:	4d89      	ldr	r5, [pc, #548]	; (405adc <_svfprintf_r+0xb84>)
  4058b8:	4642      	mov	r2, r8
  4058ba:	4621      	mov	r1, r4
  4058bc:	46b0      	mov	r8, r6
  4058be:	f04f 0b10 	mov.w	fp, #16
  4058c2:	462e      	mov	r6, r5
  4058c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4058c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4058c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4058ca:	e004      	b.n	4058d6 <_svfprintf_r+0x97e>
  4058cc:	3f10      	subs	r7, #16
  4058ce:	2f10      	cmp	r7, #16
  4058d0:	f102 0208 	add.w	r2, r2, #8
  4058d4:	dd15      	ble.n	405902 <_svfprintf_r+0x9aa>
  4058d6:	3301      	adds	r3, #1
  4058d8:	3110      	adds	r1, #16
  4058da:	2b07      	cmp	r3, #7
  4058dc:	9127      	str	r1, [sp, #156]	; 0x9c
  4058de:	9326      	str	r3, [sp, #152]	; 0x98
  4058e0:	e882 0840 	stmia.w	r2, {r6, fp}
  4058e4:	ddf2      	ble.n	4058cc <_svfprintf_r+0x974>
  4058e6:	aa25      	add	r2, sp, #148	; 0x94
  4058e8:	4629      	mov	r1, r5
  4058ea:	4620      	mov	r0, r4
  4058ec:	f002 ff12 	bl	408714 <__ssprint_r>
  4058f0:	2800      	cmp	r0, #0
  4058f2:	f47f ac0e 	bne.w	405112 <_svfprintf_r+0x1ba>
  4058f6:	3f10      	subs	r7, #16
  4058f8:	2f10      	cmp	r7, #16
  4058fa:	464a      	mov	r2, r9
  4058fc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4058fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405900:	dce9      	bgt.n	4058d6 <_svfprintf_r+0x97e>
  405902:	4635      	mov	r5, r6
  405904:	460c      	mov	r4, r1
  405906:	4646      	mov	r6, r8
  405908:	4690      	mov	r8, r2
  40590a:	3301      	adds	r3, #1
  40590c:	443c      	add	r4, r7
  40590e:	2b07      	cmp	r3, #7
  405910:	9427      	str	r4, [sp, #156]	; 0x9c
  405912:	9326      	str	r3, [sp, #152]	; 0x98
  405914:	e888 00a0 	stmia.w	r8, {r5, r7}
  405918:	f300 829e 	bgt.w	405e58 <_svfprintf_r+0xf00>
  40591c:	f108 0808 	add.w	r8, r8, #8
  405920:	e4bc      	b.n	40529c <_svfprintf_r+0x344>
  405922:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405924:	2b01      	cmp	r3, #1
  405926:	f340 824f 	ble.w	405dc8 <_svfprintf_r+0xe70>
  40592a:	2301      	movs	r3, #1
  40592c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40592e:	441c      	add	r4, r3
  405930:	441f      	add	r7, r3
  405932:	2f07      	cmp	r7, #7
  405934:	9427      	str	r4, [sp, #156]	; 0x9c
  405936:	f8c8 6000 	str.w	r6, [r8]
  40593a:	9726      	str	r7, [sp, #152]	; 0x98
  40593c:	f8c8 3004 	str.w	r3, [r8, #4]
  405940:	f300 825f 	bgt.w	405e02 <_svfprintf_r+0xeaa>
  405944:	f108 0808 	add.w	r8, r8, #8
  405948:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40594a:	3701      	adds	r7, #1
  40594c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40594e:	4414      	add	r4, r2
  405950:	2f07      	cmp	r7, #7
  405952:	9427      	str	r4, [sp, #156]	; 0x9c
  405954:	9726      	str	r7, [sp, #152]	; 0x98
  405956:	f8c8 3000 	str.w	r3, [r8]
  40595a:	f8c8 2004 	str.w	r2, [r8, #4]
  40595e:	f300 825c 	bgt.w	405e1a <_svfprintf_r+0xec2>
  405962:	f108 0808 	add.w	r8, r8, #8
  405966:	a815      	add	r0, sp, #84	; 0x54
  405968:	c80d      	ldmia	r0, {r0, r2, r3}
  40596a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40596c:	f003 fa56 	bl	408e1c <__aeabi_dcmpeq>
  405970:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405972:	2800      	cmp	r0, #0
  405974:	f040 8141 	bne.w	405bfa <_svfprintf_r+0xca2>
  405978:	3b01      	subs	r3, #1
  40597a:	3701      	adds	r7, #1
  40597c:	3601      	adds	r6, #1
  40597e:	441c      	add	r4, r3
  405980:	2f07      	cmp	r7, #7
  405982:	f8c8 6000 	str.w	r6, [r8]
  405986:	9726      	str	r7, [sp, #152]	; 0x98
  405988:	9427      	str	r4, [sp, #156]	; 0x9c
  40598a:	f8c8 3004 	str.w	r3, [r8, #4]
  40598e:	f300 8166 	bgt.w	405c5e <_svfprintf_r+0xd06>
  405992:	f108 0808 	add.w	r8, r8, #8
  405996:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  405998:	3701      	adds	r7, #1
  40599a:	4414      	add	r4, r2
  40599c:	ab21      	add	r3, sp, #132	; 0x84
  40599e:	2f07      	cmp	r7, #7
  4059a0:	9427      	str	r4, [sp, #156]	; 0x9c
  4059a2:	9726      	str	r7, [sp, #152]	; 0x98
  4059a4:	f8c8 2004 	str.w	r2, [r8, #4]
  4059a8:	f8c8 3000 	str.w	r3, [r8]
  4059ac:	f77f acc4 	ble.w	405338 <_svfprintf_r+0x3e0>
  4059b0:	aa25      	add	r2, sp, #148	; 0x94
  4059b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4059b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4059b6:	f002 fead 	bl	408714 <__ssprint_r>
  4059ba:	2800      	cmp	r0, #0
  4059bc:	f47f aba9 	bne.w	405112 <_svfprintf_r+0x1ba>
  4059c0:	46c8      	mov	r8, r9
  4059c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4059c4:	e4ba      	b.n	40533c <_svfprintf_r+0x3e4>
  4059c6:	aa25      	add	r2, sp, #148	; 0x94
  4059c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4059ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4059cc:	f002 fea2 	bl	408714 <__ssprint_r>
  4059d0:	2800      	cmp	r0, #0
  4059d2:	f43f acfd 	beq.w	4053d0 <_svfprintf_r+0x478>
  4059d6:	f7ff bb9c 	b.w	405112 <_svfprintf_r+0x1ba>
  4059da:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4059de:	2b01      	cmp	r3, #1
  4059e0:	f000 817e 	beq.w	405ce0 <_svfprintf_r+0xd88>
  4059e4:	2b02      	cmp	r3, #2
  4059e6:	d171      	bne.n	405acc <_svfprintf_r+0xb74>
  4059e8:	f8cd b01c 	str.w	fp, [sp, #28]
  4059ec:	2400      	movs	r4, #0
  4059ee:	2500      	movs	r5, #0
  4059f0:	e5d4      	b.n	40559c <_svfprintf_r+0x644>
  4059f2:	aa25      	add	r2, sp, #148	; 0x94
  4059f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4059f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4059f8:	f002 fe8c 	bl	408714 <__ssprint_r>
  4059fc:	2800      	cmp	r0, #0
  4059fe:	f47f ab88 	bne.w	405112 <_svfprintf_r+0x1ba>
  405a02:	46c8      	mov	r8, r9
  405a04:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a06:	e486      	b.n	405316 <_svfprintf_r+0x3be>
  405a08:	aa25      	add	r2, sp, #148	; 0x94
  405a0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a0c:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a0e:	f002 fe81 	bl	408714 <__ssprint_r>
  405a12:	2800      	cmp	r0, #0
  405a14:	f47f ab7d 	bne.w	405112 <_svfprintf_r+0x1ba>
  405a18:	46c8      	mov	r8, r9
  405a1a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a1c:	e429      	b.n	405272 <_svfprintf_r+0x31a>
  405a1e:	2001      	movs	r0, #1
  405a20:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a22:	4a2d      	ldr	r2, [pc, #180]	; (405ad8 <_svfprintf_r+0xb80>)
  405a24:	4403      	add	r3, r0
  405a26:	4404      	add	r4, r0
  405a28:	2b07      	cmp	r3, #7
  405a2a:	9427      	str	r4, [sp, #156]	; 0x9c
  405a2c:	9326      	str	r3, [sp, #152]	; 0x98
  405a2e:	f8c8 0004 	str.w	r0, [r8, #4]
  405a32:	f8c8 2000 	str.w	r2, [r8]
  405a36:	f340 82d8 	ble.w	405fea <_svfprintf_r+0x1092>
  405a3a:	aa25      	add	r2, sp, #148	; 0x94
  405a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a3e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a40:	f002 fe68 	bl	408714 <__ssprint_r>
  405a44:	2800      	cmp	r0, #0
  405a46:	f47f ab64 	bne.w	405112 <_svfprintf_r+0x1ba>
  405a4a:	46c8      	mov	r8, r9
  405a4c:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405a4e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a50:	b929      	cbnz	r1, 405a5e <_svfprintf_r+0xb06>
  405a52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405a54:	b91b      	cbnz	r3, 405a5e <_svfprintf_r+0xb06>
  405a56:	9b07      	ldr	r3, [sp, #28]
  405a58:	07d8      	lsls	r0, r3, #31
  405a5a:	f57f ac6f 	bpl.w	40533c <_svfprintf_r+0x3e4>
  405a5e:	9819      	ldr	r0, [sp, #100]	; 0x64
  405a60:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a62:	4602      	mov	r2, r0
  405a64:	3301      	adds	r3, #1
  405a66:	4422      	add	r2, r4
  405a68:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  405a6a:	2b07      	cmp	r3, #7
  405a6c:	9227      	str	r2, [sp, #156]	; 0x9c
  405a6e:	f8c8 4000 	str.w	r4, [r8]
  405a72:	f8c8 0004 	str.w	r0, [r8, #4]
  405a76:	9326      	str	r3, [sp, #152]	; 0x98
  405a78:	f300 8431 	bgt.w	4062de <_svfprintf_r+0x1386>
  405a7c:	f108 0808 	add.w	r8, r8, #8
  405a80:	2900      	cmp	r1, #0
  405a82:	f2c0 8409 	blt.w	406298 <_svfprintf_r+0x1340>
  405a86:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405a88:	3301      	adds	r3, #1
  405a8a:	188c      	adds	r4, r1, r2
  405a8c:	2b07      	cmp	r3, #7
  405a8e:	9427      	str	r4, [sp, #156]	; 0x9c
  405a90:	9326      	str	r3, [sp, #152]	; 0x98
  405a92:	f8c8 6000 	str.w	r6, [r8]
  405a96:	f8c8 1004 	str.w	r1, [r8, #4]
  405a9a:	f77f ac4d 	ble.w	405338 <_svfprintf_r+0x3e0>
  405a9e:	aa25      	add	r2, sp, #148	; 0x94
  405aa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405aa2:	980c      	ldr	r0, [sp, #48]	; 0x30
  405aa4:	f002 fe36 	bl	408714 <__ssprint_r>
  405aa8:	2800      	cmp	r0, #0
  405aaa:	f47f ab32 	bne.w	405112 <_svfprintf_r+0x1ba>
  405aae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ab0:	46c8      	mov	r8, r9
  405ab2:	e443      	b.n	40533c <_svfprintf_r+0x3e4>
  405ab4:	aa25      	add	r2, sp, #148	; 0x94
  405ab6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ab8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405aba:	f002 fe2b 	bl	408714 <__ssprint_r>
  405abe:	2800      	cmp	r0, #0
  405ac0:	f47f ab27 	bne.w	405112 <_svfprintf_r+0x1ba>
  405ac4:	46c8      	mov	r8, r9
  405ac6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ac8:	f7ff bbe5 	b.w	405296 <_svfprintf_r+0x33e>
  405acc:	2400      	movs	r4, #0
  405ace:	2500      	movs	r5, #0
  405ad0:	f8cd b01c 	str.w	fp, [sp, #28]
  405ad4:	4649      	mov	r1, r9
  405ad6:	e004      	b.n	405ae2 <_svfprintf_r+0xb8a>
  405ad8:	00409464 	.word	0x00409464
  405adc:	00409478 	.word	0x00409478
  405ae0:	4631      	mov	r1, r6
  405ae2:	08e2      	lsrs	r2, r4, #3
  405ae4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405ae8:	08e8      	lsrs	r0, r5, #3
  405aea:	f004 0307 	and.w	r3, r4, #7
  405aee:	4605      	mov	r5, r0
  405af0:	4614      	mov	r4, r2
  405af2:	3330      	adds	r3, #48	; 0x30
  405af4:	ea54 0205 	orrs.w	r2, r4, r5
  405af8:	f801 3c01 	strb.w	r3, [r1, #-1]
  405afc:	f101 36ff 	add.w	r6, r1, #4294967295
  405b00:	d1ee      	bne.n	405ae0 <_svfprintf_r+0xb88>
  405b02:	9a07      	ldr	r2, [sp, #28]
  405b04:	07d2      	lsls	r2, r2, #31
  405b06:	f57f ad59 	bpl.w	4055bc <_svfprintf_r+0x664>
  405b0a:	2b30      	cmp	r3, #48	; 0x30
  405b0c:	f43f ad56 	beq.w	4055bc <_svfprintf_r+0x664>
  405b10:	2330      	movs	r3, #48	; 0x30
  405b12:	3902      	subs	r1, #2
  405b14:	f806 3c01 	strb.w	r3, [r6, #-1]
  405b18:	eba9 0301 	sub.w	r3, r9, r1
  405b1c:	930e      	str	r3, [sp, #56]	; 0x38
  405b1e:	460e      	mov	r6, r1
  405b20:	f7ff bb36 	b.w	405190 <_svfprintf_r+0x238>
  405b24:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405b26:	2900      	cmp	r1, #0
  405b28:	f77f af79 	ble.w	405a1e <_svfprintf_r+0xac6>
  405b2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405b2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405b30:	4293      	cmp	r3, r2
  405b32:	bfa8      	it	ge
  405b34:	4613      	movge	r3, r2
  405b36:	2b00      	cmp	r3, #0
  405b38:	461f      	mov	r7, r3
  405b3a:	dd0b      	ble.n	405b54 <_svfprintf_r+0xbfc>
  405b3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405b3e:	443c      	add	r4, r7
  405b40:	3301      	adds	r3, #1
  405b42:	2b07      	cmp	r3, #7
  405b44:	9427      	str	r4, [sp, #156]	; 0x9c
  405b46:	e888 00c0 	stmia.w	r8, {r6, r7}
  405b4a:	9326      	str	r3, [sp, #152]	; 0x98
  405b4c:	f300 82fb 	bgt.w	406146 <_svfprintf_r+0x11ee>
  405b50:	f108 0808 	add.w	r8, r8, #8
  405b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405b56:	2f00      	cmp	r7, #0
  405b58:	bfa8      	it	ge
  405b5a:	1bdb      	subge	r3, r3, r7
  405b5c:	2b00      	cmp	r3, #0
  405b5e:	461f      	mov	r7, r3
  405b60:	f340 80d7 	ble.w	405d12 <_svfprintf_r+0xdba>
  405b64:	2b10      	cmp	r3, #16
  405b66:	f340 8434 	ble.w	4063d2 <_svfprintf_r+0x147a>
  405b6a:	4dba      	ldr	r5, [pc, #744]	; (405e54 <_svfprintf_r+0xefc>)
  405b6c:	4642      	mov	r2, r8
  405b6e:	4621      	mov	r1, r4
  405b70:	46b0      	mov	r8, r6
  405b72:	f04f 0b10 	mov.w	fp, #16
  405b76:	462e      	mov	r6, r5
  405b78:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405b7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405b7c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405b7e:	e004      	b.n	405b8a <_svfprintf_r+0xc32>
  405b80:	3208      	adds	r2, #8
  405b82:	3f10      	subs	r7, #16
  405b84:	2f10      	cmp	r7, #16
  405b86:	f340 80b5 	ble.w	405cf4 <_svfprintf_r+0xd9c>
  405b8a:	3301      	adds	r3, #1
  405b8c:	3110      	adds	r1, #16
  405b8e:	2b07      	cmp	r3, #7
  405b90:	9127      	str	r1, [sp, #156]	; 0x9c
  405b92:	9326      	str	r3, [sp, #152]	; 0x98
  405b94:	e882 0840 	stmia.w	r2, {r6, fp}
  405b98:	ddf2      	ble.n	405b80 <_svfprintf_r+0xc28>
  405b9a:	aa25      	add	r2, sp, #148	; 0x94
  405b9c:	4629      	mov	r1, r5
  405b9e:	4620      	mov	r0, r4
  405ba0:	f002 fdb8 	bl	408714 <__ssprint_r>
  405ba4:	2800      	cmp	r0, #0
  405ba6:	f47f aab4 	bne.w	405112 <_svfprintf_r+0x1ba>
  405baa:	464a      	mov	r2, r9
  405bac:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405bae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405bb0:	e7e7      	b.n	405b82 <_svfprintf_r+0xc2a>
  405bb2:	2d00      	cmp	r5, #0
  405bb4:	bf08      	it	eq
  405bb6:	2c0a      	cmpeq	r4, #10
  405bb8:	f0c0 8090 	bcc.w	405cdc <_svfprintf_r+0xd84>
  405bbc:	464e      	mov	r6, r9
  405bbe:	4620      	mov	r0, r4
  405bc0:	4629      	mov	r1, r5
  405bc2:	220a      	movs	r2, #10
  405bc4:	2300      	movs	r3, #0
  405bc6:	f003 f999 	bl	408efc <__aeabi_uldivmod>
  405bca:	3230      	adds	r2, #48	; 0x30
  405bcc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405bd0:	4620      	mov	r0, r4
  405bd2:	4629      	mov	r1, r5
  405bd4:	2300      	movs	r3, #0
  405bd6:	220a      	movs	r2, #10
  405bd8:	f003 f990 	bl	408efc <__aeabi_uldivmod>
  405bdc:	4604      	mov	r4, r0
  405bde:	460d      	mov	r5, r1
  405be0:	ea54 0305 	orrs.w	r3, r4, r5
  405be4:	d1eb      	bne.n	405bbe <_svfprintf_r+0xc66>
  405be6:	eba9 0306 	sub.w	r3, r9, r6
  405bea:	930e      	str	r3, [sp, #56]	; 0x38
  405bec:	f7ff bad0 	b.w	405190 <_svfprintf_r+0x238>
  405bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405bf2:	464e      	mov	r6, r9
  405bf4:	930e      	str	r3, [sp, #56]	; 0x38
  405bf6:	f7ff bacb 	b.w	405190 <_svfprintf_r+0x238>
  405bfa:	1e5e      	subs	r6, r3, #1
  405bfc:	2e00      	cmp	r6, #0
  405bfe:	f77f aeca 	ble.w	405996 <_svfprintf_r+0xa3e>
  405c02:	2e10      	cmp	r6, #16
  405c04:	f340 83e3 	ble.w	4063ce <_svfprintf_r+0x1476>
  405c08:	4622      	mov	r2, r4
  405c0a:	f04f 0b10 	mov.w	fp, #16
  405c0e:	4d91      	ldr	r5, [pc, #580]	; (405e54 <_svfprintf_r+0xefc>)
  405c10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405c12:	e004      	b.n	405c1e <_svfprintf_r+0xcc6>
  405c14:	3e10      	subs	r6, #16
  405c16:	2e10      	cmp	r6, #16
  405c18:	f108 0808 	add.w	r8, r8, #8
  405c1c:	dd15      	ble.n	405c4a <_svfprintf_r+0xcf2>
  405c1e:	3701      	adds	r7, #1
  405c20:	3210      	adds	r2, #16
  405c22:	2f07      	cmp	r7, #7
  405c24:	9227      	str	r2, [sp, #156]	; 0x9c
  405c26:	9726      	str	r7, [sp, #152]	; 0x98
  405c28:	e888 0820 	stmia.w	r8, {r5, fp}
  405c2c:	ddf2      	ble.n	405c14 <_svfprintf_r+0xcbc>
  405c2e:	aa25      	add	r2, sp, #148	; 0x94
  405c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c32:	4620      	mov	r0, r4
  405c34:	f002 fd6e 	bl	408714 <__ssprint_r>
  405c38:	2800      	cmp	r0, #0
  405c3a:	f47f aa6a 	bne.w	405112 <_svfprintf_r+0x1ba>
  405c3e:	3e10      	subs	r6, #16
  405c40:	2e10      	cmp	r6, #16
  405c42:	46c8      	mov	r8, r9
  405c44:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405c46:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405c48:	dce9      	bgt.n	405c1e <_svfprintf_r+0xcc6>
  405c4a:	4614      	mov	r4, r2
  405c4c:	3701      	adds	r7, #1
  405c4e:	4434      	add	r4, r6
  405c50:	2f07      	cmp	r7, #7
  405c52:	9427      	str	r4, [sp, #156]	; 0x9c
  405c54:	9726      	str	r7, [sp, #152]	; 0x98
  405c56:	e888 0060 	stmia.w	r8, {r5, r6}
  405c5a:	f77f ae9a 	ble.w	405992 <_svfprintf_r+0xa3a>
  405c5e:	aa25      	add	r2, sp, #148	; 0x94
  405c60:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c62:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c64:	f002 fd56 	bl	408714 <__ssprint_r>
  405c68:	2800      	cmp	r0, #0
  405c6a:	f47f aa52 	bne.w	405112 <_svfprintf_r+0x1ba>
  405c6e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c70:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405c72:	46c8      	mov	r8, r9
  405c74:	e68f      	b.n	405996 <_svfprintf_r+0xa3e>
  405c76:	3204      	adds	r2, #4
  405c78:	681c      	ldr	r4, [r3, #0]
  405c7a:	2500      	movs	r5, #0
  405c7c:	2301      	movs	r3, #1
  405c7e:	920f      	str	r2, [sp, #60]	; 0x3c
  405c80:	f7ff ba68 	b.w	405154 <_svfprintf_r+0x1fc>
  405c84:	681c      	ldr	r4, [r3, #0]
  405c86:	3304      	adds	r3, #4
  405c88:	930f      	str	r3, [sp, #60]	; 0x3c
  405c8a:	2500      	movs	r5, #0
  405c8c:	e42a      	b.n	4054e4 <_svfprintf_r+0x58c>
  405c8e:	681c      	ldr	r4, [r3, #0]
  405c90:	3304      	adds	r3, #4
  405c92:	17e5      	asrs	r5, r4, #31
  405c94:	4622      	mov	r2, r4
  405c96:	930f      	str	r3, [sp, #60]	; 0x3c
  405c98:	462b      	mov	r3, r5
  405c9a:	2a00      	cmp	r2, #0
  405c9c:	f173 0300 	sbcs.w	r3, r3, #0
  405ca0:	f6bf ac68 	bge.w	405574 <_svfprintf_r+0x61c>
  405ca4:	272d      	movs	r7, #45	; 0x2d
  405ca6:	4264      	negs	r4, r4
  405ca8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405cac:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405cb0:	2301      	movs	r3, #1
  405cb2:	f7ff ba53 	b.w	40515c <_svfprintf_r+0x204>
  405cb6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405cb8:	2500      	movs	r5, #0
  405cba:	460a      	mov	r2, r1
  405cbc:	3204      	adds	r2, #4
  405cbe:	680c      	ldr	r4, [r1, #0]
  405cc0:	920f      	str	r2, [sp, #60]	; 0x3c
  405cc2:	f7ff ba47 	b.w	405154 <_svfprintf_r+0x1fc>
  405cc6:	4614      	mov	r4, r2
  405cc8:	3301      	adds	r3, #1
  405cca:	4434      	add	r4, r6
  405ccc:	2b07      	cmp	r3, #7
  405cce:	9427      	str	r4, [sp, #156]	; 0x9c
  405cd0:	9326      	str	r3, [sp, #152]	; 0x98
  405cd2:	e888 0060 	stmia.w	r8, {r5, r6}
  405cd6:	f77f ab2f 	ble.w	405338 <_svfprintf_r+0x3e0>
  405cda:	e6e0      	b.n	405a9e <_svfprintf_r+0xb46>
  405cdc:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405ce0:	2301      	movs	r3, #1
  405ce2:	ae42      	add	r6, sp, #264	; 0x108
  405ce4:	3430      	adds	r4, #48	; 0x30
  405ce6:	f8cd b01c 	str.w	fp, [sp, #28]
  405cea:	f806 4d41 	strb.w	r4, [r6, #-65]!
  405cee:	930e      	str	r3, [sp, #56]	; 0x38
  405cf0:	f7ff ba4e 	b.w	405190 <_svfprintf_r+0x238>
  405cf4:	4635      	mov	r5, r6
  405cf6:	460c      	mov	r4, r1
  405cf8:	4646      	mov	r6, r8
  405cfa:	4690      	mov	r8, r2
  405cfc:	3301      	adds	r3, #1
  405cfe:	443c      	add	r4, r7
  405d00:	2b07      	cmp	r3, #7
  405d02:	9427      	str	r4, [sp, #156]	; 0x9c
  405d04:	9326      	str	r3, [sp, #152]	; 0x98
  405d06:	e888 00a0 	stmia.w	r8, {r5, r7}
  405d0a:	f300 8246 	bgt.w	40619a <_svfprintf_r+0x1242>
  405d0e:	f108 0808 	add.w	r8, r8, #8
  405d12:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405d14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405d16:	429a      	cmp	r2, r3
  405d18:	db45      	blt.n	405da6 <_svfprintf_r+0xe4e>
  405d1a:	9b07      	ldr	r3, [sp, #28]
  405d1c:	07d9      	lsls	r1, r3, #31
  405d1e:	d442      	bmi.n	405da6 <_svfprintf_r+0xe4e>
  405d20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405d22:	9812      	ldr	r0, [sp, #72]	; 0x48
  405d24:	1a9a      	subs	r2, r3, r2
  405d26:	1a1d      	subs	r5, r3, r0
  405d28:	4295      	cmp	r5, r2
  405d2a:	bfa8      	it	ge
  405d2c:	4615      	movge	r5, r2
  405d2e:	2d00      	cmp	r5, #0
  405d30:	dd0e      	ble.n	405d50 <_svfprintf_r+0xdf8>
  405d32:	9926      	ldr	r1, [sp, #152]	; 0x98
  405d34:	4406      	add	r6, r0
  405d36:	3101      	adds	r1, #1
  405d38:	442c      	add	r4, r5
  405d3a:	2907      	cmp	r1, #7
  405d3c:	f8c8 6000 	str.w	r6, [r8]
  405d40:	9427      	str	r4, [sp, #156]	; 0x9c
  405d42:	f8c8 5004 	str.w	r5, [r8, #4]
  405d46:	9126      	str	r1, [sp, #152]	; 0x98
  405d48:	f300 8216 	bgt.w	406178 <_svfprintf_r+0x1220>
  405d4c:	f108 0808 	add.w	r8, r8, #8
  405d50:	2d00      	cmp	r5, #0
  405d52:	bfb4      	ite	lt
  405d54:	4616      	movlt	r6, r2
  405d56:	1b56      	subge	r6, r2, r5
  405d58:	2e00      	cmp	r6, #0
  405d5a:	f77f aaef 	ble.w	40533c <_svfprintf_r+0x3e4>
  405d5e:	2e10      	cmp	r6, #16
  405d60:	f340 82f3 	ble.w	40634a <_svfprintf_r+0x13f2>
  405d64:	4622      	mov	r2, r4
  405d66:	2710      	movs	r7, #16
  405d68:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405d6a:	4d3a      	ldr	r5, [pc, #232]	; (405e54 <_svfprintf_r+0xefc>)
  405d6c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405d70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405d72:	e004      	b.n	405d7e <_svfprintf_r+0xe26>
  405d74:	f108 0808 	add.w	r8, r8, #8
  405d78:	3e10      	subs	r6, #16
  405d7a:	2e10      	cmp	r6, #16
  405d7c:	dda3      	ble.n	405cc6 <_svfprintf_r+0xd6e>
  405d7e:	3301      	adds	r3, #1
  405d80:	3210      	adds	r2, #16
  405d82:	2b07      	cmp	r3, #7
  405d84:	9227      	str	r2, [sp, #156]	; 0x9c
  405d86:	9326      	str	r3, [sp, #152]	; 0x98
  405d88:	e888 00a0 	stmia.w	r8, {r5, r7}
  405d8c:	ddf2      	ble.n	405d74 <_svfprintf_r+0xe1c>
  405d8e:	aa25      	add	r2, sp, #148	; 0x94
  405d90:	4621      	mov	r1, r4
  405d92:	4658      	mov	r0, fp
  405d94:	f002 fcbe 	bl	408714 <__ssprint_r>
  405d98:	2800      	cmp	r0, #0
  405d9a:	f47f a9ba 	bne.w	405112 <_svfprintf_r+0x1ba>
  405d9e:	46c8      	mov	r8, r9
  405da0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405da4:	e7e8      	b.n	405d78 <_svfprintf_r+0xe20>
  405da6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405da8:	9819      	ldr	r0, [sp, #100]	; 0x64
  405daa:	3301      	adds	r3, #1
  405dac:	991a      	ldr	r1, [sp, #104]	; 0x68
  405dae:	4404      	add	r4, r0
  405db0:	2b07      	cmp	r3, #7
  405db2:	9427      	str	r4, [sp, #156]	; 0x9c
  405db4:	f8c8 1000 	str.w	r1, [r8]
  405db8:	f8c8 0004 	str.w	r0, [r8, #4]
  405dbc:	9326      	str	r3, [sp, #152]	; 0x98
  405dbe:	f300 81cf 	bgt.w	406160 <_svfprintf_r+0x1208>
  405dc2:	f108 0808 	add.w	r8, r8, #8
  405dc6:	e7ab      	b.n	405d20 <_svfprintf_r+0xdc8>
  405dc8:	9b07      	ldr	r3, [sp, #28]
  405dca:	07da      	lsls	r2, r3, #31
  405dcc:	f53f adad 	bmi.w	40592a <_svfprintf_r+0x9d2>
  405dd0:	2301      	movs	r3, #1
  405dd2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405dd4:	441c      	add	r4, r3
  405dd6:	441f      	add	r7, r3
  405dd8:	2f07      	cmp	r7, #7
  405dda:	9427      	str	r4, [sp, #156]	; 0x9c
  405ddc:	f8c8 6000 	str.w	r6, [r8]
  405de0:	9726      	str	r7, [sp, #152]	; 0x98
  405de2:	f8c8 3004 	str.w	r3, [r8, #4]
  405de6:	f77f add4 	ble.w	405992 <_svfprintf_r+0xa3a>
  405dea:	aa25      	add	r2, sp, #148	; 0x94
  405dec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405dee:	980c      	ldr	r0, [sp, #48]	; 0x30
  405df0:	f002 fc90 	bl	408714 <__ssprint_r>
  405df4:	2800      	cmp	r0, #0
  405df6:	f47f a98c 	bne.w	405112 <_svfprintf_r+0x1ba>
  405dfa:	46c8      	mov	r8, r9
  405dfc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405dfe:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405e00:	e5c9      	b.n	405996 <_svfprintf_r+0xa3e>
  405e02:	aa25      	add	r2, sp, #148	; 0x94
  405e04:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e06:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e08:	f002 fc84 	bl	408714 <__ssprint_r>
  405e0c:	2800      	cmp	r0, #0
  405e0e:	f47f a980 	bne.w	405112 <_svfprintf_r+0x1ba>
  405e12:	46c8      	mov	r8, r9
  405e14:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405e16:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405e18:	e596      	b.n	405948 <_svfprintf_r+0x9f0>
  405e1a:	aa25      	add	r2, sp, #148	; 0x94
  405e1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e1e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e20:	f002 fc78 	bl	408714 <__ssprint_r>
  405e24:	2800      	cmp	r0, #0
  405e26:	f47f a974 	bne.w	405112 <_svfprintf_r+0x1ba>
  405e2a:	46c8      	mov	r8, r9
  405e2c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405e2e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405e30:	e599      	b.n	405966 <_svfprintf_r+0xa0e>
  405e32:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  405e34:	3407      	adds	r4, #7
  405e36:	f024 0407 	bic.w	r4, r4, #7
  405e3a:	f104 0108 	add.w	r1, r4, #8
  405e3e:	e9d4 2300 	ldrd	r2, r3, [r4]
  405e42:	910f      	str	r1, [sp, #60]	; 0x3c
  405e44:	4614      	mov	r4, r2
  405e46:	461d      	mov	r5, r3
  405e48:	f7ff bb8f 	b.w	40556a <_svfprintf_r+0x612>
  405e4c:	464e      	mov	r6, r9
  405e4e:	f7ff b99f 	b.w	405190 <_svfprintf_r+0x238>
  405e52:	bf00      	nop
  405e54:	00409478 	.word	0x00409478
  405e58:	aa25      	add	r2, sp, #148	; 0x94
  405e5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e5c:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e5e:	f002 fc59 	bl	408714 <__ssprint_r>
  405e62:	2800      	cmp	r0, #0
  405e64:	f47f a955 	bne.w	405112 <_svfprintf_r+0x1ba>
  405e68:	46c8      	mov	r8, r9
  405e6a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405e6c:	f7ff ba16 	b.w	40529c <_svfprintf_r+0x344>
  405e70:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405e72:	4622      	mov	r2, r4
  405e74:	4620      	mov	r0, r4
  405e76:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405e78:	4623      	mov	r3, r4
  405e7a:	4621      	mov	r1, r4
  405e7c:	f003 f800 	bl	408e80 <__aeabi_dcmpun>
  405e80:	2800      	cmp	r0, #0
  405e82:	f040 8273 	bne.w	40636c <_svfprintf_r+0x1414>
  405e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e88:	3301      	adds	r3, #1
  405e8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405e8c:	f023 0320 	bic.w	r3, r3, #32
  405e90:	930e      	str	r3, [sp, #56]	; 0x38
  405e92:	f000 819c 	beq.w	4061ce <_svfprintf_r+0x1276>
  405e96:	2b47      	cmp	r3, #71	; 0x47
  405e98:	f000 80d6 	beq.w	406048 <_svfprintf_r+0x10f0>
  405e9c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405ea0:	9307      	str	r3, [sp, #28]
  405ea2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405ea4:	1e1f      	subs	r7, r3, #0
  405ea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405ea8:	9308      	str	r3, [sp, #32]
  405eaa:	bfb7      	itett	lt
  405eac:	463b      	movlt	r3, r7
  405eae:	2300      	movge	r3, #0
  405eb0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  405eb4:	232d      	movlt	r3, #45	; 0x2d
  405eb6:	9310      	str	r3, [sp, #64]	; 0x40
  405eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405eba:	2b66      	cmp	r3, #102	; 0x66
  405ebc:	f000 8190 	beq.w	4061e0 <_svfprintf_r+0x1288>
  405ec0:	2b46      	cmp	r3, #70	; 0x46
  405ec2:	f000 80a4 	beq.w	40600e <_svfprintf_r+0x10b6>
  405ec6:	2002      	movs	r0, #2
  405ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405eca:	a923      	add	r1, sp, #140	; 0x8c
  405ecc:	2b45      	cmp	r3, #69	; 0x45
  405ece:	bf0a      	itet	eq
  405ed0:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  405ed2:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  405ed4:	1c5d      	addeq	r5, r3, #1
  405ed6:	e88d 0021 	stmia.w	sp, {r0, r5}
  405eda:	9104      	str	r1, [sp, #16]
  405edc:	a820      	add	r0, sp, #128	; 0x80
  405ede:	a91f      	add	r1, sp, #124	; 0x7c
  405ee0:	463b      	mov	r3, r7
  405ee2:	9003      	str	r0, [sp, #12]
  405ee4:	9a08      	ldr	r2, [sp, #32]
  405ee6:	9102      	str	r1, [sp, #8]
  405ee8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405eea:	f000 fb59 	bl	4065a0 <_dtoa_r>
  405eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405ef0:	4606      	mov	r6, r0
  405ef2:	2b67      	cmp	r3, #103	; 0x67
  405ef4:	f040 81ba 	bne.w	40626c <_svfprintf_r+0x1314>
  405ef8:	f01b 0f01 	tst.w	fp, #1
  405efc:	f000 8223 	beq.w	406346 <_svfprintf_r+0x13ee>
  405f00:	1974      	adds	r4, r6, r5
  405f02:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405f04:	9808      	ldr	r0, [sp, #32]
  405f06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405f08:	4639      	mov	r1, r7
  405f0a:	f002 ff87 	bl	408e1c <__aeabi_dcmpeq>
  405f0e:	2800      	cmp	r0, #0
  405f10:	f040 8124 	bne.w	40615c <_svfprintf_r+0x1204>
  405f14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405f16:	42a3      	cmp	r3, r4
  405f18:	d206      	bcs.n	405f28 <_svfprintf_r+0xfd0>
  405f1a:	2130      	movs	r1, #48	; 0x30
  405f1c:	1c5a      	adds	r2, r3, #1
  405f1e:	9223      	str	r2, [sp, #140]	; 0x8c
  405f20:	7019      	strb	r1, [r3, #0]
  405f22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405f24:	429c      	cmp	r4, r3
  405f26:	d8f9      	bhi.n	405f1c <_svfprintf_r+0xfc4>
  405f28:	1b9b      	subs	r3, r3, r6
  405f2a:	9313      	str	r3, [sp, #76]	; 0x4c
  405f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405f2e:	2b47      	cmp	r3, #71	; 0x47
  405f30:	f000 80a2 	beq.w	406078 <_svfprintf_r+0x1120>
  405f34:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405f36:	2b65      	cmp	r3, #101	; 0x65
  405f38:	f340 81a7 	ble.w	40628a <_svfprintf_r+0x1332>
  405f3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405f3e:	2b66      	cmp	r3, #102	; 0x66
  405f40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405f42:	9312      	str	r3, [sp, #72]	; 0x48
  405f44:	f000 8171 	beq.w	40622a <_svfprintf_r+0x12d2>
  405f48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405f4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405f4c:	4619      	mov	r1, r3
  405f4e:	4291      	cmp	r1, r2
  405f50:	f300 815d 	bgt.w	40620e <_svfprintf_r+0x12b6>
  405f54:	f01b 0f01 	tst.w	fp, #1
  405f58:	f040 81f0 	bne.w	40633c <_svfprintf_r+0x13e4>
  405f5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405f60:	9308      	str	r3, [sp, #32]
  405f62:	2367      	movs	r3, #103	; 0x67
  405f64:	920e      	str	r2, [sp, #56]	; 0x38
  405f66:	9311      	str	r3, [sp, #68]	; 0x44
  405f68:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405f6a:	2b00      	cmp	r3, #0
  405f6c:	d17d      	bne.n	40606a <_svfprintf_r+0x1112>
  405f6e:	930a      	str	r3, [sp, #40]	; 0x28
  405f70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405f74:	f7ff b914 	b.w	4051a0 <_svfprintf_r+0x248>
  405f78:	f024 0407 	bic.w	r4, r4, #7
  405f7c:	6823      	ldr	r3, [r4, #0]
  405f7e:	9315      	str	r3, [sp, #84]	; 0x54
  405f80:	6863      	ldr	r3, [r4, #4]
  405f82:	9314      	str	r3, [sp, #80]	; 0x50
  405f84:	f104 0308 	add.w	r3, r4, #8
  405f88:	930f      	str	r3, [sp, #60]	; 0x3c
  405f8a:	f7ff bb2f 	b.w	4055ec <_svfprintf_r+0x694>
  405f8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405f90:	6813      	ldr	r3, [r2, #0]
  405f92:	3204      	adds	r2, #4
  405f94:	920f      	str	r2, [sp, #60]	; 0x3c
  405f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405f98:	601a      	str	r2, [r3, #0]
  405f9a:	f7ff b804 	b.w	404fa6 <_svfprintf_r+0x4e>
  405f9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405fa0:	4daf      	ldr	r5, [pc, #700]	; (406260 <_svfprintf_r+0x1308>)
  405fa2:	f7ff b9ad 	b.w	405300 <_svfprintf_r+0x3a8>
  405fa6:	aa25      	add	r2, sp, #148	; 0x94
  405fa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405faa:	980c      	ldr	r0, [sp, #48]	; 0x30
  405fac:	f002 fbb2 	bl	408714 <__ssprint_r>
  405fb0:	2800      	cmp	r0, #0
  405fb2:	f47f a8ae 	bne.w	405112 <_svfprintf_r+0x1ba>
  405fb6:	46c8      	mov	r8, r9
  405fb8:	e431      	b.n	40581e <_svfprintf_r+0x8c6>
  405fba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405fbc:	4613      	mov	r3, r2
  405fbe:	3304      	adds	r3, #4
  405fc0:	930f      	str	r3, [sp, #60]	; 0x3c
  405fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405fc4:	6811      	ldr	r1, [r2, #0]
  405fc6:	17dd      	asrs	r5, r3, #31
  405fc8:	461a      	mov	r2, r3
  405fca:	462b      	mov	r3, r5
  405fcc:	e9c1 2300 	strd	r2, r3, [r1]
  405fd0:	f7fe bfe9 	b.w	404fa6 <_svfprintf_r+0x4e>
  405fd4:	aa25      	add	r2, sp, #148	; 0x94
  405fd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405fd8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405fda:	f002 fb9b 	bl	408714 <__ssprint_r>
  405fde:	2800      	cmp	r0, #0
  405fe0:	f47f a897 	bne.w	405112 <_svfprintf_r+0x1ba>
  405fe4:	46c8      	mov	r8, r9
  405fe6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405fe8:	e432      	b.n	405850 <_svfprintf_r+0x8f8>
  405fea:	f108 0808 	add.w	r8, r8, #8
  405fee:	e52f      	b.n	405a50 <_svfprintf_r+0xaf8>
  405ff0:	2140      	movs	r1, #64	; 0x40
  405ff2:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ff4:	f001 fb5c 	bl	4076b0 <_malloc_r>
  405ff8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405ffa:	6010      	str	r0, [r2, #0]
  405ffc:	6110      	str	r0, [r2, #16]
  405ffe:	2800      	cmp	r0, #0
  406000:	f000 8214 	beq.w	40642c <_svfprintf_r+0x14d4>
  406004:	2340      	movs	r3, #64	; 0x40
  406006:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406008:	6153      	str	r3, [r2, #20]
  40600a:	f7fe bfbc 	b.w	404f86 <_svfprintf_r+0x2e>
  40600e:	2003      	movs	r0, #3
  406010:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  406012:	a923      	add	r1, sp, #140	; 0x8c
  406014:	e88d 0011 	stmia.w	sp, {r0, r4}
  406018:	9104      	str	r1, [sp, #16]
  40601a:	a820      	add	r0, sp, #128	; 0x80
  40601c:	a91f      	add	r1, sp, #124	; 0x7c
  40601e:	9003      	str	r0, [sp, #12]
  406020:	9a08      	ldr	r2, [sp, #32]
  406022:	463b      	mov	r3, r7
  406024:	9102      	str	r1, [sp, #8]
  406026:	980c      	ldr	r0, [sp, #48]	; 0x30
  406028:	f000 faba 	bl	4065a0 <_dtoa_r>
  40602c:	4625      	mov	r5, r4
  40602e:	4606      	mov	r6, r0
  406030:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406032:	1974      	adds	r4, r6, r5
  406034:	2b46      	cmp	r3, #70	; 0x46
  406036:	f47f af64 	bne.w	405f02 <_svfprintf_r+0xfaa>
  40603a:	7833      	ldrb	r3, [r6, #0]
  40603c:	2b30      	cmp	r3, #48	; 0x30
  40603e:	f000 8187 	beq.w	406350 <_svfprintf_r+0x13f8>
  406042:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  406044:	442c      	add	r4, r5
  406046:	e75c      	b.n	405f02 <_svfprintf_r+0xfaa>
  406048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40604a:	2b00      	cmp	r3, #0
  40604c:	bf08      	it	eq
  40604e:	2301      	moveq	r3, #1
  406050:	930a      	str	r3, [sp, #40]	; 0x28
  406052:	e723      	b.n	405e9c <_svfprintf_r+0xf44>
  406054:	4630      	mov	r0, r6
  406056:	950a      	str	r5, [sp, #40]	; 0x28
  406058:	f7fe fe6c 	bl	404d34 <strlen>
  40605c:	940f      	str	r4, [sp, #60]	; 0x3c
  40605e:	900e      	str	r0, [sp, #56]	; 0x38
  406060:	f8cd b01c 	str.w	fp, [sp, #28]
  406064:	4603      	mov	r3, r0
  406066:	f7ff b9e7 	b.w	405438 <_svfprintf_r+0x4e0>
  40606a:	272d      	movs	r7, #45	; 0x2d
  40606c:	2300      	movs	r3, #0
  40606e:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406072:	930a      	str	r3, [sp, #40]	; 0x28
  406074:	f7ff b895 	b.w	4051a2 <_svfprintf_r+0x24a>
  406078:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40607a:	461a      	mov	r2, r3
  40607c:	9312      	str	r3, [sp, #72]	; 0x48
  40607e:	3303      	adds	r3, #3
  406080:	db04      	blt.n	40608c <_svfprintf_r+0x1134>
  406082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406084:	4619      	mov	r1, r3
  406086:	4291      	cmp	r1, r2
  406088:	f6bf af5e 	bge.w	405f48 <_svfprintf_r+0xff0>
  40608c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40608e:	3b02      	subs	r3, #2
  406090:	9311      	str	r3, [sp, #68]	; 0x44
  406092:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406094:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  406098:	3b01      	subs	r3, #1
  40609a:	2b00      	cmp	r3, #0
  40609c:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
  4060a0:	bfb4      	ite	lt
  4060a2:	222d      	movlt	r2, #45	; 0x2d
  4060a4:	222b      	movge	r2, #43	; 0x2b
  4060a6:	931f      	str	r3, [sp, #124]	; 0x7c
  4060a8:	bfb8      	it	lt
  4060aa:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4060ac:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4060b0:	bfb8      	it	lt
  4060b2:	f1c3 0301 	rsblt	r3, r3, #1
  4060b6:	2b09      	cmp	r3, #9
  4060b8:	f340 811f 	ble.w	4062fa <_svfprintf_r+0x13a2>
  4060bc:	f10d 0093 	add.w	r0, sp, #147	; 0x93
  4060c0:	4601      	mov	r1, r0
  4060c2:	4c68      	ldr	r4, [pc, #416]	; (406264 <_svfprintf_r+0x130c>)
  4060c4:	e000      	b.n	4060c8 <_svfprintf_r+0x1170>
  4060c6:	4611      	mov	r1, r2
  4060c8:	fb84 5203 	smull	r5, r2, r4, r3
  4060cc:	17dd      	asrs	r5, r3, #31
  4060ce:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
  4060d2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
  4060d6:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4060da:	3230      	adds	r2, #48	; 0x30
  4060dc:	2d09      	cmp	r5, #9
  4060de:	f801 2c01 	strb.w	r2, [r1, #-1]
  4060e2:	462b      	mov	r3, r5
  4060e4:	f101 32ff 	add.w	r2, r1, #4294967295
  4060e8:	dced      	bgt.n	4060c6 <_svfprintf_r+0x116e>
  4060ea:	3330      	adds	r3, #48	; 0x30
  4060ec:	3902      	subs	r1, #2
  4060ee:	b2dc      	uxtb	r4, r3
  4060f0:	4288      	cmp	r0, r1
  4060f2:	f802 4c01 	strb.w	r4, [r2, #-1]
  4060f6:	f240 8192 	bls.w	40641e <_svfprintf_r+0x14c6>
  4060fa:	f10d 0186 	add.w	r1, sp, #134	; 0x86
  4060fe:	4613      	mov	r3, r2
  406100:	e001      	b.n	406106 <_svfprintf_r+0x11ae>
  406102:	f813 4b01 	ldrb.w	r4, [r3], #1
  406106:	4283      	cmp	r3, r0
  406108:	f801 4b01 	strb.w	r4, [r1], #1
  40610c:	d1f9      	bne.n	406102 <_svfprintf_r+0x11aa>
  40610e:	3301      	adds	r3, #1
  406110:	1a9b      	subs	r3, r3, r2
  406112:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  406116:	4413      	add	r3, r2
  406118:	aa21      	add	r2, sp, #132	; 0x84
  40611a:	1a9b      	subs	r3, r3, r2
  40611c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40611e:	931b      	str	r3, [sp, #108]	; 0x6c
  406120:	2a01      	cmp	r2, #1
  406122:	4413      	add	r3, r2
  406124:	930e      	str	r3, [sp, #56]	; 0x38
  406126:	f340 8148 	ble.w	4063ba <_svfprintf_r+0x1462>
  40612a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40612c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40612e:	4413      	add	r3, r2
  406130:	930e      	str	r3, [sp, #56]	; 0x38
  406132:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406136:	9308      	str	r3, [sp, #32]
  406138:	2300      	movs	r3, #0
  40613a:	9312      	str	r3, [sp, #72]	; 0x48
  40613c:	e714      	b.n	405f68 <_svfprintf_r+0x1010>
  40613e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406140:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406142:	f7ff b876 	b.w	405232 <_svfprintf_r+0x2da>
  406146:	aa25      	add	r2, sp, #148	; 0x94
  406148:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40614a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40614c:	f002 fae2 	bl	408714 <__ssprint_r>
  406150:	2800      	cmp	r0, #0
  406152:	f47e afde 	bne.w	405112 <_svfprintf_r+0x1ba>
  406156:	46c8      	mov	r8, r9
  406158:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40615a:	e4fb      	b.n	405b54 <_svfprintf_r+0xbfc>
  40615c:	4623      	mov	r3, r4
  40615e:	e6e3      	b.n	405f28 <_svfprintf_r+0xfd0>
  406160:	aa25      	add	r2, sp, #148	; 0x94
  406162:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406164:	980c      	ldr	r0, [sp, #48]	; 0x30
  406166:	f002 fad5 	bl	408714 <__ssprint_r>
  40616a:	2800      	cmp	r0, #0
  40616c:	f47e afd1 	bne.w	405112 <_svfprintf_r+0x1ba>
  406170:	46c8      	mov	r8, r9
  406172:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  406174:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406176:	e5d3      	b.n	405d20 <_svfprintf_r+0xdc8>
  406178:	aa25      	add	r2, sp, #148	; 0x94
  40617a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40617c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40617e:	f002 fac9 	bl	408714 <__ssprint_r>
  406182:	2800      	cmp	r0, #0
  406184:	f47e afc5 	bne.w	405112 <_svfprintf_r+0x1ba>
  406188:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40618a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40618c:	46c8      	mov	r8, r9
  40618e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406190:	1a9a      	subs	r2, r3, r2
  406192:	e5dd      	b.n	405d50 <_svfprintf_r+0xdf8>
  406194:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406196:	f7ff b8fe 	b.w	405396 <_svfprintf_r+0x43e>
  40619a:	aa25      	add	r2, sp, #148	; 0x94
  40619c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40619e:	980c      	ldr	r0, [sp, #48]	; 0x30
  4061a0:	f002 fab8 	bl	408714 <__ssprint_r>
  4061a4:	2800      	cmp	r0, #0
  4061a6:	f47e afb4 	bne.w	405112 <_svfprintf_r+0x1ba>
  4061aa:	46c8      	mov	r8, r9
  4061ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4061ae:	e5b0      	b.n	405d12 <_svfprintf_r+0xdba>
  4061b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061b2:	4637      	mov	r7, r6
  4061b4:	2b06      	cmp	r3, #6
  4061b6:	bf28      	it	cs
  4061b8:	2306      	movcs	r3, #6
  4061ba:	960a      	str	r6, [sp, #40]	; 0x28
  4061bc:	9612      	str	r6, [sp, #72]	; 0x48
  4061be:	9308      	str	r3, [sp, #32]
  4061c0:	940f      	str	r4, [sp, #60]	; 0x3c
  4061c2:	f8cd b01c 	str.w	fp, [sp, #28]
  4061c6:	930e      	str	r3, [sp, #56]	; 0x38
  4061c8:	4e27      	ldr	r6, [pc, #156]	; (406268 <_svfprintf_r+0x1310>)
  4061ca:	f7fe bfe9 	b.w	4051a0 <_svfprintf_r+0x248>
  4061ce:	2306      	movs	r3, #6
  4061d0:	930a      	str	r3, [sp, #40]	; 0x28
  4061d2:	e663      	b.n	405e9c <_svfprintf_r+0xf44>
  4061d4:	232d      	movs	r3, #45	; 0x2d
  4061d6:	461f      	mov	r7, r3
  4061d8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4061dc:	f7ff ba28 	b.w	405630 <_svfprintf_r+0x6d8>
  4061e0:	2003      	movs	r0, #3
  4061e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4061e4:	a923      	add	r1, sp, #140	; 0x8c
  4061e6:	e88d 0011 	stmia.w	sp, {r0, r4}
  4061ea:	9104      	str	r1, [sp, #16]
  4061ec:	a820      	add	r0, sp, #128	; 0x80
  4061ee:	a91f      	add	r1, sp, #124	; 0x7c
  4061f0:	9003      	str	r0, [sp, #12]
  4061f2:	9a08      	ldr	r2, [sp, #32]
  4061f4:	463b      	mov	r3, r7
  4061f6:	9102      	str	r1, [sp, #8]
  4061f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4061fa:	f000 f9d1 	bl	4065a0 <_dtoa_r>
  4061fe:	4625      	mov	r5, r4
  406200:	4606      	mov	r6, r0
  406202:	1904      	adds	r4, r0, r4
  406204:	e719      	b.n	40603a <_svfprintf_r+0x10e2>
  406206:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406208:	4d15      	ldr	r5, [pc, #84]	; (406260 <_svfprintf_r+0x1308>)
  40620a:	f7ff bb7e 	b.w	40590a <_svfprintf_r+0x9b2>
  40620e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406210:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406212:	4413      	add	r3, r2
  406214:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406216:	930e      	str	r3, [sp, #56]	; 0x38
  406218:	2a00      	cmp	r2, #0
  40621a:	f340 80c7 	ble.w	4063ac <_svfprintf_r+0x1454>
  40621e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406222:	9308      	str	r3, [sp, #32]
  406224:	2367      	movs	r3, #103	; 0x67
  406226:	9311      	str	r3, [sp, #68]	; 0x44
  406228:	e69e      	b.n	405f68 <_svfprintf_r+0x1010>
  40622a:	2b00      	cmp	r3, #0
  40622c:	f340 80e1 	ble.w	4063f2 <_svfprintf_r+0x149a>
  406230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406232:	2a00      	cmp	r2, #0
  406234:	f040 80b0 	bne.w	406398 <_svfprintf_r+0x1440>
  406238:	f01b 0f01 	tst.w	fp, #1
  40623c:	f040 80ac 	bne.w	406398 <_svfprintf_r+0x1440>
  406240:	9308      	str	r3, [sp, #32]
  406242:	930e      	str	r3, [sp, #56]	; 0x38
  406244:	e690      	b.n	405f68 <_svfprintf_r+0x1010>
  406246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406248:	940f      	str	r4, [sp, #60]	; 0x3c
  40624a:	9308      	str	r3, [sp, #32]
  40624c:	930e      	str	r3, [sp, #56]	; 0x38
  40624e:	900a      	str	r0, [sp, #40]	; 0x28
  406250:	f8cd b01c 	str.w	fp, [sp, #28]
  406254:	9012      	str	r0, [sp, #72]	; 0x48
  406256:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40625a:	f7fe bfa1 	b.w	4051a0 <_svfprintf_r+0x248>
  40625e:	bf00      	nop
  406260:	00409478 	.word	0x00409478
  406264:	66666667 	.word	0x66666667
  406268:	0040945c 	.word	0x0040945c
  40626c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40626e:	2b47      	cmp	r3, #71	; 0x47
  406270:	f47f ae46 	bne.w	405f00 <_svfprintf_r+0xfa8>
  406274:	f01b 0f01 	tst.w	fp, #1
  406278:	f47f aeda 	bne.w	406030 <_svfprintf_r+0x10d8>
  40627c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40627e:	1b9b      	subs	r3, r3, r6
  406280:	9313      	str	r3, [sp, #76]	; 0x4c
  406282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406284:	2b47      	cmp	r3, #71	; 0x47
  406286:	f43f aef7 	beq.w	406078 <_svfprintf_r+0x1120>
  40628a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40628c:	9312      	str	r3, [sp, #72]	; 0x48
  40628e:	e700      	b.n	406092 <_svfprintf_r+0x113a>
  406290:	2000      	movs	r0, #0
  406292:	900a      	str	r0, [sp, #40]	; 0x28
  406294:	f7fe bebc 	b.w	405010 <_svfprintf_r+0xb8>
  406298:	424f      	negs	r7, r1
  40629a:	3110      	adds	r1, #16
  40629c:	da35      	bge.n	40630a <_svfprintf_r+0x13b2>
  40629e:	2410      	movs	r4, #16
  4062a0:	4d6a      	ldr	r5, [pc, #424]	; (40644c <_svfprintf_r+0x14f4>)
  4062a2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4062a6:	e004      	b.n	4062b2 <_svfprintf_r+0x135a>
  4062a8:	f108 0808 	add.w	r8, r8, #8
  4062ac:	3f10      	subs	r7, #16
  4062ae:	2f10      	cmp	r7, #16
  4062b0:	dd2c      	ble.n	40630c <_svfprintf_r+0x13b4>
  4062b2:	3301      	adds	r3, #1
  4062b4:	3210      	adds	r2, #16
  4062b6:	2b07      	cmp	r3, #7
  4062b8:	9227      	str	r2, [sp, #156]	; 0x9c
  4062ba:	9326      	str	r3, [sp, #152]	; 0x98
  4062bc:	f8c8 5000 	str.w	r5, [r8]
  4062c0:	f8c8 4004 	str.w	r4, [r8, #4]
  4062c4:	ddf0      	ble.n	4062a8 <_svfprintf_r+0x1350>
  4062c6:	aa25      	add	r2, sp, #148	; 0x94
  4062c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4062ca:	4658      	mov	r0, fp
  4062cc:	f002 fa22 	bl	408714 <__ssprint_r>
  4062d0:	2800      	cmp	r0, #0
  4062d2:	f47e af1e 	bne.w	405112 <_svfprintf_r+0x1ba>
  4062d6:	46c8      	mov	r8, r9
  4062d8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4062da:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4062dc:	e7e6      	b.n	4062ac <_svfprintf_r+0x1354>
  4062de:	aa25      	add	r2, sp, #148	; 0x94
  4062e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4062e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4062e4:	f002 fa16 	bl	408714 <__ssprint_r>
  4062e8:	2800      	cmp	r0, #0
  4062ea:	f47e af12 	bne.w	405112 <_svfprintf_r+0x1ba>
  4062ee:	46c8      	mov	r8, r9
  4062f0:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4062f2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4062f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4062f6:	f7ff bbc3 	b.w	405a80 <_svfprintf_r+0xb28>
  4062fa:	2230      	movs	r2, #48	; 0x30
  4062fc:	4413      	add	r3, r2
  4062fe:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  406302:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  406306:	ab22      	add	r3, sp, #136	; 0x88
  406308:	e706      	b.n	406118 <_svfprintf_r+0x11c0>
  40630a:	4d50      	ldr	r5, [pc, #320]	; (40644c <_svfprintf_r+0x14f4>)
  40630c:	3301      	adds	r3, #1
  40630e:	443a      	add	r2, r7
  406310:	2b07      	cmp	r3, #7
  406312:	e888 00a0 	stmia.w	r8, {r5, r7}
  406316:	9227      	str	r2, [sp, #156]	; 0x9c
  406318:	9326      	str	r3, [sp, #152]	; 0x98
  40631a:	f108 0808 	add.w	r8, r8, #8
  40631e:	f77f abb2 	ble.w	405a86 <_svfprintf_r+0xb2e>
  406322:	aa25      	add	r2, sp, #148	; 0x94
  406324:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406326:	980c      	ldr	r0, [sp, #48]	; 0x30
  406328:	f002 f9f4 	bl	408714 <__ssprint_r>
  40632c:	2800      	cmp	r0, #0
  40632e:	f47e aef0 	bne.w	405112 <_svfprintf_r+0x1ba>
  406332:	46c8      	mov	r8, r9
  406334:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406336:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406338:	f7ff bba5 	b.w	405a86 <_svfprintf_r+0xb2e>
  40633c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40633e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406340:	4413      	add	r3, r2
  406342:	930e      	str	r3, [sp, #56]	; 0x38
  406344:	e76b      	b.n	40621e <_svfprintf_r+0x12c6>
  406346:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406348:	e5ee      	b.n	405f28 <_svfprintf_r+0xfd0>
  40634a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40634c:	4d3f      	ldr	r5, [pc, #252]	; (40644c <_svfprintf_r+0x14f4>)
  40634e:	e4bb      	b.n	405cc8 <_svfprintf_r+0xd70>
  406350:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406352:	9808      	ldr	r0, [sp, #32]
  406354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406356:	4639      	mov	r1, r7
  406358:	f002 fd60 	bl	408e1c <__aeabi_dcmpeq>
  40635c:	2800      	cmp	r0, #0
  40635e:	f47f ae70 	bne.w	406042 <_svfprintf_r+0x10ea>
  406362:	f1c5 0501 	rsb	r5, r5, #1
  406366:	951f      	str	r5, [sp, #124]	; 0x7c
  406368:	442c      	add	r4, r5
  40636a:	e5ca      	b.n	405f02 <_svfprintf_r+0xfaa>
  40636c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40636e:	4e38      	ldr	r6, [pc, #224]	; (406450 <_svfprintf_r+0x14f8>)
  406370:	2b00      	cmp	r3, #0
  406372:	bfbe      	ittt	lt
  406374:	232d      	movlt	r3, #45	; 0x2d
  406376:	461f      	movlt	r7, r3
  406378:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
  40637c:	f04f 0303 	mov.w	r3, #3
  406380:	461a      	mov	r2, r3
  406382:	9308      	str	r3, [sp, #32]
  406384:	f04f 0300 	mov.w	r3, #0
  406388:	bfa8      	it	ge
  40638a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40638e:	4619      	mov	r1, r3
  406390:	930a      	str	r3, [sp, #40]	; 0x28
  406392:	4b30      	ldr	r3, [pc, #192]	; (406454 <_svfprintf_r+0x14fc>)
  406394:	f7ff b954 	b.w	405640 <_svfprintf_r+0x6e8>
  406398:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40639a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40639c:	4413      	add	r3, r2
  40639e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4063a0:	441a      	add	r2, r3
  4063a2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4063a6:	920e      	str	r2, [sp, #56]	; 0x38
  4063a8:	9308      	str	r3, [sp, #32]
  4063aa:	e5dd      	b.n	405f68 <_svfprintf_r+0x1010>
  4063ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4063ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4063b0:	f1c3 0301 	rsb	r3, r3, #1
  4063b4:	441a      	add	r2, r3
  4063b6:	4613      	mov	r3, r2
  4063b8:	e7c3      	b.n	406342 <_svfprintf_r+0x13ea>
  4063ba:	f01b 0301 	ands.w	r3, fp, #1
  4063be:	9312      	str	r3, [sp, #72]	; 0x48
  4063c0:	f47f aeb3 	bne.w	40612a <_svfprintf_r+0x11d2>
  4063c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4063c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4063ca:	9308      	str	r3, [sp, #32]
  4063cc:	e5cc      	b.n	405f68 <_svfprintf_r+0x1010>
  4063ce:	4d1f      	ldr	r5, [pc, #124]	; (40644c <_svfprintf_r+0x14f4>)
  4063d0:	e43c      	b.n	405c4c <_svfprintf_r+0xcf4>
  4063d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4063d4:	4d1d      	ldr	r5, [pc, #116]	; (40644c <_svfprintf_r+0x14f4>)
  4063d6:	e491      	b.n	405cfc <_svfprintf_r+0xda4>
  4063d8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4063da:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4063de:	6828      	ldr	r0, [r5, #0]
  4063e0:	46a2      	mov	sl, r4
  4063e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4063e6:	900a      	str	r0, [sp, #40]	; 0x28
  4063e8:	4628      	mov	r0, r5
  4063ea:	3004      	adds	r0, #4
  4063ec:	900f      	str	r0, [sp, #60]	; 0x3c
  4063ee:	f7fe be0d 	b.w	40500c <_svfprintf_r+0xb4>
  4063f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4063f4:	b913      	cbnz	r3, 4063fc <_svfprintf_r+0x14a4>
  4063f6:	f01b 0f01 	tst.w	fp, #1
  4063fa:	d002      	beq.n	406402 <_svfprintf_r+0x14aa>
  4063fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4063fe:	3301      	adds	r3, #1
  406400:	e7cd      	b.n	40639e <_svfprintf_r+0x1446>
  406402:	2301      	movs	r3, #1
  406404:	e71c      	b.n	406240 <_svfprintf_r+0x12e8>
  406406:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40640a:	f7ff b980 	b.w	40570e <_svfprintf_r+0x7b6>
  40640e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406412:	f7ff b93a 	b.w	40568a <_svfprintf_r+0x732>
  406416:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40641a:	f7ff b84f 	b.w	4054bc <_svfprintf_r+0x564>
  40641e:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  406422:	e679      	b.n	406118 <_svfprintf_r+0x11c0>
  406424:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406428:	f7ff b9b2 	b.w	405790 <_svfprintf_r+0x838>
  40642c:	f04f 32ff 	mov.w	r2, #4294967295
  406430:	230c      	movs	r3, #12
  406432:	9209      	str	r2, [sp, #36]	; 0x24
  406434:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406436:	6013      	str	r3, [r2, #0]
  406438:	f7fe be74 	b.w	405124 <_svfprintf_r+0x1cc>
  40643c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406440:	f7ff b8c4 	b.w	4055cc <_svfprintf_r+0x674>
  406444:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406448:	f7ff b878 	b.w	40553c <_svfprintf_r+0x5e4>
  40644c:	00409478 	.word	0x00409478
  406450:	00409430 	.word	0x00409430
  406454:	0040942c 	.word	0x0040942c

00406458 <register_fini>:
  406458:	4b02      	ldr	r3, [pc, #8]	; (406464 <register_fini+0xc>)
  40645a:	b113      	cbz	r3, 406462 <register_fini+0xa>
  40645c:	4802      	ldr	r0, [pc, #8]	; (406468 <register_fini+0x10>)
  40645e:	f000 b805 	b.w	40646c <atexit>
  406462:	4770      	bx	lr
  406464:	00000000 	.word	0x00000000
  406468:	004073e5 	.word	0x004073e5

0040646c <atexit>:
  40646c:	2300      	movs	r3, #0
  40646e:	4601      	mov	r1, r0
  406470:	461a      	mov	r2, r3
  406472:	4618      	mov	r0, r3
  406474:	f002 b9d8 	b.w	408828 <__register_exitproc>

00406478 <quorem>:
  406478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40647c:	6903      	ldr	r3, [r0, #16]
  40647e:	690f      	ldr	r7, [r1, #16]
  406480:	b083      	sub	sp, #12
  406482:	429f      	cmp	r7, r3
  406484:	f300 8088 	bgt.w	406598 <quorem+0x120>
  406488:	3f01      	subs	r7, #1
  40648a:	f101 0614 	add.w	r6, r1, #20
  40648e:	f100 0a14 	add.w	sl, r0, #20
  406492:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
  406496:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  40649a:	3301      	adds	r3, #1
  40649c:	fbb2 f8f3 	udiv	r8, r2, r3
  4064a0:	00bb      	lsls	r3, r7, #2
  4064a2:	9300      	str	r3, [sp, #0]
  4064a4:	eb06 0903 	add.w	r9, r6, r3
  4064a8:	4453      	add	r3, sl
  4064aa:	9301      	str	r3, [sp, #4]
  4064ac:	f1b8 0f00 	cmp.w	r8, #0
  4064b0:	d03b      	beq.n	40652a <quorem+0xb2>
  4064b2:	2300      	movs	r3, #0
  4064b4:	46b4      	mov	ip, r6
  4064b6:	461c      	mov	r4, r3
  4064b8:	46d6      	mov	lr, sl
  4064ba:	f85c 2b04 	ldr.w	r2, [ip], #4
  4064be:	f8de 5000 	ldr.w	r5, [lr]
  4064c2:	fa1f fb82 	uxth.w	fp, r2
  4064c6:	fb08 330b 	mla	r3, r8, fp, r3
  4064ca:	0c12      	lsrs	r2, r2, #16
  4064cc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
  4064d0:	fb08 bb02 	mla	fp, r8, r2, fp
  4064d4:	b29a      	uxth	r2, r3
  4064d6:	1aa2      	subs	r2, r4, r2
  4064d8:	b2ab      	uxth	r3, r5
  4064da:	fa1f f48b 	uxth.w	r4, fp
  4064de:	441a      	add	r2, r3
  4064e0:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
  4064e4:	eb04 4422 	add.w	r4, r4, r2, asr #16
  4064e8:	b292      	uxth	r2, r2
  4064ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  4064ee:	45e1      	cmp	r9, ip
  4064f0:	f84e 2b04 	str.w	r2, [lr], #4
  4064f4:	ea4f 4424 	mov.w	r4, r4, asr #16
  4064f8:	ea4f 431b 	mov.w	r3, fp, lsr #16
  4064fc:	d2dd      	bcs.n	4064ba <quorem+0x42>
  4064fe:	9b00      	ldr	r3, [sp, #0]
  406500:	f85a 3003 	ldr.w	r3, [sl, r3]
  406504:	b98b      	cbnz	r3, 40652a <quorem+0xb2>
  406506:	9c01      	ldr	r4, [sp, #4]
  406508:	1f23      	subs	r3, r4, #4
  40650a:	459a      	cmp	sl, r3
  40650c:	d20c      	bcs.n	406528 <quorem+0xb0>
  40650e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406512:	b94b      	cbnz	r3, 406528 <quorem+0xb0>
  406514:	f1a4 0308 	sub.w	r3, r4, #8
  406518:	e002      	b.n	406520 <quorem+0xa8>
  40651a:	681a      	ldr	r2, [r3, #0]
  40651c:	3b04      	subs	r3, #4
  40651e:	b91a      	cbnz	r2, 406528 <quorem+0xb0>
  406520:	459a      	cmp	sl, r3
  406522:	f107 37ff 	add.w	r7, r7, #4294967295
  406526:	d3f8      	bcc.n	40651a <quorem+0xa2>
  406528:	6107      	str	r7, [r0, #16]
  40652a:	4604      	mov	r4, r0
  40652c:	f001 fe2c 	bl	408188 <__mcmp>
  406530:	2800      	cmp	r0, #0
  406532:	db2d      	blt.n	406590 <quorem+0x118>
  406534:	4655      	mov	r5, sl
  406536:	2300      	movs	r3, #0
  406538:	f108 0801 	add.w	r8, r8, #1
  40653c:	f856 1b04 	ldr.w	r1, [r6], #4
  406540:	6828      	ldr	r0, [r5, #0]
  406542:	b28a      	uxth	r2, r1
  406544:	1a9a      	subs	r2, r3, r2
  406546:	0c0b      	lsrs	r3, r1, #16
  406548:	b281      	uxth	r1, r0
  40654a:	440a      	add	r2, r1
  40654c:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  406550:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406554:	b292      	uxth	r2, r2
  406556:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40655a:	45b1      	cmp	r9, r6
  40655c:	f845 2b04 	str.w	r2, [r5], #4
  406560:	ea4f 4323 	mov.w	r3, r3, asr #16
  406564:	d2ea      	bcs.n	40653c <quorem+0xc4>
  406566:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  40656a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  40656e:	b97a      	cbnz	r2, 406590 <quorem+0x118>
  406570:	1f1a      	subs	r2, r3, #4
  406572:	4592      	cmp	sl, r2
  406574:	d20b      	bcs.n	40658e <quorem+0x116>
  406576:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40657a:	b942      	cbnz	r2, 40658e <quorem+0x116>
  40657c:	3b08      	subs	r3, #8
  40657e:	e002      	b.n	406586 <quorem+0x10e>
  406580:	681a      	ldr	r2, [r3, #0]
  406582:	3b04      	subs	r3, #4
  406584:	b91a      	cbnz	r2, 40658e <quorem+0x116>
  406586:	459a      	cmp	sl, r3
  406588:	f107 37ff 	add.w	r7, r7, #4294967295
  40658c:	d3f8      	bcc.n	406580 <quorem+0x108>
  40658e:	6127      	str	r7, [r4, #16]
  406590:	4640      	mov	r0, r8
  406592:	b003      	add	sp, #12
  406594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406598:	2000      	movs	r0, #0
  40659a:	b003      	add	sp, #12
  40659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004065a0 <_dtoa_r>:
  4065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4065a4:	6c05      	ldr	r5, [r0, #64]	; 0x40
  4065a6:	b09b      	sub	sp, #108	; 0x6c
  4065a8:	4604      	mov	r4, r0
  4065aa:	4692      	mov	sl, r2
  4065ac:	469b      	mov	fp, r3
  4065ae:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4065b0:	b14d      	cbz	r5, 4065c6 <_dtoa_r+0x26>
  4065b2:	2301      	movs	r3, #1
  4065b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4065b6:	4629      	mov	r1, r5
  4065b8:	4093      	lsls	r3, r2
  4065ba:	60ab      	str	r3, [r5, #8]
  4065bc:	606a      	str	r2, [r5, #4]
  4065be:	f001 fc0b 	bl	407dd8 <_Bfree>
  4065c2:	2300      	movs	r3, #0
  4065c4:	6423      	str	r3, [r4, #64]	; 0x40
  4065c6:	f1bb 0f00 	cmp.w	fp, #0
  4065ca:	465d      	mov	r5, fp
  4065cc:	db35      	blt.n	40663a <_dtoa_r+0x9a>
  4065ce:	2300      	movs	r3, #0
  4065d0:	6033      	str	r3, [r6, #0]
  4065d2:	4b9d      	ldr	r3, [pc, #628]	; (406848 <_dtoa_r+0x2a8>)
  4065d4:	43ab      	bics	r3, r5
  4065d6:	d015      	beq.n	406604 <_dtoa_r+0x64>
  4065d8:	2200      	movs	r2, #0
  4065da:	2300      	movs	r3, #0
  4065dc:	4650      	mov	r0, sl
  4065de:	4659      	mov	r1, fp
  4065e0:	f002 fc1c 	bl	408e1c <__aeabi_dcmpeq>
  4065e4:	4680      	mov	r8, r0
  4065e6:	2800      	cmp	r0, #0
  4065e8:	d02d      	beq.n	406646 <_dtoa_r+0xa6>
  4065ea:	2301      	movs	r3, #1
  4065ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4065ee:	6013      	str	r3, [r2, #0]
  4065f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4065f2:	2b00      	cmp	r3, #0
  4065f4:	f000 80bd 	beq.w	406772 <_dtoa_r+0x1d2>
  4065f8:	4894      	ldr	r0, [pc, #592]	; (40684c <_dtoa_r+0x2ac>)
  4065fa:	6018      	str	r0, [r3, #0]
  4065fc:	3801      	subs	r0, #1
  4065fe:	b01b      	add	sp, #108	; 0x6c
  406600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406604:	f242 730f 	movw	r3, #9999	; 0x270f
  406608:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40660a:	6013      	str	r3, [r2, #0]
  40660c:	f1ba 0f00 	cmp.w	sl, #0
  406610:	d10d      	bne.n	40662e <_dtoa_r+0x8e>
  406612:	f3c5 0513 	ubfx	r5, r5, #0, #20
  406616:	b955      	cbnz	r5, 40662e <_dtoa_r+0x8e>
  406618:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40661a:	488d      	ldr	r0, [pc, #564]	; (406850 <_dtoa_r+0x2b0>)
  40661c:	2b00      	cmp	r3, #0
  40661e:	d0ee      	beq.n	4065fe <_dtoa_r+0x5e>
  406620:	f100 0308 	add.w	r3, r0, #8
  406624:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  406626:	6013      	str	r3, [r2, #0]
  406628:	b01b      	add	sp, #108	; 0x6c
  40662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40662e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406630:	4888      	ldr	r0, [pc, #544]	; (406854 <_dtoa_r+0x2b4>)
  406632:	2b00      	cmp	r3, #0
  406634:	d0e3      	beq.n	4065fe <_dtoa_r+0x5e>
  406636:	1cc3      	adds	r3, r0, #3
  406638:	e7f4      	b.n	406624 <_dtoa_r+0x84>
  40663a:	2301      	movs	r3, #1
  40663c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  406640:	6033      	str	r3, [r6, #0]
  406642:	46ab      	mov	fp, r5
  406644:	e7c5      	b.n	4065d2 <_dtoa_r+0x32>
  406646:	aa18      	add	r2, sp, #96	; 0x60
  406648:	ab19      	add	r3, sp, #100	; 0x64
  40664a:	9201      	str	r2, [sp, #4]
  40664c:	9300      	str	r3, [sp, #0]
  40664e:	4652      	mov	r2, sl
  406650:	465b      	mov	r3, fp
  406652:	4620      	mov	r0, r4
  406654:	f001 fe42 	bl	4082dc <__d2b>
  406658:	0d2b      	lsrs	r3, r5, #20
  40665a:	4681      	mov	r9, r0
  40665c:	d071      	beq.n	406742 <_dtoa_r+0x1a2>
  40665e:	4650      	mov	r0, sl
  406660:	f3cb 0213 	ubfx	r2, fp, #0, #20
  406664:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  406668:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40666a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  40666e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  406672:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  406676:	2200      	movs	r2, #0
  406678:	4b77      	ldr	r3, [pc, #476]	; (406858 <_dtoa_r+0x2b8>)
  40667a:	f7fe f891 	bl	4047a0 <__aeabi_dsub>
  40667e:	a36c      	add	r3, pc, #432	; (adr r3, 406830 <_dtoa_r+0x290>)
  406680:	e9d3 2300 	ldrd	r2, r3, [r3]
  406684:	f002 f962 	bl	40894c <__aeabi_dmul>
  406688:	a36b      	add	r3, pc, #428	; (adr r3, 406838 <_dtoa_r+0x298>)
  40668a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40668e:	f7fe f889 	bl	4047a4 <__adddf3>
  406692:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406696:	4630      	mov	r0, r6
  406698:	f7fe f9d0 	bl	404a3c <__aeabi_i2d>
  40669c:	a368      	add	r3, pc, #416	; (adr r3, 406840 <_dtoa_r+0x2a0>)
  40669e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4066a2:	f002 f953 	bl	40894c <__aeabi_dmul>
  4066a6:	4602      	mov	r2, r0
  4066a8:	460b      	mov	r3, r1
  4066aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4066ae:	f7fe f879 	bl	4047a4 <__adddf3>
  4066b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4066b6:	f002 fbf9 	bl	408eac <__aeabi_d2iz>
  4066ba:	2200      	movs	r2, #0
  4066bc:	9002      	str	r0, [sp, #8]
  4066be:	2300      	movs	r3, #0
  4066c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4066c4:	f002 fbb4 	bl	408e30 <__aeabi_dcmplt>
  4066c8:	2800      	cmp	r0, #0
  4066ca:	f040 816d 	bne.w	4069a8 <_dtoa_r+0x408>
  4066ce:	9d02      	ldr	r5, [sp, #8]
  4066d0:	2d16      	cmp	r5, #22
  4066d2:	f200 8157 	bhi.w	406984 <_dtoa_r+0x3e4>
  4066d6:	4961      	ldr	r1, [pc, #388]	; (40685c <_dtoa_r+0x2bc>)
  4066d8:	4652      	mov	r2, sl
  4066da:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  4066de:	465b      	mov	r3, fp
  4066e0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4066e4:	f002 fbc2 	bl	408e6c <__aeabi_dcmpgt>
  4066e8:	2800      	cmp	r0, #0
  4066ea:	f000 81be 	beq.w	406a6a <_dtoa_r+0x4ca>
  4066ee:	1e6b      	subs	r3, r5, #1
  4066f0:	9302      	str	r3, [sp, #8]
  4066f2:	2300      	movs	r3, #0
  4066f4:	930e      	str	r3, [sp, #56]	; 0x38
  4066f6:	1bbf      	subs	r7, r7, r6
  4066f8:	1e7b      	subs	r3, r7, #1
  4066fa:	9308      	str	r3, [sp, #32]
  4066fc:	f100 814e 	bmi.w	40699c <_dtoa_r+0x3fc>
  406700:	2300      	movs	r3, #0
  406702:	930a      	str	r3, [sp, #40]	; 0x28
  406704:	9b02      	ldr	r3, [sp, #8]
  406706:	2b00      	cmp	r3, #0
  406708:	f2c0 813f 	blt.w	40698a <_dtoa_r+0x3ea>
  40670c:	9a08      	ldr	r2, [sp, #32]
  40670e:	930d      	str	r3, [sp, #52]	; 0x34
  406710:	4611      	mov	r1, r2
  406712:	4419      	add	r1, r3
  406714:	2300      	movs	r3, #0
  406716:	9108      	str	r1, [sp, #32]
  406718:	930c      	str	r3, [sp, #48]	; 0x30
  40671a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40671c:	2b09      	cmp	r3, #9
  40671e:	d82a      	bhi.n	406776 <_dtoa_r+0x1d6>
  406720:	2b05      	cmp	r3, #5
  406722:	f340 8658 	ble.w	4073d6 <_dtoa_r+0xe36>
  406726:	2500      	movs	r5, #0
  406728:	3b04      	subs	r3, #4
  40672a:	9324      	str	r3, [sp, #144]	; 0x90
  40672c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40672e:	3b02      	subs	r3, #2
  406730:	2b03      	cmp	r3, #3
  406732:	f200 863f 	bhi.w	4073b4 <_dtoa_r+0xe14>
  406736:	e8df f013 	tbh	[pc, r3, lsl #1]
  40673a:	03ce      	.short	0x03ce
  40673c:	03d902c3 	.word	0x03d902c3
  406740:	045b      	.short	0x045b
  406742:	9f18      	ldr	r7, [sp, #96]	; 0x60
  406744:	9e19      	ldr	r6, [sp, #100]	; 0x64
  406746:	443e      	add	r6, r7
  406748:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40674c:	2b20      	cmp	r3, #32
  40674e:	f340 8187 	ble.w	406a60 <_dtoa_r+0x4c0>
  406752:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  406756:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40675a:	409d      	lsls	r5, r3
  40675c:	fa2a f000 	lsr.w	r0, sl, r0
  406760:	4328      	orrs	r0, r5
  406762:	f7fe f95b 	bl	404a1c <__aeabi_ui2d>
  406766:	2301      	movs	r3, #1
  406768:	3e01      	subs	r6, #1
  40676a:	9314      	str	r3, [sp, #80]	; 0x50
  40676c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  406770:	e781      	b.n	406676 <_dtoa_r+0xd6>
  406772:	483b      	ldr	r0, [pc, #236]	; (406860 <_dtoa_r+0x2c0>)
  406774:	e743      	b.n	4065fe <_dtoa_r+0x5e>
  406776:	2100      	movs	r1, #0
  406778:	4620      	mov	r0, r4
  40677a:	6461      	str	r1, [r4, #68]	; 0x44
  40677c:	9125      	str	r1, [sp, #148]	; 0x94
  40677e:	f001 fb05 	bl	407d8c <_Balloc>
  406782:	f04f 33ff 	mov.w	r3, #4294967295
  406786:	9307      	str	r3, [sp, #28]
  406788:	930f      	str	r3, [sp, #60]	; 0x3c
  40678a:	2301      	movs	r3, #1
  40678c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40678e:	9004      	str	r0, [sp, #16]
  406790:	6420      	str	r0, [r4, #64]	; 0x40
  406792:	9224      	str	r2, [sp, #144]	; 0x90
  406794:	930b      	str	r3, [sp, #44]	; 0x2c
  406796:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406798:	2b00      	cmp	r3, #0
  40679a:	f2c0 80d3 	blt.w	406944 <_dtoa_r+0x3a4>
  40679e:	9a02      	ldr	r2, [sp, #8]
  4067a0:	2a0e      	cmp	r2, #14
  4067a2:	f300 80cf 	bgt.w	406944 <_dtoa_r+0x3a4>
  4067a6:	4b2d      	ldr	r3, [pc, #180]	; (40685c <_dtoa_r+0x2bc>)
  4067a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4067b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4067b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4067b6:	2b00      	cmp	r3, #0
  4067b8:	f2c0 83b4 	blt.w	406f24 <_dtoa_r+0x984>
  4067bc:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4067c0:	4650      	mov	r0, sl
  4067c2:	462a      	mov	r2, r5
  4067c4:	4633      	mov	r3, r6
  4067c6:	4659      	mov	r1, fp
  4067c8:	f002 f9ea 	bl	408ba0 <__aeabi_ddiv>
  4067cc:	f002 fb6e 	bl	408eac <__aeabi_d2iz>
  4067d0:	4680      	mov	r8, r0
  4067d2:	f7fe f933 	bl	404a3c <__aeabi_i2d>
  4067d6:	462a      	mov	r2, r5
  4067d8:	4633      	mov	r3, r6
  4067da:	f002 f8b7 	bl	40894c <__aeabi_dmul>
  4067de:	4602      	mov	r2, r0
  4067e0:	460b      	mov	r3, r1
  4067e2:	4650      	mov	r0, sl
  4067e4:	4659      	mov	r1, fp
  4067e6:	f7fd ffdb 	bl	4047a0 <__aeabi_dsub>
  4067ea:	9e07      	ldr	r6, [sp, #28]
  4067ec:	9f04      	ldr	r7, [sp, #16]
  4067ee:	f108 0530 	add.w	r5, r8, #48	; 0x30
  4067f2:	2e01      	cmp	r6, #1
  4067f4:	703d      	strb	r5, [r7, #0]
  4067f6:	4602      	mov	r2, r0
  4067f8:	460b      	mov	r3, r1
  4067fa:	f107 0501 	add.w	r5, r7, #1
  4067fe:	d064      	beq.n	4068ca <_dtoa_r+0x32a>
  406800:	2200      	movs	r2, #0
  406802:	4b18      	ldr	r3, [pc, #96]	; (406864 <_dtoa_r+0x2c4>)
  406804:	f002 f8a2 	bl	40894c <__aeabi_dmul>
  406808:	2200      	movs	r2, #0
  40680a:	2300      	movs	r3, #0
  40680c:	4606      	mov	r6, r0
  40680e:	460f      	mov	r7, r1
  406810:	f002 fb04 	bl	408e1c <__aeabi_dcmpeq>
  406814:	2800      	cmp	r0, #0
  406816:	f040 8082 	bne.w	40691e <_dtoa_r+0x37e>
  40681a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40681e:	f04f 0a00 	mov.w	sl, #0
  406822:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406826:	f04f 0b00 	mov.w	fp, #0
  40682a:	940b      	str	r4, [sp, #44]	; 0x2c
  40682c:	e029      	b.n	406882 <_dtoa_r+0x2e2>
  40682e:	bf00      	nop
  406830:	636f4361 	.word	0x636f4361
  406834:	3fd287a7 	.word	0x3fd287a7
  406838:	8b60c8b3 	.word	0x8b60c8b3
  40683c:	3fc68a28 	.word	0x3fc68a28
  406840:	509f79fb 	.word	0x509f79fb
  406844:	3fd34413 	.word	0x3fd34413
  406848:	7ff00000 	.word	0x7ff00000
  40684c:	00409465 	.word	0x00409465
  406850:	00409488 	.word	0x00409488
  406854:	00409494 	.word	0x00409494
  406858:	3ff80000 	.word	0x3ff80000
  40685c:	004094d0 	.word	0x004094d0
  406860:	00409464 	.word	0x00409464
  406864:	40240000 	.word	0x40240000
  406868:	2200      	movs	r2, #0
  40686a:	4b81      	ldr	r3, [pc, #516]	; (406a70 <_dtoa_r+0x4d0>)
  40686c:	f002 f86e 	bl	40894c <__aeabi_dmul>
  406870:	4652      	mov	r2, sl
  406872:	465b      	mov	r3, fp
  406874:	4606      	mov	r6, r0
  406876:	460f      	mov	r7, r1
  406878:	f002 fad0 	bl	408e1c <__aeabi_dcmpeq>
  40687c:	2800      	cmp	r0, #0
  40687e:	f040 83ba 	bne.w	406ff6 <_dtoa_r+0xa56>
  406882:	4642      	mov	r2, r8
  406884:	464b      	mov	r3, r9
  406886:	4630      	mov	r0, r6
  406888:	4639      	mov	r1, r7
  40688a:	f002 f989 	bl	408ba0 <__aeabi_ddiv>
  40688e:	f002 fb0d 	bl	408eac <__aeabi_d2iz>
  406892:	4604      	mov	r4, r0
  406894:	f7fe f8d2 	bl	404a3c <__aeabi_i2d>
  406898:	4642      	mov	r2, r8
  40689a:	464b      	mov	r3, r9
  40689c:	f002 f856 	bl	40894c <__aeabi_dmul>
  4068a0:	4602      	mov	r2, r0
  4068a2:	460b      	mov	r3, r1
  4068a4:	4630      	mov	r0, r6
  4068a6:	4639      	mov	r1, r7
  4068a8:	f7fd ff7a 	bl	4047a0 <__aeabi_dsub>
  4068ac:	f104 0630 	add.w	r6, r4, #48	; 0x30
  4068b0:	f805 6b01 	strb.w	r6, [r5], #1
  4068b4:	9e04      	ldr	r6, [sp, #16]
  4068b6:	9f07      	ldr	r7, [sp, #28]
  4068b8:	1bae      	subs	r6, r5, r6
  4068ba:	42be      	cmp	r6, r7
  4068bc:	4602      	mov	r2, r0
  4068be:	460b      	mov	r3, r1
  4068c0:	d1d2      	bne.n	406868 <_dtoa_r+0x2c8>
  4068c2:	46a0      	mov	r8, r4
  4068c4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  4068c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4068ca:	4610      	mov	r0, r2
  4068cc:	4619      	mov	r1, r3
  4068ce:	f7fd ff69 	bl	4047a4 <__adddf3>
  4068d2:	4606      	mov	r6, r0
  4068d4:	460f      	mov	r7, r1
  4068d6:	4602      	mov	r2, r0
  4068d8:	460b      	mov	r3, r1
  4068da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4068de:	f002 faa7 	bl	408e30 <__aeabi_dcmplt>
  4068e2:	b948      	cbnz	r0, 4068f8 <_dtoa_r+0x358>
  4068e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4068e8:	4632      	mov	r2, r6
  4068ea:	463b      	mov	r3, r7
  4068ec:	f002 fa96 	bl	408e1c <__aeabi_dcmpeq>
  4068f0:	b1a8      	cbz	r0, 40691e <_dtoa_r+0x37e>
  4068f2:	f018 0f01 	tst.w	r8, #1
  4068f6:	d012      	beq.n	40691e <_dtoa_r+0x37e>
  4068f8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4068fc:	1e6b      	subs	r3, r5, #1
  4068fe:	9a04      	ldr	r2, [sp, #16]
  406900:	e004      	b.n	40690c <_dtoa_r+0x36c>
  406902:	429a      	cmp	r2, r3
  406904:	f000 8402 	beq.w	40710c <_dtoa_r+0xb6c>
  406908:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40690c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  406910:	f103 0501 	add.w	r5, r3, #1
  406914:	d0f5      	beq.n	406902 <_dtoa_r+0x362>
  406916:	f108 0801 	add.w	r8, r8, #1
  40691a:	f883 8000 	strb.w	r8, [r3]
  40691e:	4649      	mov	r1, r9
  406920:	4620      	mov	r0, r4
  406922:	f001 fa59 	bl	407dd8 <_Bfree>
  406926:	2200      	movs	r2, #0
  406928:	9b02      	ldr	r3, [sp, #8]
  40692a:	702a      	strb	r2, [r5, #0]
  40692c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40692e:	3301      	adds	r3, #1
  406930:	6013      	str	r3, [r2, #0]
  406932:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406934:	2b00      	cmp	r3, #0
  406936:	f000 839f 	beq.w	407078 <_dtoa_r+0xad8>
  40693a:	9804      	ldr	r0, [sp, #16]
  40693c:	601d      	str	r5, [r3, #0]
  40693e:	b01b      	add	sp, #108	; 0x6c
  406940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406944:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406946:	2a00      	cmp	r2, #0
  406948:	d03e      	beq.n	4069c8 <_dtoa_r+0x428>
  40694a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40694c:	2a01      	cmp	r2, #1
  40694e:	f340 8311 	ble.w	406f74 <_dtoa_r+0x9d4>
  406952:	9b07      	ldr	r3, [sp, #28]
  406954:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406956:	1e5f      	subs	r7, r3, #1
  406958:	42ba      	cmp	r2, r7
  40695a:	f2c0 8390 	blt.w	40707e <_dtoa_r+0xade>
  40695e:	1bd7      	subs	r7, r2, r7
  406960:	9b07      	ldr	r3, [sp, #28]
  406962:	2b00      	cmp	r3, #0
  406964:	f2c0 848c 	blt.w	407280 <_dtoa_r+0xce0>
  406968:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40696a:	9b07      	ldr	r3, [sp, #28]
  40696c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40696e:	2101      	movs	r1, #1
  406970:	441a      	add	r2, r3
  406972:	920a      	str	r2, [sp, #40]	; 0x28
  406974:	9a08      	ldr	r2, [sp, #32]
  406976:	4620      	mov	r0, r4
  406978:	441a      	add	r2, r3
  40697a:	9208      	str	r2, [sp, #32]
  40697c:	f001 fac8 	bl	407f10 <__i2b>
  406980:	4606      	mov	r6, r0
  406982:	e023      	b.n	4069cc <_dtoa_r+0x42c>
  406984:	2301      	movs	r3, #1
  406986:	930e      	str	r3, [sp, #56]	; 0x38
  406988:	e6b5      	b.n	4066f6 <_dtoa_r+0x156>
  40698a:	2300      	movs	r3, #0
  40698c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40698e:	930d      	str	r3, [sp, #52]	; 0x34
  406990:	9b02      	ldr	r3, [sp, #8]
  406992:	1ad2      	subs	r2, r2, r3
  406994:	425b      	negs	r3, r3
  406996:	920a      	str	r2, [sp, #40]	; 0x28
  406998:	930c      	str	r3, [sp, #48]	; 0x30
  40699a:	e6be      	b.n	40671a <_dtoa_r+0x17a>
  40699c:	f1c7 0301 	rsb	r3, r7, #1
  4069a0:	930a      	str	r3, [sp, #40]	; 0x28
  4069a2:	2300      	movs	r3, #0
  4069a4:	9308      	str	r3, [sp, #32]
  4069a6:	e6ad      	b.n	406704 <_dtoa_r+0x164>
  4069a8:	9d02      	ldr	r5, [sp, #8]
  4069aa:	4628      	mov	r0, r5
  4069ac:	f7fe f846 	bl	404a3c <__aeabi_i2d>
  4069b0:	4602      	mov	r2, r0
  4069b2:	460b      	mov	r3, r1
  4069b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4069b8:	f002 fa30 	bl	408e1c <__aeabi_dcmpeq>
  4069bc:	2800      	cmp	r0, #0
  4069be:	f47f ae86 	bne.w	4066ce <_dtoa_r+0x12e>
  4069c2:	1e6b      	subs	r3, r5, #1
  4069c4:	9302      	str	r3, [sp, #8]
  4069c6:	e682      	b.n	4066ce <_dtoa_r+0x12e>
  4069c8:	ad0a      	add	r5, sp, #40	; 0x28
  4069ca:	cde0      	ldmia	r5, {r5, r6, r7}
  4069cc:	2d00      	cmp	r5, #0
  4069ce:	dd0c      	ble.n	4069ea <_dtoa_r+0x44a>
  4069d0:	9908      	ldr	r1, [sp, #32]
  4069d2:	2900      	cmp	r1, #0
  4069d4:	460b      	mov	r3, r1
  4069d6:	dd08      	ble.n	4069ea <_dtoa_r+0x44a>
  4069d8:	42a9      	cmp	r1, r5
  4069da:	bfa8      	it	ge
  4069dc:	462b      	movge	r3, r5
  4069de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4069e0:	1aed      	subs	r5, r5, r3
  4069e2:	1ad2      	subs	r2, r2, r3
  4069e4:	1acb      	subs	r3, r1, r3
  4069e6:	920a      	str	r2, [sp, #40]	; 0x28
  4069e8:	9308      	str	r3, [sp, #32]
  4069ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4069ec:	b1d3      	cbz	r3, 406a24 <_dtoa_r+0x484>
  4069ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4069f0:	2b00      	cmp	r3, #0
  4069f2:	f000 82b8 	beq.w	406f66 <_dtoa_r+0x9c6>
  4069f6:	2f00      	cmp	r7, #0
  4069f8:	dd10      	ble.n	406a1c <_dtoa_r+0x47c>
  4069fa:	4631      	mov	r1, r6
  4069fc:	463a      	mov	r2, r7
  4069fe:	4620      	mov	r0, r4
  406a00:	f001 fb22 	bl	408048 <__pow5mult>
  406a04:	464a      	mov	r2, r9
  406a06:	4601      	mov	r1, r0
  406a08:	4606      	mov	r6, r0
  406a0a:	4620      	mov	r0, r4
  406a0c:	f001 fa8a 	bl	407f24 <__multiply>
  406a10:	4603      	mov	r3, r0
  406a12:	4649      	mov	r1, r9
  406a14:	4620      	mov	r0, r4
  406a16:	4699      	mov	r9, r3
  406a18:	f001 f9de 	bl	407dd8 <_Bfree>
  406a1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406a1e:	1bda      	subs	r2, r3, r7
  406a20:	f040 82a2 	bne.w	406f68 <_dtoa_r+0x9c8>
  406a24:	2101      	movs	r1, #1
  406a26:	4620      	mov	r0, r4
  406a28:	f001 fa72 	bl	407f10 <__i2b>
  406a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406a2e:	4680      	mov	r8, r0
  406a30:	2b00      	cmp	r3, #0
  406a32:	dd1f      	ble.n	406a74 <_dtoa_r+0x4d4>
  406a34:	4601      	mov	r1, r0
  406a36:	461a      	mov	r2, r3
  406a38:	4620      	mov	r0, r4
  406a3a:	f001 fb05 	bl	408048 <__pow5mult>
  406a3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406a40:	4680      	mov	r8, r0
  406a42:	2b01      	cmp	r3, #1
  406a44:	f340 8255 	ble.w	406ef2 <_dtoa_r+0x952>
  406a48:	2300      	movs	r3, #0
  406a4a:	930c      	str	r3, [sp, #48]	; 0x30
  406a4c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406a50:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  406a54:	6918      	ldr	r0, [r3, #16]
  406a56:	f001 fa0b 	bl	407e70 <__hi0bits>
  406a5a:	f1c0 0020 	rsb	r0, r0, #32
  406a5e:	e013      	b.n	406a88 <_dtoa_r+0x4e8>
  406a60:	f1c3 0520 	rsb	r5, r3, #32
  406a64:	fa0a f005 	lsl.w	r0, sl, r5
  406a68:	e67b      	b.n	406762 <_dtoa_r+0x1c2>
  406a6a:	900e      	str	r0, [sp, #56]	; 0x38
  406a6c:	e643      	b.n	4066f6 <_dtoa_r+0x156>
  406a6e:	bf00      	nop
  406a70:	40240000 	.word	0x40240000
  406a74:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406a76:	2b01      	cmp	r3, #1
  406a78:	f340 8285 	ble.w	406f86 <_dtoa_r+0x9e6>
  406a7c:	2300      	movs	r3, #0
  406a7e:	930c      	str	r3, [sp, #48]	; 0x30
  406a80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406a82:	2001      	movs	r0, #1
  406a84:	2b00      	cmp	r3, #0
  406a86:	d1e1      	bne.n	406a4c <_dtoa_r+0x4ac>
  406a88:	9a08      	ldr	r2, [sp, #32]
  406a8a:	4410      	add	r0, r2
  406a8c:	f010 001f 	ands.w	r0, r0, #31
  406a90:	f000 80a1 	beq.w	406bd6 <_dtoa_r+0x636>
  406a94:	f1c0 0320 	rsb	r3, r0, #32
  406a98:	2b04      	cmp	r3, #4
  406a9a:	f340 8486 	ble.w	4073aa <_dtoa_r+0xe0a>
  406a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406aa0:	f1c0 001c 	rsb	r0, r0, #28
  406aa4:	4403      	add	r3, r0
  406aa6:	930a      	str	r3, [sp, #40]	; 0x28
  406aa8:	4613      	mov	r3, r2
  406aaa:	4403      	add	r3, r0
  406aac:	4405      	add	r5, r0
  406aae:	9308      	str	r3, [sp, #32]
  406ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406ab2:	2b00      	cmp	r3, #0
  406ab4:	dd05      	ble.n	406ac2 <_dtoa_r+0x522>
  406ab6:	4649      	mov	r1, r9
  406ab8:	461a      	mov	r2, r3
  406aba:	4620      	mov	r0, r4
  406abc:	f001 fb14 	bl	4080e8 <__lshift>
  406ac0:	4681      	mov	r9, r0
  406ac2:	9b08      	ldr	r3, [sp, #32]
  406ac4:	2b00      	cmp	r3, #0
  406ac6:	dd05      	ble.n	406ad4 <_dtoa_r+0x534>
  406ac8:	4641      	mov	r1, r8
  406aca:	461a      	mov	r2, r3
  406acc:	4620      	mov	r0, r4
  406ace:	f001 fb0b 	bl	4080e8 <__lshift>
  406ad2:	4680      	mov	r8, r0
  406ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406ad6:	2b00      	cmp	r3, #0
  406ad8:	f040 8086 	bne.w	406be8 <_dtoa_r+0x648>
  406adc:	9b07      	ldr	r3, [sp, #28]
  406ade:	2b00      	cmp	r3, #0
  406ae0:	f340 8264 	ble.w	406fac <_dtoa_r+0xa0c>
  406ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406ae6:	2b00      	cmp	r3, #0
  406ae8:	f000 8098 	beq.w	406c1c <_dtoa_r+0x67c>
  406aec:	2d00      	cmp	r5, #0
  406aee:	dd05      	ble.n	406afc <_dtoa_r+0x55c>
  406af0:	4631      	mov	r1, r6
  406af2:	462a      	mov	r2, r5
  406af4:	4620      	mov	r0, r4
  406af6:	f001 faf7 	bl	4080e8 <__lshift>
  406afa:	4606      	mov	r6, r0
  406afc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406afe:	2b00      	cmp	r3, #0
  406b00:	f040 8336 	bne.w	407170 <_dtoa_r+0xbd0>
  406b04:	9608      	str	r6, [sp, #32]
  406b06:	9b07      	ldr	r3, [sp, #28]
  406b08:	9a04      	ldr	r2, [sp, #16]
  406b0a:	3b01      	subs	r3, #1
  406b0c:	18d3      	adds	r3, r2, r3
  406b0e:	930b      	str	r3, [sp, #44]	; 0x2c
  406b10:	4617      	mov	r7, r2
  406b12:	f00a 0301 	and.w	r3, sl, #1
  406b16:	46c2      	mov	sl, r8
  406b18:	f8dd b020 	ldr.w	fp, [sp, #32]
  406b1c:	930c      	str	r3, [sp, #48]	; 0x30
  406b1e:	4651      	mov	r1, sl
  406b20:	4648      	mov	r0, r9
  406b22:	f7ff fca9 	bl	406478 <quorem>
  406b26:	4631      	mov	r1, r6
  406b28:	4605      	mov	r5, r0
  406b2a:	4648      	mov	r0, r9
  406b2c:	f001 fb2c 	bl	408188 <__mcmp>
  406b30:	465a      	mov	r2, fp
  406b32:	9007      	str	r0, [sp, #28]
  406b34:	4651      	mov	r1, sl
  406b36:	4620      	mov	r0, r4
  406b38:	f001 fb42 	bl	4081c0 <__mdiff>
  406b3c:	68c2      	ldr	r2, [r0, #12]
  406b3e:	4680      	mov	r8, r0
  406b40:	f105 0330 	add.w	r3, r5, #48	; 0x30
  406b44:	2a00      	cmp	r2, #0
  406b46:	f040 8229 	bne.w	406f9c <_dtoa_r+0x9fc>
  406b4a:	4601      	mov	r1, r0
  406b4c:	4648      	mov	r0, r9
  406b4e:	930a      	str	r3, [sp, #40]	; 0x28
  406b50:	f001 fb1a 	bl	408188 <__mcmp>
  406b54:	4641      	mov	r1, r8
  406b56:	9008      	str	r0, [sp, #32]
  406b58:	4620      	mov	r0, r4
  406b5a:	f001 f93d 	bl	407dd8 <_Bfree>
  406b5e:	9a08      	ldr	r2, [sp, #32]
  406b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406b62:	b932      	cbnz	r2, 406b72 <_dtoa_r+0x5d2>
  406b64:	9924      	ldr	r1, [sp, #144]	; 0x90
  406b66:	b921      	cbnz	r1, 406b72 <_dtoa_r+0x5d2>
  406b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406b6a:	2a00      	cmp	r2, #0
  406b6c:	f000 83ee 	beq.w	40734c <_dtoa_r+0xdac>
  406b70:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406b72:	9907      	ldr	r1, [sp, #28]
  406b74:	2900      	cmp	r1, #0
  406b76:	f2c0 829f 	blt.w	4070b8 <_dtoa_r+0xb18>
  406b7a:	d105      	bne.n	406b88 <_dtoa_r+0x5e8>
  406b7c:	9924      	ldr	r1, [sp, #144]	; 0x90
  406b7e:	b919      	cbnz	r1, 406b88 <_dtoa_r+0x5e8>
  406b80:	990c      	ldr	r1, [sp, #48]	; 0x30
  406b82:	2900      	cmp	r1, #0
  406b84:	f000 8298 	beq.w	4070b8 <_dtoa_r+0xb18>
  406b88:	2a00      	cmp	r2, #0
  406b8a:	f300 8305 	bgt.w	407198 <_dtoa_r+0xbf8>
  406b8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406b90:	f107 0801 	add.w	r8, r7, #1
  406b94:	4297      	cmp	r7, r2
  406b96:	703b      	strb	r3, [r7, #0]
  406b98:	4645      	mov	r5, r8
  406b9a:	f000 830b 	beq.w	4071b4 <_dtoa_r+0xc14>
  406b9e:	4649      	mov	r1, r9
  406ba0:	2300      	movs	r3, #0
  406ba2:	220a      	movs	r2, #10
  406ba4:	4620      	mov	r0, r4
  406ba6:	f001 f921 	bl	407dec <__multadd>
  406baa:	455e      	cmp	r6, fp
  406bac:	4681      	mov	r9, r0
  406bae:	4631      	mov	r1, r6
  406bb0:	f04f 0300 	mov.w	r3, #0
  406bb4:	f04f 020a 	mov.w	r2, #10
  406bb8:	4620      	mov	r0, r4
  406bba:	f000 81e9 	beq.w	406f90 <_dtoa_r+0x9f0>
  406bbe:	f001 f915 	bl	407dec <__multadd>
  406bc2:	4659      	mov	r1, fp
  406bc4:	4606      	mov	r6, r0
  406bc6:	2300      	movs	r3, #0
  406bc8:	220a      	movs	r2, #10
  406bca:	4620      	mov	r0, r4
  406bcc:	f001 f90e 	bl	407dec <__multadd>
  406bd0:	4647      	mov	r7, r8
  406bd2:	4683      	mov	fp, r0
  406bd4:	e7a3      	b.n	406b1e <_dtoa_r+0x57e>
  406bd6:	201c      	movs	r0, #28
  406bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406bda:	4405      	add	r5, r0
  406bdc:	4403      	add	r3, r0
  406bde:	930a      	str	r3, [sp, #40]	; 0x28
  406be0:	9b08      	ldr	r3, [sp, #32]
  406be2:	4403      	add	r3, r0
  406be4:	9308      	str	r3, [sp, #32]
  406be6:	e763      	b.n	406ab0 <_dtoa_r+0x510>
  406be8:	4641      	mov	r1, r8
  406bea:	4648      	mov	r0, r9
  406bec:	f001 facc 	bl	408188 <__mcmp>
  406bf0:	2800      	cmp	r0, #0
  406bf2:	f6bf af73 	bge.w	406adc <_dtoa_r+0x53c>
  406bf6:	9f02      	ldr	r7, [sp, #8]
  406bf8:	4649      	mov	r1, r9
  406bfa:	2300      	movs	r3, #0
  406bfc:	220a      	movs	r2, #10
  406bfe:	4620      	mov	r0, r4
  406c00:	3f01      	subs	r7, #1
  406c02:	9702      	str	r7, [sp, #8]
  406c04:	f001 f8f2 	bl	407dec <__multadd>
  406c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406c0a:	4681      	mov	r9, r0
  406c0c:	2b00      	cmp	r3, #0
  406c0e:	f040 83b5 	bne.w	40737c <_dtoa_r+0xddc>
  406c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406c14:	2b00      	cmp	r3, #0
  406c16:	f340 83be 	ble.w	407396 <_dtoa_r+0xdf6>
  406c1a:	9307      	str	r3, [sp, #28]
  406c1c:	f8dd a010 	ldr.w	sl, [sp, #16]
  406c20:	9f07      	ldr	r7, [sp, #28]
  406c22:	4655      	mov	r5, sl
  406c24:	e006      	b.n	406c34 <_dtoa_r+0x694>
  406c26:	4649      	mov	r1, r9
  406c28:	2300      	movs	r3, #0
  406c2a:	220a      	movs	r2, #10
  406c2c:	4620      	mov	r0, r4
  406c2e:	f001 f8dd 	bl	407dec <__multadd>
  406c32:	4681      	mov	r9, r0
  406c34:	4641      	mov	r1, r8
  406c36:	4648      	mov	r0, r9
  406c38:	f7ff fc1e 	bl	406478 <quorem>
  406c3c:	3030      	adds	r0, #48	; 0x30
  406c3e:	f805 0b01 	strb.w	r0, [r5], #1
  406c42:	eba5 030a 	sub.w	r3, r5, sl
  406c46:	42bb      	cmp	r3, r7
  406c48:	dbed      	blt.n	406c26 <_dtoa_r+0x686>
  406c4a:	9b04      	ldr	r3, [sp, #16]
  406c4c:	9a07      	ldr	r2, [sp, #28]
  406c4e:	4682      	mov	sl, r0
  406c50:	2a01      	cmp	r2, #1
  406c52:	bfac      	ite	ge
  406c54:	189b      	addge	r3, r3, r2
  406c56:	3301      	addlt	r3, #1
  406c58:	f04f 0b00 	mov.w	fp, #0
  406c5c:	461d      	mov	r5, r3
  406c5e:	4649      	mov	r1, r9
  406c60:	2201      	movs	r2, #1
  406c62:	4620      	mov	r0, r4
  406c64:	f001 fa40 	bl	4080e8 <__lshift>
  406c68:	4641      	mov	r1, r8
  406c6a:	4681      	mov	r9, r0
  406c6c:	f001 fa8c 	bl	408188 <__mcmp>
  406c70:	2800      	cmp	r0, #0
  406c72:	f340 823f 	ble.w	4070f4 <_dtoa_r+0xb54>
  406c76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406c7a:	1e6b      	subs	r3, r5, #1
  406c7c:	9904      	ldr	r1, [sp, #16]
  406c7e:	e004      	b.n	406c8a <_dtoa_r+0x6ea>
  406c80:	428b      	cmp	r3, r1
  406c82:	f000 81ae 	beq.w	406fe2 <_dtoa_r+0xa42>
  406c86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406c8a:	2a39      	cmp	r2, #57	; 0x39
  406c8c:	f103 0501 	add.w	r5, r3, #1
  406c90:	d0f6      	beq.n	406c80 <_dtoa_r+0x6e0>
  406c92:	3201      	adds	r2, #1
  406c94:	701a      	strb	r2, [r3, #0]
  406c96:	4641      	mov	r1, r8
  406c98:	4620      	mov	r0, r4
  406c9a:	f001 f89d 	bl	407dd8 <_Bfree>
  406c9e:	2e00      	cmp	r6, #0
  406ca0:	f43f ae3d 	beq.w	40691e <_dtoa_r+0x37e>
  406ca4:	f1bb 0f00 	cmp.w	fp, #0
  406ca8:	d005      	beq.n	406cb6 <_dtoa_r+0x716>
  406caa:	45b3      	cmp	fp, r6
  406cac:	d003      	beq.n	406cb6 <_dtoa_r+0x716>
  406cae:	4659      	mov	r1, fp
  406cb0:	4620      	mov	r0, r4
  406cb2:	f001 f891 	bl	407dd8 <_Bfree>
  406cb6:	4631      	mov	r1, r6
  406cb8:	4620      	mov	r0, r4
  406cba:	f001 f88d 	bl	407dd8 <_Bfree>
  406cbe:	e62e      	b.n	40691e <_dtoa_r+0x37e>
  406cc0:	2300      	movs	r3, #0
  406cc2:	930b      	str	r3, [sp, #44]	; 0x2c
  406cc4:	9b02      	ldr	r3, [sp, #8]
  406cc6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406cc8:	4413      	add	r3, r2
  406cca:	930f      	str	r3, [sp, #60]	; 0x3c
  406ccc:	3301      	adds	r3, #1
  406cce:	2b01      	cmp	r3, #1
  406cd0:	461f      	mov	r7, r3
  406cd2:	461e      	mov	r6, r3
  406cd4:	bfb8      	it	lt
  406cd6:	2701      	movlt	r7, #1
  406cd8:	9307      	str	r3, [sp, #28]
  406cda:	2100      	movs	r1, #0
  406cdc:	2f17      	cmp	r7, #23
  406cde:	6461      	str	r1, [r4, #68]	; 0x44
  406ce0:	d90a      	bls.n	406cf8 <_dtoa_r+0x758>
  406ce2:	2201      	movs	r2, #1
  406ce4:	2304      	movs	r3, #4
  406ce6:	005b      	lsls	r3, r3, #1
  406ce8:	f103 0014 	add.w	r0, r3, #20
  406cec:	4287      	cmp	r7, r0
  406cee:	4611      	mov	r1, r2
  406cf0:	f102 0201 	add.w	r2, r2, #1
  406cf4:	d2f7      	bcs.n	406ce6 <_dtoa_r+0x746>
  406cf6:	6461      	str	r1, [r4, #68]	; 0x44
  406cf8:	4620      	mov	r0, r4
  406cfa:	f001 f847 	bl	407d8c <_Balloc>
  406cfe:	2e0e      	cmp	r6, #14
  406d00:	9004      	str	r0, [sp, #16]
  406d02:	6420      	str	r0, [r4, #64]	; 0x40
  406d04:	f63f ad47 	bhi.w	406796 <_dtoa_r+0x1f6>
  406d08:	2d00      	cmp	r5, #0
  406d0a:	f43f ad44 	beq.w	406796 <_dtoa_r+0x1f6>
  406d0e:	9902      	ldr	r1, [sp, #8]
  406d10:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  406d14:	2900      	cmp	r1, #0
  406d16:	f340 8203 	ble.w	407120 <_dtoa_r+0xb80>
  406d1a:	4bb9      	ldr	r3, [pc, #740]	; (407000 <_dtoa_r+0xa60>)
  406d1c:	f001 020f 	and.w	r2, r1, #15
  406d20:	110d      	asrs	r5, r1, #4
  406d22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406d26:	06e9      	lsls	r1, r5, #27
  406d28:	e9d3 6700 	ldrd	r6, r7, [r3]
  406d2c:	f140 81af 	bpl.w	40708e <_dtoa_r+0xaee>
  406d30:	4bb4      	ldr	r3, [pc, #720]	; (407004 <_dtoa_r+0xa64>)
  406d32:	4650      	mov	r0, sl
  406d34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406d38:	4659      	mov	r1, fp
  406d3a:	f001 ff31 	bl	408ba0 <__aeabi_ddiv>
  406d3e:	f04f 0a03 	mov.w	sl, #3
  406d42:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  406d46:	f005 050f 	and.w	r5, r5, #15
  406d4a:	b18d      	cbz	r5, 406d70 <_dtoa_r+0x7d0>
  406d4c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 407004 <_dtoa_r+0xa64>
  406d50:	07ea      	lsls	r2, r5, #31
  406d52:	d509      	bpl.n	406d68 <_dtoa_r+0x7c8>
  406d54:	e9d8 2300 	ldrd	r2, r3, [r8]
  406d58:	4630      	mov	r0, r6
  406d5a:	4639      	mov	r1, r7
  406d5c:	f001 fdf6 	bl	40894c <__aeabi_dmul>
  406d60:	4606      	mov	r6, r0
  406d62:	460f      	mov	r7, r1
  406d64:	f10a 0a01 	add.w	sl, sl, #1
  406d68:	106d      	asrs	r5, r5, #1
  406d6a:	f108 0808 	add.w	r8, r8, #8
  406d6e:	d1ef      	bne.n	406d50 <_dtoa_r+0x7b0>
  406d70:	463b      	mov	r3, r7
  406d72:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406d76:	4632      	mov	r2, r6
  406d78:	f001 ff12 	bl	408ba0 <__aeabi_ddiv>
  406d7c:	4607      	mov	r7, r0
  406d7e:	4688      	mov	r8, r1
  406d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406d82:	b143      	cbz	r3, 406d96 <_dtoa_r+0x7f6>
  406d84:	2200      	movs	r2, #0
  406d86:	4ba0      	ldr	r3, [pc, #640]	; (407008 <_dtoa_r+0xa68>)
  406d88:	4638      	mov	r0, r7
  406d8a:	4641      	mov	r1, r8
  406d8c:	f002 f850 	bl	408e30 <__aeabi_dcmplt>
  406d90:	2800      	cmp	r0, #0
  406d92:	f040 8287 	bne.w	4072a4 <_dtoa_r+0xd04>
  406d96:	4650      	mov	r0, sl
  406d98:	f7fd fe50 	bl	404a3c <__aeabi_i2d>
  406d9c:	463a      	mov	r2, r7
  406d9e:	4643      	mov	r3, r8
  406da0:	f001 fdd4 	bl	40894c <__aeabi_dmul>
  406da4:	4b99      	ldr	r3, [pc, #612]	; (40700c <_dtoa_r+0xa6c>)
  406da6:	2200      	movs	r2, #0
  406da8:	f7fd fcfc 	bl	4047a4 <__adddf3>
  406dac:	9b07      	ldr	r3, [sp, #28]
  406dae:	4605      	mov	r5, r0
  406db0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406db4:	2b00      	cmp	r3, #0
  406db6:	f000 813f 	beq.w	407038 <_dtoa_r+0xa98>
  406dba:	9b02      	ldr	r3, [sp, #8]
  406dbc:	9315      	str	r3, [sp, #84]	; 0x54
  406dbe:	9b07      	ldr	r3, [sp, #28]
  406dc0:	9312      	str	r3, [sp, #72]	; 0x48
  406dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406dc4:	2b00      	cmp	r3, #0
  406dc6:	f000 81fb 	beq.w	4071c0 <_dtoa_r+0xc20>
  406dca:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406dcc:	4b8c      	ldr	r3, [pc, #560]	; (407000 <_dtoa_r+0xa60>)
  406dce:	2000      	movs	r0, #0
  406dd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406dd4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  406dd8:	498d      	ldr	r1, [pc, #564]	; (407010 <_dtoa_r+0xa70>)
  406dda:	f001 fee1 	bl	408ba0 <__aeabi_ddiv>
  406dde:	462a      	mov	r2, r5
  406de0:	4633      	mov	r3, r6
  406de2:	f7fd fcdd 	bl	4047a0 <__aeabi_dsub>
  406de6:	4682      	mov	sl, r0
  406de8:	468b      	mov	fp, r1
  406dea:	4638      	mov	r0, r7
  406dec:	4641      	mov	r1, r8
  406dee:	f002 f85d 	bl	408eac <__aeabi_d2iz>
  406df2:	4605      	mov	r5, r0
  406df4:	f7fd fe22 	bl	404a3c <__aeabi_i2d>
  406df8:	4602      	mov	r2, r0
  406dfa:	460b      	mov	r3, r1
  406dfc:	4638      	mov	r0, r7
  406dfe:	4641      	mov	r1, r8
  406e00:	f7fd fcce 	bl	4047a0 <__aeabi_dsub>
  406e04:	3530      	adds	r5, #48	; 0x30
  406e06:	fa5f f885 	uxtb.w	r8, r5
  406e0a:	9d04      	ldr	r5, [sp, #16]
  406e0c:	4606      	mov	r6, r0
  406e0e:	460f      	mov	r7, r1
  406e10:	f885 8000 	strb.w	r8, [r5]
  406e14:	4602      	mov	r2, r0
  406e16:	460b      	mov	r3, r1
  406e18:	4650      	mov	r0, sl
  406e1a:	4659      	mov	r1, fp
  406e1c:	3501      	adds	r5, #1
  406e1e:	f002 f825 	bl	408e6c <__aeabi_dcmpgt>
  406e22:	2800      	cmp	r0, #0
  406e24:	d154      	bne.n	406ed0 <_dtoa_r+0x930>
  406e26:	4632      	mov	r2, r6
  406e28:	463b      	mov	r3, r7
  406e2a:	2000      	movs	r0, #0
  406e2c:	4976      	ldr	r1, [pc, #472]	; (407008 <_dtoa_r+0xa68>)
  406e2e:	f7fd fcb7 	bl	4047a0 <__aeabi_dsub>
  406e32:	4602      	mov	r2, r0
  406e34:	460b      	mov	r3, r1
  406e36:	4650      	mov	r0, sl
  406e38:	4659      	mov	r1, fp
  406e3a:	f002 f817 	bl	408e6c <__aeabi_dcmpgt>
  406e3e:	2800      	cmp	r0, #0
  406e40:	f040 8270 	bne.w	407324 <_dtoa_r+0xd84>
  406e44:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406e46:	2a01      	cmp	r2, #1
  406e48:	f000 8112 	beq.w	407070 <_dtoa_r+0xad0>
  406e4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406e4e:	9a04      	ldr	r2, [sp, #16]
  406e50:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406e54:	4413      	add	r3, r2
  406e56:	4699      	mov	r9, r3
  406e58:	e00f      	b.n	406e7a <_dtoa_r+0x8da>
  406e5a:	4632      	mov	r2, r6
  406e5c:	463b      	mov	r3, r7
  406e5e:	2000      	movs	r0, #0
  406e60:	4969      	ldr	r1, [pc, #420]	; (407008 <_dtoa_r+0xa68>)
  406e62:	f7fd fc9d 	bl	4047a0 <__aeabi_dsub>
  406e66:	4652      	mov	r2, sl
  406e68:	465b      	mov	r3, fp
  406e6a:	f001 ffe1 	bl	408e30 <__aeabi_dcmplt>
  406e6e:	2800      	cmp	r0, #0
  406e70:	f040 8256 	bne.w	407320 <_dtoa_r+0xd80>
  406e74:	454d      	cmp	r5, r9
  406e76:	f000 80f9 	beq.w	40706c <_dtoa_r+0xacc>
  406e7a:	4650      	mov	r0, sl
  406e7c:	4659      	mov	r1, fp
  406e7e:	2200      	movs	r2, #0
  406e80:	4b64      	ldr	r3, [pc, #400]	; (407014 <_dtoa_r+0xa74>)
  406e82:	f001 fd63 	bl	40894c <__aeabi_dmul>
  406e86:	2200      	movs	r2, #0
  406e88:	4b62      	ldr	r3, [pc, #392]	; (407014 <_dtoa_r+0xa74>)
  406e8a:	4682      	mov	sl, r0
  406e8c:	468b      	mov	fp, r1
  406e8e:	4630      	mov	r0, r6
  406e90:	4639      	mov	r1, r7
  406e92:	f001 fd5b 	bl	40894c <__aeabi_dmul>
  406e96:	460f      	mov	r7, r1
  406e98:	4606      	mov	r6, r0
  406e9a:	f002 f807 	bl	408eac <__aeabi_d2iz>
  406e9e:	4680      	mov	r8, r0
  406ea0:	f7fd fdcc 	bl	404a3c <__aeabi_i2d>
  406ea4:	4602      	mov	r2, r0
  406ea6:	460b      	mov	r3, r1
  406ea8:	4630      	mov	r0, r6
  406eaa:	4639      	mov	r1, r7
  406eac:	f7fd fc78 	bl	4047a0 <__aeabi_dsub>
  406eb0:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406eb4:	fa5f f888 	uxtb.w	r8, r8
  406eb8:	f805 8b01 	strb.w	r8, [r5], #1
  406ebc:	4652      	mov	r2, sl
  406ebe:	465b      	mov	r3, fp
  406ec0:	4606      	mov	r6, r0
  406ec2:	460f      	mov	r7, r1
  406ec4:	f001 ffb4 	bl	408e30 <__aeabi_dcmplt>
  406ec8:	2800      	cmp	r0, #0
  406eca:	d0c6      	beq.n	406e5a <_dtoa_r+0x8ba>
  406ecc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406ed0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406ed2:	9302      	str	r3, [sp, #8]
  406ed4:	e523      	b.n	40691e <_dtoa_r+0x37e>
  406ed6:	2300      	movs	r3, #0
  406ed8:	930b      	str	r3, [sp, #44]	; 0x2c
  406eda:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406edc:	2b00      	cmp	r3, #0
  406ede:	f340 80dd 	ble.w	40709c <_dtoa_r+0xafc>
  406ee2:	461f      	mov	r7, r3
  406ee4:	461e      	mov	r6, r3
  406ee6:	930f      	str	r3, [sp, #60]	; 0x3c
  406ee8:	9307      	str	r3, [sp, #28]
  406eea:	e6f6      	b.n	406cda <_dtoa_r+0x73a>
  406eec:	2301      	movs	r3, #1
  406eee:	930b      	str	r3, [sp, #44]	; 0x2c
  406ef0:	e7f3      	b.n	406eda <_dtoa_r+0x93a>
  406ef2:	f1ba 0f00 	cmp.w	sl, #0
  406ef6:	f47f ada7 	bne.w	406a48 <_dtoa_r+0x4a8>
  406efa:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406efe:	2b00      	cmp	r3, #0
  406f00:	f47f adbc 	bne.w	406a7c <_dtoa_r+0x4dc>
  406f04:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406f08:	0d3f      	lsrs	r7, r7, #20
  406f0a:	053f      	lsls	r7, r7, #20
  406f0c:	2f00      	cmp	r7, #0
  406f0e:	f000 820d 	beq.w	40732c <_dtoa_r+0xd8c>
  406f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406f14:	3301      	adds	r3, #1
  406f16:	930a      	str	r3, [sp, #40]	; 0x28
  406f18:	9b08      	ldr	r3, [sp, #32]
  406f1a:	3301      	adds	r3, #1
  406f1c:	9308      	str	r3, [sp, #32]
  406f1e:	2301      	movs	r3, #1
  406f20:	930c      	str	r3, [sp, #48]	; 0x30
  406f22:	e5ad      	b.n	406a80 <_dtoa_r+0x4e0>
  406f24:	9b07      	ldr	r3, [sp, #28]
  406f26:	2b00      	cmp	r3, #0
  406f28:	f73f ac48 	bgt.w	4067bc <_dtoa_r+0x21c>
  406f2c:	f040 8222 	bne.w	407374 <_dtoa_r+0xdd4>
  406f30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406f34:	2200      	movs	r2, #0
  406f36:	4b38      	ldr	r3, [pc, #224]	; (407018 <_dtoa_r+0xa78>)
  406f38:	f001 fd08 	bl	40894c <__aeabi_dmul>
  406f3c:	4652      	mov	r2, sl
  406f3e:	465b      	mov	r3, fp
  406f40:	f001 ff8a 	bl	408e58 <__aeabi_dcmpge>
  406f44:	f8dd 801c 	ldr.w	r8, [sp, #28]
  406f48:	4646      	mov	r6, r8
  406f4a:	2800      	cmp	r0, #0
  406f4c:	d041      	beq.n	406fd2 <_dtoa_r+0xa32>
  406f4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406f50:	9d04      	ldr	r5, [sp, #16]
  406f52:	43db      	mvns	r3, r3
  406f54:	9302      	str	r3, [sp, #8]
  406f56:	4641      	mov	r1, r8
  406f58:	4620      	mov	r0, r4
  406f5a:	f000 ff3d 	bl	407dd8 <_Bfree>
  406f5e:	2e00      	cmp	r6, #0
  406f60:	f43f acdd 	beq.w	40691e <_dtoa_r+0x37e>
  406f64:	e6a7      	b.n	406cb6 <_dtoa_r+0x716>
  406f66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406f68:	4649      	mov	r1, r9
  406f6a:	4620      	mov	r0, r4
  406f6c:	f001 f86c 	bl	408048 <__pow5mult>
  406f70:	4681      	mov	r9, r0
  406f72:	e557      	b.n	406a24 <_dtoa_r+0x484>
  406f74:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406f76:	2a00      	cmp	r2, #0
  406f78:	f000 8188 	beq.w	40728c <_dtoa_r+0xcec>
  406f7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406f80:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406f82:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406f84:	e4f2      	b.n	40696c <_dtoa_r+0x3cc>
  406f86:	f1ba 0f00 	cmp.w	sl, #0
  406f8a:	f47f ad77 	bne.w	406a7c <_dtoa_r+0x4dc>
  406f8e:	e7b4      	b.n	406efa <_dtoa_r+0x95a>
  406f90:	f000 ff2c 	bl	407dec <__multadd>
  406f94:	4647      	mov	r7, r8
  406f96:	4606      	mov	r6, r0
  406f98:	4683      	mov	fp, r0
  406f9a:	e5c0      	b.n	406b1e <_dtoa_r+0x57e>
  406f9c:	4601      	mov	r1, r0
  406f9e:	4620      	mov	r0, r4
  406fa0:	9308      	str	r3, [sp, #32]
  406fa2:	f000 ff19 	bl	407dd8 <_Bfree>
  406fa6:	2201      	movs	r2, #1
  406fa8:	9b08      	ldr	r3, [sp, #32]
  406faa:	e5e2      	b.n	406b72 <_dtoa_r+0x5d2>
  406fac:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406fae:	2b02      	cmp	r3, #2
  406fb0:	f77f ad98 	ble.w	406ae4 <_dtoa_r+0x544>
  406fb4:	9b07      	ldr	r3, [sp, #28]
  406fb6:	2b00      	cmp	r3, #0
  406fb8:	d1c9      	bne.n	406f4e <_dtoa_r+0x9ae>
  406fba:	4641      	mov	r1, r8
  406fbc:	2205      	movs	r2, #5
  406fbe:	4620      	mov	r0, r4
  406fc0:	f000 ff14 	bl	407dec <__multadd>
  406fc4:	4601      	mov	r1, r0
  406fc6:	4680      	mov	r8, r0
  406fc8:	4648      	mov	r0, r9
  406fca:	f001 f8dd 	bl	408188 <__mcmp>
  406fce:	2800      	cmp	r0, #0
  406fd0:	ddbd      	ble.n	406f4e <_dtoa_r+0x9ae>
  406fd2:	2331      	movs	r3, #49	; 0x31
  406fd4:	9a02      	ldr	r2, [sp, #8]
  406fd6:	9904      	ldr	r1, [sp, #16]
  406fd8:	3201      	adds	r2, #1
  406fda:	9202      	str	r2, [sp, #8]
  406fdc:	700b      	strb	r3, [r1, #0]
  406fde:	1c4d      	adds	r5, r1, #1
  406fe0:	e7b9      	b.n	406f56 <_dtoa_r+0x9b6>
  406fe2:	2331      	movs	r3, #49	; 0x31
  406fe4:	9a02      	ldr	r2, [sp, #8]
  406fe6:	3201      	adds	r2, #1
  406fe8:	9202      	str	r2, [sp, #8]
  406fea:	9a04      	ldr	r2, [sp, #16]
  406fec:	7013      	strb	r3, [r2, #0]
  406fee:	e652      	b.n	406c96 <_dtoa_r+0x6f6>
  406ff0:	2301      	movs	r3, #1
  406ff2:	930b      	str	r3, [sp, #44]	; 0x2c
  406ff4:	e666      	b.n	406cc4 <_dtoa_r+0x724>
  406ff6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  406ffa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  406ffc:	e48f      	b.n	40691e <_dtoa_r+0x37e>
  406ffe:	bf00      	nop
  407000:	004094d0 	.word	0x004094d0
  407004:	004094a8 	.word	0x004094a8
  407008:	3ff00000 	.word	0x3ff00000
  40700c:	401c0000 	.word	0x401c0000
  407010:	3fe00000 	.word	0x3fe00000
  407014:	40240000 	.word	0x40240000
  407018:	40140000 	.word	0x40140000
  40701c:	4650      	mov	r0, sl
  40701e:	f7fd fd0d 	bl	404a3c <__aeabi_i2d>
  407022:	463a      	mov	r2, r7
  407024:	4643      	mov	r3, r8
  407026:	f001 fc91 	bl	40894c <__aeabi_dmul>
  40702a:	2200      	movs	r2, #0
  40702c:	4bc1      	ldr	r3, [pc, #772]	; (407334 <_dtoa_r+0xd94>)
  40702e:	f7fd fbb9 	bl	4047a4 <__adddf3>
  407032:	4605      	mov	r5, r0
  407034:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407038:	4641      	mov	r1, r8
  40703a:	2200      	movs	r2, #0
  40703c:	4bbe      	ldr	r3, [pc, #760]	; (407338 <_dtoa_r+0xd98>)
  40703e:	4638      	mov	r0, r7
  407040:	f7fd fbae 	bl	4047a0 <__aeabi_dsub>
  407044:	462a      	mov	r2, r5
  407046:	4633      	mov	r3, r6
  407048:	4682      	mov	sl, r0
  40704a:	468b      	mov	fp, r1
  40704c:	f001 ff0e 	bl	408e6c <__aeabi_dcmpgt>
  407050:	4680      	mov	r8, r0
  407052:	2800      	cmp	r0, #0
  407054:	f040 8110 	bne.w	407278 <_dtoa_r+0xcd8>
  407058:	462a      	mov	r2, r5
  40705a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40705e:	4650      	mov	r0, sl
  407060:	4659      	mov	r1, fp
  407062:	f001 fee5 	bl	408e30 <__aeabi_dcmplt>
  407066:	b118      	cbz	r0, 407070 <_dtoa_r+0xad0>
  407068:	4646      	mov	r6, r8
  40706a:	e770      	b.n	406f4e <_dtoa_r+0x9ae>
  40706c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407070:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  407074:	f7ff bb8f 	b.w	406796 <_dtoa_r+0x1f6>
  407078:	9804      	ldr	r0, [sp, #16]
  40707a:	f7ff bac0 	b.w	4065fe <_dtoa_r+0x5e>
  40707e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407082:	1afb      	subs	r3, r7, r3
  407084:	441a      	add	r2, r3
  407086:	970c      	str	r7, [sp, #48]	; 0x30
  407088:	920d      	str	r2, [sp, #52]	; 0x34
  40708a:	2700      	movs	r7, #0
  40708c:	e468      	b.n	406960 <_dtoa_r+0x3c0>
  40708e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  407092:	f04f 0a02 	mov.w	sl, #2
  407096:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40709a:	e656      	b.n	406d4a <_dtoa_r+0x7aa>
  40709c:	2100      	movs	r1, #0
  40709e:	2301      	movs	r3, #1
  4070a0:	4620      	mov	r0, r4
  4070a2:	6461      	str	r1, [r4, #68]	; 0x44
  4070a4:	9325      	str	r3, [sp, #148]	; 0x94
  4070a6:	f000 fe71 	bl	407d8c <_Balloc>
  4070aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4070ac:	9004      	str	r0, [sp, #16]
  4070ae:	9307      	str	r3, [sp, #28]
  4070b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4070b2:	6420      	str	r0, [r4, #64]	; 0x40
  4070b4:	930f      	str	r3, [sp, #60]	; 0x3c
  4070b6:	e627      	b.n	406d08 <_dtoa_r+0x768>
  4070b8:	2a00      	cmp	r2, #0
  4070ba:	46d0      	mov	r8, sl
  4070bc:	f8cd b020 	str.w	fp, [sp, #32]
  4070c0:	469a      	mov	sl, r3
  4070c2:	dd11      	ble.n	4070e8 <_dtoa_r+0xb48>
  4070c4:	4649      	mov	r1, r9
  4070c6:	2201      	movs	r2, #1
  4070c8:	4620      	mov	r0, r4
  4070ca:	f001 f80d 	bl	4080e8 <__lshift>
  4070ce:	4641      	mov	r1, r8
  4070d0:	4681      	mov	r9, r0
  4070d2:	f001 f859 	bl	408188 <__mcmp>
  4070d6:	2800      	cmp	r0, #0
  4070d8:	f340 8145 	ble.w	407366 <_dtoa_r+0xdc6>
  4070dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4070e0:	f000 8105 	beq.w	4072ee <_dtoa_r+0xd4e>
  4070e4:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4070e8:	46b3      	mov	fp, r6
  4070ea:	f887 a000 	strb.w	sl, [r7]
  4070ee:	1c7d      	adds	r5, r7, #1
  4070f0:	9e08      	ldr	r6, [sp, #32]
  4070f2:	e5d0      	b.n	406c96 <_dtoa_r+0x6f6>
  4070f4:	d104      	bne.n	407100 <_dtoa_r+0xb60>
  4070f6:	f01a 0f01 	tst.w	sl, #1
  4070fa:	d001      	beq.n	407100 <_dtoa_r+0xb60>
  4070fc:	e5bb      	b.n	406c76 <_dtoa_r+0x6d6>
  4070fe:	4615      	mov	r5, r2
  407100:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407104:	1e6a      	subs	r2, r5, #1
  407106:	2b30      	cmp	r3, #48	; 0x30
  407108:	d0f9      	beq.n	4070fe <_dtoa_r+0xb5e>
  40710a:	e5c4      	b.n	406c96 <_dtoa_r+0x6f6>
  40710c:	2230      	movs	r2, #48	; 0x30
  40710e:	9904      	ldr	r1, [sp, #16]
  407110:	700a      	strb	r2, [r1, #0]
  407112:	9a02      	ldr	r2, [sp, #8]
  407114:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407118:	3201      	adds	r2, #1
  40711a:	9202      	str	r2, [sp, #8]
  40711c:	f7ff bbfb 	b.w	406916 <_dtoa_r+0x376>
  407120:	f000 80bb 	beq.w	40729a <_dtoa_r+0xcfa>
  407124:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  407128:	9b02      	ldr	r3, [sp, #8]
  40712a:	f04f 0a02 	mov.w	sl, #2
  40712e:	425d      	negs	r5, r3
  407130:	4b82      	ldr	r3, [pc, #520]	; (40733c <_dtoa_r+0xd9c>)
  407132:	f005 020f 	and.w	r2, r5, #15
  407136:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40713a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40713e:	f001 fc05 	bl	40894c <__aeabi_dmul>
  407142:	112d      	asrs	r5, r5, #4
  407144:	4607      	mov	r7, r0
  407146:	4688      	mov	r8, r1
  407148:	f43f ae1a 	beq.w	406d80 <_dtoa_r+0x7e0>
  40714c:	4e7c      	ldr	r6, [pc, #496]	; (407340 <_dtoa_r+0xda0>)
  40714e:	07eb      	lsls	r3, r5, #31
  407150:	d509      	bpl.n	407166 <_dtoa_r+0xbc6>
  407152:	e9d6 2300 	ldrd	r2, r3, [r6]
  407156:	4638      	mov	r0, r7
  407158:	4641      	mov	r1, r8
  40715a:	f001 fbf7 	bl	40894c <__aeabi_dmul>
  40715e:	4607      	mov	r7, r0
  407160:	4688      	mov	r8, r1
  407162:	f10a 0a01 	add.w	sl, sl, #1
  407166:	106d      	asrs	r5, r5, #1
  407168:	f106 0608 	add.w	r6, r6, #8
  40716c:	d1ef      	bne.n	40714e <_dtoa_r+0xbae>
  40716e:	e607      	b.n	406d80 <_dtoa_r+0x7e0>
  407170:	6871      	ldr	r1, [r6, #4]
  407172:	4620      	mov	r0, r4
  407174:	f000 fe0a 	bl	407d8c <_Balloc>
  407178:	4605      	mov	r5, r0
  40717a:	6933      	ldr	r3, [r6, #16]
  40717c:	f106 010c 	add.w	r1, r6, #12
  407180:	3302      	adds	r3, #2
  407182:	009a      	lsls	r2, r3, #2
  407184:	300c      	adds	r0, #12
  407186:	f7fd fceb 	bl	404b60 <memcpy>
  40718a:	4629      	mov	r1, r5
  40718c:	2201      	movs	r2, #1
  40718e:	4620      	mov	r0, r4
  407190:	f000 ffaa 	bl	4080e8 <__lshift>
  407194:	9008      	str	r0, [sp, #32]
  407196:	e4b6      	b.n	406b06 <_dtoa_r+0x566>
  407198:	2b39      	cmp	r3, #57	; 0x39
  40719a:	f8cd b020 	str.w	fp, [sp, #32]
  40719e:	46d0      	mov	r8, sl
  4071a0:	f000 80a5 	beq.w	4072ee <_dtoa_r+0xd4e>
  4071a4:	f103 0a01 	add.w	sl, r3, #1
  4071a8:	46b3      	mov	fp, r6
  4071aa:	f887 a000 	strb.w	sl, [r7]
  4071ae:	1c7d      	adds	r5, r7, #1
  4071b0:	9e08      	ldr	r6, [sp, #32]
  4071b2:	e570      	b.n	406c96 <_dtoa_r+0x6f6>
  4071b4:	465a      	mov	r2, fp
  4071b6:	46d0      	mov	r8, sl
  4071b8:	46b3      	mov	fp, r6
  4071ba:	469a      	mov	sl, r3
  4071bc:	4616      	mov	r6, r2
  4071be:	e54e      	b.n	406c5e <_dtoa_r+0x6be>
  4071c0:	9812      	ldr	r0, [sp, #72]	; 0x48
  4071c2:	495e      	ldr	r1, [pc, #376]	; (40733c <_dtoa_r+0xd9c>)
  4071c4:	462a      	mov	r2, r5
  4071c6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  4071ca:	4633      	mov	r3, r6
  4071cc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4071d0:	f001 fbbc 	bl	40894c <__aeabi_dmul>
  4071d4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4071d8:	4638      	mov	r0, r7
  4071da:	4641      	mov	r1, r8
  4071dc:	f001 fe66 	bl	408eac <__aeabi_d2iz>
  4071e0:	4605      	mov	r5, r0
  4071e2:	f7fd fc2b 	bl	404a3c <__aeabi_i2d>
  4071e6:	4602      	mov	r2, r0
  4071e8:	460b      	mov	r3, r1
  4071ea:	4638      	mov	r0, r7
  4071ec:	4641      	mov	r1, r8
  4071ee:	f7fd fad7 	bl	4047a0 <__aeabi_dsub>
  4071f2:	4606      	mov	r6, r0
  4071f4:	9812      	ldr	r0, [sp, #72]	; 0x48
  4071f6:	9a04      	ldr	r2, [sp, #16]
  4071f8:	3530      	adds	r5, #48	; 0x30
  4071fa:	2801      	cmp	r0, #1
  4071fc:	7015      	strb	r5, [r2, #0]
  4071fe:	460f      	mov	r7, r1
  407200:	f102 0501 	add.w	r5, r2, #1
  407204:	d026      	beq.n	407254 <_dtoa_r+0xcb4>
  407206:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407208:	9a04      	ldr	r2, [sp, #16]
  40720a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40720e:	4413      	add	r3, r2
  407210:	f04f 0a00 	mov.w	sl, #0
  407214:	4699      	mov	r9, r3
  407216:	f8df b130 	ldr.w	fp, [pc, #304]	; 407348 <_dtoa_r+0xda8>
  40721a:	4652      	mov	r2, sl
  40721c:	465b      	mov	r3, fp
  40721e:	4630      	mov	r0, r6
  407220:	4639      	mov	r1, r7
  407222:	f001 fb93 	bl	40894c <__aeabi_dmul>
  407226:	460f      	mov	r7, r1
  407228:	4606      	mov	r6, r0
  40722a:	f001 fe3f 	bl	408eac <__aeabi_d2iz>
  40722e:	4680      	mov	r8, r0
  407230:	f7fd fc04 	bl	404a3c <__aeabi_i2d>
  407234:	4602      	mov	r2, r0
  407236:	460b      	mov	r3, r1
  407238:	4630      	mov	r0, r6
  40723a:	4639      	mov	r1, r7
  40723c:	f7fd fab0 	bl	4047a0 <__aeabi_dsub>
  407240:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407244:	f805 8b01 	strb.w	r8, [r5], #1
  407248:	454d      	cmp	r5, r9
  40724a:	4606      	mov	r6, r0
  40724c:	460f      	mov	r7, r1
  40724e:	d1e4      	bne.n	40721a <_dtoa_r+0xc7a>
  407250:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407254:	2200      	movs	r2, #0
  407256:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40725a:	4b3a      	ldr	r3, [pc, #232]	; (407344 <_dtoa_r+0xda4>)
  40725c:	f7fd faa2 	bl	4047a4 <__adddf3>
  407260:	4632      	mov	r2, r6
  407262:	463b      	mov	r3, r7
  407264:	f001 fde4 	bl	408e30 <__aeabi_dcmplt>
  407268:	2800      	cmp	r0, #0
  40726a:	d046      	beq.n	4072fa <_dtoa_r+0xd5a>
  40726c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40726e:	9302      	str	r3, [sp, #8]
  407270:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407274:	f7ff bb42 	b.w	4068fc <_dtoa_r+0x35c>
  407278:	f04f 0800 	mov.w	r8, #0
  40727c:	4646      	mov	r6, r8
  40727e:	e6a8      	b.n	406fd2 <_dtoa_r+0xa32>
  407280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407282:	9a07      	ldr	r2, [sp, #28]
  407284:	1a9d      	subs	r5, r3, r2
  407286:	2300      	movs	r3, #0
  407288:	f7ff bb70 	b.w	40696c <_dtoa_r+0x3cc>
  40728c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40728e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407290:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  407294:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407296:	f7ff bb69 	b.w	40696c <_dtoa_r+0x3cc>
  40729a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40729e:	f04f 0a02 	mov.w	sl, #2
  4072a2:	e56d      	b.n	406d80 <_dtoa_r+0x7e0>
  4072a4:	9b07      	ldr	r3, [sp, #28]
  4072a6:	2b00      	cmp	r3, #0
  4072a8:	f43f aeb8 	beq.w	40701c <_dtoa_r+0xa7c>
  4072ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4072ae:	2b00      	cmp	r3, #0
  4072b0:	f77f aede 	ble.w	407070 <_dtoa_r+0xad0>
  4072b4:	2200      	movs	r2, #0
  4072b6:	4b24      	ldr	r3, [pc, #144]	; (407348 <_dtoa_r+0xda8>)
  4072b8:	4638      	mov	r0, r7
  4072ba:	4641      	mov	r1, r8
  4072bc:	f001 fb46 	bl	40894c <__aeabi_dmul>
  4072c0:	4607      	mov	r7, r0
  4072c2:	4688      	mov	r8, r1
  4072c4:	f10a 0001 	add.w	r0, sl, #1
  4072c8:	f7fd fbb8 	bl	404a3c <__aeabi_i2d>
  4072cc:	463a      	mov	r2, r7
  4072ce:	4643      	mov	r3, r8
  4072d0:	f001 fb3c 	bl	40894c <__aeabi_dmul>
  4072d4:	2200      	movs	r2, #0
  4072d6:	4b17      	ldr	r3, [pc, #92]	; (407334 <_dtoa_r+0xd94>)
  4072d8:	f7fd fa64 	bl	4047a4 <__adddf3>
  4072dc:	9a02      	ldr	r2, [sp, #8]
  4072de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4072e0:	3a01      	subs	r2, #1
  4072e2:	4605      	mov	r5, r0
  4072e4:	9215      	str	r2, [sp, #84]	; 0x54
  4072e6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4072ea:	9312      	str	r3, [sp, #72]	; 0x48
  4072ec:	e569      	b.n	406dc2 <_dtoa_r+0x822>
  4072ee:	2239      	movs	r2, #57	; 0x39
  4072f0:	46b3      	mov	fp, r6
  4072f2:	703a      	strb	r2, [r7, #0]
  4072f4:	9e08      	ldr	r6, [sp, #32]
  4072f6:	1c7d      	adds	r5, r7, #1
  4072f8:	e4bf      	b.n	406c7a <_dtoa_r+0x6da>
  4072fa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4072fe:	2000      	movs	r0, #0
  407300:	4910      	ldr	r1, [pc, #64]	; (407344 <_dtoa_r+0xda4>)
  407302:	f7fd fa4d 	bl	4047a0 <__aeabi_dsub>
  407306:	4632      	mov	r2, r6
  407308:	463b      	mov	r3, r7
  40730a:	f001 fdaf 	bl	408e6c <__aeabi_dcmpgt>
  40730e:	b908      	cbnz	r0, 407314 <_dtoa_r+0xd74>
  407310:	e6ae      	b.n	407070 <_dtoa_r+0xad0>
  407312:	4615      	mov	r5, r2
  407314:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407318:	1e6a      	subs	r2, r5, #1
  40731a:	2b30      	cmp	r3, #48	; 0x30
  40731c:	d0f9      	beq.n	407312 <_dtoa_r+0xd72>
  40731e:	e5d7      	b.n	406ed0 <_dtoa_r+0x930>
  407320:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407324:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407326:	9302      	str	r3, [sp, #8]
  407328:	f7ff bae8 	b.w	4068fc <_dtoa_r+0x35c>
  40732c:	970c      	str	r7, [sp, #48]	; 0x30
  40732e:	f7ff bba7 	b.w	406a80 <_dtoa_r+0x4e0>
  407332:	bf00      	nop
  407334:	401c0000 	.word	0x401c0000
  407338:	40140000 	.word	0x40140000
  40733c:	004094d0 	.word	0x004094d0
  407340:	004094a8 	.word	0x004094a8
  407344:	3fe00000 	.word	0x3fe00000
  407348:	40240000 	.word	0x40240000
  40734c:	2b39      	cmp	r3, #57	; 0x39
  40734e:	f8cd b020 	str.w	fp, [sp, #32]
  407352:	46d0      	mov	r8, sl
  407354:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407358:	469a      	mov	sl, r3
  40735a:	d0c8      	beq.n	4072ee <_dtoa_r+0xd4e>
  40735c:	f1bb 0f00 	cmp.w	fp, #0
  407360:	f73f aec0 	bgt.w	4070e4 <_dtoa_r+0xb44>
  407364:	e6c0      	b.n	4070e8 <_dtoa_r+0xb48>
  407366:	f47f aebf 	bne.w	4070e8 <_dtoa_r+0xb48>
  40736a:	f01a 0f01 	tst.w	sl, #1
  40736e:	f43f aebb 	beq.w	4070e8 <_dtoa_r+0xb48>
  407372:	e6b3      	b.n	4070dc <_dtoa_r+0xb3c>
  407374:	f04f 0800 	mov.w	r8, #0
  407378:	4646      	mov	r6, r8
  40737a:	e5e8      	b.n	406f4e <_dtoa_r+0x9ae>
  40737c:	4631      	mov	r1, r6
  40737e:	2300      	movs	r3, #0
  407380:	220a      	movs	r2, #10
  407382:	4620      	mov	r0, r4
  407384:	f000 fd32 	bl	407dec <__multadd>
  407388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40738a:	4606      	mov	r6, r0
  40738c:	2b00      	cmp	r3, #0
  40738e:	dd07      	ble.n	4073a0 <_dtoa_r+0xe00>
  407390:	9307      	str	r3, [sp, #28]
  407392:	f7ff bbab 	b.w	406aec <_dtoa_r+0x54c>
  407396:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407398:	2b02      	cmp	r3, #2
  40739a:	dc1f      	bgt.n	4073dc <_dtoa_r+0xe3c>
  40739c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40739e:	e43c      	b.n	406c1a <_dtoa_r+0x67a>
  4073a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4073a2:	2b02      	cmp	r3, #2
  4073a4:	dc1a      	bgt.n	4073dc <_dtoa_r+0xe3c>
  4073a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4073a8:	e7f2      	b.n	407390 <_dtoa_r+0xdf0>
  4073aa:	f43f ab81 	beq.w	406ab0 <_dtoa_r+0x510>
  4073ae:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4073b2:	e411      	b.n	406bd8 <_dtoa_r+0x638>
  4073b4:	2500      	movs	r5, #0
  4073b6:	4620      	mov	r0, r4
  4073b8:	6465      	str	r5, [r4, #68]	; 0x44
  4073ba:	4629      	mov	r1, r5
  4073bc:	f000 fce6 	bl	407d8c <_Balloc>
  4073c0:	f04f 33ff 	mov.w	r3, #4294967295
  4073c4:	9307      	str	r3, [sp, #28]
  4073c6:	930f      	str	r3, [sp, #60]	; 0x3c
  4073c8:	2301      	movs	r3, #1
  4073ca:	9004      	str	r0, [sp, #16]
  4073cc:	9525      	str	r5, [sp, #148]	; 0x94
  4073ce:	6420      	str	r0, [r4, #64]	; 0x40
  4073d0:	930b      	str	r3, [sp, #44]	; 0x2c
  4073d2:	f7ff b9e0 	b.w	406796 <_dtoa_r+0x1f6>
  4073d6:	2501      	movs	r5, #1
  4073d8:	f7ff b9a8 	b.w	40672c <_dtoa_r+0x18c>
  4073dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4073de:	9307      	str	r3, [sp, #28]
  4073e0:	e5e8      	b.n	406fb4 <_dtoa_r+0xa14>
  4073e2:	bf00      	nop

004073e4 <__libc_fini_array>:
  4073e4:	b538      	push	{r3, r4, r5, lr}
  4073e6:	4c0a      	ldr	r4, [pc, #40]	; (407410 <__libc_fini_array+0x2c>)
  4073e8:	4d0a      	ldr	r5, [pc, #40]	; (407414 <__libc_fini_array+0x30>)
  4073ea:	1b64      	subs	r4, r4, r5
  4073ec:	10a4      	asrs	r4, r4, #2
  4073ee:	d00a      	beq.n	407406 <__libc_fini_array+0x22>
  4073f0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4073f4:	3b01      	subs	r3, #1
  4073f6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4073fa:	3c01      	subs	r4, #1
  4073fc:	f855 3904 	ldr.w	r3, [r5], #-4
  407400:	4798      	blx	r3
  407402:	2c00      	cmp	r4, #0
  407404:	d1f9      	bne.n	4073fa <__libc_fini_array+0x16>
  407406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40740a:	f002 b957 	b.w	4096bc <_fini>
  40740e:	bf00      	nop
  407410:	004096cc 	.word	0x004096cc
  407414:	004096c8 	.word	0x004096c8

00407418 <_malloc_trim_r>:
  407418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40741a:	460c      	mov	r4, r1
  40741c:	4f23      	ldr	r7, [pc, #140]	; (4074ac <_malloc_trim_r+0x94>)
  40741e:	4606      	mov	r6, r0
  407420:	f000 fca8 	bl	407d74 <__malloc_lock>
  407424:	68bb      	ldr	r3, [r7, #8]
  407426:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40742a:	685d      	ldr	r5, [r3, #4]
  40742c:	310f      	adds	r1, #15
  40742e:	f025 0503 	bic.w	r5, r5, #3
  407432:	4429      	add	r1, r5
  407434:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407438:	f021 010f 	bic.w	r1, r1, #15
  40743c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407440:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407444:	db07      	blt.n	407456 <_malloc_trim_r+0x3e>
  407446:	2100      	movs	r1, #0
  407448:	4630      	mov	r0, r6
  40744a:	f001 f951 	bl	4086f0 <_sbrk_r>
  40744e:	68bb      	ldr	r3, [r7, #8]
  407450:	442b      	add	r3, r5
  407452:	4298      	cmp	r0, r3
  407454:	d004      	beq.n	407460 <_malloc_trim_r+0x48>
  407456:	4630      	mov	r0, r6
  407458:	f000 fc92 	bl	407d80 <__malloc_unlock>
  40745c:	2000      	movs	r0, #0
  40745e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407460:	4261      	negs	r1, r4
  407462:	4630      	mov	r0, r6
  407464:	f001 f944 	bl	4086f0 <_sbrk_r>
  407468:	3001      	adds	r0, #1
  40746a:	d00d      	beq.n	407488 <_malloc_trim_r+0x70>
  40746c:	4b10      	ldr	r3, [pc, #64]	; (4074b0 <_malloc_trim_r+0x98>)
  40746e:	68ba      	ldr	r2, [r7, #8]
  407470:	6819      	ldr	r1, [r3, #0]
  407472:	1b2d      	subs	r5, r5, r4
  407474:	f045 0501 	orr.w	r5, r5, #1
  407478:	4630      	mov	r0, r6
  40747a:	1b09      	subs	r1, r1, r4
  40747c:	6055      	str	r5, [r2, #4]
  40747e:	6019      	str	r1, [r3, #0]
  407480:	f000 fc7e 	bl	407d80 <__malloc_unlock>
  407484:	2001      	movs	r0, #1
  407486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407488:	2100      	movs	r1, #0
  40748a:	4630      	mov	r0, r6
  40748c:	f001 f930 	bl	4086f0 <_sbrk_r>
  407490:	68ba      	ldr	r2, [r7, #8]
  407492:	1a83      	subs	r3, r0, r2
  407494:	2b0f      	cmp	r3, #15
  407496:	ddde      	ble.n	407456 <_malloc_trim_r+0x3e>
  407498:	4c06      	ldr	r4, [pc, #24]	; (4074b4 <_malloc_trim_r+0x9c>)
  40749a:	4905      	ldr	r1, [pc, #20]	; (4074b0 <_malloc_trim_r+0x98>)
  40749c:	6824      	ldr	r4, [r4, #0]
  40749e:	f043 0301 	orr.w	r3, r3, #1
  4074a2:	1b00      	subs	r0, r0, r4
  4074a4:	6053      	str	r3, [r2, #4]
  4074a6:	6008      	str	r0, [r1, #0]
  4074a8:	e7d5      	b.n	407456 <_malloc_trim_r+0x3e>
  4074aa:	bf00      	nop
  4074ac:	20000838 	.word	0x20000838
  4074b0:	20001288 	.word	0x20001288
  4074b4:	20000c40 	.word	0x20000c40

004074b8 <_free_r>:
  4074b8:	2900      	cmp	r1, #0
  4074ba:	d044      	beq.n	407546 <_free_r+0x8e>
  4074bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4074c0:	460d      	mov	r5, r1
  4074c2:	4680      	mov	r8, r0
  4074c4:	f000 fc56 	bl	407d74 <__malloc_lock>
  4074c8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4074cc:	4969      	ldr	r1, [pc, #420]	; (407674 <_free_r+0x1bc>)
  4074ce:	f1a5 0408 	sub.w	r4, r5, #8
  4074d2:	f027 0301 	bic.w	r3, r7, #1
  4074d6:	18e2      	adds	r2, r4, r3
  4074d8:	688e      	ldr	r6, [r1, #8]
  4074da:	6850      	ldr	r0, [r2, #4]
  4074dc:	42b2      	cmp	r2, r6
  4074de:	f020 0003 	bic.w	r0, r0, #3
  4074e2:	d05e      	beq.n	4075a2 <_free_r+0xea>
  4074e4:	07fe      	lsls	r6, r7, #31
  4074e6:	6050      	str	r0, [r2, #4]
  4074e8:	d40b      	bmi.n	407502 <_free_r+0x4a>
  4074ea:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4074ee:	f101 0e08 	add.w	lr, r1, #8
  4074f2:	1be4      	subs	r4, r4, r7
  4074f4:	68a5      	ldr	r5, [r4, #8]
  4074f6:	443b      	add	r3, r7
  4074f8:	4575      	cmp	r5, lr
  4074fa:	d06d      	beq.n	4075d8 <_free_r+0x120>
  4074fc:	68e7      	ldr	r7, [r4, #12]
  4074fe:	60ef      	str	r7, [r5, #12]
  407500:	60bd      	str	r5, [r7, #8]
  407502:	1815      	adds	r5, r2, r0
  407504:	686d      	ldr	r5, [r5, #4]
  407506:	07ed      	lsls	r5, r5, #31
  407508:	d53e      	bpl.n	407588 <_free_r+0xd0>
  40750a:	f043 0201 	orr.w	r2, r3, #1
  40750e:	6062      	str	r2, [r4, #4]
  407510:	50e3      	str	r3, [r4, r3]
  407512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407516:	d217      	bcs.n	407548 <_free_r+0x90>
  407518:	2201      	movs	r2, #1
  40751a:	08db      	lsrs	r3, r3, #3
  40751c:	1098      	asrs	r0, r3, #2
  40751e:	684d      	ldr	r5, [r1, #4]
  407520:	4413      	add	r3, r2
  407522:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
  407526:	4082      	lsls	r2, r0
  407528:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
  40752c:	432a      	orrs	r2, r5
  40752e:	3808      	subs	r0, #8
  407530:	60e0      	str	r0, [r4, #12]
  407532:	60a7      	str	r7, [r4, #8]
  407534:	604a      	str	r2, [r1, #4]
  407536:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
  40753a:	60fc      	str	r4, [r7, #12]
  40753c:	4640      	mov	r0, r8
  40753e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407542:	f000 bc1d 	b.w	407d80 <__malloc_unlock>
  407546:	4770      	bx	lr
  407548:	0a5a      	lsrs	r2, r3, #9
  40754a:	2a04      	cmp	r2, #4
  40754c:	d852      	bhi.n	4075f4 <_free_r+0x13c>
  40754e:	099a      	lsrs	r2, r3, #6
  407550:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407554:	00ff      	lsls	r7, r7, #3
  407556:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40755a:	19c8      	adds	r0, r1, r7
  40755c:	59ca      	ldr	r2, [r1, r7]
  40755e:	3808      	subs	r0, #8
  407560:	4290      	cmp	r0, r2
  407562:	d04f      	beq.n	407604 <_free_r+0x14c>
  407564:	6851      	ldr	r1, [r2, #4]
  407566:	f021 0103 	bic.w	r1, r1, #3
  40756a:	428b      	cmp	r3, r1
  40756c:	d232      	bcs.n	4075d4 <_free_r+0x11c>
  40756e:	6892      	ldr	r2, [r2, #8]
  407570:	4290      	cmp	r0, r2
  407572:	d1f7      	bne.n	407564 <_free_r+0xac>
  407574:	68c3      	ldr	r3, [r0, #12]
  407576:	60a0      	str	r0, [r4, #8]
  407578:	60e3      	str	r3, [r4, #12]
  40757a:	609c      	str	r4, [r3, #8]
  40757c:	60c4      	str	r4, [r0, #12]
  40757e:	4640      	mov	r0, r8
  407580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407584:	f000 bbfc 	b.w	407d80 <__malloc_unlock>
  407588:	6895      	ldr	r5, [r2, #8]
  40758a:	4f3b      	ldr	r7, [pc, #236]	; (407678 <_free_r+0x1c0>)
  40758c:	4403      	add	r3, r0
  40758e:	42bd      	cmp	r5, r7
  407590:	d040      	beq.n	407614 <_free_r+0x15c>
  407592:	68d0      	ldr	r0, [r2, #12]
  407594:	f043 0201 	orr.w	r2, r3, #1
  407598:	60e8      	str	r0, [r5, #12]
  40759a:	6085      	str	r5, [r0, #8]
  40759c:	6062      	str	r2, [r4, #4]
  40759e:	50e3      	str	r3, [r4, r3]
  4075a0:	e7b7      	b.n	407512 <_free_r+0x5a>
  4075a2:	07ff      	lsls	r7, r7, #31
  4075a4:	4403      	add	r3, r0
  4075a6:	d407      	bmi.n	4075b8 <_free_r+0x100>
  4075a8:	f855 5c08 	ldr.w	r5, [r5, #-8]
  4075ac:	1b64      	subs	r4, r4, r5
  4075ae:	68e2      	ldr	r2, [r4, #12]
  4075b0:	68a0      	ldr	r0, [r4, #8]
  4075b2:	442b      	add	r3, r5
  4075b4:	60c2      	str	r2, [r0, #12]
  4075b6:	6090      	str	r0, [r2, #8]
  4075b8:	4a30      	ldr	r2, [pc, #192]	; (40767c <_free_r+0x1c4>)
  4075ba:	f043 0001 	orr.w	r0, r3, #1
  4075be:	6812      	ldr	r2, [r2, #0]
  4075c0:	6060      	str	r0, [r4, #4]
  4075c2:	4293      	cmp	r3, r2
  4075c4:	608c      	str	r4, [r1, #8]
  4075c6:	d3b9      	bcc.n	40753c <_free_r+0x84>
  4075c8:	4b2d      	ldr	r3, [pc, #180]	; (407680 <_free_r+0x1c8>)
  4075ca:	4640      	mov	r0, r8
  4075cc:	6819      	ldr	r1, [r3, #0]
  4075ce:	f7ff ff23 	bl	407418 <_malloc_trim_r>
  4075d2:	e7b3      	b.n	40753c <_free_r+0x84>
  4075d4:	4610      	mov	r0, r2
  4075d6:	e7cd      	b.n	407574 <_free_r+0xbc>
  4075d8:	1811      	adds	r1, r2, r0
  4075da:	6849      	ldr	r1, [r1, #4]
  4075dc:	07c9      	lsls	r1, r1, #31
  4075de:	d444      	bmi.n	40766a <_free_r+0x1b2>
  4075e0:	6891      	ldr	r1, [r2, #8]
  4075e2:	4403      	add	r3, r0
  4075e4:	68d2      	ldr	r2, [r2, #12]
  4075e6:	f043 0001 	orr.w	r0, r3, #1
  4075ea:	60ca      	str	r2, [r1, #12]
  4075ec:	6091      	str	r1, [r2, #8]
  4075ee:	6060      	str	r0, [r4, #4]
  4075f0:	50e3      	str	r3, [r4, r3]
  4075f2:	e7a3      	b.n	40753c <_free_r+0x84>
  4075f4:	2a14      	cmp	r2, #20
  4075f6:	d816      	bhi.n	407626 <_free_r+0x16e>
  4075f8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4075fc:	00ff      	lsls	r7, r7, #3
  4075fe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407602:	e7aa      	b.n	40755a <_free_r+0xa2>
  407604:	2301      	movs	r3, #1
  407606:	10aa      	asrs	r2, r5, #2
  407608:	684d      	ldr	r5, [r1, #4]
  40760a:	4093      	lsls	r3, r2
  40760c:	432b      	orrs	r3, r5
  40760e:	604b      	str	r3, [r1, #4]
  407610:	4603      	mov	r3, r0
  407612:	e7b0      	b.n	407576 <_free_r+0xbe>
  407614:	f043 0201 	orr.w	r2, r3, #1
  407618:	614c      	str	r4, [r1, #20]
  40761a:	610c      	str	r4, [r1, #16]
  40761c:	60e5      	str	r5, [r4, #12]
  40761e:	60a5      	str	r5, [r4, #8]
  407620:	6062      	str	r2, [r4, #4]
  407622:	50e3      	str	r3, [r4, r3]
  407624:	e78a      	b.n	40753c <_free_r+0x84>
  407626:	2a54      	cmp	r2, #84	; 0x54
  407628:	d806      	bhi.n	407638 <_free_r+0x180>
  40762a:	0b1a      	lsrs	r2, r3, #12
  40762c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407630:	00ff      	lsls	r7, r7, #3
  407632:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407636:	e790      	b.n	40755a <_free_r+0xa2>
  407638:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40763c:	d806      	bhi.n	40764c <_free_r+0x194>
  40763e:	0bda      	lsrs	r2, r3, #15
  407640:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407644:	00ff      	lsls	r7, r7, #3
  407646:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40764a:	e786      	b.n	40755a <_free_r+0xa2>
  40764c:	f240 5054 	movw	r0, #1364	; 0x554
  407650:	4282      	cmp	r2, r0
  407652:	d806      	bhi.n	407662 <_free_r+0x1aa>
  407654:	0c9a      	lsrs	r2, r3, #18
  407656:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40765a:	00ff      	lsls	r7, r7, #3
  40765c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407660:	e77b      	b.n	40755a <_free_r+0xa2>
  407662:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407666:	257e      	movs	r5, #126	; 0x7e
  407668:	e777      	b.n	40755a <_free_r+0xa2>
  40766a:	f043 0101 	orr.w	r1, r3, #1
  40766e:	6061      	str	r1, [r4, #4]
  407670:	6013      	str	r3, [r2, #0]
  407672:	e763      	b.n	40753c <_free_r+0x84>
  407674:	20000838 	.word	0x20000838
  407678:	20000840 	.word	0x20000840
  40767c:	20000c44 	.word	0x20000c44
  407680:	200012b8 	.word	0x200012b8

00407684 <__locale_ctype_ptr_l>:
  407684:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  407688:	4770      	bx	lr
  40768a:	bf00      	nop

0040768c <_localeconv_r>:
  40768c:	4a04      	ldr	r2, [pc, #16]	; (4076a0 <_localeconv_r+0x14>)
  40768e:	4b05      	ldr	r3, [pc, #20]	; (4076a4 <_localeconv_r+0x18>)
  407690:	6812      	ldr	r2, [r2, #0]
  407692:	6b50      	ldr	r0, [r2, #52]	; 0x34
  407694:	2800      	cmp	r0, #0
  407696:	bf08      	it	eq
  407698:	4618      	moveq	r0, r3
  40769a:	30f0      	adds	r0, #240	; 0xf0
  40769c:	4770      	bx	lr
  40769e:	bf00      	nop
  4076a0:	20000298 	.word	0x20000298
  4076a4:	200006cc 	.word	0x200006cc

004076a8 <__retarget_lock_acquire_recursive>:
  4076a8:	4770      	bx	lr
  4076aa:	bf00      	nop

004076ac <__retarget_lock_release_recursive>:
  4076ac:	4770      	bx	lr
  4076ae:	bf00      	nop

004076b0 <_malloc_r>:
  4076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4076b4:	f101 060b 	add.w	r6, r1, #11
  4076b8:	2e16      	cmp	r6, #22
  4076ba:	b083      	sub	sp, #12
  4076bc:	4605      	mov	r5, r0
  4076be:	f240 809e 	bls.w	4077fe <_malloc_r+0x14e>
  4076c2:	f036 0607 	bics.w	r6, r6, #7
  4076c6:	f100 80bd 	bmi.w	407844 <_malloc_r+0x194>
  4076ca:	42b1      	cmp	r1, r6
  4076cc:	f200 80ba 	bhi.w	407844 <_malloc_r+0x194>
  4076d0:	f000 fb50 	bl	407d74 <__malloc_lock>
  4076d4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4076d8:	f0c0 8285 	bcc.w	407be6 <_malloc_r+0x536>
  4076dc:	0a73      	lsrs	r3, r6, #9
  4076de:	f000 80b8 	beq.w	407852 <_malloc_r+0x1a2>
  4076e2:	2b04      	cmp	r3, #4
  4076e4:	f200 816c 	bhi.w	4079c0 <_malloc_r+0x310>
  4076e8:	09b3      	lsrs	r3, r6, #6
  4076ea:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4076ee:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4076f2:	00c1      	lsls	r1, r0, #3
  4076f4:	4fb8      	ldr	r7, [pc, #736]	; (4079d8 <_malloc_r+0x328>)
  4076f6:	4439      	add	r1, r7
  4076f8:	684c      	ldr	r4, [r1, #4]
  4076fa:	3908      	subs	r1, #8
  4076fc:	42a1      	cmp	r1, r4
  4076fe:	d106      	bne.n	40770e <_malloc_r+0x5e>
  407700:	e00c      	b.n	40771c <_malloc_r+0x6c>
  407702:	2a00      	cmp	r2, #0
  407704:	f280 80ab 	bge.w	40785e <_malloc_r+0x1ae>
  407708:	68e4      	ldr	r4, [r4, #12]
  40770a:	42a1      	cmp	r1, r4
  40770c:	d006      	beq.n	40771c <_malloc_r+0x6c>
  40770e:	6863      	ldr	r3, [r4, #4]
  407710:	f023 0303 	bic.w	r3, r3, #3
  407714:	1b9a      	subs	r2, r3, r6
  407716:	2a0f      	cmp	r2, #15
  407718:	ddf3      	ble.n	407702 <_malloc_r+0x52>
  40771a:	4670      	mov	r0, lr
  40771c:	693c      	ldr	r4, [r7, #16]
  40771e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 4079ec <_malloc_r+0x33c>
  407722:	4574      	cmp	r4, lr
  407724:	f000 819e 	beq.w	407a64 <_malloc_r+0x3b4>
  407728:	6863      	ldr	r3, [r4, #4]
  40772a:	f023 0303 	bic.w	r3, r3, #3
  40772e:	1b9a      	subs	r2, r3, r6
  407730:	2a0f      	cmp	r2, #15
  407732:	f300 8183 	bgt.w	407a3c <_malloc_r+0x38c>
  407736:	2a00      	cmp	r2, #0
  407738:	f8c7 e014 	str.w	lr, [r7, #20]
  40773c:	f8c7 e010 	str.w	lr, [r7, #16]
  407740:	f280 8091 	bge.w	407866 <_malloc_r+0x1b6>
  407744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407748:	f080 8154 	bcs.w	4079f4 <_malloc_r+0x344>
  40774c:	2201      	movs	r2, #1
  40774e:	08db      	lsrs	r3, r3, #3
  407750:	6879      	ldr	r1, [r7, #4]
  407752:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  407756:	4413      	add	r3, r2
  407758:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
  40775c:	fa02 f20c 	lsl.w	r2, r2, ip
  407760:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
  407764:	430a      	orrs	r2, r1
  407766:	f1ac 0108 	sub.w	r1, ip, #8
  40776a:	60e1      	str	r1, [r4, #12]
  40776c:	f8c4 8008 	str.w	r8, [r4, #8]
  407770:	607a      	str	r2, [r7, #4]
  407772:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  407776:	f8c8 400c 	str.w	r4, [r8, #12]
  40777a:	2401      	movs	r4, #1
  40777c:	1083      	asrs	r3, r0, #2
  40777e:	409c      	lsls	r4, r3
  407780:	4294      	cmp	r4, r2
  407782:	d87d      	bhi.n	407880 <_malloc_r+0x1d0>
  407784:	4214      	tst	r4, r2
  407786:	d106      	bne.n	407796 <_malloc_r+0xe6>
  407788:	f020 0003 	bic.w	r0, r0, #3
  40778c:	0064      	lsls	r4, r4, #1
  40778e:	4214      	tst	r4, r2
  407790:	f100 0004 	add.w	r0, r0, #4
  407794:	d0fa      	beq.n	40778c <_malloc_r+0xdc>
  407796:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40779a:	46cc      	mov	ip, r9
  40779c:	4680      	mov	r8, r0
  40779e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4077a2:	459c      	cmp	ip, r3
  4077a4:	d107      	bne.n	4077b6 <_malloc_r+0x106>
  4077a6:	e15f      	b.n	407a68 <_malloc_r+0x3b8>
  4077a8:	2a00      	cmp	r2, #0
  4077aa:	f280 816d 	bge.w	407a88 <_malloc_r+0x3d8>
  4077ae:	68db      	ldr	r3, [r3, #12]
  4077b0:	459c      	cmp	ip, r3
  4077b2:	f000 8159 	beq.w	407a68 <_malloc_r+0x3b8>
  4077b6:	6859      	ldr	r1, [r3, #4]
  4077b8:	f021 0103 	bic.w	r1, r1, #3
  4077bc:	1b8a      	subs	r2, r1, r6
  4077be:	2a0f      	cmp	r2, #15
  4077c0:	ddf2      	ble.n	4077a8 <_malloc_r+0xf8>
  4077c2:	68dc      	ldr	r4, [r3, #12]
  4077c4:	f8d3 c008 	ldr.w	ip, [r3, #8]
  4077c8:	f046 0801 	orr.w	r8, r6, #1
  4077cc:	4628      	mov	r0, r5
  4077ce:	441e      	add	r6, r3
  4077d0:	f042 0501 	orr.w	r5, r2, #1
  4077d4:	f8c3 8004 	str.w	r8, [r3, #4]
  4077d8:	f8cc 400c 	str.w	r4, [ip, #12]
  4077dc:	f8c4 c008 	str.w	ip, [r4, #8]
  4077e0:	617e      	str	r6, [r7, #20]
  4077e2:	613e      	str	r6, [r7, #16]
  4077e4:	f8c6 e00c 	str.w	lr, [r6, #12]
  4077e8:	f8c6 e008 	str.w	lr, [r6, #8]
  4077ec:	6075      	str	r5, [r6, #4]
  4077ee:	505a      	str	r2, [r3, r1]
  4077f0:	9300      	str	r3, [sp, #0]
  4077f2:	f000 fac5 	bl	407d80 <__malloc_unlock>
  4077f6:	9b00      	ldr	r3, [sp, #0]
  4077f8:	f103 0408 	add.w	r4, r3, #8
  4077fc:	e01e      	b.n	40783c <_malloc_r+0x18c>
  4077fe:	2910      	cmp	r1, #16
  407800:	d820      	bhi.n	407844 <_malloc_r+0x194>
  407802:	f000 fab7 	bl	407d74 <__malloc_lock>
  407806:	2610      	movs	r6, #16
  407808:	2318      	movs	r3, #24
  40780a:	2002      	movs	r0, #2
  40780c:	4f72      	ldr	r7, [pc, #456]	; (4079d8 <_malloc_r+0x328>)
  40780e:	443b      	add	r3, r7
  407810:	685c      	ldr	r4, [r3, #4]
  407812:	f1a3 0208 	sub.w	r2, r3, #8
  407816:	4294      	cmp	r4, r2
  407818:	f000 812f 	beq.w	407a7a <_malloc_r+0x3ca>
  40781c:	6863      	ldr	r3, [r4, #4]
  40781e:	68e1      	ldr	r1, [r4, #12]
  407820:	f023 0303 	bic.w	r3, r3, #3
  407824:	4423      	add	r3, r4
  407826:	685a      	ldr	r2, [r3, #4]
  407828:	68a6      	ldr	r6, [r4, #8]
  40782a:	f042 0201 	orr.w	r2, r2, #1
  40782e:	60f1      	str	r1, [r6, #12]
  407830:	4628      	mov	r0, r5
  407832:	608e      	str	r6, [r1, #8]
  407834:	605a      	str	r2, [r3, #4]
  407836:	f000 faa3 	bl	407d80 <__malloc_unlock>
  40783a:	3408      	adds	r4, #8
  40783c:	4620      	mov	r0, r4
  40783e:	b003      	add	sp, #12
  407840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407844:	2400      	movs	r4, #0
  407846:	230c      	movs	r3, #12
  407848:	4620      	mov	r0, r4
  40784a:	602b      	str	r3, [r5, #0]
  40784c:	b003      	add	sp, #12
  40784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407852:	2040      	movs	r0, #64	; 0x40
  407854:	f44f 7100 	mov.w	r1, #512	; 0x200
  407858:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40785c:	e74a      	b.n	4076f4 <_malloc_r+0x44>
  40785e:	4423      	add	r3, r4
  407860:	685a      	ldr	r2, [r3, #4]
  407862:	68e1      	ldr	r1, [r4, #12]
  407864:	e7e0      	b.n	407828 <_malloc_r+0x178>
  407866:	4423      	add	r3, r4
  407868:	685a      	ldr	r2, [r3, #4]
  40786a:	4628      	mov	r0, r5
  40786c:	f042 0201 	orr.w	r2, r2, #1
  407870:	605a      	str	r2, [r3, #4]
  407872:	3408      	adds	r4, #8
  407874:	f000 fa84 	bl	407d80 <__malloc_unlock>
  407878:	4620      	mov	r0, r4
  40787a:	b003      	add	sp, #12
  40787c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407880:	68bc      	ldr	r4, [r7, #8]
  407882:	6863      	ldr	r3, [r4, #4]
  407884:	f023 0803 	bic.w	r8, r3, #3
  407888:	45b0      	cmp	r8, r6
  40788a:	d304      	bcc.n	407896 <_malloc_r+0x1e6>
  40788c:	eba8 0306 	sub.w	r3, r8, r6
  407890:	2b0f      	cmp	r3, #15
  407892:	f300 8085 	bgt.w	4079a0 <_malloc_r+0x2f0>
  407896:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4079f0 <_malloc_r+0x340>
  40789a:	4b50      	ldr	r3, [pc, #320]	; (4079dc <_malloc_r+0x32c>)
  40789c:	f8d9 2000 	ldr.w	r2, [r9]
  4078a0:	681b      	ldr	r3, [r3, #0]
  4078a2:	3201      	adds	r2, #1
  4078a4:	4433      	add	r3, r6
  4078a6:	eb04 0a08 	add.w	sl, r4, r8
  4078aa:	f000 8154 	beq.w	407b56 <_malloc_r+0x4a6>
  4078ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4078b2:	330f      	adds	r3, #15
  4078b4:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4078b8:	f02b 0b0f 	bic.w	fp, fp, #15
  4078bc:	4659      	mov	r1, fp
  4078be:	4628      	mov	r0, r5
  4078c0:	f000 ff16 	bl	4086f0 <_sbrk_r>
  4078c4:	1c41      	adds	r1, r0, #1
  4078c6:	4602      	mov	r2, r0
  4078c8:	f000 80fb 	beq.w	407ac2 <_malloc_r+0x412>
  4078cc:	4582      	cmp	sl, r0
  4078ce:	f200 80f6 	bhi.w	407abe <_malloc_r+0x40e>
  4078d2:	4b43      	ldr	r3, [pc, #268]	; (4079e0 <_malloc_r+0x330>)
  4078d4:	6819      	ldr	r1, [r3, #0]
  4078d6:	4459      	add	r1, fp
  4078d8:	6019      	str	r1, [r3, #0]
  4078da:	f000 814c 	beq.w	407b76 <_malloc_r+0x4c6>
  4078de:	f8d9 0000 	ldr.w	r0, [r9]
  4078e2:	3001      	adds	r0, #1
  4078e4:	bf1b      	ittet	ne
  4078e6:	eba2 0a0a 	subne.w	sl, r2, sl
  4078ea:	4451      	addne	r1, sl
  4078ec:	f8c9 2000 	streq.w	r2, [r9]
  4078f0:	6019      	strne	r1, [r3, #0]
  4078f2:	f012 0107 	ands.w	r1, r2, #7
  4078f6:	f000 8114 	beq.w	407b22 <_malloc_r+0x472>
  4078fa:	f1c1 0008 	rsb	r0, r1, #8
  4078fe:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  407902:	4402      	add	r2, r0
  407904:	3108      	adds	r1, #8
  407906:	eb02 090b 	add.w	r9, r2, fp
  40790a:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40790e:	eba1 0909 	sub.w	r9, r1, r9
  407912:	4649      	mov	r1, r9
  407914:	4628      	mov	r0, r5
  407916:	9301      	str	r3, [sp, #4]
  407918:	9200      	str	r2, [sp, #0]
  40791a:	f000 fee9 	bl	4086f0 <_sbrk_r>
  40791e:	1c43      	adds	r3, r0, #1
  407920:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407924:	f000 8142 	beq.w	407bac <_malloc_r+0x4fc>
  407928:	1a80      	subs	r0, r0, r2
  40792a:	4448      	add	r0, r9
  40792c:	f040 0001 	orr.w	r0, r0, #1
  407930:	6819      	ldr	r1, [r3, #0]
  407932:	42bc      	cmp	r4, r7
  407934:	4449      	add	r1, r9
  407936:	60ba      	str	r2, [r7, #8]
  407938:	6019      	str	r1, [r3, #0]
  40793a:	6050      	str	r0, [r2, #4]
  40793c:	d017      	beq.n	40796e <_malloc_r+0x2be>
  40793e:	f1b8 0f0f 	cmp.w	r8, #15
  407942:	f240 80fa 	bls.w	407b3a <_malloc_r+0x48a>
  407946:	f04f 0c05 	mov.w	ip, #5
  40794a:	6862      	ldr	r2, [r4, #4]
  40794c:	f1a8 000c 	sub.w	r0, r8, #12
  407950:	f020 0007 	bic.w	r0, r0, #7
  407954:	f002 0201 	and.w	r2, r2, #1
  407958:	eb04 0e00 	add.w	lr, r4, r0
  40795c:	4302      	orrs	r2, r0
  40795e:	280f      	cmp	r0, #15
  407960:	6062      	str	r2, [r4, #4]
  407962:	f8ce c004 	str.w	ip, [lr, #4]
  407966:	f8ce c008 	str.w	ip, [lr, #8]
  40796a:	f200 8116 	bhi.w	407b9a <_malloc_r+0x4ea>
  40796e:	4b1d      	ldr	r3, [pc, #116]	; (4079e4 <_malloc_r+0x334>)
  407970:	68bc      	ldr	r4, [r7, #8]
  407972:	681a      	ldr	r2, [r3, #0]
  407974:	4291      	cmp	r1, r2
  407976:	bf88      	it	hi
  407978:	6019      	strhi	r1, [r3, #0]
  40797a:	4b1b      	ldr	r3, [pc, #108]	; (4079e8 <_malloc_r+0x338>)
  40797c:	681a      	ldr	r2, [r3, #0]
  40797e:	4291      	cmp	r1, r2
  407980:	6862      	ldr	r2, [r4, #4]
  407982:	bf88      	it	hi
  407984:	6019      	strhi	r1, [r3, #0]
  407986:	f022 0203 	bic.w	r2, r2, #3
  40798a:	4296      	cmp	r6, r2
  40798c:	eba2 0306 	sub.w	r3, r2, r6
  407990:	d801      	bhi.n	407996 <_malloc_r+0x2e6>
  407992:	2b0f      	cmp	r3, #15
  407994:	dc04      	bgt.n	4079a0 <_malloc_r+0x2f0>
  407996:	4628      	mov	r0, r5
  407998:	f000 f9f2 	bl	407d80 <__malloc_unlock>
  40799c:	2400      	movs	r4, #0
  40799e:	e74d      	b.n	40783c <_malloc_r+0x18c>
  4079a0:	f046 0201 	orr.w	r2, r6, #1
  4079a4:	f043 0301 	orr.w	r3, r3, #1
  4079a8:	4426      	add	r6, r4
  4079aa:	6062      	str	r2, [r4, #4]
  4079ac:	4628      	mov	r0, r5
  4079ae:	60be      	str	r6, [r7, #8]
  4079b0:	3408      	adds	r4, #8
  4079b2:	6073      	str	r3, [r6, #4]
  4079b4:	f000 f9e4 	bl	407d80 <__malloc_unlock>
  4079b8:	4620      	mov	r0, r4
  4079ba:	b003      	add	sp, #12
  4079bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4079c0:	2b14      	cmp	r3, #20
  4079c2:	d970      	bls.n	407aa6 <_malloc_r+0x3f6>
  4079c4:	2b54      	cmp	r3, #84	; 0x54
  4079c6:	f200 80a2 	bhi.w	407b0e <_malloc_r+0x45e>
  4079ca:	0b33      	lsrs	r3, r6, #12
  4079cc:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4079d0:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4079d4:	00c1      	lsls	r1, r0, #3
  4079d6:	e68d      	b.n	4076f4 <_malloc_r+0x44>
  4079d8:	20000838 	.word	0x20000838
  4079dc:	200012b8 	.word	0x200012b8
  4079e0:	20001288 	.word	0x20001288
  4079e4:	200012b0 	.word	0x200012b0
  4079e8:	200012b4 	.word	0x200012b4
  4079ec:	20000840 	.word	0x20000840
  4079f0:	20000c40 	.word	0x20000c40
  4079f4:	0a5a      	lsrs	r2, r3, #9
  4079f6:	2a04      	cmp	r2, #4
  4079f8:	d95b      	bls.n	407ab2 <_malloc_r+0x402>
  4079fa:	2a14      	cmp	r2, #20
  4079fc:	f200 80ae 	bhi.w	407b5c <_malloc_r+0x4ac>
  407a00:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  407a04:	00c9      	lsls	r1, r1, #3
  407a06:	325b      	adds	r2, #91	; 0x5b
  407a08:	eb07 0c01 	add.w	ip, r7, r1
  407a0c:	5879      	ldr	r1, [r7, r1]
  407a0e:	f1ac 0c08 	sub.w	ip, ip, #8
  407a12:	458c      	cmp	ip, r1
  407a14:	f000 8088 	beq.w	407b28 <_malloc_r+0x478>
  407a18:	684a      	ldr	r2, [r1, #4]
  407a1a:	f022 0203 	bic.w	r2, r2, #3
  407a1e:	4293      	cmp	r3, r2
  407a20:	d273      	bcs.n	407b0a <_malloc_r+0x45a>
  407a22:	6889      	ldr	r1, [r1, #8]
  407a24:	458c      	cmp	ip, r1
  407a26:	d1f7      	bne.n	407a18 <_malloc_r+0x368>
  407a28:	f8dc 300c 	ldr.w	r3, [ip, #12]
  407a2c:	687a      	ldr	r2, [r7, #4]
  407a2e:	60e3      	str	r3, [r4, #12]
  407a30:	f8c4 c008 	str.w	ip, [r4, #8]
  407a34:	609c      	str	r4, [r3, #8]
  407a36:	f8cc 400c 	str.w	r4, [ip, #12]
  407a3a:	e69e      	b.n	40777a <_malloc_r+0xca>
  407a3c:	f046 0c01 	orr.w	ip, r6, #1
  407a40:	f042 0101 	orr.w	r1, r2, #1
  407a44:	4426      	add	r6, r4
  407a46:	f8c4 c004 	str.w	ip, [r4, #4]
  407a4a:	4628      	mov	r0, r5
  407a4c:	617e      	str	r6, [r7, #20]
  407a4e:	613e      	str	r6, [r7, #16]
  407a50:	f8c6 e00c 	str.w	lr, [r6, #12]
  407a54:	f8c6 e008 	str.w	lr, [r6, #8]
  407a58:	6071      	str	r1, [r6, #4]
  407a5a:	50e2      	str	r2, [r4, r3]
  407a5c:	f000 f990 	bl	407d80 <__malloc_unlock>
  407a60:	3408      	adds	r4, #8
  407a62:	e6eb      	b.n	40783c <_malloc_r+0x18c>
  407a64:	687a      	ldr	r2, [r7, #4]
  407a66:	e688      	b.n	40777a <_malloc_r+0xca>
  407a68:	f108 0801 	add.w	r8, r8, #1
  407a6c:	f018 0f03 	tst.w	r8, #3
  407a70:	f10c 0c08 	add.w	ip, ip, #8
  407a74:	f47f ae93 	bne.w	40779e <_malloc_r+0xee>
  407a78:	e02d      	b.n	407ad6 <_malloc_r+0x426>
  407a7a:	68dc      	ldr	r4, [r3, #12]
  407a7c:	42a3      	cmp	r3, r4
  407a7e:	bf08      	it	eq
  407a80:	3002      	addeq	r0, #2
  407a82:	f43f ae4b 	beq.w	40771c <_malloc_r+0x6c>
  407a86:	e6c9      	b.n	40781c <_malloc_r+0x16c>
  407a88:	461c      	mov	r4, r3
  407a8a:	4419      	add	r1, r3
  407a8c:	684a      	ldr	r2, [r1, #4]
  407a8e:	68db      	ldr	r3, [r3, #12]
  407a90:	f854 6f08 	ldr.w	r6, [r4, #8]!
  407a94:	f042 0201 	orr.w	r2, r2, #1
  407a98:	604a      	str	r2, [r1, #4]
  407a9a:	4628      	mov	r0, r5
  407a9c:	60f3      	str	r3, [r6, #12]
  407a9e:	609e      	str	r6, [r3, #8]
  407aa0:	f000 f96e 	bl	407d80 <__malloc_unlock>
  407aa4:	e6ca      	b.n	40783c <_malloc_r+0x18c>
  407aa6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  407aaa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  407aae:	00c1      	lsls	r1, r0, #3
  407ab0:	e620      	b.n	4076f4 <_malloc_r+0x44>
  407ab2:	099a      	lsrs	r2, r3, #6
  407ab4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  407ab8:	00c9      	lsls	r1, r1, #3
  407aba:	3238      	adds	r2, #56	; 0x38
  407abc:	e7a4      	b.n	407a08 <_malloc_r+0x358>
  407abe:	42bc      	cmp	r4, r7
  407ac0:	d054      	beq.n	407b6c <_malloc_r+0x4bc>
  407ac2:	68bc      	ldr	r4, [r7, #8]
  407ac4:	6862      	ldr	r2, [r4, #4]
  407ac6:	f022 0203 	bic.w	r2, r2, #3
  407aca:	e75e      	b.n	40798a <_malloc_r+0x2da>
  407acc:	f859 3908 	ldr.w	r3, [r9], #-8
  407ad0:	4599      	cmp	r9, r3
  407ad2:	f040 8086 	bne.w	407be2 <_malloc_r+0x532>
  407ad6:	f010 0f03 	tst.w	r0, #3
  407ada:	f100 30ff 	add.w	r0, r0, #4294967295
  407ade:	d1f5      	bne.n	407acc <_malloc_r+0x41c>
  407ae0:	687b      	ldr	r3, [r7, #4]
  407ae2:	ea23 0304 	bic.w	r3, r3, r4
  407ae6:	607b      	str	r3, [r7, #4]
  407ae8:	0064      	lsls	r4, r4, #1
  407aea:	429c      	cmp	r4, r3
  407aec:	f63f aec8 	bhi.w	407880 <_malloc_r+0x1d0>
  407af0:	2c00      	cmp	r4, #0
  407af2:	f43f aec5 	beq.w	407880 <_malloc_r+0x1d0>
  407af6:	421c      	tst	r4, r3
  407af8:	4640      	mov	r0, r8
  407afa:	f47f ae4c 	bne.w	407796 <_malloc_r+0xe6>
  407afe:	0064      	lsls	r4, r4, #1
  407b00:	421c      	tst	r4, r3
  407b02:	f100 0004 	add.w	r0, r0, #4
  407b06:	d0fa      	beq.n	407afe <_malloc_r+0x44e>
  407b08:	e645      	b.n	407796 <_malloc_r+0xe6>
  407b0a:	468c      	mov	ip, r1
  407b0c:	e78c      	b.n	407a28 <_malloc_r+0x378>
  407b0e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  407b12:	d815      	bhi.n	407b40 <_malloc_r+0x490>
  407b14:	0bf3      	lsrs	r3, r6, #15
  407b16:	f103 0078 	add.w	r0, r3, #120	; 0x78
  407b1a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  407b1e:	00c1      	lsls	r1, r0, #3
  407b20:	e5e8      	b.n	4076f4 <_malloc_r+0x44>
  407b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  407b26:	e6ee      	b.n	407906 <_malloc_r+0x256>
  407b28:	2101      	movs	r1, #1
  407b2a:	687b      	ldr	r3, [r7, #4]
  407b2c:	1092      	asrs	r2, r2, #2
  407b2e:	fa01 f202 	lsl.w	r2, r1, r2
  407b32:	431a      	orrs	r2, r3
  407b34:	607a      	str	r2, [r7, #4]
  407b36:	4663      	mov	r3, ip
  407b38:	e779      	b.n	407a2e <_malloc_r+0x37e>
  407b3a:	2301      	movs	r3, #1
  407b3c:	6053      	str	r3, [r2, #4]
  407b3e:	e72a      	b.n	407996 <_malloc_r+0x2e6>
  407b40:	f240 5254 	movw	r2, #1364	; 0x554
  407b44:	4293      	cmp	r3, r2
  407b46:	d822      	bhi.n	407b8e <_malloc_r+0x4de>
  407b48:	0cb3      	lsrs	r3, r6, #18
  407b4a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  407b4e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  407b52:	00c1      	lsls	r1, r0, #3
  407b54:	e5ce      	b.n	4076f4 <_malloc_r+0x44>
  407b56:	f103 0b10 	add.w	fp, r3, #16
  407b5a:	e6af      	b.n	4078bc <_malloc_r+0x20c>
  407b5c:	2a54      	cmp	r2, #84	; 0x54
  407b5e:	d829      	bhi.n	407bb4 <_malloc_r+0x504>
  407b60:	0b1a      	lsrs	r2, r3, #12
  407b62:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  407b66:	00c9      	lsls	r1, r1, #3
  407b68:	326e      	adds	r2, #110	; 0x6e
  407b6a:	e74d      	b.n	407a08 <_malloc_r+0x358>
  407b6c:	4b20      	ldr	r3, [pc, #128]	; (407bf0 <_malloc_r+0x540>)
  407b6e:	6819      	ldr	r1, [r3, #0]
  407b70:	4459      	add	r1, fp
  407b72:	6019      	str	r1, [r3, #0]
  407b74:	e6b3      	b.n	4078de <_malloc_r+0x22e>
  407b76:	f3ca 000b 	ubfx	r0, sl, #0, #12
  407b7a:	2800      	cmp	r0, #0
  407b7c:	f47f aeaf 	bne.w	4078de <_malloc_r+0x22e>
  407b80:	eb08 030b 	add.w	r3, r8, fp
  407b84:	68ba      	ldr	r2, [r7, #8]
  407b86:	f043 0301 	orr.w	r3, r3, #1
  407b8a:	6053      	str	r3, [r2, #4]
  407b8c:	e6ef      	b.n	40796e <_malloc_r+0x2be>
  407b8e:	207f      	movs	r0, #127	; 0x7f
  407b90:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  407b94:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  407b98:	e5ac      	b.n	4076f4 <_malloc_r+0x44>
  407b9a:	f104 0108 	add.w	r1, r4, #8
  407b9e:	4628      	mov	r0, r5
  407ba0:	9300      	str	r3, [sp, #0]
  407ba2:	f7ff fc89 	bl	4074b8 <_free_r>
  407ba6:	9b00      	ldr	r3, [sp, #0]
  407ba8:	6819      	ldr	r1, [r3, #0]
  407baa:	e6e0      	b.n	40796e <_malloc_r+0x2be>
  407bac:	2001      	movs	r0, #1
  407bae:	f04f 0900 	mov.w	r9, #0
  407bb2:	e6bd      	b.n	407930 <_malloc_r+0x280>
  407bb4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407bb8:	d805      	bhi.n	407bc6 <_malloc_r+0x516>
  407bba:	0bda      	lsrs	r2, r3, #15
  407bbc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  407bc0:	00c9      	lsls	r1, r1, #3
  407bc2:	3277      	adds	r2, #119	; 0x77
  407bc4:	e720      	b.n	407a08 <_malloc_r+0x358>
  407bc6:	f240 5154 	movw	r1, #1364	; 0x554
  407bca:	428a      	cmp	r2, r1
  407bcc:	d805      	bhi.n	407bda <_malloc_r+0x52a>
  407bce:	0c9a      	lsrs	r2, r3, #18
  407bd0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  407bd4:	00c9      	lsls	r1, r1, #3
  407bd6:	327c      	adds	r2, #124	; 0x7c
  407bd8:	e716      	b.n	407a08 <_malloc_r+0x358>
  407bda:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  407bde:	227e      	movs	r2, #126	; 0x7e
  407be0:	e712      	b.n	407a08 <_malloc_r+0x358>
  407be2:	687b      	ldr	r3, [r7, #4]
  407be4:	e780      	b.n	407ae8 <_malloc_r+0x438>
  407be6:	08f0      	lsrs	r0, r6, #3
  407be8:	f106 0308 	add.w	r3, r6, #8
  407bec:	e60e      	b.n	40780c <_malloc_r+0x15c>
  407bee:	bf00      	nop
  407bf0:	20001288 	.word	0x20001288

00407bf4 <__ascii_mbtowc>:
  407bf4:	b082      	sub	sp, #8
  407bf6:	b149      	cbz	r1, 407c0c <__ascii_mbtowc+0x18>
  407bf8:	b15a      	cbz	r2, 407c12 <__ascii_mbtowc+0x1e>
  407bfa:	b16b      	cbz	r3, 407c18 <__ascii_mbtowc+0x24>
  407bfc:	7813      	ldrb	r3, [r2, #0]
  407bfe:	600b      	str	r3, [r1, #0]
  407c00:	7812      	ldrb	r2, [r2, #0]
  407c02:	1c10      	adds	r0, r2, #0
  407c04:	bf18      	it	ne
  407c06:	2001      	movne	r0, #1
  407c08:	b002      	add	sp, #8
  407c0a:	4770      	bx	lr
  407c0c:	a901      	add	r1, sp, #4
  407c0e:	2a00      	cmp	r2, #0
  407c10:	d1f3      	bne.n	407bfa <__ascii_mbtowc+0x6>
  407c12:	4610      	mov	r0, r2
  407c14:	b002      	add	sp, #8
  407c16:	4770      	bx	lr
  407c18:	f06f 0001 	mvn.w	r0, #1
  407c1c:	e7f4      	b.n	407c08 <__ascii_mbtowc+0x14>
  407c1e:	bf00      	nop

00407c20 <memchr>:
  407c20:	0783      	lsls	r3, r0, #30
  407c22:	b470      	push	{r4, r5, r6}
  407c24:	b2cd      	uxtb	r5, r1
  407c26:	d03d      	beq.n	407ca4 <memchr+0x84>
  407c28:	1e54      	subs	r4, r2, #1
  407c2a:	b30a      	cbz	r2, 407c70 <memchr+0x50>
  407c2c:	7803      	ldrb	r3, [r0, #0]
  407c2e:	42ab      	cmp	r3, r5
  407c30:	d01f      	beq.n	407c72 <memchr+0x52>
  407c32:	1c43      	adds	r3, r0, #1
  407c34:	e005      	b.n	407c42 <memchr+0x22>
  407c36:	f114 34ff 	adds.w	r4, r4, #4294967295
  407c3a:	d319      	bcc.n	407c70 <memchr+0x50>
  407c3c:	7802      	ldrb	r2, [r0, #0]
  407c3e:	42aa      	cmp	r2, r5
  407c40:	d017      	beq.n	407c72 <memchr+0x52>
  407c42:	f013 0f03 	tst.w	r3, #3
  407c46:	4618      	mov	r0, r3
  407c48:	f103 0301 	add.w	r3, r3, #1
  407c4c:	d1f3      	bne.n	407c36 <memchr+0x16>
  407c4e:	2c03      	cmp	r4, #3
  407c50:	d811      	bhi.n	407c76 <memchr+0x56>
  407c52:	b34c      	cbz	r4, 407ca8 <memchr+0x88>
  407c54:	7803      	ldrb	r3, [r0, #0]
  407c56:	42ab      	cmp	r3, r5
  407c58:	d00b      	beq.n	407c72 <memchr+0x52>
  407c5a:	4404      	add	r4, r0
  407c5c:	1c43      	adds	r3, r0, #1
  407c5e:	e002      	b.n	407c66 <memchr+0x46>
  407c60:	7802      	ldrb	r2, [r0, #0]
  407c62:	42aa      	cmp	r2, r5
  407c64:	d005      	beq.n	407c72 <memchr+0x52>
  407c66:	429c      	cmp	r4, r3
  407c68:	4618      	mov	r0, r3
  407c6a:	f103 0301 	add.w	r3, r3, #1
  407c6e:	d1f7      	bne.n	407c60 <memchr+0x40>
  407c70:	2000      	movs	r0, #0
  407c72:	bc70      	pop	{r4, r5, r6}
  407c74:	4770      	bx	lr
  407c76:	0209      	lsls	r1, r1, #8
  407c78:	b289      	uxth	r1, r1
  407c7a:	4329      	orrs	r1, r5
  407c7c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  407c80:	6803      	ldr	r3, [r0, #0]
  407c82:	4606      	mov	r6, r0
  407c84:	404b      	eors	r3, r1
  407c86:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  407c8a:	ea22 0303 	bic.w	r3, r2, r3
  407c8e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407c92:	f100 0004 	add.w	r0, r0, #4
  407c96:	d103      	bne.n	407ca0 <memchr+0x80>
  407c98:	3c04      	subs	r4, #4
  407c9a:	2c03      	cmp	r4, #3
  407c9c:	d8f0      	bhi.n	407c80 <memchr+0x60>
  407c9e:	e7d8      	b.n	407c52 <memchr+0x32>
  407ca0:	4630      	mov	r0, r6
  407ca2:	e7d7      	b.n	407c54 <memchr+0x34>
  407ca4:	4614      	mov	r4, r2
  407ca6:	e7d2      	b.n	407c4e <memchr+0x2e>
  407ca8:	4620      	mov	r0, r4
  407caa:	e7e2      	b.n	407c72 <memchr+0x52>

00407cac <memmove>:
  407cac:	4288      	cmp	r0, r1
  407cae:	b5f0      	push	{r4, r5, r6, r7, lr}
  407cb0:	d90d      	bls.n	407cce <memmove+0x22>
  407cb2:	188b      	adds	r3, r1, r2
  407cb4:	4298      	cmp	r0, r3
  407cb6:	d20a      	bcs.n	407cce <memmove+0x22>
  407cb8:	1884      	adds	r4, r0, r2
  407cba:	2a00      	cmp	r2, #0
  407cbc:	d051      	beq.n	407d62 <memmove+0xb6>
  407cbe:	4622      	mov	r2, r4
  407cc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407cc4:	4299      	cmp	r1, r3
  407cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407cca:	d1f9      	bne.n	407cc0 <memmove+0x14>
  407ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407cce:	2a0f      	cmp	r2, #15
  407cd0:	d948      	bls.n	407d64 <memmove+0xb8>
  407cd2:	ea41 0300 	orr.w	r3, r1, r0
  407cd6:	079b      	lsls	r3, r3, #30
  407cd8:	d146      	bne.n	407d68 <memmove+0xbc>
  407cda:	4615      	mov	r5, r2
  407cdc:	f100 0410 	add.w	r4, r0, #16
  407ce0:	f101 0310 	add.w	r3, r1, #16
  407ce4:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407ce8:	3d10      	subs	r5, #16
  407cea:	f844 6c10 	str.w	r6, [r4, #-16]
  407cee:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407cf2:	2d0f      	cmp	r5, #15
  407cf4:	f844 6c0c 	str.w	r6, [r4, #-12]
  407cf8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407cfc:	f104 0410 	add.w	r4, r4, #16
  407d00:	f844 6c18 	str.w	r6, [r4, #-24]
  407d04:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407d08:	f103 0310 	add.w	r3, r3, #16
  407d0c:	f844 6c14 	str.w	r6, [r4, #-20]
  407d10:	d8e8      	bhi.n	407ce4 <memmove+0x38>
  407d12:	f1a2 0310 	sub.w	r3, r2, #16
  407d16:	f023 030f 	bic.w	r3, r3, #15
  407d1a:	f002 0e0f 	and.w	lr, r2, #15
  407d1e:	3310      	adds	r3, #16
  407d20:	f1be 0f03 	cmp.w	lr, #3
  407d24:	4419      	add	r1, r3
  407d26:	4403      	add	r3, r0
  407d28:	d921      	bls.n	407d6e <memmove+0xc2>
  407d2a:	460e      	mov	r6, r1
  407d2c:	4674      	mov	r4, lr
  407d2e:	1f1d      	subs	r5, r3, #4
  407d30:	f856 7b04 	ldr.w	r7, [r6], #4
  407d34:	3c04      	subs	r4, #4
  407d36:	2c03      	cmp	r4, #3
  407d38:	f845 7f04 	str.w	r7, [r5, #4]!
  407d3c:	d8f8      	bhi.n	407d30 <memmove+0x84>
  407d3e:	f1ae 0404 	sub.w	r4, lr, #4
  407d42:	f024 0403 	bic.w	r4, r4, #3
  407d46:	3404      	adds	r4, #4
  407d48:	4421      	add	r1, r4
  407d4a:	4423      	add	r3, r4
  407d4c:	f002 0203 	and.w	r2, r2, #3
  407d50:	b162      	cbz	r2, 407d6c <memmove+0xc0>
  407d52:	3b01      	subs	r3, #1
  407d54:	440a      	add	r2, r1
  407d56:	f811 4b01 	ldrb.w	r4, [r1], #1
  407d5a:	428a      	cmp	r2, r1
  407d5c:	f803 4f01 	strb.w	r4, [r3, #1]!
  407d60:	d1f9      	bne.n	407d56 <memmove+0xaa>
  407d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407d64:	4603      	mov	r3, r0
  407d66:	e7f3      	b.n	407d50 <memmove+0xa4>
  407d68:	4603      	mov	r3, r0
  407d6a:	e7f2      	b.n	407d52 <memmove+0xa6>
  407d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407d6e:	4672      	mov	r2, lr
  407d70:	e7ee      	b.n	407d50 <memmove+0xa4>
  407d72:	bf00      	nop

00407d74 <__malloc_lock>:
  407d74:	4801      	ldr	r0, [pc, #4]	; (407d7c <__malloc_lock+0x8>)
  407d76:	f7ff bc97 	b.w	4076a8 <__retarget_lock_acquire_recursive>
  407d7a:	bf00      	nop
  407d7c:	20001f2c 	.word	0x20001f2c

00407d80 <__malloc_unlock>:
  407d80:	4801      	ldr	r0, [pc, #4]	; (407d88 <__malloc_unlock+0x8>)
  407d82:	f7ff bc93 	b.w	4076ac <__retarget_lock_release_recursive>
  407d86:	bf00      	nop
  407d88:	20001f2c 	.word	0x20001f2c

00407d8c <_Balloc>:
  407d8c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407d8e:	b570      	push	{r4, r5, r6, lr}
  407d90:	4605      	mov	r5, r0
  407d92:	460c      	mov	r4, r1
  407d94:	b14b      	cbz	r3, 407daa <_Balloc+0x1e>
  407d96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  407d9a:	b180      	cbz	r0, 407dbe <_Balloc+0x32>
  407d9c:	6802      	ldr	r2, [r0, #0]
  407d9e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  407da2:	2300      	movs	r3, #0
  407da4:	6103      	str	r3, [r0, #16]
  407da6:	60c3      	str	r3, [r0, #12]
  407da8:	bd70      	pop	{r4, r5, r6, pc}
  407daa:	2221      	movs	r2, #33	; 0x21
  407dac:	2104      	movs	r1, #4
  407dae:	f000 fd9d 	bl	4088ec <_calloc_r>
  407db2:	64e8      	str	r0, [r5, #76]	; 0x4c
  407db4:	4603      	mov	r3, r0
  407db6:	2800      	cmp	r0, #0
  407db8:	d1ed      	bne.n	407d96 <_Balloc+0xa>
  407dba:	2000      	movs	r0, #0
  407dbc:	bd70      	pop	{r4, r5, r6, pc}
  407dbe:	2101      	movs	r1, #1
  407dc0:	fa01 f604 	lsl.w	r6, r1, r4
  407dc4:	1d72      	adds	r2, r6, #5
  407dc6:	4628      	mov	r0, r5
  407dc8:	0092      	lsls	r2, r2, #2
  407dca:	f000 fd8f 	bl	4088ec <_calloc_r>
  407dce:	2800      	cmp	r0, #0
  407dd0:	d0f3      	beq.n	407dba <_Balloc+0x2e>
  407dd2:	6044      	str	r4, [r0, #4]
  407dd4:	6086      	str	r6, [r0, #8]
  407dd6:	e7e4      	b.n	407da2 <_Balloc+0x16>

00407dd8 <_Bfree>:
  407dd8:	b131      	cbz	r1, 407de8 <_Bfree+0x10>
  407dda:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407ddc:	684a      	ldr	r2, [r1, #4]
  407dde:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  407de2:	6008      	str	r0, [r1, #0]
  407de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407de8:	4770      	bx	lr
  407dea:	bf00      	nop

00407dec <__multadd>:
  407dec:	b5f0      	push	{r4, r5, r6, r7, lr}
  407dee:	460c      	mov	r4, r1
  407df0:	4605      	mov	r5, r0
  407df2:	f04f 0e00 	mov.w	lr, #0
  407df6:	690e      	ldr	r6, [r1, #16]
  407df8:	b083      	sub	sp, #12
  407dfa:	f101 0714 	add.w	r7, r1, #20
  407dfe:	6838      	ldr	r0, [r7, #0]
  407e00:	f10e 0e01 	add.w	lr, lr, #1
  407e04:	b281      	uxth	r1, r0
  407e06:	fb02 3301 	mla	r3, r2, r1, r3
  407e0a:	0c01      	lsrs	r1, r0, #16
  407e0c:	0c18      	lsrs	r0, r3, #16
  407e0e:	fb02 0101 	mla	r1, r2, r1, r0
  407e12:	b29b      	uxth	r3, r3
  407e14:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  407e18:	4576      	cmp	r6, lr
  407e1a:	f847 3b04 	str.w	r3, [r7], #4
  407e1e:	ea4f 4311 	mov.w	r3, r1, lsr #16
  407e22:	dcec      	bgt.n	407dfe <__multadd+0x12>
  407e24:	b13b      	cbz	r3, 407e36 <__multadd+0x4a>
  407e26:	68a2      	ldr	r2, [r4, #8]
  407e28:	4296      	cmp	r6, r2
  407e2a:	da07      	bge.n	407e3c <__multadd+0x50>
  407e2c:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  407e30:	3601      	adds	r6, #1
  407e32:	6153      	str	r3, [r2, #20]
  407e34:	6126      	str	r6, [r4, #16]
  407e36:	4620      	mov	r0, r4
  407e38:	b003      	add	sp, #12
  407e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407e3c:	6861      	ldr	r1, [r4, #4]
  407e3e:	4628      	mov	r0, r5
  407e40:	3101      	adds	r1, #1
  407e42:	9301      	str	r3, [sp, #4]
  407e44:	f7ff ffa2 	bl	407d8c <_Balloc>
  407e48:	4607      	mov	r7, r0
  407e4a:	6922      	ldr	r2, [r4, #16]
  407e4c:	f104 010c 	add.w	r1, r4, #12
  407e50:	3202      	adds	r2, #2
  407e52:	0092      	lsls	r2, r2, #2
  407e54:	300c      	adds	r0, #12
  407e56:	f7fc fe83 	bl	404b60 <memcpy>
  407e5a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  407e5c:	6861      	ldr	r1, [r4, #4]
  407e5e:	9b01      	ldr	r3, [sp, #4]
  407e60:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407e64:	6020      	str	r0, [r4, #0]
  407e66:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  407e6a:	463c      	mov	r4, r7
  407e6c:	e7de      	b.n	407e2c <__multadd+0x40>
  407e6e:	bf00      	nop

00407e70 <__hi0bits>:
  407e70:	0c02      	lsrs	r2, r0, #16
  407e72:	0412      	lsls	r2, r2, #16
  407e74:	4603      	mov	r3, r0
  407e76:	b9b2      	cbnz	r2, 407ea6 <__hi0bits+0x36>
  407e78:	0403      	lsls	r3, r0, #16
  407e7a:	2010      	movs	r0, #16
  407e7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  407e80:	bf04      	itt	eq
  407e82:	021b      	lsleq	r3, r3, #8
  407e84:	3008      	addeq	r0, #8
  407e86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407e8a:	bf04      	itt	eq
  407e8c:	011b      	lsleq	r3, r3, #4
  407e8e:	3004      	addeq	r0, #4
  407e90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  407e94:	bf04      	itt	eq
  407e96:	009b      	lsleq	r3, r3, #2
  407e98:	3002      	addeq	r0, #2
  407e9a:	2b00      	cmp	r3, #0
  407e9c:	db02      	blt.n	407ea4 <__hi0bits+0x34>
  407e9e:	005b      	lsls	r3, r3, #1
  407ea0:	d403      	bmi.n	407eaa <__hi0bits+0x3a>
  407ea2:	2020      	movs	r0, #32
  407ea4:	4770      	bx	lr
  407ea6:	2000      	movs	r0, #0
  407ea8:	e7e8      	b.n	407e7c <__hi0bits+0xc>
  407eaa:	3001      	adds	r0, #1
  407eac:	4770      	bx	lr
  407eae:	bf00      	nop

00407eb0 <__lo0bits>:
  407eb0:	6803      	ldr	r3, [r0, #0]
  407eb2:	4601      	mov	r1, r0
  407eb4:	f013 0207 	ands.w	r2, r3, #7
  407eb8:	d007      	beq.n	407eca <__lo0bits+0x1a>
  407eba:	07da      	lsls	r2, r3, #31
  407ebc:	d421      	bmi.n	407f02 <__lo0bits+0x52>
  407ebe:	0798      	lsls	r0, r3, #30
  407ec0:	d421      	bmi.n	407f06 <__lo0bits+0x56>
  407ec2:	089b      	lsrs	r3, r3, #2
  407ec4:	600b      	str	r3, [r1, #0]
  407ec6:	2002      	movs	r0, #2
  407ec8:	4770      	bx	lr
  407eca:	b298      	uxth	r0, r3
  407ecc:	b198      	cbz	r0, 407ef6 <__lo0bits+0x46>
  407ece:	4610      	mov	r0, r2
  407ed0:	f013 0fff 	tst.w	r3, #255	; 0xff
  407ed4:	bf04      	itt	eq
  407ed6:	0a1b      	lsreq	r3, r3, #8
  407ed8:	3008      	addeq	r0, #8
  407eda:	071a      	lsls	r2, r3, #28
  407edc:	bf04      	itt	eq
  407ede:	091b      	lsreq	r3, r3, #4
  407ee0:	3004      	addeq	r0, #4
  407ee2:	079a      	lsls	r2, r3, #30
  407ee4:	bf04      	itt	eq
  407ee6:	089b      	lsreq	r3, r3, #2
  407ee8:	3002      	addeq	r0, #2
  407eea:	07da      	lsls	r2, r3, #31
  407eec:	d407      	bmi.n	407efe <__lo0bits+0x4e>
  407eee:	085b      	lsrs	r3, r3, #1
  407ef0:	d104      	bne.n	407efc <__lo0bits+0x4c>
  407ef2:	2020      	movs	r0, #32
  407ef4:	4770      	bx	lr
  407ef6:	0c1b      	lsrs	r3, r3, #16
  407ef8:	2010      	movs	r0, #16
  407efa:	e7e9      	b.n	407ed0 <__lo0bits+0x20>
  407efc:	3001      	adds	r0, #1
  407efe:	600b      	str	r3, [r1, #0]
  407f00:	4770      	bx	lr
  407f02:	2000      	movs	r0, #0
  407f04:	4770      	bx	lr
  407f06:	085b      	lsrs	r3, r3, #1
  407f08:	600b      	str	r3, [r1, #0]
  407f0a:	2001      	movs	r0, #1
  407f0c:	4770      	bx	lr
  407f0e:	bf00      	nop

00407f10 <__i2b>:
  407f10:	b510      	push	{r4, lr}
  407f12:	460c      	mov	r4, r1
  407f14:	2101      	movs	r1, #1
  407f16:	f7ff ff39 	bl	407d8c <_Balloc>
  407f1a:	2201      	movs	r2, #1
  407f1c:	6144      	str	r4, [r0, #20]
  407f1e:	6102      	str	r2, [r0, #16]
  407f20:	bd10      	pop	{r4, pc}
  407f22:	bf00      	nop

00407f24 <__multiply>:
  407f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407f28:	690c      	ldr	r4, [r1, #16]
  407f2a:	6915      	ldr	r5, [r2, #16]
  407f2c:	b083      	sub	sp, #12
  407f2e:	42ac      	cmp	r4, r5
  407f30:	468b      	mov	fp, r1
  407f32:	4616      	mov	r6, r2
  407f34:	da04      	bge.n	407f40 <__multiply+0x1c>
  407f36:	4622      	mov	r2, r4
  407f38:	46b3      	mov	fp, r6
  407f3a:	462c      	mov	r4, r5
  407f3c:	460e      	mov	r6, r1
  407f3e:	4615      	mov	r5, r2
  407f40:	f8db 3008 	ldr.w	r3, [fp, #8]
  407f44:	eb04 0805 	add.w	r8, r4, r5
  407f48:	f8db 1004 	ldr.w	r1, [fp, #4]
  407f4c:	4598      	cmp	r8, r3
  407f4e:	bfc8      	it	gt
  407f50:	3101      	addgt	r1, #1
  407f52:	f7ff ff1b 	bl	407d8c <_Balloc>
  407f56:	f100 0914 	add.w	r9, r0, #20
  407f5a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  407f5e:	45d1      	cmp	r9, sl
  407f60:	9000      	str	r0, [sp, #0]
  407f62:	d205      	bcs.n	407f70 <__multiply+0x4c>
  407f64:	464b      	mov	r3, r9
  407f66:	2100      	movs	r1, #0
  407f68:	f843 1b04 	str.w	r1, [r3], #4
  407f6c:	459a      	cmp	sl, r3
  407f6e:	d8fb      	bhi.n	407f68 <__multiply+0x44>
  407f70:	f106 0c14 	add.w	ip, r6, #20
  407f74:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407f78:	f10b 0b14 	add.w	fp, fp, #20
  407f7c:	459c      	cmp	ip, r3
  407f7e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  407f82:	d24b      	bcs.n	40801c <__multiply+0xf8>
  407f84:	f8cd a004 	str.w	sl, [sp, #4]
  407f88:	469a      	mov	sl, r3
  407f8a:	f8dc 5000 	ldr.w	r5, [ip]
  407f8e:	b2af      	uxth	r7, r5
  407f90:	b1e7      	cbz	r7, 407fcc <__multiply+0xa8>
  407f92:	464d      	mov	r5, r9
  407f94:	465e      	mov	r6, fp
  407f96:	2100      	movs	r1, #0
  407f98:	f856 2b04 	ldr.w	r2, [r6], #4
  407f9c:	6828      	ldr	r0, [r5, #0]
  407f9e:	b293      	uxth	r3, r2
  407fa0:	b284      	uxth	r4, r0
  407fa2:	0c12      	lsrs	r2, r2, #16
  407fa4:	fb07 4303 	mla	r3, r7, r3, r4
  407fa8:	0c00      	lsrs	r0, r0, #16
  407faa:	fb07 0202 	mla	r2, r7, r2, r0
  407fae:	440b      	add	r3, r1
  407fb0:	eb02 4113 	add.w	r1, r2, r3, lsr #16
  407fb4:	b29b      	uxth	r3, r3
  407fb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407fba:	45b6      	cmp	lr, r6
  407fbc:	f845 3b04 	str.w	r3, [r5], #4
  407fc0:	ea4f 4111 	mov.w	r1, r1, lsr #16
  407fc4:	d8e8      	bhi.n	407f98 <__multiply+0x74>
  407fc6:	6029      	str	r1, [r5, #0]
  407fc8:	f8dc 5000 	ldr.w	r5, [ip]
  407fcc:	0c2d      	lsrs	r5, r5, #16
  407fce:	d01d      	beq.n	40800c <__multiply+0xe8>
  407fd0:	f8d9 3000 	ldr.w	r3, [r9]
  407fd4:	4648      	mov	r0, r9
  407fd6:	461c      	mov	r4, r3
  407fd8:	4659      	mov	r1, fp
  407fda:	2200      	movs	r2, #0
  407fdc:	880e      	ldrh	r6, [r1, #0]
  407fde:	0c24      	lsrs	r4, r4, #16
  407fe0:	fb05 4406 	mla	r4, r5, r6, r4
  407fe4:	b29b      	uxth	r3, r3
  407fe6:	4422      	add	r2, r4
  407fe8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407fec:	f840 3b04 	str.w	r3, [r0], #4
  407ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  407ff4:	6804      	ldr	r4, [r0, #0]
  407ff6:	0c1b      	lsrs	r3, r3, #16
  407ff8:	b2a6      	uxth	r6, r4
  407ffa:	fb05 6303 	mla	r3, r5, r3, r6
  407ffe:	458e      	cmp	lr, r1
  408000:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  408004:	ea4f 4213 	mov.w	r2, r3, lsr #16
  408008:	d8e8      	bhi.n	407fdc <__multiply+0xb8>
  40800a:	6003      	str	r3, [r0, #0]
  40800c:	f10c 0c04 	add.w	ip, ip, #4
  408010:	45e2      	cmp	sl, ip
  408012:	f109 0904 	add.w	r9, r9, #4
  408016:	d8b8      	bhi.n	407f8a <__multiply+0x66>
  408018:	f8dd a004 	ldr.w	sl, [sp, #4]
  40801c:	f1b8 0f00 	cmp.w	r8, #0
  408020:	dd0b      	ble.n	40803a <__multiply+0x116>
  408022:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  408026:	f1aa 0a04 	sub.w	sl, sl, #4
  40802a:	b11b      	cbz	r3, 408034 <__multiply+0x110>
  40802c:	e005      	b.n	40803a <__multiply+0x116>
  40802e:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  408032:	b913      	cbnz	r3, 40803a <__multiply+0x116>
  408034:	f1b8 0801 	subs.w	r8, r8, #1
  408038:	d1f9      	bne.n	40802e <__multiply+0x10a>
  40803a:	9800      	ldr	r0, [sp, #0]
  40803c:	f8c0 8010 	str.w	r8, [r0, #16]
  408040:	b003      	add	sp, #12
  408042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408046:	bf00      	nop

00408048 <__pow5mult>:
  408048:	f012 0303 	ands.w	r3, r2, #3
  40804c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408050:	4614      	mov	r4, r2
  408052:	4607      	mov	r7, r0
  408054:	d12e      	bne.n	4080b4 <__pow5mult+0x6c>
  408056:	460d      	mov	r5, r1
  408058:	10a4      	asrs	r4, r4, #2
  40805a:	d01c      	beq.n	408096 <__pow5mult+0x4e>
  40805c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40805e:	b396      	cbz	r6, 4080c6 <__pow5mult+0x7e>
  408060:	07e3      	lsls	r3, r4, #31
  408062:	f04f 0800 	mov.w	r8, #0
  408066:	d406      	bmi.n	408076 <__pow5mult+0x2e>
  408068:	1064      	asrs	r4, r4, #1
  40806a:	d014      	beq.n	408096 <__pow5mult+0x4e>
  40806c:	6830      	ldr	r0, [r6, #0]
  40806e:	b1a8      	cbz	r0, 40809c <__pow5mult+0x54>
  408070:	4606      	mov	r6, r0
  408072:	07e3      	lsls	r3, r4, #31
  408074:	d5f8      	bpl.n	408068 <__pow5mult+0x20>
  408076:	4632      	mov	r2, r6
  408078:	4629      	mov	r1, r5
  40807a:	4638      	mov	r0, r7
  40807c:	f7ff ff52 	bl	407f24 <__multiply>
  408080:	b1b5      	cbz	r5, 4080b0 <__pow5mult+0x68>
  408082:	686a      	ldr	r2, [r5, #4]
  408084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408086:	1064      	asrs	r4, r4, #1
  408088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40808c:	6029      	str	r1, [r5, #0]
  40808e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  408092:	4605      	mov	r5, r0
  408094:	d1ea      	bne.n	40806c <__pow5mult+0x24>
  408096:	4628      	mov	r0, r5
  408098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40809c:	4632      	mov	r2, r6
  40809e:	4631      	mov	r1, r6
  4080a0:	4638      	mov	r0, r7
  4080a2:	f7ff ff3f 	bl	407f24 <__multiply>
  4080a6:	6030      	str	r0, [r6, #0]
  4080a8:	f8c0 8000 	str.w	r8, [r0]
  4080ac:	4606      	mov	r6, r0
  4080ae:	e7e0      	b.n	408072 <__pow5mult+0x2a>
  4080b0:	4605      	mov	r5, r0
  4080b2:	e7d9      	b.n	408068 <__pow5mult+0x20>
  4080b4:	4a0b      	ldr	r2, [pc, #44]	; (4080e4 <__pow5mult+0x9c>)
  4080b6:	3b01      	subs	r3, #1
  4080b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4080bc:	2300      	movs	r3, #0
  4080be:	f7ff fe95 	bl	407dec <__multadd>
  4080c2:	4605      	mov	r5, r0
  4080c4:	e7c8      	b.n	408058 <__pow5mult+0x10>
  4080c6:	2101      	movs	r1, #1
  4080c8:	4638      	mov	r0, r7
  4080ca:	f7ff fe5f 	bl	407d8c <_Balloc>
  4080ce:	f240 2171 	movw	r1, #625	; 0x271
  4080d2:	2201      	movs	r2, #1
  4080d4:	2300      	movs	r3, #0
  4080d6:	6141      	str	r1, [r0, #20]
  4080d8:	6102      	str	r2, [r0, #16]
  4080da:	4606      	mov	r6, r0
  4080dc:	64b8      	str	r0, [r7, #72]	; 0x48
  4080de:	6003      	str	r3, [r0, #0]
  4080e0:	e7be      	b.n	408060 <__pow5mult+0x18>
  4080e2:	bf00      	nop
  4080e4:	00409598 	.word	0x00409598

004080e8 <__lshift>:
  4080e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4080ec:	690b      	ldr	r3, [r1, #16]
  4080ee:	1154      	asrs	r4, r2, #5
  4080f0:	eb04 0803 	add.w	r8, r4, r3
  4080f4:	688b      	ldr	r3, [r1, #8]
  4080f6:	f108 0501 	add.w	r5, r8, #1
  4080fa:	429d      	cmp	r5, r3
  4080fc:	460e      	mov	r6, r1
  4080fe:	4691      	mov	r9, r2
  408100:	4607      	mov	r7, r0
  408102:	6849      	ldr	r1, [r1, #4]
  408104:	dd04      	ble.n	408110 <__lshift+0x28>
  408106:	005b      	lsls	r3, r3, #1
  408108:	429d      	cmp	r5, r3
  40810a:	f101 0101 	add.w	r1, r1, #1
  40810e:	dcfa      	bgt.n	408106 <__lshift+0x1e>
  408110:	4638      	mov	r0, r7
  408112:	f7ff fe3b 	bl	407d8c <_Balloc>
  408116:	2c00      	cmp	r4, #0
  408118:	f100 0314 	add.w	r3, r0, #20
  40811c:	dd06      	ble.n	40812c <__lshift+0x44>
  40811e:	2100      	movs	r1, #0
  408120:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  408124:	f843 1b04 	str.w	r1, [r3], #4
  408128:	429a      	cmp	r2, r3
  40812a:	d1fb      	bne.n	408124 <__lshift+0x3c>
  40812c:	6934      	ldr	r4, [r6, #16]
  40812e:	f106 0114 	add.w	r1, r6, #20
  408132:	f019 091f 	ands.w	r9, r9, #31
  408136:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40813a:	d01d      	beq.n	408178 <__lshift+0x90>
  40813c:	2200      	movs	r2, #0
  40813e:	f1c9 0c20 	rsb	ip, r9, #32
  408142:	680c      	ldr	r4, [r1, #0]
  408144:	fa04 f409 	lsl.w	r4, r4, r9
  408148:	4314      	orrs	r4, r2
  40814a:	f843 4b04 	str.w	r4, [r3], #4
  40814e:	f851 2b04 	ldr.w	r2, [r1], #4
  408152:	458e      	cmp	lr, r1
  408154:	fa22 f20c 	lsr.w	r2, r2, ip
  408158:	d8f3      	bhi.n	408142 <__lshift+0x5a>
  40815a:	601a      	str	r2, [r3, #0]
  40815c:	b10a      	cbz	r2, 408162 <__lshift+0x7a>
  40815e:	f108 0502 	add.w	r5, r8, #2
  408162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408164:	6872      	ldr	r2, [r6, #4]
  408166:	3d01      	subs	r5, #1
  408168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40816c:	6105      	str	r5, [r0, #16]
  40816e:	6031      	str	r1, [r6, #0]
  408170:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  408174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408178:	3b04      	subs	r3, #4
  40817a:	f851 2b04 	ldr.w	r2, [r1], #4
  40817e:	458e      	cmp	lr, r1
  408180:	f843 2f04 	str.w	r2, [r3, #4]!
  408184:	d8f9      	bhi.n	40817a <__lshift+0x92>
  408186:	e7ec      	b.n	408162 <__lshift+0x7a>

00408188 <__mcmp>:
  408188:	b430      	push	{r4, r5}
  40818a:	690b      	ldr	r3, [r1, #16]
  40818c:	4605      	mov	r5, r0
  40818e:	6900      	ldr	r0, [r0, #16]
  408190:	1ac0      	subs	r0, r0, r3
  408192:	d10f      	bne.n	4081b4 <__mcmp+0x2c>
  408194:	009b      	lsls	r3, r3, #2
  408196:	3514      	adds	r5, #20
  408198:	3114      	adds	r1, #20
  40819a:	4419      	add	r1, r3
  40819c:	442b      	add	r3, r5
  40819e:	e001      	b.n	4081a4 <__mcmp+0x1c>
  4081a0:	429d      	cmp	r5, r3
  4081a2:	d207      	bcs.n	4081b4 <__mcmp+0x2c>
  4081a4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4081a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4081ac:	4294      	cmp	r4, r2
  4081ae:	d0f7      	beq.n	4081a0 <__mcmp+0x18>
  4081b0:	d302      	bcc.n	4081b8 <__mcmp+0x30>
  4081b2:	2001      	movs	r0, #1
  4081b4:	bc30      	pop	{r4, r5}
  4081b6:	4770      	bx	lr
  4081b8:	f04f 30ff 	mov.w	r0, #4294967295
  4081bc:	e7fa      	b.n	4081b4 <__mcmp+0x2c>
  4081be:	bf00      	nop

004081c0 <__mdiff>:
  4081c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4081c4:	690c      	ldr	r4, [r1, #16]
  4081c6:	4689      	mov	r9, r1
  4081c8:	6911      	ldr	r1, [r2, #16]
  4081ca:	4692      	mov	sl, r2
  4081cc:	1a64      	subs	r4, r4, r1
  4081ce:	2c00      	cmp	r4, #0
  4081d0:	d117      	bne.n	408202 <__mdiff+0x42>
  4081d2:	0089      	lsls	r1, r1, #2
  4081d4:	f109 0714 	add.w	r7, r9, #20
  4081d8:	f102 0614 	add.w	r6, r2, #20
  4081dc:	187b      	adds	r3, r7, r1
  4081de:	4431      	add	r1, r6
  4081e0:	e001      	b.n	4081e6 <__mdiff+0x26>
  4081e2:	429f      	cmp	r7, r3
  4081e4:	d265      	bcs.n	4082b2 <__mdiff+0xf2>
  4081e6:	f853 5d04 	ldr.w	r5, [r3, #-4]!
  4081ea:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4081ee:	4295      	cmp	r5, r2
  4081f0:	d0f7      	beq.n	4081e2 <__mdiff+0x22>
  4081f2:	d267      	bcs.n	4082c4 <__mdiff+0x104>
  4081f4:	464b      	mov	r3, r9
  4081f6:	46bb      	mov	fp, r7
  4081f8:	46d1      	mov	r9, sl
  4081fa:	4637      	mov	r7, r6
  4081fc:	469a      	mov	sl, r3
  4081fe:	2401      	movs	r4, #1
  408200:	e005      	b.n	40820e <__mdiff+0x4e>
  408202:	db61      	blt.n	4082c8 <__mdiff+0x108>
  408204:	2400      	movs	r4, #0
  408206:	f109 0714 	add.w	r7, r9, #20
  40820a:	f10a 0b14 	add.w	fp, sl, #20
  40820e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  408212:	f7ff fdbb 	bl	407d8c <_Balloc>
  408216:	465d      	mov	r5, fp
  408218:	f04f 0800 	mov.w	r8, #0
  40821c:	f8d9 e010 	ldr.w	lr, [r9, #16]
  408220:	f8da 3010 	ldr.w	r3, [sl, #16]
  408224:	463e      	mov	r6, r7
  408226:	60c4      	str	r4, [r0, #12]
  408228:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
  40822c:	eb07 078e 	add.w	r7, r7, lr, lsl #2
  408230:	f100 0414 	add.w	r4, r0, #20
  408234:	f856 9b04 	ldr.w	r9, [r6], #4
  408238:	f855 2b04 	ldr.w	r2, [r5], #4
  40823c:	fa1f f389 	uxth.w	r3, r9
  408240:	4443      	add	r3, r8
  408242:	fa1f f882 	uxth.w	r8, r2
  408246:	0c12      	lsrs	r2, r2, #16
  408248:	eba3 0308 	sub.w	r3, r3, r8
  40824c:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  408250:	eb02 4223 	add.w	r2, r2, r3, asr #16
  408254:	b29b      	uxth	r3, r3
  408256:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40825a:	45ac      	cmp	ip, r5
  40825c:	f844 3b04 	str.w	r3, [r4], #4
  408260:	ea4f 4822 	mov.w	r8, r2, asr #16
  408264:	d8e6      	bhi.n	408234 <__mdiff+0x74>
  408266:	42b7      	cmp	r7, r6
  408268:	d917      	bls.n	40829a <__mdiff+0xda>
  40826a:	46a4      	mov	ip, r4
  40826c:	4635      	mov	r5, r6
  40826e:	f855 3b04 	ldr.w	r3, [r5], #4
  408272:	b299      	uxth	r1, r3
  408274:	4441      	add	r1, r8
  408276:	140a      	asrs	r2, r1, #16
  408278:	eb02 4213 	add.w	r2, r2, r3, lsr #16
  40827c:	b289      	uxth	r1, r1
  40827e:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
  408282:	42af      	cmp	r7, r5
  408284:	f84c 3b04 	str.w	r3, [ip], #4
  408288:	ea4f 4822 	mov.w	r8, r2, asr #16
  40828c:	d8ef      	bhi.n	40826e <__mdiff+0xae>
  40828e:	43f6      	mvns	r6, r6
  408290:	4437      	add	r7, r6
  408292:	f027 0703 	bic.w	r7, r7, #3
  408296:	3704      	adds	r7, #4
  408298:	443c      	add	r4, r7
  40829a:	3c04      	subs	r4, #4
  40829c:	b92b      	cbnz	r3, 4082aa <__mdiff+0xea>
  40829e:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4082a2:	f10e 3eff 	add.w	lr, lr, #4294967295
  4082a6:	2b00      	cmp	r3, #0
  4082a8:	d0f9      	beq.n	40829e <__mdiff+0xde>
  4082aa:	f8c0 e010 	str.w	lr, [r0, #16]
  4082ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4082b2:	2100      	movs	r1, #0
  4082b4:	f7ff fd6a 	bl	407d8c <_Balloc>
  4082b8:	2201      	movs	r2, #1
  4082ba:	2300      	movs	r3, #0
  4082bc:	6102      	str	r2, [r0, #16]
  4082be:	6143      	str	r3, [r0, #20]
  4082c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4082c4:	46b3      	mov	fp, r6
  4082c6:	e7a2      	b.n	40820e <__mdiff+0x4e>
  4082c8:	464b      	mov	r3, r9
  4082ca:	f109 0b14 	add.w	fp, r9, #20
  4082ce:	f102 0714 	add.w	r7, r2, #20
  4082d2:	4691      	mov	r9, r2
  4082d4:	2401      	movs	r4, #1
  4082d6:	469a      	mov	sl, r3
  4082d8:	e799      	b.n	40820e <__mdiff+0x4e>
  4082da:	bf00      	nop

004082dc <__d2b>:
  4082dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4082de:	2101      	movs	r1, #1
  4082e0:	b083      	sub	sp, #12
  4082e2:	461c      	mov	r4, r3
  4082e4:	f3c3 550a 	ubfx	r5, r3, #20, #11
  4082e8:	4616      	mov	r6, r2
  4082ea:	f7ff fd4f 	bl	407d8c <_Balloc>
  4082ee:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4082f2:	4607      	mov	r7, r0
  4082f4:	b10d      	cbz	r5, 4082fa <__d2b+0x1e>
  4082f6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4082fa:	9401      	str	r4, [sp, #4]
  4082fc:	b306      	cbz	r6, 408340 <__d2b+0x64>
  4082fe:	a802      	add	r0, sp, #8
  408300:	f840 6d08 	str.w	r6, [r0, #-8]!
  408304:	f7ff fdd4 	bl	407eb0 <__lo0bits>
  408308:	2800      	cmp	r0, #0
  40830a:	d130      	bne.n	40836e <__d2b+0x92>
  40830c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  408310:	617a      	str	r2, [r7, #20]
  408312:	2b00      	cmp	r3, #0
  408314:	bf0c      	ite	eq
  408316:	2101      	moveq	r1, #1
  408318:	2102      	movne	r1, #2
  40831a:	61bb      	str	r3, [r7, #24]
  40831c:	6139      	str	r1, [r7, #16]
  40831e:	b9d5      	cbnz	r5, 408356 <__d2b+0x7a>
  408320:	9a08      	ldr	r2, [sp, #32]
  408322:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  408326:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40832a:	6010      	str	r0, [r2, #0]
  40832c:	6918      	ldr	r0, [r3, #16]
  40832e:	f7ff fd9f 	bl	407e70 <__hi0bits>
  408332:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408334:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  408338:	6018      	str	r0, [r3, #0]
  40833a:	4638      	mov	r0, r7
  40833c:	b003      	add	sp, #12
  40833e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408340:	a801      	add	r0, sp, #4
  408342:	f7ff fdb5 	bl	407eb0 <__lo0bits>
  408346:	2201      	movs	r2, #1
  408348:	9b01      	ldr	r3, [sp, #4]
  40834a:	4611      	mov	r1, r2
  40834c:	3020      	adds	r0, #32
  40834e:	613a      	str	r2, [r7, #16]
  408350:	617b      	str	r3, [r7, #20]
  408352:	2d00      	cmp	r5, #0
  408354:	d0e4      	beq.n	408320 <__d2b+0x44>
  408356:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
  40835a:	9a08      	ldr	r2, [sp, #32]
  40835c:	4403      	add	r3, r0
  40835e:	6013      	str	r3, [r2, #0]
  408360:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408362:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  408366:	6018      	str	r0, [r3, #0]
  408368:	4638      	mov	r0, r7
  40836a:	b003      	add	sp, #12
  40836c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40836e:	9b01      	ldr	r3, [sp, #4]
  408370:	f1c0 0220 	rsb	r2, r0, #32
  408374:	9900      	ldr	r1, [sp, #0]
  408376:	fa03 f202 	lsl.w	r2, r3, r2
  40837a:	430a      	orrs	r2, r1
  40837c:	40c3      	lsrs	r3, r0
  40837e:	9301      	str	r3, [sp, #4]
  408380:	617a      	str	r2, [r7, #20]
  408382:	e7c6      	b.n	408312 <__d2b+0x36>

00408384 <_realloc_r>:
  408384:	2900      	cmp	r1, #0
  408386:	f000 8094 	beq.w	4084b2 <_realloc_r+0x12e>
  40838a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40838e:	460c      	mov	r4, r1
  408390:	4615      	mov	r5, r2
  408392:	b083      	sub	sp, #12
  408394:	4680      	mov	r8, r0
  408396:	f105 060b 	add.w	r6, r5, #11
  40839a:	f7ff fceb 	bl	407d74 <__malloc_lock>
  40839e:	f854 ec04 	ldr.w	lr, [r4, #-4]
  4083a2:	2e16      	cmp	r6, #22
  4083a4:	f02e 0703 	bic.w	r7, lr, #3
  4083a8:	f1a4 0908 	sub.w	r9, r4, #8
  4083ac:	d83c      	bhi.n	408428 <_realloc_r+0xa4>
  4083ae:	2210      	movs	r2, #16
  4083b0:	4616      	mov	r6, r2
  4083b2:	42b5      	cmp	r5, r6
  4083b4:	d83d      	bhi.n	408432 <_realloc_r+0xae>
  4083b6:	4297      	cmp	r7, r2
  4083b8:	da43      	bge.n	408442 <_realloc_r+0xbe>
  4083ba:	4bc6      	ldr	r3, [pc, #792]	; (4086d4 <_realloc_r+0x350>)
  4083bc:	eb09 0007 	add.w	r0, r9, r7
  4083c0:	6899      	ldr	r1, [r3, #8]
  4083c2:	4288      	cmp	r0, r1
  4083c4:	f000 80c3 	beq.w	40854e <_realloc_r+0x1ca>
  4083c8:	6843      	ldr	r3, [r0, #4]
  4083ca:	f023 0101 	bic.w	r1, r3, #1
  4083ce:	4401      	add	r1, r0
  4083d0:	6849      	ldr	r1, [r1, #4]
  4083d2:	07c9      	lsls	r1, r1, #31
  4083d4:	d54d      	bpl.n	408472 <_realloc_r+0xee>
  4083d6:	f01e 0f01 	tst.w	lr, #1
  4083da:	f000 809b 	beq.w	408514 <_realloc_r+0x190>
  4083de:	4629      	mov	r1, r5
  4083e0:	4640      	mov	r0, r8
  4083e2:	f7ff f965 	bl	4076b0 <_malloc_r>
  4083e6:	4605      	mov	r5, r0
  4083e8:	2800      	cmp	r0, #0
  4083ea:	d03b      	beq.n	408464 <_realloc_r+0xe0>
  4083ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4083f0:	f1a0 0208 	sub.w	r2, r0, #8
  4083f4:	f023 0301 	bic.w	r3, r3, #1
  4083f8:	444b      	add	r3, r9
  4083fa:	429a      	cmp	r2, r3
  4083fc:	f000 812b 	beq.w	408656 <_realloc_r+0x2d2>
  408400:	1f3a      	subs	r2, r7, #4
  408402:	2a24      	cmp	r2, #36	; 0x24
  408404:	f200 8118 	bhi.w	408638 <_realloc_r+0x2b4>
  408408:	2a13      	cmp	r2, #19
  40840a:	f200 80eb 	bhi.w	4085e4 <_realloc_r+0x260>
  40840e:	4603      	mov	r3, r0
  408410:	4622      	mov	r2, r4
  408412:	6811      	ldr	r1, [r2, #0]
  408414:	6019      	str	r1, [r3, #0]
  408416:	6851      	ldr	r1, [r2, #4]
  408418:	6059      	str	r1, [r3, #4]
  40841a:	6892      	ldr	r2, [r2, #8]
  40841c:	609a      	str	r2, [r3, #8]
  40841e:	4621      	mov	r1, r4
  408420:	4640      	mov	r0, r8
  408422:	f7ff f849 	bl	4074b8 <_free_r>
  408426:	e01d      	b.n	408464 <_realloc_r+0xe0>
  408428:	f026 0607 	bic.w	r6, r6, #7
  40842c:	2e00      	cmp	r6, #0
  40842e:	4632      	mov	r2, r6
  408430:	dabf      	bge.n	4083b2 <_realloc_r+0x2e>
  408432:	2500      	movs	r5, #0
  408434:	230c      	movs	r3, #12
  408436:	4628      	mov	r0, r5
  408438:	f8c8 3000 	str.w	r3, [r8]
  40843c:	b003      	add	sp, #12
  40843e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408442:	4625      	mov	r5, r4
  408444:	1bbb      	subs	r3, r7, r6
  408446:	2b0f      	cmp	r3, #15
  408448:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40844c:	d81d      	bhi.n	40848a <_realloc_r+0x106>
  40844e:	f002 0201 	and.w	r2, r2, #1
  408452:	433a      	orrs	r2, r7
  408454:	eb09 0107 	add.w	r1, r9, r7
  408458:	f8c9 2004 	str.w	r2, [r9, #4]
  40845c:	684b      	ldr	r3, [r1, #4]
  40845e:	f043 0301 	orr.w	r3, r3, #1
  408462:	604b      	str	r3, [r1, #4]
  408464:	4640      	mov	r0, r8
  408466:	f7ff fc8b 	bl	407d80 <__malloc_unlock>
  40846a:	4628      	mov	r0, r5
  40846c:	b003      	add	sp, #12
  40846e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408472:	f023 0303 	bic.w	r3, r3, #3
  408476:	18f9      	adds	r1, r7, r3
  408478:	4291      	cmp	r1, r2
  40847a:	db1d      	blt.n	4084b8 <_realloc_r+0x134>
  40847c:	68c3      	ldr	r3, [r0, #12]
  40847e:	6882      	ldr	r2, [r0, #8]
  408480:	4625      	mov	r5, r4
  408482:	60d3      	str	r3, [r2, #12]
  408484:	460f      	mov	r7, r1
  408486:	609a      	str	r2, [r3, #8]
  408488:	e7dc      	b.n	408444 <_realloc_r+0xc0>
  40848a:	f002 0201 	and.w	r2, r2, #1
  40848e:	eb09 0106 	add.w	r1, r9, r6
  408492:	f043 0301 	orr.w	r3, r3, #1
  408496:	4332      	orrs	r2, r6
  408498:	f8c9 2004 	str.w	r2, [r9, #4]
  40849c:	444f      	add	r7, r9
  40849e:	604b      	str	r3, [r1, #4]
  4084a0:	687b      	ldr	r3, [r7, #4]
  4084a2:	3108      	adds	r1, #8
  4084a4:	f043 0301 	orr.w	r3, r3, #1
  4084a8:	607b      	str	r3, [r7, #4]
  4084aa:	4640      	mov	r0, r8
  4084ac:	f7ff f804 	bl	4074b8 <_free_r>
  4084b0:	e7d8      	b.n	408464 <_realloc_r+0xe0>
  4084b2:	4611      	mov	r1, r2
  4084b4:	f7ff b8fc 	b.w	4076b0 <_malloc_r>
  4084b8:	f01e 0f01 	tst.w	lr, #1
  4084bc:	d18f      	bne.n	4083de <_realloc_r+0x5a>
  4084be:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4084c2:	eba9 0a01 	sub.w	sl, r9, r1
  4084c6:	f8da 1004 	ldr.w	r1, [sl, #4]
  4084ca:	f021 0103 	bic.w	r1, r1, #3
  4084ce:	440b      	add	r3, r1
  4084d0:	443b      	add	r3, r7
  4084d2:	4293      	cmp	r3, r2
  4084d4:	db26      	blt.n	408524 <_realloc_r+0x1a0>
  4084d6:	4655      	mov	r5, sl
  4084d8:	68c1      	ldr	r1, [r0, #12]
  4084da:	6880      	ldr	r0, [r0, #8]
  4084dc:	1f3a      	subs	r2, r7, #4
  4084de:	60c1      	str	r1, [r0, #12]
  4084e0:	6088      	str	r0, [r1, #8]
  4084e2:	f855 0f08 	ldr.w	r0, [r5, #8]!
  4084e6:	f8da 100c 	ldr.w	r1, [sl, #12]
  4084ea:	2a24      	cmp	r2, #36	; 0x24
  4084ec:	60c1      	str	r1, [r0, #12]
  4084ee:	6088      	str	r0, [r1, #8]
  4084f0:	d826      	bhi.n	408540 <_realloc_r+0x1bc>
  4084f2:	2a13      	cmp	r2, #19
  4084f4:	f240 8081 	bls.w	4085fa <_realloc_r+0x276>
  4084f8:	6821      	ldr	r1, [r4, #0]
  4084fa:	2a1b      	cmp	r2, #27
  4084fc:	f8ca 1008 	str.w	r1, [sl, #8]
  408500:	6861      	ldr	r1, [r4, #4]
  408502:	f8ca 100c 	str.w	r1, [sl, #12]
  408506:	f200 80ad 	bhi.w	408664 <_realloc_r+0x2e0>
  40850a:	f104 0008 	add.w	r0, r4, #8
  40850e:	f10a 0210 	add.w	r2, sl, #16
  408512:	e074      	b.n	4085fe <_realloc_r+0x27a>
  408514:	f854 3c08 	ldr.w	r3, [r4, #-8]
  408518:	eba9 0a03 	sub.w	sl, r9, r3
  40851c:	f8da 1004 	ldr.w	r1, [sl, #4]
  408520:	f021 0103 	bic.w	r1, r1, #3
  408524:	187b      	adds	r3, r7, r1
  408526:	4293      	cmp	r3, r2
  408528:	f6ff af59 	blt.w	4083de <_realloc_r+0x5a>
  40852c:	4655      	mov	r5, sl
  40852e:	f8da 100c 	ldr.w	r1, [sl, #12]
  408532:	f855 0f08 	ldr.w	r0, [r5, #8]!
  408536:	1f3a      	subs	r2, r7, #4
  408538:	2a24      	cmp	r2, #36	; 0x24
  40853a:	60c1      	str	r1, [r0, #12]
  40853c:	6088      	str	r0, [r1, #8]
  40853e:	d9d8      	bls.n	4084f2 <_realloc_r+0x16e>
  408540:	4621      	mov	r1, r4
  408542:	4628      	mov	r0, r5
  408544:	461f      	mov	r7, r3
  408546:	46d1      	mov	r9, sl
  408548:	f7ff fbb0 	bl	407cac <memmove>
  40854c:	e77a      	b.n	408444 <_realloc_r+0xc0>
  40854e:	6841      	ldr	r1, [r0, #4]
  408550:	f106 0010 	add.w	r0, r6, #16
  408554:	f021 0b03 	bic.w	fp, r1, #3
  408558:	44bb      	add	fp, r7
  40855a:	4583      	cmp	fp, r0
  40855c:	da58      	bge.n	408610 <_realloc_r+0x28c>
  40855e:	f01e 0f01 	tst.w	lr, #1
  408562:	f47f af3c 	bne.w	4083de <_realloc_r+0x5a>
  408566:	f854 1c08 	ldr.w	r1, [r4, #-8]
  40856a:	eba9 0a01 	sub.w	sl, r9, r1
  40856e:	f8da 1004 	ldr.w	r1, [sl, #4]
  408572:	f021 0103 	bic.w	r1, r1, #3
  408576:	448b      	add	fp, r1
  408578:	4558      	cmp	r0, fp
  40857a:	dcd3      	bgt.n	408524 <_realloc_r+0x1a0>
  40857c:	4655      	mov	r5, sl
  40857e:	f8da 100c 	ldr.w	r1, [sl, #12]
  408582:	f855 0f08 	ldr.w	r0, [r5, #8]!
  408586:	1f3a      	subs	r2, r7, #4
  408588:	2a24      	cmp	r2, #36	; 0x24
  40858a:	60c1      	str	r1, [r0, #12]
  40858c:	6088      	str	r0, [r1, #8]
  40858e:	f200 808d 	bhi.w	4086ac <_realloc_r+0x328>
  408592:	2a13      	cmp	r2, #19
  408594:	f240 8087 	bls.w	4086a6 <_realloc_r+0x322>
  408598:	6821      	ldr	r1, [r4, #0]
  40859a:	2a1b      	cmp	r2, #27
  40859c:	f8ca 1008 	str.w	r1, [sl, #8]
  4085a0:	6861      	ldr	r1, [r4, #4]
  4085a2:	f8ca 100c 	str.w	r1, [sl, #12]
  4085a6:	f200 8088 	bhi.w	4086ba <_realloc_r+0x336>
  4085aa:	f104 0108 	add.w	r1, r4, #8
  4085ae:	f10a 0210 	add.w	r2, sl, #16
  4085b2:	6808      	ldr	r0, [r1, #0]
  4085b4:	6010      	str	r0, [r2, #0]
  4085b6:	6848      	ldr	r0, [r1, #4]
  4085b8:	6050      	str	r0, [r2, #4]
  4085ba:	6889      	ldr	r1, [r1, #8]
  4085bc:	6091      	str	r1, [r2, #8]
  4085be:	ebab 0206 	sub.w	r2, fp, r6
  4085c2:	eb0a 0106 	add.w	r1, sl, r6
  4085c6:	f042 0201 	orr.w	r2, r2, #1
  4085ca:	6099      	str	r1, [r3, #8]
  4085cc:	604a      	str	r2, [r1, #4]
  4085ce:	f8da 3004 	ldr.w	r3, [sl, #4]
  4085d2:	4640      	mov	r0, r8
  4085d4:	f003 0301 	and.w	r3, r3, #1
  4085d8:	431e      	orrs	r6, r3
  4085da:	f8ca 6004 	str.w	r6, [sl, #4]
  4085de:	f7ff fbcf 	bl	407d80 <__malloc_unlock>
  4085e2:	e742      	b.n	40846a <_realloc_r+0xe6>
  4085e4:	6823      	ldr	r3, [r4, #0]
  4085e6:	2a1b      	cmp	r2, #27
  4085e8:	6003      	str	r3, [r0, #0]
  4085ea:	6863      	ldr	r3, [r4, #4]
  4085ec:	6043      	str	r3, [r0, #4]
  4085ee:	d827      	bhi.n	408640 <_realloc_r+0x2bc>
  4085f0:	f100 0308 	add.w	r3, r0, #8
  4085f4:	f104 0208 	add.w	r2, r4, #8
  4085f8:	e70b      	b.n	408412 <_realloc_r+0x8e>
  4085fa:	4620      	mov	r0, r4
  4085fc:	462a      	mov	r2, r5
  4085fe:	6801      	ldr	r1, [r0, #0]
  408600:	461f      	mov	r7, r3
  408602:	6011      	str	r1, [r2, #0]
  408604:	6841      	ldr	r1, [r0, #4]
  408606:	46d1      	mov	r9, sl
  408608:	6051      	str	r1, [r2, #4]
  40860a:	6883      	ldr	r3, [r0, #8]
  40860c:	6093      	str	r3, [r2, #8]
  40860e:	e719      	b.n	408444 <_realloc_r+0xc0>
  408610:	ebab 0b06 	sub.w	fp, fp, r6
  408614:	eb09 0106 	add.w	r1, r9, r6
  408618:	f04b 0201 	orr.w	r2, fp, #1
  40861c:	6099      	str	r1, [r3, #8]
  40861e:	604a      	str	r2, [r1, #4]
  408620:	f854 3c04 	ldr.w	r3, [r4, #-4]
  408624:	4640      	mov	r0, r8
  408626:	f003 0301 	and.w	r3, r3, #1
  40862a:	431e      	orrs	r6, r3
  40862c:	f844 6c04 	str.w	r6, [r4, #-4]
  408630:	f7ff fba6 	bl	407d80 <__malloc_unlock>
  408634:	4625      	mov	r5, r4
  408636:	e718      	b.n	40846a <_realloc_r+0xe6>
  408638:	4621      	mov	r1, r4
  40863a:	f7ff fb37 	bl	407cac <memmove>
  40863e:	e6ee      	b.n	40841e <_realloc_r+0x9a>
  408640:	68a3      	ldr	r3, [r4, #8]
  408642:	2a24      	cmp	r2, #36	; 0x24
  408644:	6083      	str	r3, [r0, #8]
  408646:	68e3      	ldr	r3, [r4, #12]
  408648:	60c3      	str	r3, [r0, #12]
  40864a:	d018      	beq.n	40867e <_realloc_r+0x2fa>
  40864c:	f100 0310 	add.w	r3, r0, #16
  408650:	f104 0210 	add.w	r2, r4, #16
  408654:	e6dd      	b.n	408412 <_realloc_r+0x8e>
  408656:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40865a:	4625      	mov	r5, r4
  40865c:	f023 0303 	bic.w	r3, r3, #3
  408660:	441f      	add	r7, r3
  408662:	e6ef      	b.n	408444 <_realloc_r+0xc0>
  408664:	68a1      	ldr	r1, [r4, #8]
  408666:	2a24      	cmp	r2, #36	; 0x24
  408668:	f8ca 1010 	str.w	r1, [sl, #16]
  40866c:	68e1      	ldr	r1, [r4, #12]
  40866e:	f8ca 1014 	str.w	r1, [sl, #20]
  408672:	d00d      	beq.n	408690 <_realloc_r+0x30c>
  408674:	f104 0010 	add.w	r0, r4, #16
  408678:	f10a 0218 	add.w	r2, sl, #24
  40867c:	e7bf      	b.n	4085fe <_realloc_r+0x27a>
  40867e:	6922      	ldr	r2, [r4, #16]
  408680:	f100 0318 	add.w	r3, r0, #24
  408684:	6102      	str	r2, [r0, #16]
  408686:	6961      	ldr	r1, [r4, #20]
  408688:	f104 0218 	add.w	r2, r4, #24
  40868c:	6141      	str	r1, [r0, #20]
  40868e:	e6c0      	b.n	408412 <_realloc_r+0x8e>
  408690:	6922      	ldr	r2, [r4, #16]
  408692:	f104 0018 	add.w	r0, r4, #24
  408696:	f8ca 2018 	str.w	r2, [sl, #24]
  40869a:	6961      	ldr	r1, [r4, #20]
  40869c:	f10a 0220 	add.w	r2, sl, #32
  4086a0:	f8ca 101c 	str.w	r1, [sl, #28]
  4086a4:	e7ab      	b.n	4085fe <_realloc_r+0x27a>
  4086a6:	4621      	mov	r1, r4
  4086a8:	462a      	mov	r2, r5
  4086aa:	e782      	b.n	4085b2 <_realloc_r+0x22e>
  4086ac:	4621      	mov	r1, r4
  4086ae:	4628      	mov	r0, r5
  4086b0:	9301      	str	r3, [sp, #4]
  4086b2:	f7ff fafb 	bl	407cac <memmove>
  4086b6:	9b01      	ldr	r3, [sp, #4]
  4086b8:	e781      	b.n	4085be <_realloc_r+0x23a>
  4086ba:	68a1      	ldr	r1, [r4, #8]
  4086bc:	2a24      	cmp	r2, #36	; 0x24
  4086be:	f8ca 1010 	str.w	r1, [sl, #16]
  4086c2:	68e1      	ldr	r1, [r4, #12]
  4086c4:	f8ca 1014 	str.w	r1, [sl, #20]
  4086c8:	d006      	beq.n	4086d8 <_realloc_r+0x354>
  4086ca:	f104 0110 	add.w	r1, r4, #16
  4086ce:	f10a 0218 	add.w	r2, sl, #24
  4086d2:	e76e      	b.n	4085b2 <_realloc_r+0x22e>
  4086d4:	20000838 	.word	0x20000838
  4086d8:	6922      	ldr	r2, [r4, #16]
  4086da:	f104 0118 	add.w	r1, r4, #24
  4086de:	f8ca 2018 	str.w	r2, [sl, #24]
  4086e2:	6960      	ldr	r0, [r4, #20]
  4086e4:	f10a 0220 	add.w	r2, sl, #32
  4086e8:	f8ca 001c 	str.w	r0, [sl, #28]
  4086ec:	e761      	b.n	4085b2 <_realloc_r+0x22e>
  4086ee:	bf00      	nop

004086f0 <_sbrk_r>:
  4086f0:	b538      	push	{r3, r4, r5, lr}
  4086f2:	2300      	movs	r3, #0
  4086f4:	4c06      	ldr	r4, [pc, #24]	; (408710 <_sbrk_r+0x20>)
  4086f6:	4605      	mov	r5, r0
  4086f8:	4608      	mov	r0, r1
  4086fa:	6023      	str	r3, [r4, #0]
  4086fc:	f7fb ff8a 	bl	404614 <_sbrk>
  408700:	1c43      	adds	r3, r0, #1
  408702:	d000      	beq.n	408706 <_sbrk_r+0x16>
  408704:	bd38      	pop	{r3, r4, r5, pc}
  408706:	6823      	ldr	r3, [r4, #0]
  408708:	2b00      	cmp	r3, #0
  40870a:	d0fb      	beq.n	408704 <_sbrk_r+0x14>
  40870c:	602b      	str	r3, [r5, #0]
  40870e:	bd38      	pop	{r3, r4, r5, pc}
  408710:	20001f40 	.word	0x20001f40

00408714 <__ssprint_r>:
  408714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408718:	6893      	ldr	r3, [r2, #8]
  40871a:	b083      	sub	sp, #12
  40871c:	4690      	mov	r8, r2
  40871e:	2b00      	cmp	r3, #0
  408720:	d070      	beq.n	408804 <__ssprint_r+0xf0>
  408722:	4682      	mov	sl, r0
  408724:	460c      	mov	r4, r1
  408726:	6817      	ldr	r7, [r2, #0]
  408728:	688d      	ldr	r5, [r1, #8]
  40872a:	6808      	ldr	r0, [r1, #0]
  40872c:	e042      	b.n	4087b4 <__ssprint_r+0xa0>
  40872e:	89a3      	ldrh	r3, [r4, #12]
  408730:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408734:	d02e      	beq.n	408794 <__ssprint_r+0x80>
  408736:	6965      	ldr	r5, [r4, #20]
  408738:	6921      	ldr	r1, [r4, #16]
  40873a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40873e:	eba0 0b01 	sub.w	fp, r0, r1
  408742:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  408746:	f10b 0001 	add.w	r0, fp, #1
  40874a:	106d      	asrs	r5, r5, #1
  40874c:	4430      	add	r0, r6
  40874e:	42a8      	cmp	r0, r5
  408750:	462a      	mov	r2, r5
  408752:	bf84      	itt	hi
  408754:	4605      	movhi	r5, r0
  408756:	462a      	movhi	r2, r5
  408758:	055b      	lsls	r3, r3, #21
  40875a:	d538      	bpl.n	4087ce <__ssprint_r+0xba>
  40875c:	4611      	mov	r1, r2
  40875e:	4650      	mov	r0, sl
  408760:	f7fe ffa6 	bl	4076b0 <_malloc_r>
  408764:	2800      	cmp	r0, #0
  408766:	d03c      	beq.n	4087e2 <__ssprint_r+0xce>
  408768:	465a      	mov	r2, fp
  40876a:	6921      	ldr	r1, [r4, #16]
  40876c:	9001      	str	r0, [sp, #4]
  40876e:	f7fc f9f7 	bl	404b60 <memcpy>
  408772:	89a2      	ldrh	r2, [r4, #12]
  408774:	9b01      	ldr	r3, [sp, #4]
  408776:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40877a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40877e:	81a2      	strh	r2, [r4, #12]
  408780:	eba5 020b 	sub.w	r2, r5, fp
  408784:	eb03 000b 	add.w	r0, r3, fp
  408788:	6165      	str	r5, [r4, #20]
  40878a:	46b3      	mov	fp, r6
  40878c:	4635      	mov	r5, r6
  40878e:	6123      	str	r3, [r4, #16]
  408790:	6020      	str	r0, [r4, #0]
  408792:	60a2      	str	r2, [r4, #8]
  408794:	465a      	mov	r2, fp
  408796:	4649      	mov	r1, r9
  408798:	f7ff fa88 	bl	407cac <memmove>
  40879c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4087a0:	68a2      	ldr	r2, [r4, #8]
  4087a2:	6820      	ldr	r0, [r4, #0]
  4087a4:	1b55      	subs	r5, r2, r5
  4087a6:	4458      	add	r0, fp
  4087a8:	1b9e      	subs	r6, r3, r6
  4087aa:	60a5      	str	r5, [r4, #8]
  4087ac:	6020      	str	r0, [r4, #0]
  4087ae:	f8c8 6008 	str.w	r6, [r8, #8]
  4087b2:	b33e      	cbz	r6, 408804 <__ssprint_r+0xf0>
  4087b4:	687e      	ldr	r6, [r7, #4]
  4087b6:	463b      	mov	r3, r7
  4087b8:	3708      	adds	r7, #8
  4087ba:	2e00      	cmp	r6, #0
  4087bc:	d0fa      	beq.n	4087b4 <__ssprint_r+0xa0>
  4087be:	42ae      	cmp	r6, r5
  4087c0:	f8d3 9000 	ldr.w	r9, [r3]
  4087c4:	46ab      	mov	fp, r5
  4087c6:	d2b2      	bcs.n	40872e <__ssprint_r+0x1a>
  4087c8:	4635      	mov	r5, r6
  4087ca:	46b3      	mov	fp, r6
  4087cc:	e7e2      	b.n	408794 <__ssprint_r+0x80>
  4087ce:	4650      	mov	r0, sl
  4087d0:	f7ff fdd8 	bl	408384 <_realloc_r>
  4087d4:	4603      	mov	r3, r0
  4087d6:	2800      	cmp	r0, #0
  4087d8:	d1d2      	bne.n	408780 <__ssprint_r+0x6c>
  4087da:	6921      	ldr	r1, [r4, #16]
  4087dc:	4650      	mov	r0, sl
  4087de:	f7fe fe6b 	bl	4074b8 <_free_r>
  4087e2:	230c      	movs	r3, #12
  4087e4:	2200      	movs	r2, #0
  4087e6:	f04f 30ff 	mov.w	r0, #4294967295
  4087ea:	f8ca 3000 	str.w	r3, [sl]
  4087ee:	89a3      	ldrh	r3, [r4, #12]
  4087f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4087f4:	81a3      	strh	r3, [r4, #12]
  4087f6:	f8c8 2008 	str.w	r2, [r8, #8]
  4087fa:	f8c8 2004 	str.w	r2, [r8, #4]
  4087fe:	b003      	add	sp, #12
  408800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408804:	2000      	movs	r0, #0
  408806:	f8c8 0004 	str.w	r0, [r8, #4]
  40880a:	b003      	add	sp, #12
  40880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408810 <__ascii_wctomb>:
  408810:	b119      	cbz	r1, 40881a <__ascii_wctomb+0xa>
  408812:	2aff      	cmp	r2, #255	; 0xff
  408814:	d803      	bhi.n	40881e <__ascii_wctomb+0xe>
  408816:	700a      	strb	r2, [r1, #0]
  408818:	2101      	movs	r1, #1
  40881a:	4608      	mov	r0, r1
  40881c:	4770      	bx	lr
  40881e:	238a      	movs	r3, #138	; 0x8a
  408820:	f04f 31ff 	mov.w	r1, #4294967295
  408824:	6003      	str	r3, [r0, #0]
  408826:	e7f8      	b.n	40881a <__ascii_wctomb+0xa>

00408828 <__register_exitproc>:
  408828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40882c:	4d2c      	ldr	r5, [pc, #176]	; (4088e0 <__register_exitproc+0xb8>)
  40882e:	4606      	mov	r6, r0
  408830:	6828      	ldr	r0, [r5, #0]
  408832:	4698      	mov	r8, r3
  408834:	460f      	mov	r7, r1
  408836:	4691      	mov	r9, r2
  408838:	f7fe ff36 	bl	4076a8 <__retarget_lock_acquire_recursive>
  40883c:	4b29      	ldr	r3, [pc, #164]	; (4088e4 <__register_exitproc+0xbc>)
  40883e:	681c      	ldr	r4, [r3, #0]
  408840:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408844:	2b00      	cmp	r3, #0
  408846:	d03e      	beq.n	4088c6 <__register_exitproc+0x9e>
  408848:	685a      	ldr	r2, [r3, #4]
  40884a:	2a1f      	cmp	r2, #31
  40884c:	dc1c      	bgt.n	408888 <__register_exitproc+0x60>
  40884e:	f102 0e01 	add.w	lr, r2, #1
  408852:	b176      	cbz	r6, 408872 <__register_exitproc+0x4a>
  408854:	2101      	movs	r1, #1
  408856:	eb03 0482 	add.w	r4, r3, r2, lsl #2
  40885a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
  40885e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  408862:	4091      	lsls	r1, r2
  408864:	4308      	orrs	r0, r1
  408866:	2e02      	cmp	r6, #2
  408868:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40886c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
  408870:	d023      	beq.n	4088ba <__register_exitproc+0x92>
  408872:	3202      	adds	r2, #2
  408874:	f8c3 e004 	str.w	lr, [r3, #4]
  408878:	6828      	ldr	r0, [r5, #0]
  40887a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40887e:	f7fe ff15 	bl	4076ac <__retarget_lock_release_recursive>
  408882:	2000      	movs	r0, #0
  408884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408888:	4b17      	ldr	r3, [pc, #92]	; (4088e8 <__register_exitproc+0xc0>)
  40888a:	b30b      	cbz	r3, 4088d0 <__register_exitproc+0xa8>
  40888c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408890:	f3af 8000 	nop.w
  408894:	4603      	mov	r3, r0
  408896:	b1d8      	cbz	r0, 4088d0 <__register_exitproc+0xa8>
  408898:	2000      	movs	r0, #0
  40889a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  40889e:	f04f 0e01 	mov.w	lr, #1
  4088a2:	6058      	str	r0, [r3, #4]
  4088a4:	6019      	str	r1, [r3, #0]
  4088a6:	4602      	mov	r2, r0
  4088a8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4088ac:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4088b0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
  4088b4:	2e00      	cmp	r6, #0
  4088b6:	d0dc      	beq.n	408872 <__register_exitproc+0x4a>
  4088b8:	e7cc      	b.n	408854 <__register_exitproc+0x2c>
  4088ba:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
  4088be:	4301      	orrs	r1, r0
  4088c0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
  4088c4:	e7d5      	b.n	408872 <__register_exitproc+0x4a>
  4088c6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4088ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4088ce:	e7bb      	b.n	408848 <__register_exitproc+0x20>
  4088d0:	6828      	ldr	r0, [r5, #0]
  4088d2:	f7fe feeb 	bl	4076ac <__retarget_lock_release_recursive>
  4088d6:	f04f 30ff 	mov.w	r0, #4294967295
  4088da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4088de:	bf00      	nop
  4088e0:	200006c8 	.word	0x200006c8
  4088e4:	00409420 	.word	0x00409420
  4088e8:	00000000 	.word	0x00000000

004088ec <_calloc_r>:
  4088ec:	b510      	push	{r4, lr}
  4088ee:	fb02 f101 	mul.w	r1, r2, r1
  4088f2:	f7fe fedd 	bl	4076b0 <_malloc_r>
  4088f6:	4604      	mov	r4, r0
  4088f8:	b1d8      	cbz	r0, 408932 <_calloc_r+0x46>
  4088fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4088fe:	f022 0203 	bic.w	r2, r2, #3
  408902:	3a04      	subs	r2, #4
  408904:	2a24      	cmp	r2, #36	; 0x24
  408906:	d818      	bhi.n	40893a <_calloc_r+0x4e>
  408908:	2a13      	cmp	r2, #19
  40890a:	d914      	bls.n	408936 <_calloc_r+0x4a>
  40890c:	2300      	movs	r3, #0
  40890e:	2a1b      	cmp	r2, #27
  408910:	6003      	str	r3, [r0, #0]
  408912:	6043      	str	r3, [r0, #4]
  408914:	d916      	bls.n	408944 <_calloc_r+0x58>
  408916:	2a24      	cmp	r2, #36	; 0x24
  408918:	6083      	str	r3, [r0, #8]
  40891a:	60c3      	str	r3, [r0, #12]
  40891c:	bf11      	iteee	ne
  40891e:	f100 0210 	addne.w	r2, r0, #16
  408922:	6103      	streq	r3, [r0, #16]
  408924:	6143      	streq	r3, [r0, #20]
  408926:	f100 0218 	addeq.w	r2, r0, #24
  40892a:	2300      	movs	r3, #0
  40892c:	6013      	str	r3, [r2, #0]
  40892e:	6053      	str	r3, [r2, #4]
  408930:	6093      	str	r3, [r2, #8]
  408932:	4620      	mov	r0, r4
  408934:	bd10      	pop	{r4, pc}
  408936:	4602      	mov	r2, r0
  408938:	e7f7      	b.n	40892a <_calloc_r+0x3e>
  40893a:	2100      	movs	r1, #0
  40893c:	f7fc f986 	bl	404c4c <memset>
  408940:	4620      	mov	r0, r4
  408942:	bd10      	pop	{r4, pc}
  408944:	f100 0208 	add.w	r2, r0, #8
  408948:	e7ef      	b.n	40892a <_calloc_r+0x3e>
  40894a:	bf00      	nop

0040894c <__aeabi_dmul>:
  40894c:	b570      	push	{r4, r5, r6, lr}
  40894e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40895a:	bf1d      	ittte	ne
  40895c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408960:	ea94 0f0c 	teqne	r4, ip
  408964:	ea95 0f0c 	teqne	r5, ip
  408968:	f000 f8de 	bleq	408b28 <__aeabi_dmul+0x1dc>
  40896c:	442c      	add	r4, r5
  40896e:	ea81 0603 	eor.w	r6, r1, r3
  408972:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  408976:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40897a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40897e:	bf18      	it	ne
  408980:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  408984:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40898c:	d038      	beq.n	408a00 <__aeabi_dmul+0xb4>
  40898e:	fba0 ce02 	umull	ip, lr, r0, r2
  408992:	f04f 0500 	mov.w	r5, #0
  408996:	fbe1 e502 	umlal	lr, r5, r1, r2
  40899a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40899e:	fbe0 e503 	umlal	lr, r5, r0, r3
  4089a2:	f04f 0600 	mov.w	r6, #0
  4089a6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4089aa:	f09c 0f00 	teq	ip, #0
  4089ae:	bf18      	it	ne
  4089b0:	f04e 0e01 	orrne.w	lr, lr, #1
  4089b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4089b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4089bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4089c0:	d204      	bcs.n	4089cc <__aeabi_dmul+0x80>
  4089c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4089c6:	416d      	adcs	r5, r5
  4089c8:	eb46 0606 	adc.w	r6, r6, r6
  4089cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4089d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4089d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4089d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4089dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4089e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4089e4:	bf88      	it	hi
  4089e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4089ea:	d81e      	bhi.n	408a2a <__aeabi_dmul+0xde>
  4089ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4089f0:	bf08      	it	eq
  4089f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4089f6:	f150 0000 	adcs.w	r0, r0, #0
  4089fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4089fe:	bd70      	pop	{r4, r5, r6, pc}
  408a00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408a04:	ea46 0101 	orr.w	r1, r6, r1
  408a08:	ea40 0002 	orr.w	r0, r0, r2
  408a0c:	ea81 0103 	eor.w	r1, r1, r3
  408a10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408a14:	bfc2      	ittt	gt
  408a16:	ebd4 050c 	rsbsgt	r5, r4, ip
  408a1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408a1e:	bd70      	popgt	{r4, r5, r6, pc}
  408a20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408a24:	f04f 0e00 	mov.w	lr, #0
  408a28:	3c01      	subs	r4, #1
  408a2a:	f300 80ab 	bgt.w	408b84 <__aeabi_dmul+0x238>
  408a2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  408a32:	bfde      	ittt	le
  408a34:	2000      	movle	r0, #0
  408a36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  408a3a:	bd70      	pople	{r4, r5, r6, pc}
  408a3c:	f1c4 0400 	rsb	r4, r4, #0
  408a40:	3c20      	subs	r4, #32
  408a42:	da35      	bge.n	408ab0 <__aeabi_dmul+0x164>
  408a44:	340c      	adds	r4, #12
  408a46:	dc1b      	bgt.n	408a80 <__aeabi_dmul+0x134>
  408a48:	f104 0414 	add.w	r4, r4, #20
  408a4c:	f1c4 0520 	rsb	r5, r4, #32
  408a50:	fa00 f305 	lsl.w	r3, r0, r5
  408a54:	fa20 f004 	lsr.w	r0, r0, r4
  408a58:	fa01 f205 	lsl.w	r2, r1, r5
  408a5c:	ea40 0002 	orr.w	r0, r0, r2
  408a60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408a64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408a68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408a6c:	fa21 f604 	lsr.w	r6, r1, r4
  408a70:	eb42 0106 	adc.w	r1, r2, r6
  408a74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408a78:	bf08      	it	eq
  408a7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408a7e:	bd70      	pop	{r4, r5, r6, pc}
  408a80:	f1c4 040c 	rsb	r4, r4, #12
  408a84:	f1c4 0520 	rsb	r5, r4, #32
  408a88:	fa00 f304 	lsl.w	r3, r0, r4
  408a8c:	fa20 f005 	lsr.w	r0, r0, r5
  408a90:	fa01 f204 	lsl.w	r2, r1, r4
  408a94:	ea40 0002 	orr.w	r0, r0, r2
  408a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408a9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408aa0:	f141 0100 	adc.w	r1, r1, #0
  408aa4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408aa8:	bf08      	it	eq
  408aaa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408aae:	bd70      	pop	{r4, r5, r6, pc}
  408ab0:	f1c4 0520 	rsb	r5, r4, #32
  408ab4:	fa00 f205 	lsl.w	r2, r0, r5
  408ab8:	ea4e 0e02 	orr.w	lr, lr, r2
  408abc:	fa20 f304 	lsr.w	r3, r0, r4
  408ac0:	fa01 f205 	lsl.w	r2, r1, r5
  408ac4:	ea43 0302 	orr.w	r3, r3, r2
  408ac8:	fa21 f004 	lsr.w	r0, r1, r4
  408acc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408ad0:	fa21 f204 	lsr.w	r2, r1, r4
  408ad4:	ea20 0002 	bic.w	r0, r0, r2
  408ad8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408adc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408ae0:	bf08      	it	eq
  408ae2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408ae6:	bd70      	pop	{r4, r5, r6, pc}
  408ae8:	f094 0f00 	teq	r4, #0
  408aec:	d10f      	bne.n	408b0e <__aeabi_dmul+0x1c2>
  408aee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408af2:	0040      	lsls	r0, r0, #1
  408af4:	eb41 0101 	adc.w	r1, r1, r1
  408af8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408afc:	bf08      	it	eq
  408afe:	3c01      	subeq	r4, #1
  408b00:	d0f7      	beq.n	408af2 <__aeabi_dmul+0x1a6>
  408b02:	ea41 0106 	orr.w	r1, r1, r6
  408b06:	f095 0f00 	teq	r5, #0
  408b0a:	bf18      	it	ne
  408b0c:	4770      	bxne	lr
  408b0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408b12:	0052      	lsls	r2, r2, #1
  408b14:	eb43 0303 	adc.w	r3, r3, r3
  408b18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408b1c:	bf08      	it	eq
  408b1e:	3d01      	subeq	r5, #1
  408b20:	d0f7      	beq.n	408b12 <__aeabi_dmul+0x1c6>
  408b22:	ea43 0306 	orr.w	r3, r3, r6
  408b26:	4770      	bx	lr
  408b28:	ea94 0f0c 	teq	r4, ip
  408b2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408b30:	bf18      	it	ne
  408b32:	ea95 0f0c 	teqne	r5, ip
  408b36:	d00c      	beq.n	408b52 <__aeabi_dmul+0x206>
  408b38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408b3c:	bf18      	it	ne
  408b3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408b42:	d1d1      	bne.n	408ae8 <__aeabi_dmul+0x19c>
  408b44:	ea81 0103 	eor.w	r1, r1, r3
  408b48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408b4c:	f04f 0000 	mov.w	r0, #0
  408b50:	bd70      	pop	{r4, r5, r6, pc}
  408b52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408b56:	bf06      	itte	eq
  408b58:	4610      	moveq	r0, r2
  408b5a:	4619      	moveq	r1, r3
  408b5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408b60:	d019      	beq.n	408b96 <__aeabi_dmul+0x24a>
  408b62:	ea94 0f0c 	teq	r4, ip
  408b66:	d102      	bne.n	408b6e <__aeabi_dmul+0x222>
  408b68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408b6c:	d113      	bne.n	408b96 <__aeabi_dmul+0x24a>
  408b6e:	ea95 0f0c 	teq	r5, ip
  408b72:	d105      	bne.n	408b80 <__aeabi_dmul+0x234>
  408b74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408b78:	bf1c      	itt	ne
  408b7a:	4610      	movne	r0, r2
  408b7c:	4619      	movne	r1, r3
  408b7e:	d10a      	bne.n	408b96 <__aeabi_dmul+0x24a>
  408b80:	ea81 0103 	eor.w	r1, r1, r3
  408b84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408b88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408b8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408b90:	f04f 0000 	mov.w	r0, #0
  408b94:	bd70      	pop	{r4, r5, r6, pc}
  408b96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408b9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408b9e:	bd70      	pop	{r4, r5, r6, pc}

00408ba0 <__aeabi_ddiv>:
  408ba0:	b570      	push	{r4, r5, r6, lr}
  408ba2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408ba6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408baa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408bae:	bf1d      	ittte	ne
  408bb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408bb4:	ea94 0f0c 	teqne	r4, ip
  408bb8:	ea95 0f0c 	teqne	r5, ip
  408bbc:	f000 f8a7 	bleq	408d0e <__aeabi_ddiv+0x16e>
  408bc0:	eba4 0405 	sub.w	r4, r4, r5
  408bc4:	ea81 0e03 	eor.w	lr, r1, r3
  408bc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408bcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408bd0:	f000 8088 	beq.w	408ce4 <__aeabi_ddiv+0x144>
  408bd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408bd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408bdc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408be0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408be4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408be8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408bec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408bf0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408bf4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408bf8:	429d      	cmp	r5, r3
  408bfa:	bf08      	it	eq
  408bfc:	4296      	cmpeq	r6, r2
  408bfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408c02:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408c06:	d202      	bcs.n	408c0e <__aeabi_ddiv+0x6e>
  408c08:	085b      	lsrs	r3, r3, #1
  408c0a:	ea4f 0232 	mov.w	r2, r2, rrx
  408c0e:	1ab6      	subs	r6, r6, r2
  408c10:	eb65 0503 	sbc.w	r5, r5, r3
  408c14:	085b      	lsrs	r3, r3, #1
  408c16:	ea4f 0232 	mov.w	r2, r2, rrx
  408c1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408c1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408c22:	ebb6 0e02 	subs.w	lr, r6, r2
  408c26:	eb75 0e03 	sbcs.w	lr, r5, r3
  408c2a:	bf22      	ittt	cs
  408c2c:	1ab6      	subcs	r6, r6, r2
  408c2e:	4675      	movcs	r5, lr
  408c30:	ea40 000c 	orrcs.w	r0, r0, ip
  408c34:	085b      	lsrs	r3, r3, #1
  408c36:	ea4f 0232 	mov.w	r2, r2, rrx
  408c3a:	ebb6 0e02 	subs.w	lr, r6, r2
  408c3e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408c42:	bf22      	ittt	cs
  408c44:	1ab6      	subcs	r6, r6, r2
  408c46:	4675      	movcs	r5, lr
  408c48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408c4c:	085b      	lsrs	r3, r3, #1
  408c4e:	ea4f 0232 	mov.w	r2, r2, rrx
  408c52:	ebb6 0e02 	subs.w	lr, r6, r2
  408c56:	eb75 0e03 	sbcs.w	lr, r5, r3
  408c5a:	bf22      	ittt	cs
  408c5c:	1ab6      	subcs	r6, r6, r2
  408c5e:	4675      	movcs	r5, lr
  408c60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408c64:	085b      	lsrs	r3, r3, #1
  408c66:	ea4f 0232 	mov.w	r2, r2, rrx
  408c6a:	ebb6 0e02 	subs.w	lr, r6, r2
  408c6e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408c72:	bf22      	ittt	cs
  408c74:	1ab6      	subcs	r6, r6, r2
  408c76:	4675      	movcs	r5, lr
  408c78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408c7c:	ea55 0e06 	orrs.w	lr, r5, r6
  408c80:	d018      	beq.n	408cb4 <__aeabi_ddiv+0x114>
  408c82:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408c86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408c8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408c8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408c92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408c96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408c9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408c9e:	d1c0      	bne.n	408c22 <__aeabi_ddiv+0x82>
  408ca0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408ca4:	d10b      	bne.n	408cbe <__aeabi_ddiv+0x11e>
  408ca6:	ea41 0100 	orr.w	r1, r1, r0
  408caa:	f04f 0000 	mov.w	r0, #0
  408cae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408cb2:	e7b6      	b.n	408c22 <__aeabi_ddiv+0x82>
  408cb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408cb8:	bf04      	itt	eq
  408cba:	4301      	orreq	r1, r0
  408cbc:	2000      	moveq	r0, #0
  408cbe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408cc2:	bf88      	it	hi
  408cc4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408cc8:	f63f aeaf 	bhi.w	408a2a <__aeabi_dmul+0xde>
  408ccc:	ebb5 0c03 	subs.w	ip, r5, r3
  408cd0:	bf04      	itt	eq
  408cd2:	ebb6 0c02 	subseq.w	ip, r6, r2
  408cd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408cda:	f150 0000 	adcs.w	r0, r0, #0
  408cde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408ce2:	bd70      	pop	{r4, r5, r6, pc}
  408ce4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408ce8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408cec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408cf0:	bfc2      	ittt	gt
  408cf2:	ebd4 050c 	rsbsgt	r5, r4, ip
  408cf6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408cfa:	bd70      	popgt	{r4, r5, r6, pc}
  408cfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408d00:	f04f 0e00 	mov.w	lr, #0
  408d04:	3c01      	subs	r4, #1
  408d06:	e690      	b.n	408a2a <__aeabi_dmul+0xde>
  408d08:	ea45 0e06 	orr.w	lr, r5, r6
  408d0c:	e68d      	b.n	408a2a <__aeabi_dmul+0xde>
  408d0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408d12:	ea94 0f0c 	teq	r4, ip
  408d16:	bf08      	it	eq
  408d18:	ea95 0f0c 	teqeq	r5, ip
  408d1c:	f43f af3b 	beq.w	408b96 <__aeabi_dmul+0x24a>
  408d20:	ea94 0f0c 	teq	r4, ip
  408d24:	d10a      	bne.n	408d3c <__aeabi_ddiv+0x19c>
  408d26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408d2a:	f47f af34 	bne.w	408b96 <__aeabi_dmul+0x24a>
  408d2e:	ea95 0f0c 	teq	r5, ip
  408d32:	f47f af25 	bne.w	408b80 <__aeabi_dmul+0x234>
  408d36:	4610      	mov	r0, r2
  408d38:	4619      	mov	r1, r3
  408d3a:	e72c      	b.n	408b96 <__aeabi_dmul+0x24a>
  408d3c:	ea95 0f0c 	teq	r5, ip
  408d40:	d106      	bne.n	408d50 <__aeabi_ddiv+0x1b0>
  408d42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408d46:	f43f aefd 	beq.w	408b44 <__aeabi_dmul+0x1f8>
  408d4a:	4610      	mov	r0, r2
  408d4c:	4619      	mov	r1, r3
  408d4e:	e722      	b.n	408b96 <__aeabi_dmul+0x24a>
  408d50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408d54:	bf18      	it	ne
  408d56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408d5a:	f47f aec5 	bne.w	408ae8 <__aeabi_dmul+0x19c>
  408d5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408d62:	f47f af0d 	bne.w	408b80 <__aeabi_dmul+0x234>
  408d66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408d6a:	f47f aeeb 	bne.w	408b44 <__aeabi_dmul+0x1f8>
  408d6e:	e712      	b.n	408b96 <__aeabi_dmul+0x24a>

00408d70 <__gedf2>:
  408d70:	f04f 3cff 	mov.w	ip, #4294967295
  408d74:	e006      	b.n	408d84 <__cmpdf2+0x4>
  408d76:	bf00      	nop

00408d78 <__ledf2>:
  408d78:	f04f 0c01 	mov.w	ip, #1
  408d7c:	e002      	b.n	408d84 <__cmpdf2+0x4>
  408d7e:	bf00      	nop

00408d80 <__cmpdf2>:
  408d80:	f04f 0c01 	mov.w	ip, #1
  408d84:	f84d cd04 	str.w	ip, [sp, #-4]!
  408d88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408d8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408d90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408d94:	bf18      	it	ne
  408d96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408d9a:	d01b      	beq.n	408dd4 <__cmpdf2+0x54>
  408d9c:	b001      	add	sp, #4
  408d9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408da2:	bf0c      	ite	eq
  408da4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408da8:	ea91 0f03 	teqne	r1, r3
  408dac:	bf02      	ittt	eq
  408dae:	ea90 0f02 	teqeq	r0, r2
  408db2:	2000      	moveq	r0, #0
  408db4:	4770      	bxeq	lr
  408db6:	f110 0f00 	cmn.w	r0, #0
  408dba:	ea91 0f03 	teq	r1, r3
  408dbe:	bf58      	it	pl
  408dc0:	4299      	cmppl	r1, r3
  408dc2:	bf08      	it	eq
  408dc4:	4290      	cmpeq	r0, r2
  408dc6:	bf2c      	ite	cs
  408dc8:	17d8      	asrcs	r0, r3, #31
  408dca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408dce:	f040 0001 	orr.w	r0, r0, #1
  408dd2:	4770      	bx	lr
  408dd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408dd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408ddc:	d102      	bne.n	408de4 <__cmpdf2+0x64>
  408dde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408de2:	d107      	bne.n	408df4 <__cmpdf2+0x74>
  408de4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408de8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408dec:	d1d6      	bne.n	408d9c <__cmpdf2+0x1c>
  408dee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408df2:	d0d3      	beq.n	408d9c <__cmpdf2+0x1c>
  408df4:	f85d 0b04 	ldr.w	r0, [sp], #4
  408df8:	4770      	bx	lr
  408dfa:	bf00      	nop

00408dfc <__aeabi_cdrcmple>:
  408dfc:	4684      	mov	ip, r0
  408dfe:	4610      	mov	r0, r2
  408e00:	4662      	mov	r2, ip
  408e02:	468c      	mov	ip, r1
  408e04:	4619      	mov	r1, r3
  408e06:	4663      	mov	r3, ip
  408e08:	e000      	b.n	408e0c <__aeabi_cdcmpeq>
  408e0a:	bf00      	nop

00408e0c <__aeabi_cdcmpeq>:
  408e0c:	b501      	push	{r0, lr}
  408e0e:	f7ff ffb7 	bl	408d80 <__cmpdf2>
  408e12:	2800      	cmp	r0, #0
  408e14:	bf48      	it	mi
  408e16:	f110 0f00 	cmnmi.w	r0, #0
  408e1a:	bd01      	pop	{r0, pc}

00408e1c <__aeabi_dcmpeq>:
  408e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e20:	f7ff fff4 	bl	408e0c <__aeabi_cdcmpeq>
  408e24:	bf0c      	ite	eq
  408e26:	2001      	moveq	r0, #1
  408e28:	2000      	movne	r0, #0
  408e2a:	f85d fb08 	ldr.w	pc, [sp], #8
  408e2e:	bf00      	nop

00408e30 <__aeabi_dcmplt>:
  408e30:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e34:	f7ff ffea 	bl	408e0c <__aeabi_cdcmpeq>
  408e38:	bf34      	ite	cc
  408e3a:	2001      	movcc	r0, #1
  408e3c:	2000      	movcs	r0, #0
  408e3e:	f85d fb08 	ldr.w	pc, [sp], #8
  408e42:	bf00      	nop

00408e44 <__aeabi_dcmple>:
  408e44:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e48:	f7ff ffe0 	bl	408e0c <__aeabi_cdcmpeq>
  408e4c:	bf94      	ite	ls
  408e4e:	2001      	movls	r0, #1
  408e50:	2000      	movhi	r0, #0
  408e52:	f85d fb08 	ldr.w	pc, [sp], #8
  408e56:	bf00      	nop

00408e58 <__aeabi_dcmpge>:
  408e58:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e5c:	f7ff ffce 	bl	408dfc <__aeabi_cdrcmple>
  408e60:	bf94      	ite	ls
  408e62:	2001      	movls	r0, #1
  408e64:	2000      	movhi	r0, #0
  408e66:	f85d fb08 	ldr.w	pc, [sp], #8
  408e6a:	bf00      	nop

00408e6c <__aeabi_dcmpgt>:
  408e6c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e70:	f7ff ffc4 	bl	408dfc <__aeabi_cdrcmple>
  408e74:	bf34      	ite	cc
  408e76:	2001      	movcc	r0, #1
  408e78:	2000      	movcs	r0, #0
  408e7a:	f85d fb08 	ldr.w	pc, [sp], #8
  408e7e:	bf00      	nop

00408e80 <__aeabi_dcmpun>:
  408e80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408e84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408e88:	d102      	bne.n	408e90 <__aeabi_dcmpun+0x10>
  408e8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408e8e:	d10a      	bne.n	408ea6 <__aeabi_dcmpun+0x26>
  408e90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408e94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408e98:	d102      	bne.n	408ea0 <__aeabi_dcmpun+0x20>
  408e9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408e9e:	d102      	bne.n	408ea6 <__aeabi_dcmpun+0x26>
  408ea0:	f04f 0000 	mov.w	r0, #0
  408ea4:	4770      	bx	lr
  408ea6:	f04f 0001 	mov.w	r0, #1
  408eaa:	4770      	bx	lr

00408eac <__aeabi_d2iz>:
  408eac:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408eb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408eb4:	d215      	bcs.n	408ee2 <__aeabi_d2iz+0x36>
  408eb6:	d511      	bpl.n	408edc <__aeabi_d2iz+0x30>
  408eb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408ebc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408ec0:	d912      	bls.n	408ee8 <__aeabi_d2iz+0x3c>
  408ec2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408ec6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408eca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408ece:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408ed2:	fa23 f002 	lsr.w	r0, r3, r2
  408ed6:	bf18      	it	ne
  408ed8:	4240      	negne	r0, r0
  408eda:	4770      	bx	lr
  408edc:	f04f 0000 	mov.w	r0, #0
  408ee0:	4770      	bx	lr
  408ee2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408ee6:	d105      	bne.n	408ef4 <__aeabi_d2iz+0x48>
  408ee8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408eec:	bf08      	it	eq
  408eee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408ef2:	4770      	bx	lr
  408ef4:	f04f 0000 	mov.w	r0, #0
  408ef8:	4770      	bx	lr
  408efa:	bf00      	nop

00408efc <__aeabi_uldivmod>:
  408efc:	b953      	cbnz	r3, 408f14 <__aeabi_uldivmod+0x18>
  408efe:	b94a      	cbnz	r2, 408f14 <__aeabi_uldivmod+0x18>
  408f00:	2900      	cmp	r1, #0
  408f02:	bf08      	it	eq
  408f04:	2800      	cmpeq	r0, #0
  408f06:	bf1c      	itt	ne
  408f08:	f04f 31ff 	movne.w	r1, #4294967295
  408f0c:	f04f 30ff 	movne.w	r0, #4294967295
  408f10:	f000 b97a 	b.w	409208 <__aeabi_idiv0>
  408f14:	f1ad 0c08 	sub.w	ip, sp, #8
  408f18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408f1c:	f000 f806 	bl	408f2c <__udivmoddi4>
  408f20:	f8dd e004 	ldr.w	lr, [sp, #4]
  408f24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408f28:	b004      	add	sp, #16
  408f2a:	4770      	bx	lr

00408f2c <__udivmoddi4>:
  408f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408f30:	468c      	mov	ip, r1
  408f32:	460e      	mov	r6, r1
  408f34:	4604      	mov	r4, r0
  408f36:	9d08      	ldr	r5, [sp, #32]
  408f38:	2b00      	cmp	r3, #0
  408f3a:	d150      	bne.n	408fde <__udivmoddi4+0xb2>
  408f3c:	428a      	cmp	r2, r1
  408f3e:	4617      	mov	r7, r2
  408f40:	d96c      	bls.n	40901c <__udivmoddi4+0xf0>
  408f42:	fab2 fe82 	clz	lr, r2
  408f46:	f1be 0f00 	cmp.w	lr, #0
  408f4a:	d00b      	beq.n	408f64 <__udivmoddi4+0x38>
  408f4c:	f1ce 0c20 	rsb	ip, lr, #32
  408f50:	fa01 f60e 	lsl.w	r6, r1, lr
  408f54:	fa20 fc0c 	lsr.w	ip, r0, ip
  408f58:	fa02 f70e 	lsl.w	r7, r2, lr
  408f5c:	ea4c 0c06 	orr.w	ip, ip, r6
  408f60:	fa00 f40e 	lsl.w	r4, r0, lr
  408f64:	0c3a      	lsrs	r2, r7, #16
  408f66:	fbbc f9f2 	udiv	r9, ip, r2
  408f6a:	b2bb      	uxth	r3, r7
  408f6c:	fb02 cc19 	mls	ip, r2, r9, ip
  408f70:	fb09 fa03 	mul.w	sl, r9, r3
  408f74:	ea4f 4814 	mov.w	r8, r4, lsr #16
  408f78:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
  408f7c:	45b2      	cmp	sl, r6
  408f7e:	d90a      	bls.n	408f96 <__udivmoddi4+0x6a>
  408f80:	19f6      	adds	r6, r6, r7
  408f82:	f109 31ff 	add.w	r1, r9, #4294967295
  408f86:	f080 8125 	bcs.w	4091d4 <__udivmoddi4+0x2a8>
  408f8a:	45b2      	cmp	sl, r6
  408f8c:	f240 8122 	bls.w	4091d4 <__udivmoddi4+0x2a8>
  408f90:	f1a9 0902 	sub.w	r9, r9, #2
  408f94:	443e      	add	r6, r7
  408f96:	eba6 060a 	sub.w	r6, r6, sl
  408f9a:	fbb6 f0f2 	udiv	r0, r6, r2
  408f9e:	fb02 6610 	mls	r6, r2, r0, r6
  408fa2:	fb00 f303 	mul.w	r3, r0, r3
  408fa6:	b2a4      	uxth	r4, r4
  408fa8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  408fac:	42a3      	cmp	r3, r4
  408fae:	d909      	bls.n	408fc4 <__udivmoddi4+0x98>
  408fb0:	19e4      	adds	r4, r4, r7
  408fb2:	f100 32ff 	add.w	r2, r0, #4294967295
  408fb6:	f080 810b 	bcs.w	4091d0 <__udivmoddi4+0x2a4>
  408fba:	42a3      	cmp	r3, r4
  408fbc:	f240 8108 	bls.w	4091d0 <__udivmoddi4+0x2a4>
  408fc0:	3802      	subs	r0, #2
  408fc2:	443c      	add	r4, r7
  408fc4:	2100      	movs	r1, #0
  408fc6:	1ae4      	subs	r4, r4, r3
  408fc8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408fcc:	2d00      	cmp	r5, #0
  408fce:	d062      	beq.n	409096 <__udivmoddi4+0x16a>
  408fd0:	2300      	movs	r3, #0
  408fd2:	fa24 f40e 	lsr.w	r4, r4, lr
  408fd6:	602c      	str	r4, [r5, #0]
  408fd8:	606b      	str	r3, [r5, #4]
  408fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408fde:	428b      	cmp	r3, r1
  408fe0:	d907      	bls.n	408ff2 <__udivmoddi4+0xc6>
  408fe2:	2d00      	cmp	r5, #0
  408fe4:	d055      	beq.n	409092 <__udivmoddi4+0x166>
  408fe6:	2100      	movs	r1, #0
  408fe8:	e885 0041 	stmia.w	r5, {r0, r6}
  408fec:	4608      	mov	r0, r1
  408fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ff2:	fab3 f183 	clz	r1, r3
  408ff6:	2900      	cmp	r1, #0
  408ff8:	f040 808f 	bne.w	40911a <__udivmoddi4+0x1ee>
  408ffc:	42b3      	cmp	r3, r6
  408ffe:	d302      	bcc.n	409006 <__udivmoddi4+0xda>
  409000:	4282      	cmp	r2, r0
  409002:	f200 80fc 	bhi.w	4091fe <__udivmoddi4+0x2d2>
  409006:	1a84      	subs	r4, r0, r2
  409008:	eb66 0603 	sbc.w	r6, r6, r3
  40900c:	2001      	movs	r0, #1
  40900e:	46b4      	mov	ip, r6
  409010:	2d00      	cmp	r5, #0
  409012:	d040      	beq.n	409096 <__udivmoddi4+0x16a>
  409014:	e885 1010 	stmia.w	r5, {r4, ip}
  409018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40901c:	b912      	cbnz	r2, 409024 <__udivmoddi4+0xf8>
  40901e:	2701      	movs	r7, #1
  409020:	fbb7 f7f2 	udiv	r7, r7, r2
  409024:	fab7 fe87 	clz	lr, r7
  409028:	f1be 0f00 	cmp.w	lr, #0
  40902c:	d135      	bne.n	40909a <__udivmoddi4+0x16e>
  40902e:	2101      	movs	r1, #1
  409030:	1bf6      	subs	r6, r6, r7
  409032:	ea4f 4c17 	mov.w	ip, r7, lsr #16
  409036:	fa1f f887 	uxth.w	r8, r7
  40903a:	fbb6 f2fc 	udiv	r2, r6, ip
  40903e:	fb0c 6612 	mls	r6, ip, r2, r6
  409042:	fb08 f002 	mul.w	r0, r8, r2
  409046:	0c23      	lsrs	r3, r4, #16
  409048:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
  40904c:	42b0      	cmp	r0, r6
  40904e:	d907      	bls.n	409060 <__udivmoddi4+0x134>
  409050:	19f6      	adds	r6, r6, r7
  409052:	f102 33ff 	add.w	r3, r2, #4294967295
  409056:	d202      	bcs.n	40905e <__udivmoddi4+0x132>
  409058:	42b0      	cmp	r0, r6
  40905a:	f200 80d2 	bhi.w	409202 <__udivmoddi4+0x2d6>
  40905e:	461a      	mov	r2, r3
  409060:	1a36      	subs	r6, r6, r0
  409062:	fbb6 f0fc 	udiv	r0, r6, ip
  409066:	fb0c 6610 	mls	r6, ip, r0, r6
  40906a:	fb08 f800 	mul.w	r8, r8, r0
  40906e:	b2a3      	uxth	r3, r4
  409070:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
  409074:	45a0      	cmp	r8, r4
  409076:	d907      	bls.n	409088 <__udivmoddi4+0x15c>
  409078:	19e4      	adds	r4, r4, r7
  40907a:	f100 33ff 	add.w	r3, r0, #4294967295
  40907e:	d202      	bcs.n	409086 <__udivmoddi4+0x15a>
  409080:	45a0      	cmp	r8, r4
  409082:	f200 80b9 	bhi.w	4091f8 <__udivmoddi4+0x2cc>
  409086:	4618      	mov	r0, r3
  409088:	eba4 0408 	sub.w	r4, r4, r8
  40908c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  409090:	e79c      	b.n	408fcc <__udivmoddi4+0xa0>
  409092:	4629      	mov	r1, r5
  409094:	4628      	mov	r0, r5
  409096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40909a:	fa07 f70e 	lsl.w	r7, r7, lr
  40909e:	f1ce 0320 	rsb	r3, lr, #32
  4090a2:	fa26 f203 	lsr.w	r2, r6, r3
  4090a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
  4090aa:	fbb2 f1fc 	udiv	r1, r2, ip
  4090ae:	fa1f f887 	uxth.w	r8, r7
  4090b2:	fb0c 2211 	mls	r2, ip, r1, r2
  4090b6:	fa06 f60e 	lsl.w	r6, r6, lr
  4090ba:	fa20 f303 	lsr.w	r3, r0, r3
  4090be:	fb01 f908 	mul.w	r9, r1, r8
  4090c2:	4333      	orrs	r3, r6
  4090c4:	0c1e      	lsrs	r6, r3, #16
  4090c6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
  4090ca:	45b1      	cmp	r9, r6
  4090cc:	fa00 f40e 	lsl.w	r4, r0, lr
  4090d0:	d909      	bls.n	4090e6 <__udivmoddi4+0x1ba>
  4090d2:	19f6      	adds	r6, r6, r7
  4090d4:	f101 32ff 	add.w	r2, r1, #4294967295
  4090d8:	f080 808c 	bcs.w	4091f4 <__udivmoddi4+0x2c8>
  4090dc:	45b1      	cmp	r9, r6
  4090de:	f240 8089 	bls.w	4091f4 <__udivmoddi4+0x2c8>
  4090e2:	3902      	subs	r1, #2
  4090e4:	443e      	add	r6, r7
  4090e6:	eba6 0609 	sub.w	r6, r6, r9
  4090ea:	fbb6 f0fc 	udiv	r0, r6, ip
  4090ee:	fb0c 6210 	mls	r2, ip, r0, r6
  4090f2:	fb00 f908 	mul.w	r9, r0, r8
  4090f6:	b29e      	uxth	r6, r3
  4090f8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
  4090fc:	45b1      	cmp	r9, r6
  4090fe:	d907      	bls.n	409110 <__udivmoddi4+0x1e4>
  409100:	19f6      	adds	r6, r6, r7
  409102:	f100 33ff 	add.w	r3, r0, #4294967295
  409106:	d271      	bcs.n	4091ec <__udivmoddi4+0x2c0>
  409108:	45b1      	cmp	r9, r6
  40910a:	d96f      	bls.n	4091ec <__udivmoddi4+0x2c0>
  40910c:	3802      	subs	r0, #2
  40910e:	443e      	add	r6, r7
  409110:	eba6 0609 	sub.w	r6, r6, r9
  409114:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  409118:	e78f      	b.n	40903a <__udivmoddi4+0x10e>
  40911a:	f1c1 0720 	rsb	r7, r1, #32
  40911e:	fa22 f807 	lsr.w	r8, r2, r7
  409122:	408b      	lsls	r3, r1
  409124:	ea48 0303 	orr.w	r3, r8, r3
  409128:	fa26 f407 	lsr.w	r4, r6, r7
  40912c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  409130:	fbb4 f9fe 	udiv	r9, r4, lr
  409134:	fa1f fc83 	uxth.w	ip, r3
  409138:	fb0e 4419 	mls	r4, lr, r9, r4
  40913c:	408e      	lsls	r6, r1
  40913e:	fa20 f807 	lsr.w	r8, r0, r7
  409142:	fb09 fa0c 	mul.w	sl, r9, ip
  409146:	ea48 0806 	orr.w	r8, r8, r6
  40914a:	ea4f 4618 	mov.w	r6, r8, lsr #16
  40914e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
  409152:	45a2      	cmp	sl, r4
  409154:	fa02 f201 	lsl.w	r2, r2, r1
  409158:	fa00 f601 	lsl.w	r6, r0, r1
  40915c:	d908      	bls.n	409170 <__udivmoddi4+0x244>
  40915e:	18e4      	adds	r4, r4, r3
  409160:	f109 30ff 	add.w	r0, r9, #4294967295
  409164:	d244      	bcs.n	4091f0 <__udivmoddi4+0x2c4>
  409166:	45a2      	cmp	sl, r4
  409168:	d942      	bls.n	4091f0 <__udivmoddi4+0x2c4>
  40916a:	f1a9 0902 	sub.w	r9, r9, #2
  40916e:	441c      	add	r4, r3
  409170:	eba4 040a 	sub.w	r4, r4, sl
  409174:	fbb4 f0fe 	udiv	r0, r4, lr
  409178:	fb0e 4410 	mls	r4, lr, r0, r4
  40917c:	fb00 fc0c 	mul.w	ip, r0, ip
  409180:	fa1f f888 	uxth.w	r8, r8
  409184:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
  409188:	45a4      	cmp	ip, r4
  40918a:	d907      	bls.n	40919c <__udivmoddi4+0x270>
  40918c:	18e4      	adds	r4, r4, r3
  40918e:	f100 3eff 	add.w	lr, r0, #4294967295
  409192:	d229      	bcs.n	4091e8 <__udivmoddi4+0x2bc>
  409194:	45a4      	cmp	ip, r4
  409196:	d927      	bls.n	4091e8 <__udivmoddi4+0x2bc>
  409198:	3802      	subs	r0, #2
  40919a:	441c      	add	r4, r3
  40919c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4091a0:	fba0 8902 	umull	r8, r9, r0, r2
  4091a4:	eba4 0c0c 	sub.w	ip, r4, ip
  4091a8:	45cc      	cmp	ip, r9
  4091aa:	46c2      	mov	sl, r8
  4091ac:	46ce      	mov	lr, r9
  4091ae:	d315      	bcc.n	4091dc <__udivmoddi4+0x2b0>
  4091b0:	d012      	beq.n	4091d8 <__udivmoddi4+0x2ac>
  4091b2:	b155      	cbz	r5, 4091ca <__udivmoddi4+0x29e>
  4091b4:	ebb6 030a 	subs.w	r3, r6, sl
  4091b8:	eb6c 060e 	sbc.w	r6, ip, lr
  4091bc:	fa06 f707 	lsl.w	r7, r6, r7
  4091c0:	40cb      	lsrs	r3, r1
  4091c2:	431f      	orrs	r7, r3
  4091c4:	40ce      	lsrs	r6, r1
  4091c6:	602f      	str	r7, [r5, #0]
  4091c8:	606e      	str	r6, [r5, #4]
  4091ca:	2100      	movs	r1, #0
  4091cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4091d0:	4610      	mov	r0, r2
  4091d2:	e6f7      	b.n	408fc4 <__udivmoddi4+0x98>
  4091d4:	4689      	mov	r9, r1
  4091d6:	e6de      	b.n	408f96 <__udivmoddi4+0x6a>
  4091d8:	4546      	cmp	r6, r8
  4091da:	d2ea      	bcs.n	4091b2 <__udivmoddi4+0x286>
  4091dc:	ebb8 0a02 	subs.w	sl, r8, r2
  4091e0:	eb69 0e03 	sbc.w	lr, r9, r3
  4091e4:	3801      	subs	r0, #1
  4091e6:	e7e4      	b.n	4091b2 <__udivmoddi4+0x286>
  4091e8:	4670      	mov	r0, lr
  4091ea:	e7d7      	b.n	40919c <__udivmoddi4+0x270>
  4091ec:	4618      	mov	r0, r3
  4091ee:	e78f      	b.n	409110 <__udivmoddi4+0x1e4>
  4091f0:	4681      	mov	r9, r0
  4091f2:	e7bd      	b.n	409170 <__udivmoddi4+0x244>
  4091f4:	4611      	mov	r1, r2
  4091f6:	e776      	b.n	4090e6 <__udivmoddi4+0x1ba>
  4091f8:	3802      	subs	r0, #2
  4091fa:	443c      	add	r4, r7
  4091fc:	e744      	b.n	409088 <__udivmoddi4+0x15c>
  4091fe:	4608      	mov	r0, r1
  409200:	e706      	b.n	409010 <__udivmoddi4+0xe4>
  409202:	3a02      	subs	r2, #2
  409204:	443e      	add	r6, r7
  409206:	e72b      	b.n	409060 <__udivmoddi4+0x134>

00409208 <__aeabi_idiv0>:
  409208:	4770      	bx	lr
  40920a:	bf00      	nop
  40920c:	706d6153 	.word	0x706d6153
  409210:	7220656c 	.word	0x7220656c
  409214:	20657461 	.word	0x20657461
  409218:	68206f74 	.word	0x68206f74
  40921c:	21686769 	.word	0x21686769
  409220:	00000d0a 	.word	0x00000d0a
  409224:	75254843 	.word	0x75254843
  409228:	2b25203a 	.word	0x2b25203a
  40922c:	302e3620 	.word	0x302e3620
  409230:	2c566d66 	.word	0x2c566d66
  409234:	00000020 	.word	0x00000020
  409238:	20434441 	.word	0x20434441
  40923c:	6e616863 	.word	0x6e616863
  409240:	206c656e 	.word	0x206c656e
  409244:	67207525 	.word	0x67207525
  409248:	206e6961 	.word	0x206e6961
  40924c:	20746573 	.word	0x20746573
  409250:	25206f74 	.word	0x25206f74
  409254:	000d0a64 	.word	0x000d0a64
  409258:	20434441 	.word	0x20434441
  40925c:	6f736572 	.word	0x6f736572
  409260:	6974756c 	.word	0x6974756c
  409264:	73206e6f 	.word	0x73206e6f
  409268:	74207465 	.word	0x74207465
  40926c:	3031206f 	.word	0x3031206f
  409270:	74696220 	.word	0x74696220
  409274:	0d0a2e73 	.word	0x0d0a2e73
  409278:	00000000 	.word	0x00000000
  40927c:	20434441 	.word	0x20434441
  409280:	6f736572 	.word	0x6f736572
  409284:	6974756c 	.word	0x6974756c
  409288:	73206e6f 	.word	0x73206e6f
  40928c:	74207465 	.word	0x74207465
  409290:	3231206f 	.word	0x3231206f
  409294:	74696220 	.word	0x74696220
  409298:	0d0a2e73 	.word	0x0d0a2e73
  40929c:	00000000 	.word	0x00000000
  4092a0:	20514144 	.word	0x20514144
  4092a4:	6c6c6977 	.word	0x6c6c6977
  4092a8:	74746120 	.word	0x74746120
  4092ac:	74706d65 	.word	0x74706d65
  4092b0:	206f7420 	.word	0x206f7420
  4092b4:	656b6174 	.word	0x656b6174
  4092b8:	20752520 	.word	0x20752520
  4092bc:	706d6173 	.word	0x706d6173
  4092c0:	2073656c 	.word	0x2073656c
  4092c4:	20726570 	.word	0x20726570
  4092c8:	6e616863 	.word	0x6e616863
  4092cc:	0a6c656e 	.word	0x0a6c656e
  4092d0:	0000000d 	.word	0x0000000d
  4092d4:	636f6c42 	.word	0x636f6c42
  4092d8:	6973206b 	.word	0x6973206b
  4092dc:	7320657a 	.word	0x7320657a
  4092e0:	74207465 	.word	0x74207465
  4092e4:	7525206f 	.word	0x7525206f
  4092e8:	00000d0a 	.word	0x00000d0a
  4092ec:	20434144 	.word	0x20434144
  4092f0:	6e616863 	.word	0x6e616863
  4092f4:	206c656e 	.word	0x206c656e
  4092f8:	73207525 	.word	0x73207525
  4092fc:	74207465 	.word	0x74207465
  409300:	6425206f 	.word	0x6425206f
  409304:	0a566d20 	.word	0x0a566d20
  409308:	0000000d 	.word	0x0000000d
  40930c:	20514144 	.word	0x20514144
  409310:	6c6c6977 	.word	0x6c6c6977
  409314:	6d617320 	.word	0x6d617320
  409318:	20656c70 	.word	0x20656c70
  40931c:	206c6c61 	.word	0x206c6c61
  409320:	62616e65 	.word	0x62616e65
  409324:	2064656c 	.word	0x2064656c
  409328:	6e616863 	.word	0x6e616863
  40932c:	736c656e 	.word	0x736c656e
  409330:	20752520 	.word	0x20752520
  409334:	656d6974 	.word	0x656d6974
  409338:	000d0a73 	.word	0x000d0a73
  40933c:	75716341 	.word	0x75716341
  409340:	74697369 	.word	0x74697369
  409344:	206e6f69 	.word	0x206e6f69
  409348:	72617473 	.word	0x72617473
  40934c:	20646574 	.word	0x20646574
  409350:	41206e69 	.word	0x41206e69
  409354:	49494353 	.word	0x49494353
  409358:	00000d0a 	.word	0x00000d0a
  40935c:	75716341 	.word	0x75716341
  409360:	74697369 	.word	0x74697369
  409364:	206e6f69 	.word	0x206e6f69
  409368:	72617473 	.word	0x72617473
  40936c:	20646574 	.word	0x20646574
  409370:	62206e69 	.word	0x62206e69
  409374:	72616e69 	.word	0x72616e69
  409378:	000d0a79 	.word	0x000d0a79
  40937c:	706d6153 	.word	0x706d6153
  409380:	7020656c 	.word	0x7020656c
  409384:	6f697265 	.word	0x6f697265
  409388:	65732064 	.word	0x65732064
  40938c:	6f742074 	.word	0x6f742074
  409390:	20752520 	.word	0x20752520
  409394:	0d0a7375 	.word	0x0d0a7375
  409398:	00000000 	.word	0x00000000
  40939c:	75716553 	.word	0x75716553
  4093a0:	65636e65 	.word	0x65636e65
  4093a4:	74657320 	.word	0x74657320
  4093a8:	3a6f7420 	.word	0x3a6f7420
  4093ac:	2c752520 	.word	0x2c752520
  4093b0:	2c752520 	.word	0x2c752520
  4093b4:	2c752520 	.word	0x2c752520
  4093b8:	0a752520 	.word	0x0a752520
  4093bc:	0000000d 	.word	0x0000000d
  4093c0:	75716341 	.word	0x75716341
  4093c4:	74697369 	.word	0x74697369
  4093c8:	206e6f69 	.word	0x206e6f69
  4093cc:	72617473 	.word	0x72617473
  4093d0:	0a646574 	.word	0x0a646574
  4093d4:	0000000d 	.word	0x0000000d
  4093d8:	75716341 	.word	0x75716341
  4093dc:	74697369 	.word	0x74697369
  4093e0:	206e6f69 	.word	0x206e6f69
  4093e4:	706f7473 	.word	0x706f7473
  4093e8:	0a646570 	.word	0x0a646570
  4093ec:	0000000d 	.word	0x0000000d
  4093f0:	4f525245 	.word	0x4f525245
  4093f4:	65732052 	.word	0x65732052
  4093f8:	6e697474 	.word	0x6e697474
  4093fc:	6f632067 	.word	0x6f632067
  409400:	6e616d6d 	.word	0x6e616d6d
  409404:	000d0a64 	.word	0x000d0a64
  409408:	6d6d6f43 	.word	0x6d6d6f43
  40940c:	20646e61 	.word	0x20646e61
  409410:	746e7973 	.word	0x746e7973
  409414:	45207861 	.word	0x45207861
  409418:	524f5252 	.word	0x524f5252
  40941c:	00000d0a 	.word	0x00000d0a

00409420 <_global_impure_ptr>:
  409420:	200002a0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  409430:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  409440:	46454443 00000000 33323130 37363534     CDEF....01234567
  409450:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  409460:	0000296c 00000030                       l)..0...

00409468 <blanks.7223>:
  409468:	20202020 20202020 20202020 20202020                     

00409478 <zeroes.7224>:
  409478:	30303030 30303030 30303030 30303030     0000000000000000
  409488:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  409498:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004094a8 <__mprec_bigtens>:
  4094a8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4094b8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4094c8:	7f73bf3c 75154fdd                       <.s..O.u

004094d0 <__mprec_tens>:
  4094d0:	00000000 3ff00000 00000000 40240000     .......?......$@
  4094e0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4094f0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409500:	00000000 412e8480 00000000 416312d0     .......A......cA
  409510:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409520:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409530:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409540:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409550:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  409560:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  409570:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  409580:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  409590:	79d99db4 44ea7843                       ...yCx.D

00409598 <p05.6055>:
  409598:	00000005 00000019 0000007d              ........}...

004095a4 <_ctype_>:
  4095a4:	20202000 20202020 28282020 20282828     .         ((((( 
  4095b4:	20202020 20202020 20202020 20202020                     
  4095c4:	10108820 10101010 10101010 10101010      ...............
  4095d4:	04040410 04040404 10040404 10101010     ................
  4095e4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4095f4:	01010101 01010101 01010101 10101010     ................
  409604:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409614:	02020202 02020202 02020202 10101010     ................
  409624:	00000020 00000000 00000000 00000000      ...............
	...

004096a8 <_init>:
  4096a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4096aa:	bf00      	nop
  4096ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4096ae:	bc08      	pop	{r3}
  4096b0:	469e      	mov	lr, r3
  4096b2:	4770      	bx	lr

004096b4 <__init_array_start>:
  4096b4:	00406459 	.word	0x00406459

004096b8 <__frame_dummy_init_array_entry>:
  4096b8:	004000f5                                ..@.

004096bc <_fini>:
  4096bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4096be:	bf00      	nop
  4096c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4096c2:	bc08      	pop	{r3}
  4096c4:	469e      	mov	lr, r3
  4096c6:	4770      	bx	lr

004096c8 <__fini_array_start>:
  4096c8:	004000d1 	.word	0x004000d1

Disassembly of section .relocate:

20000000 <SystemInit>:
	EFC->EEFC_FMR = EEFC_FMR_FWS(3);
20000000:	f44f 7140 	mov.w	r1, #768	; 0x300
20000004:	4a19      	ldr	r2, [pc, #100]	; (2000006c <SystemInit+0x6c>)
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000006:	4b1a      	ldr	r3, [pc, #104]	; (20000070 <SystemInit+0x70>)
	EFC->EEFC_FMR = EEFC_FMR_FWS(3);
20000008:	6011      	str	r1, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000000a:	6a1a      	ldr	r2, [r3, #32]
2000000c:	01d2      	lsls	r2, r2, #7
2000000e:	d405      	bmi.n	2000001c <SystemInit+0x1c>
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000010:	461a      	mov	r2, r3
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000012:	4918      	ldr	r1, [pc, #96]	; (20000074 <SystemInit+0x74>)
20000014:	6219      	str	r1, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000016:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000018:	07d8      	lsls	r0, r3, #31
2000001a:	d5fc      	bpl.n	20000016 <SystemInit+0x16>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000001c:	4b14      	ldr	r3, [pc, #80]	; (20000070 <SystemInit+0x70>)
2000001e:	4916      	ldr	r1, [pc, #88]	; (20000078 <SystemInit+0x78>)
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000020:	461a      	mov	r2, r3
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000022:	6219      	str	r1, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000024:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000026:	03d9      	lsls	r1, r3, #15
20000028:	d5fc      	bpl.n	20000024 <SystemInit+0x24>
		PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2000002a:	6b13      	ldr	r3, [r2, #48]	; 0x30
		while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000002c:	4810      	ldr	r0, [pc, #64]	; (20000070 <SystemInit+0x70>)
		PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2000002e:	f023 0303 	bic.w	r3, r3, #3
20000032:	f043 0301 	orr.w	r3, r3, #1
20000036:	6313      	str	r3, [r2, #48]	; 0x30
		while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000038:	6e83      	ldr	r3, [r0, #104]	; 0x68
2000003a:	071b      	lsls	r3, r3, #28
2000003c:	d5fc      	bpl.n	20000038 <SystemInit+0x38>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2000003e:	4b0f      	ldr	r3, [pc, #60]	; (2000007c <SystemInit+0x7c>)
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000040:	490b      	ldr	r1, [pc, #44]	; (20000070 <SystemInit+0x70>)
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000042:	6283      	str	r3, [r0, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000044:	6e8b      	ldr	r3, [r1, #104]	; 0x68
20000046:	0798      	lsls	r0, r3, #30
20000048:	d5fc      	bpl.n	20000044 <SystemInit+0x44>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2000004a:	2311      	movs	r3, #17
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000004c:	4a08      	ldr	r2, [pc, #32]	; (20000070 <SystemInit+0x70>)
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2000004e:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000050:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000052:	0719      	lsls	r1, r3, #28
20000054:	d5fc      	bpl.n	20000050 <SystemInit+0x50>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000056:	2312      	movs	r3, #18
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000058:	4905      	ldr	r1, [pc, #20]	; (20000070 <SystemInit+0x70>)
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000005a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000005c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
2000005e:	071b      	lsls	r3, r3, #28
20000060:	d5fc      	bpl.n	2000005c <SystemInit+0x5c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000062:	4b07      	ldr	r3, [pc, #28]	; (20000080 <SystemInit+0x80>)
20000064:	4a07      	ldr	r2, [pc, #28]	; (20000084 <SystemInit+0x84>)
20000066:	601a      	str	r2, [r3, #0]
20000068:	4770      	bx	lr
2000006a:	bf00      	nop
2000006c:	400e0a00 	.word	0x400e0a00
20000070:	400e0400 	.word	0x400e0400
20000074:	00370809 	.word	0x00370809
20000078:	01370809 	.word	0x01370809
2000007c:	201f3f03 	.word	0x201f3f03
20000080:	20000294 	.word	0x20000294
20000084:	03d09000 	.word	0x03d09000

20000088 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20000088:	4b0c      	ldr	r3, [pc, #48]	; (200000bc <system_init_flash+0x34>)
2000008a:	4298      	cmp	r0, r3
2000008c:	d911      	bls.n	200000b2 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2000008e:	4b0c      	ldr	r3, [pc, #48]	; (200000c0 <system_init_flash+0x38>)
20000090:	4298      	cmp	r0, r3
20000092:	d909      	bls.n	200000a8 <system_init_flash+0x20>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000094:	4b0b      	ldr	r3, [pc, #44]	; (200000c4 <system_init_flash+0x3c>)
20000096:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
20000098:	bf94      	ite	ls
2000009a:	f44f 7200 	movls.w	r2, #512	; 0x200
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
2000009e:	f44f 7240 	movhi.w	r2, #768	; 0x300
200000a2:	4b09      	ldr	r3, [pc, #36]	; (200000c8 <system_init_flash+0x40>)
200000a4:	601a      	str	r2, [r3, #0]
200000a6:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
200000a8:	f44f 7280 	mov.w	r2, #256	; 0x100
200000ac:	4b06      	ldr	r3, [pc, #24]	; (200000c8 <system_init_flash+0x40>)
200000ae:	601a      	str	r2, [r3, #0]
200000b0:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
200000b2:	2200      	movs	r2, #0
200000b4:	4b04      	ldr	r3, [pc, #16]	; (200000c8 <system_init_flash+0x40>)
200000b6:	601a      	str	r2, [r3, #0]
200000b8:	4770      	bx	lr
200000ba:	bf00      	nop
200000bc:	0103663f 	.word	0x0103663f
200000c0:	01c9c37f 	.word	0x01c9c37f
200000c4:	0337f97f 	.word	0x0337f97f
200000c8:	400e0a00 	.word	0x400e0a00

200000cc <udi_api_cdc_comm>:
200000cc:	0040013d 0040018d 004001c5 004001bd     =.@...@...@...@.
200000dc:	00000000                                ....

200000e0 <udi_api_cdc_data>:
200000e0:	00400559 0040019d 004001b9 004001bd     Y.@...@...@...@.
200000f0:	004003e5                                ..@.

200000f4 <udc_string_desc_languageid>:
200000f4:	04090304                                ....

200000f8 <comInterface>:
200000f8:	00402df5 00402e05 00402e15 00402e25     .-@...@...@.%.@.
20000108:	00402e45 00000000 00000000 00000000     E.@.............
	...

20000218 <syncBytes>:
20000218:	0000a39f                                ....

2000021c <udc_config>:
2000021c:	20000274 20000228 00000000              t.. (.. ....

20000228 <udc_config_fs>:
20000228:	20000230 20000288                       0.. ... 

20000230 <udc_desc_fs>:
20000230:	00430209 c0000102 00040932 02020100     ..C.....2.......
20000240:	24050001 04011000 05020224 01000624     ...$....$...$...
20000250:	03012405 83050701 10004003 00010409     .$.......@......
20000260:	00000a02 81050700 00004002 02020507     .........@......
20000270:	00000040                                @...

20000274 <udc_device_desc>:
20000274:	02000112 40000002 240403eb 00000100     .......@...$....
20000284:	00000100                                ....

20000288 <udi_apis>:
20000288:	200000cc 200000e0                       ... ... 

20000290 <g_interrupt_enabled>:
20000290:	00000001                                ....

20000294 <SystemCoreClock>:
20000294:	003d0900                                ..=.

20000298 <_impure_ptr>:
20000298:	200002a0 00000000                       ... ....

200002a0 <impure_data>:
200002a0:	00000000 2000058c 200005f4 2000065c     ....... ... \.. 
	...
20000348:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000358:	0005deec 0000000b 00000000 00000000     ................
	...

200006c8 <__atexit_recursive_mutex>:
200006c8:	20001f1c                                ... 

200006cc <__global_locale>:
200006cc:	00000043 00000000 00000000 00000000     C...............
	...
200006ec:	00000043 00000000 00000000 00000000     C...............
	...
2000070c:	00000043 00000000 00000000 00000000     C...............
	...
2000072c:	00000043 00000000 00000000 00000000     C...............
	...
2000074c:	00000043 00000000 00000000 00000000     C...............
	...
2000076c:	00000043 00000000 00000000 00000000     C...............
	...
2000078c:	00000043 00000000 00000000 00000000     C...............
	...
200007ac:	00408811 00407bf5 00000000 004095a4     ..@..{@.......@.
200007bc:	004094a4 00409278 00409278 00409278     ..@.x.@.x.@.x.@.
200007cc:	00409278 00409278 00409278 00409278     x.@.x.@.x.@.x.@.
200007dc:	00409278 00409278 ffffffff ffffffff     x.@.x.@.........
200007ec:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000814:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000838 <__malloc_av_>:
	...
20000840:	20000838 20000838 20000840 20000840     8.. 8.. @.. @.. 
20000850:	20000848 20000848 20000850 20000850     H.. H.. P.. P.. 
20000860:	20000858 20000858 20000860 20000860     X.. X.. `.. `.. 
20000870:	20000868 20000868 20000870 20000870     h.. h.. p.. p.. 
20000880:	20000878 20000878 20000880 20000880     x.. x.. ... ... 
20000890:	20000888 20000888 20000890 20000890     ... ... ... ... 
200008a0:	20000898 20000898 200008a0 200008a0     ... ... ... ... 
200008b0:	200008a8 200008a8 200008b0 200008b0     ... ... ... ... 
200008c0:	200008b8 200008b8 200008c0 200008c0     ... ... ... ... 
200008d0:	200008c8 200008c8 200008d0 200008d0     ... ... ... ... 
200008e0:	200008d8 200008d8 200008e0 200008e0     ... ... ... ... 
200008f0:	200008e8 200008e8 200008f0 200008f0     ... ... ... ... 
20000900:	200008f8 200008f8 20000900 20000900     ... ... ... ... 
20000910:	20000908 20000908 20000910 20000910     ... ... ... ... 
20000920:	20000918 20000918 20000920 20000920     ... ...  ..  .. 
20000930:	20000928 20000928 20000930 20000930     (.. (.. 0.. 0.. 
20000940:	20000938 20000938 20000940 20000940     8.. 8.. @.. @.. 
20000950:	20000948 20000948 20000950 20000950     H.. H.. P.. P.. 
20000960:	20000958 20000958 20000960 20000960     X.. X.. `.. `.. 
20000970:	20000968 20000968 20000970 20000970     h.. h.. p.. p.. 
20000980:	20000978 20000978 20000980 20000980     x.. x.. ... ... 
20000990:	20000988 20000988 20000990 20000990     ... ... ... ... 
200009a0:	20000998 20000998 200009a0 200009a0     ... ... ... ... 
200009b0:	200009a8 200009a8 200009b0 200009b0     ... ... ... ... 
200009c0:	200009b8 200009b8 200009c0 200009c0     ... ... ... ... 
200009d0:	200009c8 200009c8 200009d0 200009d0     ... ... ... ... 
200009e0:	200009d8 200009d8 200009e0 200009e0     ... ... ... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 

20000c40 <__malloc_sbrk_base>:
20000c40:	ffffffff                                ....

20000c44 <__malloc_trim_threshold>:
20000c44:	00020000                                ....
